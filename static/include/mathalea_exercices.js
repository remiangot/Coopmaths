var liste_des_exercices_disponibles = {
  "CM000": Tables_additions_soustractions,
  "CM001": Tables_de_multiplications,
  "CM002": Tables_de_divisions,
  "CM003": Tables_de_multiplications_et_divisions,
  "CM004": Quatre_operations,
  "CM005": Ajouter9,
  "CM006": Soustraire9,
  "CM007": Ajouter11,
  "CM008": Soustraire11,
  "CM009": Moitie,
  "CM010": Tiers,
  "CM011": Quart,
  "CM012": Complement_a_100,
  "CM013": Complement_a_une_dizaine,
  "CM014": Double_moitie_tiers_triple,
  "CM015": Somme_de_deux_nombres_maries,
  "CM016": Diviser_par_10_100_1000,
  "CM017": Diviser_decimal_par_10_100_1000,
  "CM018": Somme_de_deux_nombres_maries_et_un_entier,
  "CM019": Le_compte_est_bonV3,
  "CM020": Le_compte_est_bonV4,
  "CM021": Compte_Est_Bon,
  "c3C10-1" : Tables_de_multiplications,
  "c3C10-4" : Exercice_tables_d_additions_cycle3,
  "c3C11" : Division_cycle3,
  "c3N10" : Ecrire_entiers_cycle3,
  "6C10": Additions_soustractions_multiplications_posees,
  "6C11": Divisions_euclidiennes,
  "6C10-1": Tables_de_multiplications,
  "6C10-2": Exercice_tables_de_multiplications_et_multiples_de_10,
  "6C10-3": Exercice_tables_de_multiplications_et_decimaux,
  "6C10-4": Exercice_tables_d_additions,
  "6C13": Vocabulaire_et_operations,
  "6C20": Additionner_soustraires_decimaux,
  "6C21": Divisions_euclidiennes_niv2,
  "6C23" : Exercice_additionner_des_fractions_6e,
  "6C30": Multiplier_decimaux,
  "6C30-1": Multiplier_decimaux_par_10_100_1000,
  "6C30-2": Produit_de_decimaux_a_partir_d_un_produit_connu,
  "6C31": Division_decimale,
  "6C32": Probleme_course,
  "6C33": Priorites,
  //"6C99" : separation6C,
  "6D10": Conversions_de_durees,
  "6D101": Heures_decimales,
  "6D11": Somme_de_durees,
  "6D12": Calculs_de_durees_ou_d_horaires,
  "6G10": Notation_segment_droite_demi_droite,
  "6G10-1": Description_segment_droite_demi_droite,
  "6G10-2" : Utiliser_le_codage_pour_decrire_6e,
  "6G11": Tracer_des_perpendiculaires,
  "6G12": Tracer_des_paralleles,
  "6G12-1": Tracer_des_perpendiculaires_et_des_paralleles,
  "beta6G14" : Test_main_levee,
  "6G20" : Nommer_et_coder_des_polygones,
  "6G20-2": Vocabulaire_des_triangles_6e,
  "6G21" : Construire_un_triangle_6e,
  "6G23-2": Tracer_triangle_2_angles,
  "6G24": Transformations_6e,
  "6G24-1" : Symetrie_axiale_point_6e,
  "6G24-2" : Symetrie_axiale_figure_6e,
  "6G25-1": Pavages_et_reflexion,
  "6G25-2": Pavages_et_symetries,
  "6G42" : Solide_6e,
  "6G43" : Utiliser_vocabulaire_pave,
  "6M11-1": Perimetre_ou_aire_de_carres_rectangles_triangles,
  "6M11-2": Perimetre_ou_aire_de_figures_composees,
  "6M10": Reglages_6M10,
  "6M12": Reglages_6M12,
  "6M20": Aire_de_triangles,
  "6M22": Reglages_6M22,
  "6M22-1": Perimetre_aire_disques,
  "6M22-2": Perimetre_aire_et_portions_de_disques,
  "6M23": Exercice_conversions_aires,
  "6M25": Connaitre_formules_de_perimetre_et_aires,
  "6M30": Calcul_de_volumes_6e,
  "6M31": Exercice_conversions_volumes,
  "6M31-2": Unites_de_volumes_et_de_capacite,
  "6N10" : Ecrire_nombres_entiers,
  "6N10-1": Exercice_numeration_entier,
  "6N10-2": Decomposition_nombre_decimal,
  "6N10-3": chiffre_nombre_de,
  "beta6N10-4" : Ecrire_nombres_entiers_formates,
  "6N11": Lire_abscisse_entiere,
  "6N11-2": Placer_un_point_abscisse_entiere,
  "6N11-3": Encadrer_un_entier_par_deux_entiers_consecutifs,
  "6N11-4": Ranger_ordre_croissant_decroissant,
  "6N12": Multiplier_entier_par_10_100_1000,
  "6N13": Exercice_6N13,
  "6N14" : Representer_une_fraction,
  "6N20": Exercice_fractions_decomposer,
  "6N20-2": Exercice_fractions_differentes_ecritures,
  "6N21": Lire_abscisse_fractionnaire,
  "6N22" : Ajouter_des_fractions_d_unite,
  "beta6N22-1" : Rapports_sur_un_segment,
  "6N23": Exercice_ecriture_decimale_a_partir_de_fraction_decimale,
  "beta6N23-0" : Ecrire_nombres_decimal,
  "6N23-1": Exercice_differentes_ecritures_nombres_decimaux,
  "6N24": Exercice_6N24,
  "6N24-1": Exercice_multiplier_ou_diviser_un_nombre_entier_par_10_100_1000,
  "6N30": Lire_abscisse_decimale,
  "6N30-1" : Lire_abscisse_decimale_bis,
  "6N30-2": Placer_points_sur_axe,
  "6N31": Comparer_decimaux,
  "6N31-1": Encadrer_un_decimal_par_deux_entiers_consecutifs,
  "6N31-2":Ordre_de_grandeur_operations_decimaux,
  "6N32" :Fractions_d_unite,
  "6N33": Fraction_d_un_nombre,
  "6N33-0" : Fraction_d_une_quantite,
  "6N33-1": Pourcentage_d_un_nombre,
  "6N33-2" : Calculer_un_pourcentage,
  "6N33-3" : Appliquer_un_pourcentage,
  "6N34": Reglages_6N34,
  "6N41": Egalites_entre_fractions,
  "6N43": Criteres_de_divisibilite,
  "6N43-2": Tableau_criteres_de_divisibilite,
  "6P10": Proportionnalite_pas_proportionnalite,
  "6P11": Proportionnalite_par_linearite,
  "6P11-1": Proportionnalite_par_linearite_bis,
  "5A10": Liste_des_diviseurs_5e,
  "5A11": Tableau_criteres_de_divisibilite,
  "5A12-1": Premier_ou_pas_5e,
  "5A13": Exercice_decomposer_en_facteurs_premiers,
  "5C11": Traduire_une_phrase_par_une_expression,
  "5C11-1": Traduire_une_expression_par_une_phrase,
  "5C11-2": Ecrire_une_expression_mathador,
  "5C12": Calculer_une_expression_numerique,
  "5C12-1": Traduire_une_phrase_par_une_expression_et_calculer,
  "5G10": Symetrie_axiale_5e,
  "5G12": Pavages_et_demi_tour,
  "5G11": Transformations_5e,
  "5G10-1" : Symetrie_axiale_point_5e,
  "5G10-2" : Symetrie_axiale_figure_5e,
  "5G11-1" : Symetrie_centrale_point,
  "5G11-2" : Symetrie_centrale_figure,
  "5G21-1": Constructibilite_des_triangles_longueurs,
  "5G20-1": Vocabulaire_des_triangles_5e,
  "5G22": DroiteRemarquableDuTriangle,
  "5G30" : Utiliser_le_codage_pour_decrire_5e,
  "5G31": Exercice_angles_triangles,
  "5G31-1": Constructibilite_des_triangles_angles,
  "5N11-1": Tableaux_et_pourcentages,
  "5N13": Exercice_fractions_simplifier,
  "5N13-2": Egalites_entre_fractions,
  "5N110": Variation_en_pourcentages,
  "5N14": Exercice_comparer_deux_fractions,
  "5N14-2": Exercice_comparer_quatre_fractions,
  "5N20": Exercice_additionner_des_fractions_5e,
  "5N20-2": Exercice_additionner_ou_soustraire_des_fractions_5e,
  "5L10": Ecrire_une_expression_litterale,
  "5L10-1": Traduire_une_phrase_par_une_expression_litterale,
  "5L10-2": Traduire_un_programme_de_calcul,
  "5L10-3": Traduire_une_expression_litterale_par_une_phrase,
  "5L10-4": Tableaux_et_fonction,
  "5N20-0": Problemes_additifs_fractions_5e,
  "5L12": Reduire_une_expression_litterale,
  "5L12-1": Reduire_dinstinction_somme_produit,
  "5L13": Calculer_la_valeur_d_une_expression_litterale,
  "5L13-1": Calculer_une_expression_litterale,
  "5L13-2": Exercice_substituer,
  "5L13-3": Traduire_une_phrase_par_une_expression_litterale_et_calculer,
  "5L13-4": Calculer_une_expression_litteraleBis,
  "5L13-5":Calculer_la_valeur_d_une_expression_litterale_deg1_inc1,
  "5L14": Tester_une_egalite,
  "5M10": Aire_du_parallelogramme,
  "5M20": Calcul_de_volumes_5e,
  "5P10": Tableaux_et_proportionnalite,
  "5R10-0": Trouver_oppose,
  "5R11": Lire_abscisse_relative,
  "5R11-2": Placer_points_sur_axe_relatifs,
  "5R12": Reperage_point_du_quart_de_plan,
  "5R12-2": Reperage_point_du_plan,
  "5R20": Exercice_additions_relatifs,
  "5R20-2": Exercice_additions_relatifs_a_trou,
  "5R20-3": Exercice_additions_de_5_relatifs, //on pourrait le corriger avec regroupement des termes de mÃªme signe 
  "5R20-4": Problemes_additifs_relatifs_5e, 
  "5R20-5": Exercice_tableau_additions_relatifs,
  "5R21": Exercice_soustractions_relatifs,
  "5R22": Exercice_additions_et_soustraction_de_relatifsV2,
  "5R22-2": Exercice_simplification_somme_algebrique,
  "5S13": Calculer_des_frequences,
  "5S14": Calculer_des_moyennes,
  "5S21": fonctions_probabilite1,
  "4Algo1-0": Tracer_avec_scratch,
  "4C10-0": Signe_produit_quotient_relatifs,
  "4C10-1": Signe_produit_relatifs,
  "4C10-2": Signe_quotient_relatifs,
  "4C10-3": Exercice_multiplications_relatifs,
  "4C10-4": Exercice_quotients_relatifs,
  "4C10-5": Exercice_tableau_multiplications_relatifs,
  "4C11": Priorites_et_relatifs,
  "4C25-0": Problemes_additifs_fractions,
  "4C30": Puissances_de_dix,
  "4C30-1": Puissances_encadrement,
  "4C32" : Notation_scientifique,
  "4C32-1" : Calculs_avec_puissances_de_dix,
  "4C33-1": Puissances_d_un_relatif_1,
  "4C33-3": Puissances_d_un_relatif_2,
  "4G40": Transformations_4e,
  "4L10": Exercice_developper,
  "4L13-0": Mettre_en_equation_sans_resoudre,
  "4L13-1": Forme_litterale_introduire_une_lettre,
  "4L14-0": Tester_si_un_nombre_est_solution_d_une_equation,
  "4L14-1": Tester_si_un_nombre_est_solution_d_une_equation_deg1,
  "4L14-2": Tester_si_un_nombre_est_solution_d_une_equation_deg2,
  "4L15-0": Trouver_erreur_resol_eq_deg1,
  "4L20": Exercice_equation1,
  "4G53": Calcul_de_volumes_4e,
  "4C21-1": Exercice_additionner_des_fractions,
  "4C21": Exercice_additionner_ou_soustraire_des_fractions,
  "4C22-1": Exercice_trouver_l_inverse,
  "4C22": Exercice_multiplier_fractions,
  "4C22-2": Exercice_diviser_fractions,
  "4C23": Exercice_additionner_fraction_produit,
  "4F12": Exploiter_representation_graphique,
  "4P10": Problemes_grandeurs_composees,
  "4P10-1" : Graphiques_et_proportionnalite,  
  "4G11": Pavages_et_translation,
  "4G20" : Pythagore2D,
  "4G20-1": Egalite_Pythagore2D, // Anciennement Egalite_Pythagore,
  "4G20-2": Racine_caree_de_carres_parfaits,
  "4G20MG32": Exercice_Pythagore,
  "4G21": Reciproque_Pythagore,
  "4G22": Problemes_Pythagore,
  "4G30": Thales_4eme,
  "4G31": Reciproque_Thales_4eme,
  "4G40": Exercice_Trigo_longueurs_4e,
  "4G41": Exercice_Trigo_angles_4e,
  "3A10": DivisionEuclidienne_multiplesDiviseurs_Criteres,
  "3A11": Premier_ou_pas,
  "3A11-1": Premier_ou_pas_critere_par7_par11,
  "3A11-2": Decomposition_facteurs_premiers,
  "3A11-3": Lister_Diviseurs_Par_Decomposition_facteurs_premiers,
  "3A12": Fractions_irreductibles,
  "3A13": PPCM_Engrenages,
  "3G43": Calcul_de_volumes_3e,
  "3L10": Oppose_expression,
  "3L10-1": Parentheses_precedes_de_moins_ou_plus,
  "3L11": Exercice_developper,
  "3L11-1": Double_distributivite,
  "3L11-2": Reduction_si_possible,
  "3L11-3": Distributivite_simple_double_reduction,
  "3L11-4": Factoriser_par_nombre_ou_x,
  "3L12-1": Developper_Identites_remarquables3,
  "3L12": Factoriser_Identites_remarquables3,
  "3L13": Exercice_equation1, //identique Ã  4L20
  "3L13-1": Exercice_equation1_2,
  "3L14": Resoudre_une_equation_produit_nul,
  "3L14-1": Resoudre_une_equation_produit_nul_niv2,
  "3L15": Resoudre_une_equation_x2_egal_A,
  "3P10": Evolutions_en_pourcentage,
  "3P10-1": Coefficient_evolution,
  "3G10-1": Transformations_du_plan_et_coordonnees,
  "3G10-2": Transformations_3e,
  "3G12": Pavages_et_rotation,
  "3G20": Exercice_Thales,
  "3G20-1": Problemes_Thales,
  "3G21": Reciproque_Thales,
  "3G22": Agrandissement_reduction,
  "3G23": TrianglesSemblables,
  "3G30": Exercice_Trigo_longueurs,
  "3G31": Exercice_Trigo_angles,
  "3F1-act": fonction_notion_vocabulaire,
  "3F10" : Image_antecedent_depuis_tableau_ou_fleche,
  "3F12": fonctions_calculs_d_images,
  "3F12-2": Image_fonction_algebrique,
  "3F12-3": Tableau_de_valeurs,
  "3F12-4": Image_graphique,
  "3F13": Antecedent_graphique,
  "3F21": Lecture_expression_fonctions_lineaires,
  "3F21-1": Lecture_expression_fonctions_affines,
  "3S15": Calculer_des_etendues,
  "3S20": fonctions_probabilite2,
  "2N10": Existence_d_une_racine_carree,
  "2N10-1": proprietes_racine_carree,
  "2N11": Extraire_un_carre_parfait_d_une_racine_carree,
  "2N11-1": Simplifier_une_somme_de_racines_carrees,
  "2N12": Double_distributivitÃ©_avec_racine_carree,
  "2N12-1": identites_remarquables_et_racine_carree,
  "2N20": ensemble_de_nombres,
  "2N21": parite,
  "2N22": valeur_absolue,
  "2N23": valeur_absolue_et_equation,
  "2N24": intervalles_de_R,
  "2N25": union_et_intersection_intervalles_de_R,
  "2G10": Distance,
  "2G11": Milieu,
  "2G12": Nature_polygone,
  "2L10": Developper_Identites_remarquables2,
  "2L11": Factoriser_Identites_remarquables2,
  "1N10": Terme_d_une_suite_definie_explicitement,
  "1N11": Terme_d_une_suite_definie_par_recurrence, 
  "1E10" : Calcul_discriminant,
  "1E11" : Resoudre_equation_degre_2,
  "PEA11": Passer_d_une_base_a_l_autre,
  "PEA11-1": Passer_de_la_base_12_ou_16_a_la_10,
  "betaTESTseb": Tests_du_Seb,
  P001: Code_LaTeX_personnalise,
  // 'P002': LaTeX_static,
  P003: feuille_d_axes_gradues,
  cours: Questions_de_cours,
  LaTeX: Code_LaTeX_personnalise,
  // 'Perso' : HTML_personnalise,
  // 'TsvgjsKatex' : tests_SVGJS_KATEX,  
};

//Pour modifier les exercices lorsqu'ils sont en mode diaporama
var est_diaporama = false;

if (window.location.href.indexOf("cm.html") > 0) {
  est_diaporama = true;
}

//Efface de la liste des exercices disponibles tout ceux qui n'ont pas de version HTML
if (sortie_html) {
  var codeMG32 = "";
}

for (var i in liste_des_exercices_disponibles) {
  let exercice = new liste_des_exercices_disponibles[i]();
  if (sortie_html && exercice.pas_de_version_HMTL) {
    delete liste_des_exercices_disponibles[i];
  }
  if (!sortie_html && exercice.pas_de_version_LaTeX) {
    delete liste_des_exercices_disponibles[i];
  }
}

/**
 * Classe parente de tous les exercices
 *
 * @Auteur RÃ©mi Angot
 */
function Exercice() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "";
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.introduction = "";
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1.5;
  this.spacing_corr = 1;
  this.beamer = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_texte = false; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  this.besoin_formulaire_case_a_cocher = false; // Sinon this.besoin_formulaire_case_a_cocher = [texte];

  this.consigne_modifiable = true;
  this.nb_questions_modifiable = true;
  this.nb_cols_modifiable = true;
  this.nb_cols_corr_modifiable = true;
  this.spacing_modifiable = true;
  this.spacing_corr_modifiable = true;
  this.correction_detaillee_disponible = false;
  this.correction_detaillee = true;
  this.bouton_aide = false;
  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton="Aide",icone="info circle")
  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton="Aide",icone="info circle")
  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton="Aide - VidÃ©o",icone="youtube")
  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte="Aide",label_bouton="Aide - PDF",icone="file pdf")
  this.pas_de_version_LaTeX = false;
  this.MG32editable = false; //pas d'interface par dÃ©faut pour les figures MG32
  this.nouvelle_version = function (numero_de_l_exercice) {};
  this.liste_packages = []; // string ou liste de string avec le nom des packages spÃ©cifiques Ã  ajouter dans le prÃ©ambule
}
/**
 * Pour imprimer des repÃ¨res vierges pour les Ã©lÃ¨ves.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence : P003
 */
function feuille_d_axes_gradues() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tracer des droites graduÃ©es";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 3;
  this.sup = 10;
  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;
  this.liste_packages = "axes_gradues";

  this.nouvelle_version = function (numero_de_l_exercice) {
    let pas;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    pas = parseInt(this.sup);
    for (let i = 0, id_unique, texte; i < 16; i++) {
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          "",
          6,
          1,
          pas,
          [],
          [],
          false
        );
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(2, " ", 1, pas, [], [], false);
        this.liste_questions.push(texte);
      }
    }
    if (!sortie_html)
      liste_de_question_to_contenu_sans_numero_et_sans_consigne(this);
  };
  this.besoin_formulaire_numerique = [`Nombres de parts`, 10, ""];
}

/**
 * Lire l'abscisse entiÃ¨re d'un point
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence 6N11
 */
function Lire_abscisse_entiere() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire l'abscisse entiÃ¨re d'un point (grands nombres)";
  this.consigne = "Lire l'abscisse de chacun des points suivants.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 4;
  this.liste_packages = ["tkz-euclide"];

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);
      switch (type_de_questions[i]) {
        case 1: // Placer des entiers sur un axe (milliers)
          abs0 = randint(1, 9) * 1000;
          pas1 = 0.001;
          pas2 = 10;
          break;

        case 2: // Placer des entiers sur un axe (dizaines de mille)
          abs0 = randint(5, 15) * 10000;
          pas1 = 0.0001;
          pas2 = 10;
          break;

        case 3: // Placer des entiers sur un axe (centaines de mille)
          abs0 = randint(35, 85) * 100000;
          pas1 = 0.00001;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Milliers\n2 : Dizaines de mille\n3 : Centaines de mille\n4 : MÃ©lange",
  ];
}
/**
 * Placer un point d'abscisse entiÃ¨re
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence 6N11-2
 */
function Placer_un_point_abscisse_entiere() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Placer un point d'abscisse entiÃ¨re (grands nombres)";
  this.consigne = " Placer trois points sur un axe graduÃ©.";
  this.nb_questions = 5;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.type_exercice = "SVGJS";
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        abs1,
        abs2,
        abs3,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);

      switch (type_de_questions[i]) {
        case 1: // Placer des entiers sur un axe (milliers)
          abs0 = randint(1, 9) * 1000;
          pas1 = 0.001;
          pas2 = 10;
          break;

        case 2: // Placer des entiers sur un axe (dizaines de mille)
          abs0 = randint(5, 15) * 10000;
          pas1 = 0.0001;
          pas2 = 10;
          break;

        case 3: // Placer des entiers sur un axe (centaines de mille)
          abs0 = randint(35, 85) * 100000;
          pas1 = 0.00001;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      abs1 = arrondi(
        abs0 + x1 / pas1 + x11 / pas1 / pas2,
        type_de_questions[i]
      ); // le type de questions est Ã©gal au nombre de dÃ©cimales.
      abs2 = arrondi(
        abs0 + x2 / pas1 + x22 / pas1 / pas2,
        type_de_questions[i]
      );
      abs3 = arrondi(
        abs0 + x3 / pas1 + x33 / pas1 / pas2,
        type_de_questions[i]
      );
      if (sortie_html) {
        texte_corr = "";
        this.contenu += `<h3> Placer les points : ${l1}(${string_nombre(
          abs1
        )}), ${l2}(${string_nombre(abs2)}), ${l3}(${string_nombre(abs3)})</h3>`;
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = `{\\small Placer les points : $${l1}$(${string_nombre(
          abs1
        )}), $${l2}$(${string_nombre(abs2)}), $${l3}$(${string_nombre(
          abs3
        )})}<br>`;
        texte += Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = `{\\small Les points $${l1}$(${string_nombre(
          abs1
        )}), $${l2}$(${string_nombre(abs2)}), $${l3}$(${string_nombre(
          abs3
        )}) sont placÃ©s ci dessous}<br>`;
        texte_corr += Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Ordre de grandeur : milliers\n2 : Ordre de grandeur : dizaines de mille\n3 : centaines de mille\n4 : MÃ©lange",
  ];
}

/**
 * Questions statiques issues d'un fichier Markdown
 *
 * Les thÃ¨mes sont des titres de niveaux 2
 *
 * suivies d'une liste qui alterne question et rÃ©ponse
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence : cours
 */
function Questions_de_cours() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Questions de cours";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.consigne_modifiable = false;
  this.sup = ""; // thÃ¨me des questions
  this.sup2 = "questions_de_cours.txt"; //url des questions
  this.pas_de_version_LaTeX = true;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let liste_questions = []; // Liste de questions
    let liste_corrections = []; // Liste de questions corrigÃ©es
    let dictionnaire_de_questions = {};
    let dictionnaire_de_questions_pret = false;
    let contenu_HTML = "";
    let contenu_correction_HTML = "";
    $.get(this.sup2, function (txt) {
      // RÃ©cupÃ¨re le fichier txt et transforme en un dictionnaire {'id_theme':[[questions],[rÃ©ponses]]}
      let tableau_par_theme = txt
        .match(/##((?=[^#]).|\n)*/g)
        .map((v) => v.trim());
      // Recherche les chaines de caractÃ¨res commenÃ§ant par ## et ne comportant pas d'autres #
      for (let i = 0; i < tableau_par_theme.length; i++) {
        let tableau_titre = tableau_par_theme[i].match(/##.*/g);
        let questions_et_reponses = tableau_par_theme[i]
          .match(/\*((?=[^*#]).|\n)*/g)
          .map((v) => v.trim());
        // Recherche les chaines de caractÃ¨res commenÃ§ant par * et ne comportant pas d'autres * ou de #
        let titre = tableau_titre[0].replace("## ", "");
        // RÃ©cupÃ¨re le titre du thÃ¨me sans ##
        let tableau_questions = [];
        let tableau_reponses = [];
        for (let i = 0; i < questions_et_reponses.length; i++) {
          if (i % 2 == 0) {
            //rang pair => questions
            tableau_questions[i / 2] = questions_et_reponses[i].replace(
              "* ",
              ""
            );
            // Supprime les * devant chaque questions
          } else {
            //rang impair => rÃ©ponses
            tableau_reponses[(i - 1) / 2] = questions_et_reponses[i].replace(
              "* ",
              ""
            );
          }
          dictionnaire_de_questions[titre] = [
            tableau_questions,
            tableau_reponses,
          ];
        }
      }

      // Je n'utilise pas this.nb_questions ou this.sup car this n'est pas clairement dÃ©fini dans cette fonction
      if (exercice[numero_de_l_exercice].sup == "") {
        exercice[numero_de_l_exercice].sup = choice(
          Object.keys(dictionnaire_de_questions)
        ); // Si on n'a pas spÃ©cifiÃ© un thÃ¨me, on en prend un au hasard.
      }

      let nb_questions = exercice[numero_de_l_exercice].nb_question;
      if (dictionnaire_de_questions[exercice[numero_de_l_exercice].sup]) {
        // Si le thÃ¨me existe dans le dictionnaire alors on adapte le nombre de questions
        nb_questions = Math.min(
          exercice[numero_de_l_exercice].nb_questions,
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][0]
            .length
        );
      }
      for (let i = 0; i < nb_questions; i++) {
        liste_questions.push(
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][0][i]
        );
        liste_corrections.push(
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][1][i]
        );
      }
      shuffle2tableaux(liste_questions, liste_corrections);
      // MÃ©lange les questions et les rÃ©ponses (sans perdre les associations)
      dictionnaire_de_questions_pret = true;
    });

    let id_unique = `${numero_de_l_exercice}_${Date.now()}`;
    if (sortie_html) {
      this.contenu = `<div id=div_exo${id_unique}></div>`;
      this.contenu_correction = `<div id=div_corr_exo${id_unique}></div>`;
    }

    if (!window.divExist) {
      window.divExist = [];
    } // Si divExist n'existe pas on le crÃ©Ã©
    // divExist est un tableau dans lequel on stocke les listenner sur la crÃ©ation des div
    window.divExist[id_unique] = setInterval(function () {
      if ($(`#div_exo${id_unique}`).length && dictionnaire_de_questions_pret) {
        // Attends que le div existe et que le dictionnaire de questions soit prÃªt
        contenu_HTML = html_enumerate(liste_questions, this.spacing);
        contenu_correction_HTML = html_enumerate(
          liste_corrections,
          this.spacing
        );
        $(`#div_exo${id_unique}`).html(contenu_HTML); //Vide le div pour Ã©viter les SVG en doublon
        $(`#div_corr_exo${id_unique}`).html(contenu_correction_HTML); //Vide le div pour Ã©viter les SVG en doublon
        renderMathInElement(document.body, {
          delimiters: [
            { left: "\\[", right: "\\]", display: true },
            { left: "$", right: "$", display: false },
          ],
          throwOnError: true,
          errorColor: "#CC0000",
          strict: "warn",
          trust: false,
        });
        clearInterval(divExist[numero_de_l_exercice]); //ArrÃªte le timer
      }
    }, 100); // VÃ©rifie toutes les 100ms
  };
  this.besoin_formulaire_texte = ["ThÃ¨me des questions", "De la forme 6M1"];
  this.besoin_formulaire2_texte = [
    "Liste des questions",
    "URL du fichier texte contenant les questions et rÃ©ponses.",
  ];
}

/**
 * Lire l'abscisse dÃ©cimale d'un point
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence 6N30
 */
function Lire_abscisse_decimale() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire l'abscisse dÃ©cimale d'un point";
  this.consigne = "Lire l'abscisse de chacun des points suivants.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);
      switch (type_de_questions[i]) {
        case 1: // Placer des dÃ©cimaux sur un axe (1 dÃ©cimale)
          abs0 = randint(0, 9);
          pas1 = 1;
          pas2 = 10;
          break;

        case 2: // Placer des dÃ©cimaux sur un axe (2 dÃ©cimales)
          abs0 = randint(0, 90) / 10;
          pas1 = 10;
          pas2 = 10;
          break;

        case 3: // Placer des dÃ©cimaux sur un axe (3 dÃ©cimales)
          abs0 = randint(0, 990) / 100;
          pas1 = 100;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Un chiffre aprÃ¨s la virgule\n2 : Deux chiffres aprÃ¨s la virgule \n3 : Trois chiffres aprÃ¨s la virgule\n4 : MÃ©lange",
  ];
}
/**
 * Lire l'abscisse fractionnaire d'un point
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence 6N21
 */
function Lire_abscisse_fractionnaire() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire l'abscisse fractionnaire d'un point";
  this.consigne = "Lire l'abscisse de chacun des points suivants et donner le rÃ©sultat sous la forme d'une fraction.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);
      switch (type_de_questions[i]) {
        case 1: // Placer des demis aux quarts sur un axe
          abs0 = 0;
          pas1 = 1;
          pas2 = choice([2, 3, 4]);
          break;

        case 2: // Placer des cinquiÃ¨mes aux neuviÃ¨mes sur un axe
          abs0 = 0;
          pas1 = 1;
          pas2 = randint(5, 9);
          break;

        case 3: // Placer des demis aux neuviÃ¨mes Ã  partir d'un entier >=1 sur un axe
          abs0 = randint(1, 5);
          pas1 = 1;
          pas2 = randint(2, 9);
          break;
      }
      x1 = randint(0, 1);
      x2 = randint(2, 3);
      x3 = randint(4, 5);
      x11 = randint(1, pas2 - 1);
      x22 = randint(1, pas2 - 1);
      x33 = randint(1, pas2 - 1);
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [abs0 + 1 / pas1, 1, 0],
            [abs0 + 2 / pas1, 2, 0],
            [abs0 + 3 / pas1, 3, 0],
            [abs0 + 4 / pas1, 4, 0],
            [abs0 + 5 / pas1, 5, 0],
            [abs0 + 6 / pas1, 6, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [abs0 + 1 / pas1, 1, 0],
            [abs0 + 2 / pas1, 2, 0],
            [abs0 + 3 / pas1, 3, 0],
            [abs0 + 4 / pas1, 4, 0],
            [abs0 + 5 / pas1, 5, 0],
            [abs0 + 6 / pas1, 6, 0],
          ],
          true
        );
        this.contenu_correction+=`<br>`
        if (pgcd(x11,pas2)!=1||pgcd(x22,pas2)!=1||pgcd(x33,pas2)!=1) this.contenu_correction+=`Remarque : `
        if (pgcd(x11,pas2)!=1) this.contenu_correction+=`$${tex_fraction(x1*pas2+x11,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x1*pas2+x11,pas2)}\\phantom{espace}$`
        if (pgcd(x22,pas2)!=1) this.contenu_correction+=`$${tex_fraction(x2*pas2+x22,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x2*pas2+x22,pas2)}\\phantom{espace}$`
        if (pgcd(x33,pas2)!=1) this.contenu_correction+=`$${tex_fraction(x3*pas2+x33,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x3*pas2+x33,pas2)}\\phantom{espace}$`
  
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          true
        );
        if (pgcd(x11,pas2)!=1) texte_corr+=`<br>$\\left(${tex_fraction(x1*pas2+x11,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x1*pas2+x11,pas2)}\\right)$.`
        if (pgcd(x22,pas2)!=1) texte_corr+=`<br>$\\left(${tex_fraction(x2*pas2+x22,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x2*pas2+x22,pas2)}\\right)$.`
        if (pgcd(x33,pas2)!=1) texte_corr+=`<br>$\\left(${tex_fraction(x3*pas2+x33,pas2)}$ peut se simplifier en $${tex_fraction_reduite(x3*pas2+x33,pas2)}\\right)$.`
  
        this.liste_questions.push(texte);
       this.liste_corrections.push(texte_corr);
      }     
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Demis, tiers ou quarts avec zÃ©ro placÃ©\n2 : Des cinquiÃ¨mes aux neuviÃ¨mes avec zÃ©ro placÃ© \n3 : Toutes les fractions prÃ©cÃ©dentes mais zÃ©ro non visible\n4 : MÃ©lange",
  ];
}
/**
 * Exercice calquÃ© sur lire abscisse fractionnaire sauf que le rÃ©sultat attendu est en Ã©criture dÃ©cimale.
 * demis, quart, cinquiÃ¨mes dixiÃ¨mes et centiÃ¨mes
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N30-1
 */
function Lire_abscisse_decimale_bis() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire l'abscisse dÃ©cimale d'un point repÃ©rÃ© par une fraction";
  this.consigne = "Lire l\âabscisse de chacun des points suivants et donner le rÃ©sultat sous la forme d\âun nombre en Ã©criture dÃ©cimale.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 5)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);
      switch (type_de_questions[i]) {
        case 3: // Placer des demis ou des quarts sur un axe
          abs0 = 0;
          pas1 = 1;
          pas2 = choice([2,4]);
          break;

        case 4: // Placer des cinquiÃ¨mes 
          abs0 = 0;
          pas1 = 1;
          pas2 = 5
          break;

        case 1: // Placer des dixiÃ¨mes
          abs0 = randint(1, 5);
          pas1 = 1;
          pas2 = 10
          break;
        case 2: // Placer des centiÃ¨mes
          abs0 = calcul(randint(10, 50)/10);
          pas1 = 10;
          pas2 = 10
          break;       
      }
      x1 = randint(0, 1);
      x2 = randint(2, 3);
      x3 = randint(4, 5);
      x11 = randint(1, pas2 - 1);
      x22 = randint(1, pas2 - 1);
      x33 = randint(1, pas2 - 1);
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0 + 1 / pas1), 1, 0],
            [calcul(abs0 + 2 / pas1), 2, 0],
            [calcul(abs0 + 3 / pas1), 3, 0],
            [calcul(abs0 + 4 / pas1), 4, 0],
            [calcul(abs0 + 5 / pas1), 5, 0],
            [calcul(abs0 + 6 / pas1), 6, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0 + 1 / pas1), 1, 0],
            [calcul(abs0 + 2 / pas1), 2, 0],
            [calcul(abs0 + 3 / pas1), 3, 0],
            [calcul(abs0 + 4 / pas1), 4, 0],
            [calcul(abs0 + 5 / pas1), 5, 0],
            [calcul(abs0 + 6 / pas1), 6, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    5,
    "1 : DixiÃ¨mes\n2 : CentiÃ¨mes\n3 : Demis et quarts\n4 : CinquiÃ¨mes\n5 : MÃ©lange",
  ];
}

/**
 * Placer un point d'abscisse dÃ©cimale
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence 6N30-2
 */
function Placer_points_sur_axe() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Placer un point d'abscisse dÃ©cimale";
  this.consigne = " Placer trois points sur un axe graduÃ©.";
  this.nb_questions = 5;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.type_exercice = "SVGJS";
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
        abs0,
        abs1,
        abs2,
        abs3,
        l1,
        l2,
        l3,
        x1,
        x2,
        x3,
        x11,
        x22,
        x33,
        pas1,
        pas2,
        id_unique,
        texte,
        texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);

      switch (type_de_questions[i]) {
        case 1: // Placer un point sur un axe (1 dÃ©cimale)
          abs0 = randint(0, 9);
          pas1 = 1;
          pas2 = 10;
          break;

        case 2: // Placer un point sur un axe (2 dÃ©cimales)
          abs0 = randint(0, 90) / 10;
          pas1 = 10;
          pas2 = 10;
          break;

        case 3: // Placer un point sur un axe (3 dÃ©cimales)
          abs0 = randint(0, 990) / 100;
          pas1 = 100;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      abs1 = arrondi(
        abs0 + x1 / pas1 + x11 / pas1 / pas2,
        type_de_questions[i]
      ); // le type de questions est Ã©gal au nombre de dÃ©cimales.
      abs2 = arrondi(
        abs0 + x2 / pas1 + x22 / pas1 / pas2,
        type_de_questions[i]
      );
      abs3 = arrondi(
        abs0 + x3 / pas1 + x33 / pas1 / pas2,
        type_de_questions[i]
      );

      if (sortie_html) {
        texte_corr = "";
        this.contenu += `<h3>Placer les points : ${l1}(${tex_nombrec(
          abs1
        )}), ${l2}(${tex_nombrec(abs2)}), ${l3}(${tex_nombrec(abs3)})</h3>`;
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = `{\\small Placer les points : $${l1}$(${tex_nombrec(
          abs1
        )}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(abs3)})}<br>`;
        texte += Latex_reperage_sur_un_axe(
          2.4,
          abs0,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = `{\\small Les points $${l1}$(${tex_nombrec(
          abs1
        )}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(
          abs3
        )}) sont placÃ©s ci dessus}<br>`;
        texte_corr += Latex_reperage_sur_un_axe(
          2.4,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );

        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Un chiffre aprÃ¨s la virgule\n2 : Deux chiffres aprÃ¨s la virgule \n3 : Trois chiffres aprÃ¨s la virgule\n4 : MÃ©lange",
  ];
}

/**
 * Conversions de durÃ©es.
 * * 1 : H vers min ou H ou min ou Hmin vers s
 * * 2 : h vers j-h
 * * 3 : s vers HMS
 * * 4 : h vers semaines j h
 * * 5 : toutes les conversions
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D10
 */
function Conversions_de_durees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 5;
  this.titre = "Convertir des durÃ©es";
  this.consigne = "ComplÃ©ter les Ã©galitÃ©s suivantes";
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 2;
  this.nb_questions = 5;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_sous_type_de_questionv1 = combinaison_listes(
      [1, 2, 3, 4],
      this.nb_questions
    );
    let liste_sous_type_de_questionv2 = combinaison_listes(
      [0, 1, 2],
      this.nb_questions
    );
    let type_de_questions = [];
    if (this.sup < 5) {
      type_de_questions = combinaison_listes([this.sup], this.nb_questions);
    }
    if (this.sup == 5) {
      type_de_questions = combinaison_listes([1, 2, 3, 4], this.nb_questions);
    }

    for (
      let i = 0, h, m, s, j, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (type_de_questions[i] == 1) {
        let sous_type_de_question = liste_sous_type_de_questionv1[i];
        if (sous_type_de_question == 1) {
          h = randint(2, 11);
          texte = `$${h}~\\text{h en minute}$`;
          texte_corr = `$${h}~\\text{h} = ${h}\\times60~~\\text{min} = ${tex_nombre(
            h * 60
          )}~\\text{min}$`;
        }
        if (sous_type_de_question == 2) {
          h = choice([1, 2, 10, 20]);
          texte = `$${h}~\\text{h en secondes}$`;
          texte_corr = `$${h}~\\text{h} = ${h}\\times3~600~\\text{s} = ${tex_nombre(
            h * 3600
          )}~\\text{s}$`;
        }
        if (sous_type_de_question == 3) {
          m = randint(2, 59);
          texte = `$${m}~\\text{min en secondes}$`;
          texte_corr = `$${m}~\\text{min} = ${m}\\times60~\\text{s} = ${tex_nombre(
            m * 60
          )}~\\text{s}$`;
        }
        if (sous_type_de_question == 4) {
          h = randint(1, 2);
          m = randint(2, 59);
          texte = `$${h}~\\text{h}~${m}~\\text{min en secondes}$`;
          texte_corr = `$${h}~\\text{h}~${m}~\\text{min} = ${h}\\times3~600~\\text{s} + ${m}\\times60~\\text{s} = ${tex_nombre(
            h * 3600
          )}+${tex_nombre(m * 60)}~\\text{s} = ${tex_nombre(
            h * 3600 + m * 60
          )}~\\text{s}$`;
        }
      }
      if (type_de_questions[i] == 2) {
        j = randint(1, 6);
        h = randint(1, 23);
        texte = `$${tex_nombre(h + 24 * j)}~\\text{h en jours et heures}$`;
        texte_corr = `$${tex_nombre(
          h + 24 * j
        )}~\\text{h} = ${j}\\times24~\\text{h} + ${h}~\\text{h} = ${j}~\\text{j}~${h}~\\text{h}$`;
      }

      if (type_de_questions[i] == 3) {
        h = liste_sous_type_de_questionv2[i];
        m = randint(1, 59);
        s = randint(1, 59);
        if (h > 0) {
          texte = `$${tex_nombre(
            h * 3600 + m * 60 + s
          )}~\\text{s au format HMS}$`;
          texte_corr = `$${tex_nombre(
            h * 3600 + m * 60 + s
          )}~\\text{s} = ${tex_nombre(h * 3600)}~\\text{s}+${
            m * 60 + s
          }~\\text{s} =${h}~\\text{h}+${m}\\times60~\\text{s}+${s}~\\text{s}=${h}~\\text{h}~${m}~\\text{min}~${s}~\\text{s}$`;
        } else {
          texte = `$${tex_nombre(m * 60 + s)}~\\text{s au format HMS}$`;
          texte_corr = `$${tex_nombre(
            m * 60 + s
          )}~\\text{s} = ${m}\\times60~\\text{s}+${s}~\\text{s}=${m}~\\text{min}~${s}~\\text{s}$`;
        }
      }
      if (type_de_questions[i] == 4) {
        s = randint(1, 9); // nombre de semaines
        j = randint(1, 6);
        h = randint(1, 23);
        texte = `$${tex_nombre(
          h + 24 * j + 24 * 7 * s
        )}~\\text{h en semaines jours et heures}$`;
        if (s > 1) {
          // pour la gestion du pluriel de semaines
          texte_corr = `$${tex_nombre(h + 24 * j + 24 * 7 * s)}~\\text{h} = ${
            j + 7 * s
          }\\times24~\\text{h} + ${h}~\\text{h} = ${
            j + 7 * s
          }~\\text{j}~${h}~\\text{h} = ${s}\\times7~\\text{j} + ${j}~\\text{j}~${h}~\\text{h} = ${s}~\\text{semaines}~${j}~\\text{j}~${h}~\\text{h}$`;
        } else {
          texte_corr = `$${tex_nombre(h + 24 * j + 24 * 7 * s)}~\\text{h} = ${
            j + 7 * s
          }\\times24~\\text{h} + ${h}~\\text{h} = ${
            j + 7 * s
          }~\\text{j}~${h}~\\text{h} = ${s}\\times7~\\text{j} + ${j}~\\text{j}~${h}~\\text{h} = ${s}~\\text{semaine}~${j}~\\text{j}~${h}~\\text{h}$`;
        }
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    5,
    "1 : Conversions en s ou min\n2 : Conversions en jours-heures \n3 : Conversions en HMS\n4 : Conversions en semaines-jours-heures \n5 : Tous types de conversions",
  ];
}

/**
 * Convertir une heure dÃ©cimale dans le format HMS
 *
 * La partie dÃ©cimale est 25, 75 ou un seul chiffre
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D101
 */
function Heures_decimales() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Utiliser les heures dÃ©cimales";
  this.consigne = "ComplÃ©ter les Ã©galitÃ©s suivantes";
  this.spacing = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, partie_entiere, partie_decimale, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      partie_entiere = randint(1, 12);
      partie_decimale = choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 75]);
      texte = `$${partie_entiere},${partie_decimale}~\\text{h}=\\dotfill$`;
      if (partie_decimale == 25) {
        texte_corr = `$${partie_entiere},${partie_decimale}~\\text{h}=${partie_entiere}~\\text{h}+\\dfrac{1}{4}~\\text{h}`;
        texte_corr += `=${partie_entiere}~\\text{h}~15~\\text{min}$`;
      } else if (partie_decimale == 75) {
        texte_corr = `$${partie_entiere},${partie_decimale}~\\text{h}=${partie_entiere}~\\text{h}+\\dfrac{3}{4}~\\text{h}`;
        texte_corr += `=${partie_entiere}~\\text{h}~45~\\text{min}$`;
      } else if (partie_decimale == 5) {
        texte_corr = `$${partie_entiere},${partie_decimale}~\\text{h}=${partie_entiere}~\\text{h}+\\dfrac{1}{2}~\\text{h}`;
        texte_corr += `=${partie_entiere}~\\text{h}~30~\\text{min}$`;
      } else {
        texte_corr = `$${partie_entiere},${partie_decimale}~\\text{h}=${partie_entiere}~\\text{h}+\\dfrac{${partie_decimale}}{10}~\\text{h}`;
        texte_corr += `=${partie_entiere}~\\text{h}+${partie_decimale}\\times6~\\text{min}=${partie_entiere}~\\text{h}~${
          partie_decimale * 6
        }~\\text{min}$`;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("=\\dotfill", "");
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Additions de durÃ©es de diffÃ©rents :
 * * MS+MS=1hMS sans retenue sur les s
 * * MS+MS=1hMS avec retenue
 * * HM+HM avec retenue
 * * HMS+HMS avec retenue sur les min
 * * HMS+HMS avec retenues min et s
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D11
 */
function Somme_de_durees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Additionner des durÃ©es";
  this.consigne = "ComplÃ©ter les Ã©galitÃ©s suivantes";
  this.sup = 1; // 2 niveaux de difficultÃ©s
  this.spacing = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions;

    if (this.sup == 1) {
      type_de_questions = combinaison_listes([1, 3], this.nb_questions);
    } else {
      type_de_questions = combinaison_listes(
        [1, 2, 3, 4, 5],
        this.nb_questions
      );
    }
    for (
      let i = 0, h1, h2, m1, m2, s1, s2, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (type_de_questions[i] == 1) {
        s1 = randint(11, 39);
        s2 = randint(1, 20);
        m1 = randint(20, 59);
        m2 = randint(40, 59);
        texte = `$${m1}~\\text{min}~${s1}~\\text{s}+${m2}~\\text{min}~${s2}~\\text{s}=\\dotfill$`;
        texte_corr = `$${m1}~\\text{min}~${s1}~\\text{s}+${m2}~\\text{min}~${s2}~\\text{s}= ${
          m1 + m2
        }~\\text{min}~${s1 + s2}~\\text{s}= 1~\\text{h}~${
          m1 + m2 - 60
        }~\\text{min}~${s1 + s2}~\\text{s}$`;
      }
      if (type_de_questions[i] == 2) {
        s1 = randint(21, 39);
        s2 = randint(40, 59);
        m1 = randint(20, 59);
        m2 = randint(40, 59);
        texte = `$${m1}~\\text{min}~${s1}~\\text{s}+${m2}~\\text{min}~${s2}~\\text{s}=\\dotfill$`;
        texte_corr = `$${m1}~\\text{min}~${s1}~\\text{s}+${m2}~\\text{min}~${s2}~\\text{s}= ${
          m1 + m2
        }~\\text{min}~${s1 + s2}~\\text{s} = ${m1 + m2 + 1}~\\text{min}~${
          s1 + s2 - 60
        }~\\text{s} = 1~\\text{h}~${m1 + m2 - 60}~\\text{min}~${
          s1 + s2 - 60
        }~\\text{s}$`;
      }
      if (type_de_questions[i] == 3) {
        h1 = randint(2, 12);
        h2 = randint(2, 11);
        m1 = randint(30, 50);
        m2 = randint(30, 50);
        texte = `$${h1}~\\text{h}~${m1}~\\text{min}+${h2}~\\text{h}~${m2}~\\text{min}=\\dotfill$`;
        texte_corr = `$${h1}~\\text{h}~${m1}~\\text{min}+${h2}~\\text{h}~${m2}~\\text{min}= ${
          h1 + h2
        }~\\text{h}~${m1 + m2}~\\text{min} = ${h1 + h2 + 1}~\\text{h}~${
          m1 + m2 - 60
        }~\\text{min}$`;
      }
      if (type_de_questions[i] == 4) {
        h1 = randint(2, 12);
        h2 = randint(2, 11);
        m1 = randint(30, 50);
        m2 = randint(30, 50);
        s1 = randint(2, 55);
        s2 = randint(1, 60 - s1 - 1);
        texte = `$${h1}~\\text{h}~${m1}~\\text{min}~${s1}~\\text{s}+${h2}~\\text{h}~${m2}~\\text{min}~${s2}~\\text{s}=\\dotfill$`;
        texte_corr = `$${h1}~\\text{h}~${m1}~\\text{min}~${s1}~\\text{s}+${h2}~\\text{h}~${m2}~\\text{min}~${s2}~\\text{s}= ${
          h1 + h2
        }~\\text{h}~${m1 + m2}~\\text{min}~${s1 + s2}~\\text{s} = ${
          h1 + h2 + 1
        }~\\text{h}~${m1 + m2 - 60}~\\text{min}~${s1 + s2}~\\text{s}$`;
      }
      if (type_de_questions[i] == 5) {
        h1 = randint(2, 12);
        h2 = randint(2, 11);
        m1 = randint(30, 50);
        m2 = randint(30, 50);
        s1 = randint(2, 55);
        s2 = randint(60 - s1, 59);
        texte = `$${h1}~\\text{h}~${m1}~\\text{min}~${s1}~\\text{s}+${h2}~\\text{h}~${m2}~\\text{min}~${s2}~\\text{s}=\\dotfill$`;
        texte_corr = `$${h1}~\\text{h}~${m1}~\\text{min}~${s1}~\\text{s}+${h2}~\\text{h}~${m2}~\\text{min}~${s2}~\\text{s}=`;
        texte_corr += ` ${h1 + h2}~\\text{h}~${m1 + m2}~\\text{min}~${
          s1 + s2
        }~\\text{s} = ${h1 + h2}~\\text{h}~${m1 + m2 + 1}~\\text{min}~${
          s1 + s2 - 60
        }~\\text{s} =${h1 + h2 + 1}~\\text{h}~${m1 + m2 + 1 - 60}~\\text{min}~${
          s1 + s2 - 60
        }~\\text{s}$`;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("=\\dotfill", "");
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Niveau de difficultÃ©", 2]; //"1 : Additions simples\n2 : Additions avec d'ï¿½ï¿½ventuelles conversions"]
}

/**
 * ProblÃ¨mes oÃ¹ il faut calculer la durÃ©e d'un Ã©vÃ¨bement ou un horaire.
 * ParamÃ©trage possible :
 * * 1 : calculs de durÃ©es
 * * 2 : calculer l'heure de dÃ©but
 * * 3 : calculer l'heure de fin
 * * 4 : mÃ©lange des 3 types prÃ©cÃ©dents
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D12
 */
function Calculs_de_durees_ou_d_horaires() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer des durÃ©es ou dÃ©terminer un horaire";
  this.consigne = "";
  this.sup = 4;
  this.spacing = 2;
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    const type_de_contexte = combinaison_listes(
      [1, 2, 3, 4, 5],
      this.nb_questions
    );
    let type_de_questions; // 1 : calcul de durÃ©es // 2 : calcul de l'horaire de dÃ©but // 3 : calcul de l'horaire de fin // 4 : mÃ©lange

    if (this.sup < 4) {
      // que des questions de niveau 1 ou que des questions de niveau 2
      type_de_questions = combinaison_listes([this.sup], this.nb_questions);
    } else {
      // un mÃ©lange Ã©quilibrÃ© de questions
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    }

    for (
      let i = 0, d1, h1, m1, d2, h2, m2, d, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      //d1 : heure de dÃ©but (h1 heures m1 min)
      //d2 : heure de fin (h2 heures m2 min)
      //d : durÃ©e
      if (type_de_contexte[i] == 1) {
        h1 = randint(20, 22);
        m1 = randint(35, 58);
        d1 = h1 * 60 + m1;
        h2 = h1 + 2;
        m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
        d2 = h2 * 60 + m2;
        d = d2 - d1;
        d1 = minToHoraire(d1);
        d2 = minToHoraire(d2);
        d = minToHour(d);

        if (type_de_questions[i] == 1) {
          texte = `La diffusion d'un film commence Ã  ${d1} et se termine Ã  ${d2}. Combien de temps a durÃ© ce film ?`;
          texte_corr = `${d2} - ${d1} = ${d}`;
          texte_corr += "<br>";
          texte_corr += `Le film dure ${d}.`;
        }
        if (type_de_questions[i] == 2) {
          texte = `Un film dure ${d} et commence Ã  ${d1}. Ã quelle heure se terminera-t-il ?`;
          texte_corr = `${d1} + ${d} = ${d2}`;
          texte_corr += "<br>";
          texte_corr += `Le film terminera Ã  ${d2}.`;
        }
        if (type_de_questions[i] == 3) {
          texte = `Un film de ${d} termine Ã  ${d2}. Ã quelle heure a-t-il commencÃ© ?`;
          texte_corr = `${d2} - ${d} = ${d1}`;
          texte_corr += "<br>";
          texte_corr += `Le film a commencÃ© Ã  ${d1}.`;
        }
      }

      if (type_de_contexte[i] == 2) {
        h1 = randint(20, 23);
        m1 = randint(35, 58);
        d1 = h1 * 60 + m1;
        h2 = h1 + 1;
        m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
        d2 = h2 * 60 + m2;
        d = d2 - d1;
        while (d < 27 || d > 75 || d == 60) {
          h1 = randint(20, 23);
          m1 = randint(35, 58);
          d1 = h1 * 60 + m1;
          h2 = h1 + 2;
          m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
          d2 = h2 * 60 + m2;
          d = d2 - d1;
        }
        d1 = minToHoraire(d1);
        d2 = minToHoraire(d2);
        d = minToHour(d);

        if (type_de_questions[i] == 1) {
          texte = `Sur son service de streaming favori, ${prenom()} commence Ã  regarder une sÃ©rie Ã  ${d1} et celle-ci se termine Ã  ${d2}. Combien de temps a durÃ© l'Ã©pisode ?`;
          texte_corr = `${d2} - ${d1} = ${d}`;
          texte_corr += "<br>";
          texte_corr += `La sÃ©rie a durÃ© ${d}.`;
        }
        if (type_de_questions[i] == 2) {
          texte = `${prenom()} allume son ordinateur Ã  ${d1} pour regarder une sÃ©rie de ${d}. Ã quelle heure la sÃ©rie s'achÃ¨vera-t-elle ?`;
          texte_corr = `${d1} + ${d} = ${d2}`;
          texte_corr += "<br>";
          texte_corr += `La sÃ©rie s'achÃ¨vera Ã  ${d2}.`;
        }
        if (type_de_questions[i] == 3) {
          texte = `${prenom()} termine de regarder une sÃ©rie de ${d} Ã  ${d2}. Ã quelle la sÃ©rie a-t-elle commencÃ© ?`;
          texte_corr = `${d2} - ${d} = ${d1}`;
          texte_corr += "<br>";
          texte_corr += `Elle a commencÃ© Ã  ${d1}.`;
        }
      }

      if (type_de_contexte[i] == 3) {
        h1 = randint(8, 21);
        m1 = randint(1, 58);
        d1 = h1 * 60 + m1;
        h2 = h1 + randint(1, 2);
        m2 = randint(1, 59); // pas forcÃ©ment de retenue dans d2-d1
        d2 = h2 * 60 + m2;
        d = d2 - d1;
        d1 = minToHoraire(d1);
        d2 = minToHoraire(d2);
        d = minToHour(d);

        if (type_de_questions[i] == 1) {
          texte = `Une Ã©mission tÃ©lÃ©visÃ©e est diffusÃ©e de ${d1} Ã  ${d2}. Combien de temps dure-t-elle ?`;
          texte_corr = `${d2} - ${d1} = ${d}`;
          texte_corr += "<br>";
          texte_corr += `L'Ã©mission dure ${d}.`;
        }
        if (type_de_questions[i] == 2) {
          texte = `Une Ã©mission tÃ©lÃ©visÃ©e de ${d} commence Ã  ${d1}. Ã quelle heure s'achÃ¨vera-t-elle ?`;
          texte_corr = `${d1} + ${d} = ${d2}`;
          texte_corr += "<br>";
          texte_corr += `L'Ã©mission s'achÃ¨vera Ã  ${d2}.`;
        }
        if (type_de_questions[i] == 3) {
          texte = `${prenom()} termine de regarder une Ã©mission de ${d} Ã  ${d2}. Ã quelle heure l'Ã©mission a-t-elle commencÃ© ?`;
          texte_corr = `${d2} - ${d} = ${d1}`;
          texte_corr += "<br>";
          texte_corr += `L'Ã©mission a commencÃ© Ã  ${d1}.`;
        }
      }

      if (type_de_contexte[i] == 4) {
        h1 = randint(13, 16);
        m1 = randint(1, 58);
        d1 = h1 * 60 + m1;
        h2 = h1 + randint(1, 2);
        m2 = randint(1, 58); // pas forcÃ©ment de retenue dans d2-d1
        d2 = h2 * 60 + m2;
        d = d2 - d1;
        while (d < 27 || d > 75 || d == 60) {
          h1 = randint(13, 16);
          m1 = randint(35, 58);
          d1 = h1 * 60 + m1;
          h2 = h1 + randint(1, 2);
          m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
          d2 = h2 * 60 + m2;
          d = d2 - d1;
        }
        d1 = minToHoraire(d1);
        d2 = minToHoraire(d2);
        d = minToHour(d);

        if (type_de_questions[i] == 1) {
          texte = `Un papa regarde la compÃ©tition de gymnastique de sa fille  de ${d1} Ã  ${d2}. Calculer la durÃ©e de cette compÃ©tition.`;
          texte_corr = `${d2} - ${d1} = ${d}`;
          texte_corr += "<br>";
          texte_corr += `La compÃ©tition dure ${d}.`;
        }
        if (type_de_questions[i] == 2) {
          texte = `Une compÃ©tition de gymnastique commence Ã  ${d1} et dure ${d}. Ã quelle heure sera-t-elle terminÃ©e ?`;
          texte_corr = `${d1} + ${d} = ${d2}`;
          texte_corr += "<br>";
          texte_corr += `La compÃ©tition terminera Ã  ${d2}.`;
        }
        if (type_de_questions[i] == 3) {
          texte = `Une compÃ©tition de gymnastique qui se termine Ã  ${d2} a durÃ© ${d}. Ã quelle heure a-t-elle commencÃ©.`;
          texte_corr = `${d2} - ${d} = ${d1}`;
          texte_corr += "<br>";
          texte_corr += `La compÃ©tition a commencÃ© Ã  ${d1}.`;
        }
      }

      if (type_de_contexte[i] == 5) {
        h1 = randint(8, 15);
        m1 = randint(25, 58);
        d1 = h1 * 60 + m1;
        h2 = h1 + randint(2, 5);
        m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
        d2 = h2 * 60 + m2;
        d = d2 - d1;
        while (d < 27 || d > 75 || d == 60) {
          h1 = randint(20, 23);
          m1 = randint(35, 58);
          d1 = h1 * 60 + m1;
          h2 = h1 + 2;
          m2 = randint(1, m1); // pour s'assurer qu'il y a une retenue dans d2-d1
          d2 = h2 * 60 + m2;
          d = d2 - d1;
        }
        d1 = minToHoraire(d1);
        d2 = minToHoraire(d2);
        d = minToHour(d);

        if (type_de_questions[i] == 1) {
          texte = `Un train part Ã  ${d1} et arrive Ã  destination Ã  ${d2}. Calculer la durÃ©e du trajet.`;
          texte_corr = `${d2} - ${d1} = ${d}`;
          texte_corr += "<br>";
          texte_corr += `Le trajet dure ${d}.`;
        }
        if (type_de_questions[i] == 2) {
          texte = `${prenomF()} monte dans le train Ã  ${d1} pour un trajet qui doit durer ${d}. Ã quelle heure arrivera-t-elle ?`;
          texte_corr = `${d1} + ${d} = ${d2}`;
          texte_corr += "<br>";
          texte_corr += `Elle arrivera Ã  ${d2}.`;
        }
        if (type_de_questions[i] == 3) {
          texte = `Un train arrive en gare Ã  ${d2} aprÃ¨s un trajet de ${d}. Ã quelle heure le voyage a-t-il commencÃ© ?`;
          texte_corr = `${d2} - ${d} = ${d1}`;
          texte_corr += "<br>";
          texte_corr += `Le voyage a commencÃ© Ã  ${d1}.`;
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Calcul de durÃ©e\n2 : Calcul de l'horaire de fin\n3 : Calcul de l'horaire de dÃ©but\n4 : 3 types de questions",
  ];
}

/**
 * Additions et/ou soustractions classique et/ou Ã  trou.
 *
 * Par dÃ©faut c'est un mÃ©lange d'additions, soustractions avec et sans trou avec des nombres jusqu'Ã  20.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D12
 */
function Tables_additions_soustractions() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 20;
  this.sup2 = 6; // additions|additions Ã  trous|soustractions|soustractions Ã  trous|mÃ©lange sans trou|mÃ©lange avec trou
  this.titre = "Additions et de soustractions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = [];
    if (this.sup2 == 1) {
      liste_type_de_questions = combinaison_listes(
        ["addition"],
        this.nb_questions
      );
    }
    if (this.sup2 == 2) {
      liste_type_de_questions = combinaison_listes(
        ["addition_a_trou"],
        this.nb_questions
      );
    }
    if (this.sup2 == 3) {
      liste_type_de_questions = combinaison_listes(
        ["soustraction"],
        this.nb_questions
      );
    }
    if (this.sup2 == 4) {
      liste_type_de_questions = combinaison_listes(
        ["soustraction_a_trou"],
        this.nb_questions
      );
    }
    if (this.sup2 == 5) {
      liste_type_de_questions = combinaison_listes(
        ["addition", "soustraction"],
        this.nb_questions
      );
    }
    if (this.sup2 == 6) {
      liste_type_de_questions = combinaison_listes(
        ["addition", "addition_a_trou", "soustraction", "soustraction_a_trou"],
        this.nb_questions
      );
    }
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = randint(2, this.sup);
      b = randint(2, this.sup);

      switch (liste_type_de_questions[i]) {
        case "addition":
          texte = `$${a} + ${b} = \\dotfill$`;
          texte_corr = `$${a} + ${b} = ${a + b}$`;
          break;
        case "addition_a_trou":
          texte = `$${a} + \\ldots\\ldots = ${a + b}$`;
          texte_corr = `$${a} + ${mise_en_evidence(b)} = ${a + b}$`;
          break;
        case "soustraction":
          if (a == b) {
            a = randint(2, this.sup, b);
          }
          if (a < b) {
            b = [a, (a = b)][0]; //Ã©change les variables a et b
          }
          texte = `$${a} - ${b} = \\dotfill$`;
          texte_corr = `$${a} - ${b} = ${a - b}$`;
          break;
        case "soustraction_a_trou":
          if (a == b) {
            a = randint(2, this.sup, b);
          }
          if (a < b) {
            b = [a, (a = b)][0]; //Ã©change les variables a et b
          }
          texte = `$${a} - \\ldots\\ldots = ${a - b}$`;
          texte_corr = `$${a} - ${mise_en_evidence(b)} = ${a - b}$`;
          break;
      }

      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 9999]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    6,
    "1 : Additions\n2: Additions Ã  trous\n3: Soustractions\n4 : Soustractions Ã  trous\n5 : Additions et soustractions \n6 : Additions et soustractions avec ou sans trous",
  ];
}

/**
 * Tables de multiplications classiques, Ã  trou ou un mÃ©lange des deux.
 *
 * Par dÃ©faut ce sont les tables de 2 Ã  9 mais on peut choisir les tables que l'on veut
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10-1
 */
function Tables_de_multiplications(tables_par_defaut = "2-3-4-5-6-7-8-9") {
  //Multiplier deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.sup2 = 1; // classique|a_trous|melange
  this.titre = "Tables de multiplications";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    var type_de_questions = "a_trous";
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = couples[i][0];
      b = couples[i][1];
      if (this.sup2 == 1) {
        type_de_questions = "classique";
      } else if (this.sup2 == 2) {
        type_de_questions = "a_trous";
      } else {
        type_de_questions = choice(["classique", "a_trous"]);
      }
      if (type_de_questions == "classique") {
        // classique
        if (choice([true, false])) {
          texte = `$ ${tex_nombre(a)} \\times ${tex_nombre(b)} = \\dotfill$`;
          texte_corr = `$ ${tex_nombre(a)} \\times ${tex_nombre(
            b
          )} = ${tex_nombre(a * b)}$`;
        } else {
          texte = `$ ${tex_nombre(b)} \\times ${tex_nombre(a)} = \\dotfill$`;
          texte_corr = `$ ${tex_nombre(b)} \\times ${tex_nombre(
            a
          )} = ${tex_nombre(a * b)}$`;
        }
      } else {
        // a trous
        if (tables.length > 2) {
          // Si pour le premier facteur il y a plus de 2 posibilitÃ©s on peut le chercher
          texte = choice([
            "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $",
            "$ \\ldots\\ldots" + " \\times " + b + " = " + a * b + " $",
          ]);
        } else {
          // Sinon on demande forcÃ©ment le 2e facteur
          texte = "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $";
        }

        texte_corr = "$ " + a + " \\times " + b + " = " + a * b + " $";
      }
      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    3,
    "1 : Classique\n2: Ã trous\n3: MÃ©langÃ©",
  ];
}

/**
 * Tables de divisions classiques, Ã  trou ou un mÃ©lange des deux.
 *
 * Par dÃ©faut ce sont les tables de 2 Ã  9 mais on peut choisir les tables que l'on veut
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM002
  */
function Tables_de_divisions(tables_par_defaut = "2-3-4-5-6-7-8-9") {
  //Diviser deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.sup2 = 1; // classique|a_trous|melange
  this.titre = "Tables de divisions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    let liste_type_de_questions = combinaison_listes(
      ["classique", "a_trous"],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    var type_de_questions = "a_trous";
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = couples[i][0];
      b = couples[i][1];
      if (this.sup2 == 1) {
        type_de_questions = "classique";
      } else if (this.sup2 == 2) {
        type_de_questions = "a_trous";
      } else {
        type_de_questions = liste_type_de_questions[i];
      }
      if (type_de_questions == "classique") {
        // classique
        texte = "$ " + a * b + " \\div " + a + " = \\dotfill $";
      } else {
        // a trous
        if (choice([true, false])) {
          texte = `$ ${a * b} \\div \\ldots\\ldots = ${b}$`;
        } else {
          texte = `$ \\ldots\\ldots \\div ${a}  = ${b}$`;
        }
      }
      texte_corr = `$ ${a * b} \\div ${a} = ${b}$`;
      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    3,
    "1 : Classique\n2: Ã trous\n3: MÃ©langÃ©",
  ];
}

/**
 * Tables de multiplications et de divisions classiques, Ã  trou ou un mÃ©lange des deux.
 *
 * Par dÃ©faut ce sont les tables de 2 Ã  9 mais on peut choisir les tables que l'on veut
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM003
 */
function Tables_de_multiplications_et_divisions(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier ou diviser deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.sup2 = 1; // classique|a_trous|melange
  this.titre = "Tables de multiplications et de divisions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    let liste_type_de_questions = combinaison_listes(
      ["classique", "a_trous"],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let operation = combinaison_listes(["x", "div"], this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let type_de_questions;
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = couples[i][0];
      b = couples[i][1];
      if (this.sup2 == 1) {
        type_de_questions = "classique";
      } else if (this.sup2 == 2) {
        type_de_questions = "a_trous";
      } else {
        type_de_questions = liste_type_de_questions[i];
      }

      if (operation[i] == "x") {
        if (type_de_questions == "classique") {
          // classique
          texte = "$ " + a + " \\times " + b + " = \\dotfill $";
          texte_corr = "$ " + a + " \\times " + b + " = " + a * b + " $";
        } else {
          // a trous
          if (tables.length > 2) {
            // Si pour le premier facteur il y a plus de 2 posibilitÃ©s on peut le chercher
            texte = choice([
              "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $",
              "$ \\ldots\\ldots" + " \\times " + b + " = " + a * b + " $",
            ]);
          } else {
            // Sinon on demande forcÃ©ment le 2e facteur
            texte = "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $";
          }

          texte_corr = "$ " + a + " \\times " + b + " = " + a * b + " $";
        }
      } else {
        if (type_de_questions == "classique") {
          // classique
          texte = "$ " + a * b + " \\div " + b + " = \\dotfill $";
        } else {
          // a trous
          if (choice([true, false])) {
            texte = `$ ${a * b} \\div \\ldots\\ldots = ${a}$`;
          } else {
            texte = `$ \\ldots\\ldots \\div ${b}  = ${a}$`;
          }
        }
        texte_corr = `$ ${a * b} \\div ${b} = ${a}$`;
      }
      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    3,
    "1 : Classique\n2: Ã trous\n3: MÃ©langÃ©",
  ];
}

/**
 * MÃ©lange Ã©quitable d'additions, de soustractions, de multiplications et de divisions
 *
 * * Niveau 1 Addition 2 chiffres + 1 chiffre, soustraction 2 chiffres - 1 chiffre, tables de 2 Ã  5
 * * Niveau 2 Addition 2 chiffres + 2 chiffres ne dÃ©passant pas 100, soustraction dont le rÃ©sultat est entre 11 et 19, tables de 6 Ã  9
 * * Niveau 3 Addition 2 chiffre + 2 chiffres dÃ©passant 100, soustraction dont le rÃ©sultat est entre 21 et 39, table de 7, 8, 11 ou 12,
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM004
  */
function Quatre_operations() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Les quatre opÃ©rations";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // addition
          if (this.sup == 1) {
            a = randint(11, 89);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(11, 69);
            b = randint(11, 29);
          }
          if (this.sup == 3) {
            a = randint(11, 89);
            b = randint(110 - a, 110 - a + 50);
          }
          texte = `$${a}+${b}$`;
          texte_corr = `$${a}+${b}=${a + b}$`;
          break;
        case 2: // soustraction
          if (this.sup == 1) {
            a = randint(11, 89);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(20, 89);
            b = randint(a - 19, a - 11);
          }
          if (this.sup == 3) {
            a = randint(40, 89);
            b = randint(a - 39, a - 21);
          }
          texte = `$${a}-${b}$`;
          texte_corr = `$${a}-${b}=${a - b}$`;
          break;
        case 3: // multiplication
          if (this.sup == 1) {
            a = randint(2, 5);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(6, 9);
            b = randint(6, 9);
          }
          if (this.sup == 3) {
            a = choice([7, 8, 11, 12]);
            b = randint(2, 9);
          }
          texte = `$${a}\\times${b}$`;
          texte_corr = `$${a}\\times${b}=${a * b}$`;
          break;
        case 4: // division
          if (this.sup == 1) {
            a = randint(2, 5);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(6, 9);
            b = randint(6, 9);
          }
          if (this.sup == 3) {
            a = choice([7, 8, 11, 12]);
            b = randint(2, 9);
          }
          texte = `$${a * b}\\div${a}$`;
          texte_corr = `$${a * b}\\div${a}=${b}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Niveau de difficultÃ©", 3];
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM005
*/
function Ajouter9() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Ajouter 9";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.bouton_aide = modal_texte_court(
      numero_de_l_exercice,
      "Ajouter 9 revient Ã  ajouter 10 et Ã  soustraire 1."
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(0, 9) * 10 + randint(1, 9);
      texte = `$${a}+9$`;
      texte_corr = `$${a}+9=${a + 9}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N12
 */
function Multiplier_entier_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplier un entier par 10, 100, 1 000...";
  this.consigne = "Calculer";
  this.nb_questions = 8;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.bouton_aide = modal_url(numero_de_l_exercice,'https://mathix.org/glisse-nombre/index.html',
      "Glisse-nombre"
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,choice([5,6]),7,8,9];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_de_b = []
      if (this.sup==2){
        liste_de_b = combinaison_listes([10,100,1000,10000,100000],this.nb_questions)
      } else {
        liste_de_b = combinaison_listes([10,100,1000],this.nb_questions)
      }
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          a = randint(1,9)
          break;
        case 2:
          a = randint(2,9)*10
          break;
        case 3:
          a = randint(2,9)*100
          break;
        case 4:
          a = randint(2,9)*1000
          break;
        case 5:
          a = randint(1,9)*100+randint(1,9)
          break;
        case 6:
          a = randint(1,9)*1000+randint(1,9)
          break;
        case 7:
          a = randint(1,9)*100 + randint(1,9)*10 + randint(1,9)
          break;
          case 8:
            a = randint(1,9)*10000+randint(1,9)*100
            break;
        case 9:
          a = randint(1,9)*10 + randint(1,9)
          break;
            
      }
      
      b = liste_de_b[i]
      if (choice([true,false])) {
        texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`
        texte_corr = `$${tex_nombre(a)}\\times${tex_nombre(b)}=${tex_nombre(a*b)}$`
      } else {
        texte = `$${tex_nombre(b)}\\times${tex_nombre(a)}$`
        texte_corr = `$${tex_nombre(b)}\\times${tex_nombre(a)}=${tex_nombre(a*b)}$`
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,'1 : Multiplication par 10, 100 ou 1 000\n2 : Multiplication par 10, 100, 1 000, 10 000 ou 100 000'];
}

/**
 * Un nombre Ã  2 chiffres ne terminant pas par 9 - 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM006
*/
function Soustraire9() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Soustraire 9";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(1, 9) * 10 + randint(0, 8);
      texte = `$${a}-9$`;
      texte_corr = `$${a}-9=${a - 9}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres non multiple de 10 + 11
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM007
*/
function Ajouter11() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Ajouter 11";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(0, 9) * 10 + randint(1, 9);
      texte = `$${a}+11$`;
      texte_corr = `$${a}+11=${a + 11}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres -11
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM008
*/
function Soustraire11() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Soustraire 11";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 1, 1, 1, 2];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (liste_type_de_questions[i] == 1) {
        a = randint(12, 99);
      } else {
        a = randint(2, 9) * 10;
      }

      texte = `$${a}-11$`;
      texte_corr = `$${a}-11=${a - 11}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Somme de deux nombres dont les chiffres des unitÃ©s sont des complÃ©ments Ã  10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM015
*/
function Somme_de_deux_nombres_maries() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Somme de deux nombres mariÃ©s";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, u1, u2, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      u1 = randint(1, 9);
      u2 = 10 - u1;
      a = randint(1, 9) * 10 + u1;
      b = randint(1, 9) * 10 + u2;

      texte = `$${a}+${b}$`;
      texte_corr = `$${a}+${b}=${a + b}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Somme de 3 nombres dont 2 ont des chiffres des unitÃ©s complÃ©ments Ã  10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM018
*/
function Somme_de_deux_nombres_maries_et_un_entier() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Somme de deux nombres mariÃ©s et un entier";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, c, u1, u2, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      u1 = randint(1, 9);
      u2 = 10 - u1;
      a = randint(1, 4) * 10 + u1;
      b = randint(1, 4) * 10 + u2;
      c = randint(1, 100 - a - b);

      switch (liste_type_de_questions[i]) {
        case 1:
          texte = `$${a}+${b}+${c}$`;
          texte_corr = `$${a}+${b}+${c}=${a + b + c}$`;
          break;
        case 2:
          texte = `$${a}+${c}+${b}$`;
          texte_corr = `$${a}+${c}+${b}=${a + b + c}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Mettre en relation un calcul, une traduction en franÃ§ais, une expression, un rÃ©sultat, pour les dÃ©cliner dans diffÃ©rents exercices.
 * Exercice sur le vocabulaire : somme,diffÃ©rence, produit, quotient...
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6C13
 */
function Vocabulaire_et_operations() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Traduire des phrases en calculs et rÃ©ciproquement";
  this.consigne = "";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 4;
  this.sup2 = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let decimal;
    let expf, expn, expc, resultats;
    let type_de_questions_disponibles;
    if (this.sup < 4) type_de_questions_disponibles = [parseInt(this.sup)];
    else type_de_questions_disponibles = [1, 2, 3];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup2) decimal = 10 ** randint(1, 2);
    else decimal = 1;

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      resultats = Choisir_expression_numerique(1, decimal);
      expf = resultats[0];
      expn = resultats[1];
      expc = resultats[2];
      texte = ``;
      texte_corr = ``;
      switch (liste_type_de_questions[i]) {
        case 1:
          texte +=
            num_alpha(i) +
            `Traduire la phrase par un calcul (il nâest pas demandÃ© dâeffectuer ce calcul) : `;
          expf = `l` + expf.substring(1);
          texte += `${expf}.`;
          texte_corr += num_alpha(i) + `${expf} s'Ã©crit ${expn}.`;
          break;
        case 2:
          if (expn.indexOf("ou") > 0)
            expn = expn.substring(0, expn.indexOf("ou")); // on supprime la deuxiÃ¨me expression fractionnaire
          texte +=
            num_alpha(i) + `Traduire le calcul par une phrase en franÃ§ais : `;
          texte += `${expn}`;
          expf = `l` + expf.substring(1);
          texte_corr += num_alpha(i) + `${expn} est ${expf}.`;
          break;
        case 3:
          texte +=
            num_alpha(i) +
            `Traduire la phrase par un calcul et effectuer ce calcul : `;
          expf = `l` + expf.substring(1);
          texte += `${expf}.`;
          expf = `L` + expf.substring(1);
          texte_corr += num_alpha(i) + `${expf} s'Ã©crit ${expn}.<br>`;
          texte_corr += `${expc}.`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de questions",
    4,
    "1 : Phrase -> Calcul\n 2 : Calcul -> Phrase\n 3 : Phrase -> Calcul + rÃ©sultat\n 4 : MÃ©lange",
  ];
  this.besoin_formulaire2_case_a_cocher = ["DÃ©cimaux", false];
}

/**
 * Un "Le compte est bon" avec des solutions "formatÃ©es" pour travailler certains incontournables du calcul mental
 *  @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence CM020
 */
function Compte_Est_Bon() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Atteindre le rÃ©sultat souhaitÃ© avec 6 nombres et les 4 opÃ©rations";
  this.consigne =
    "Trouve le rÃ©sultat en utilisant les quatre opÃ©rations et les nombres du tirage (une seule fois).";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de calcul souhaitÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions, a, b, c, d, e, f, cible, tirage, choix;
    if (!this.sup) {
      // Si rien n'est saisi
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    } else {
      if (typeof this.sup == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        type_de_questions = combinaison_listes(
          [parseInt(this.sup)],
          this.nb_questions
        );
      } else {
        type_de_questions = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        for (let i = 0; i < type_de_questions.length; i++)
          type_de_questions[i] = parseInt(type_de_questions[i]);
        this.nb_questions = type_de_questions.length;
      }
    }
    choix = combinaison_listes(range1(5), this.nb_questions);
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (type_de_questions[i]) {
        case 1:
          a = randint(2, 9);
          b = randint(2, 8, a);
          c = randint(1, 9, [a, b]);
          d = randint(1, 9, [a, b, c]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * 100 + b * 10 + c + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times${b}+${c}+${d}$`;
              break;
            case 2:
              cible = calcul(a * 100 + b * 10 + c - d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times${b}+${c}-${d}$`;
              break;
            case 3:
              cible = calcul(a * 100 - b * 10 + c + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}-10\\times${b}+${c}+${d}$`;
              break;
            case 4:
              cible = calcul(a * 100 - b * 10 + c - d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}-10\\times${b}+${c}-${d}$`;
              break;
            default:
              cible = calcul(a * 100 + (b + c) * 10 + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times(${b}+${c})+${d}$`;
          }
          break;

        case 2:
          a = randint(3, 9);
          b = randint(3, 8, a);
          c = randint(3, 9, [a, b]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * 100 + b * 10 + c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}+10\\times${b}+${c}$`;
              break;
            case 2:
              cible = calcul(a * 100 + b * 10 - c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}+10\\times${b}-${c}$`;
              break;
            case 3:
              cible = calcul(a * 100 - b * 10 + c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}-10\\times${b}+${c}$`;
              break;
            case 4:
              cible = calcul(a * 100 - b * 10 - c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=2\\times50\\times${a}-10\\times${b}-${c}$`;
              break;
            default:
              cible = calcul(a * 100 + b * 10 - c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=4\\times25\\times${a}+10\\times${b}-${c}$`;
          }
          break;
        case 3:
          a = randint(2, 5);
          b = randint(3, 8, a);
          c = randint(3, 9, [a, b]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(50\\times2+10\\times${b})+${c}$`;
              break;
            case 2:
              cible = calcul(a * (100 + b * 10) - c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(50\\times2+10\\times${b})-${c}$`;
              break;
            case 3:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(25\\times4+10\\times${b})+${c}$`;
              break;
            case 4:
              cible = calcul(a * (100 + b * 10) - c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(25\\times4+10\\times${b})-${c}$`;
              break;
            default:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([25, 75, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times((25+75)+10\\times${b})+${c}$`;
          }
          break;
      }
      texte = `Voici le tirage : `;
      for (let i = 0; i < 5; i++) texte += `${tirage[i]} ; `;
      texte += `${tirage[5]}.<br>`;
      texte += `Et le nombre Ã  trouver est : ${cible}.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Niveaux de difficultÃ©s (1 Ã  3)",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}


/**
 * GÃ©nÃ©rateur de tirages pour un compte est bon avec en correction la solution mathador (4 opÃ©rations diffÃ©rentes).
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence CM019
 */

function Le_compte_est_bonV3() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = 'GÃ©nÃ©rateur de "Le compte est bon"';
  this.consigne =
    "Ãcrire un calcul Ã©gal au nombre cible en utilisant les 5 nombres, 4 opÃ©rations diffÃ©rentes et Ã©ventuellement des parenthÃ¨ses.";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 30;
  this.sup2 = 70;
  var max_solution = 70;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let solution_mathador = [];
    let tirage, solution, expression;
    let min_solution = parseInt(this.sup);
    max_solution = parseInt(this.sup2);
    if (min_solution > max_solution) {
      min_solution = max_solution;
      this.sup = this.sup2;
    }
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      solution_mathador = Trouver_solution_mathador(min_solution, max_solution);
      tirage = solution_mathador[0];
      solution = solution_mathador[1];
      expression = solution_mathador[3];

      texte = `Le tirage est le suivant : $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ <br>La cible est : $${solution}$`;
      texte_corr = `Pour le tirage $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ et pour la cible $${solution}$, la solution est : $${expression}=${solution}$ `;
      texte_corr += `ou $${solution_mathador[4]}$.<br>`;
      texte_corr += `En effet : <br>`;
      for (let i = 0; i < 4; i++) {
        texte_corr += `$${solution_mathador[2][i]}$<br>`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Limite infÃ©rieure", max_solution];
  this.besoin_formulaire2_numerique = ["Limite supÃ©rieure", 100];
}
/**
 * @Auteur Jean-Claude Lhote
  * rÃ©fÃ©rence CM020
 * Dans cette version, il est possible de choisir 1,2,3,4 ou 5 nombres du tirage et de contraindre la cible entre deux valeurs
 */
function Le_compte_est_bonV4() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = 'GÃ©nÃ©rateur de "Le compte est bon" version semi-alÃ©atoire';
  this.consigne =
    "Ãcrire un calcul Ã©gal au nombre cible en utilisant les 5 nombres, 4 opÃ©rations diffÃ©rentes et Ã©ventuellement des parenthÃ¨ses.";
  this.nb_questions = 1;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let solution_mathador = [];
    let tirage, solution, expression, min, max, texte, texte_corr;
    let minmax = [];
    let a, b, c, d, e;
    if (!this.sup2) {
      // Si rien n'est saisi
      min = 0;
      max = 100;
    } else {
      if (typeof this.sup2 == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        min = 0;
        max = this.sup2;
      } else {
        minmax = this.sup2.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        min = minmax[0];
        max = minmax[1];
      }
    }
    if (!this.sup) {
      // Si rien n'est saisi
      solution_mathador = Trouver_solution_mathador(min, max);
    } else {
      if (typeof this.sup == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        solution_mathador = Trouver_solution_mathador(min, max, this.sup);
      } else {
        tirage = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        for (let i = 0; i < tirage.length; i++) tirage[i] = parseInt(tirage[i]);
        solution_mathador = Trouver_solution_mathador(min, max, ...tirage);
      }
    }

    tirage = solution_mathador[0];
    solution = solution_mathador[1];
    expression = solution_mathador[3];

    texte = `Le tirage est le suivant : $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ <br>La cible est : $${solution}$`;
    texte_corr = `Pour le tirage $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ et pour la cible $${solution}$, la solution est : $${expression}=${solution}$ `;
    texte_corr += `ou $${solution_mathador[4]}$.<br>`;
    texte_corr += `En effet : <br>`;
    for (let i = 0; i < 4; i++) {
      texte_corr += `$${solution_mathador[2][i]}$<br>`;
    }
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des nombres du tirage (de aucun Ã  cinq)",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_texte = [
    "Intervalle pour la cible (ou rien pour cible non contrainte)",
    "Minimum-Maximum (Ã©viter de trop contraindre la cible, cela peut bloquer le programme)",
  ]; // Texte, tooltip

  // this.besoin_formulaire2_numerique = ['Limite supÃ©rieure',100];
}
/**
 * @Auteur Jean-Claude Lhote
 * @param {number} min Valeur minimum pour la solution
 * @param {number} max Valeur maximum pour la solution
 * Cette fonction produit alÃ©atoirement un tirage de 5 nombres, une solution, un tableau contenant les calculs successifs, une chaine contenant l'expression mathador correspondante
 * @returns {array} [tirage=[a,b,c,d,e],solution (compris entre min et max),operations_successives=[string1,string2,string3,string4,string5],expression]
 * les string1 Ã  5 ainsi que l'expresion sont ) mettre en mode maths.
 * sert dans les exercices CM019,
 */
function Trouver_solution_mathador(
  min,
  max,
  A = 1,
  B = 4,
  C = 8,
  D = 3,
  E = 5
) {
  let eureka,
    a,
    b,
    c,
    d,
    e,
    tirage,
    nombres_restants,
    operations_restantes,
    expression_en_cours_f,
    expression_en_cours_d,
    op,
    part1_f,
    part2_f,
    part1_d,
    part2_d,
    operations_successives = [],
    solution;
  let liste_choix = [
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
  ];
  eureka = false;
  let nb_determines = arguments.length - 2;
  while (eureka == false) {
    tirage = [];

    if (nb_determines < 1) a = parseInt(choice(liste_choix));
    else a = A;
    if (nb_determines < 2)
      b = parseInt(choice(liste_choix, [13, 14, 15, 16, 17, 18, 19, 20, a]));
    else b = B;
    if (nb_determines < 3)
      c = parseInt(
        choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20, a, b])
      );
    else c = C;
    if (nb_determines < 4)
      d = parseInt(
        choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20, b, c])
      );
    else d = D;
    if (nb_determines < 5)
      e = parseInt(choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20]));
    else e = E;
    tirage.push(a, b, c, d, e);
    nombres_restants = shuffle(tirage);
    operations_restantes = ["\\times", "+", "-", "\\div"];
    operations_restantes = shuffle(operations_restantes);
    expression_en_cours_f = [
      `${nombres_restants[0]}`,
      `${nombres_restants[1]}`,
      `${nombres_restants[2]}`,
      `${nombres_restants[3]}`,
      `${nombres_restants[4]}`,
    ];
    expression_en_cours_d = [
      `${nombres_restants[0]}`,
      `${nombres_restants[1]}`,
      `${nombres_restants[2]}`,
      `${nombres_restants[3]}`,
      `${nombres_restants[4]}`,
    ];

    while (nombres_restants.length > 1) {
      b = nombres_restants.pop();
      a = nombres_restants.pop();
      part2_f = expression_en_cours_f.pop();
      part1_f = expression_en_cours_f.pop();
      part2_d = expression_en_cours_d.pop();
      part1_d = expression_en_cours_d.pop();

      op = operations_restantes.pop();
      if (op == "\\times") {
        c = a * b;
        expression_en_cours_f.push(`${part1_f}${op}${part2_f}`);
        expression_en_cours_d.push(`${part1_d}${op}${part2_d}`);
        nombres_restants.push(c);
      } else if (op == "\\div") {
        if (a % b == 0) {
          c = a / b;
          if (part1_f[0] == "\\") {
            part1_f = part1_f.substring(6, part1_f.length);
            part1_f = part1_f.substring(0, part1_f.length - 7);
          }
          if (part2_f[0] == "\\") {
            part2_f = part2_f.substring(6, part2_f.length);
            part2_f = part2_f.substring(0, part2_f.length - 7);
          }
          expression_en_cours_f.push(`\\dfrac{${part1_f}}{${part2_f}}`);
          expression_en_cours_d.push(`${part1_d}${op}${part2_d}`);
          nombres_restants.push(c);
        } else break;
      } else if (op == "-") {
        if (a > b) {
          c = a - b;
          expression_en_cours_f.push(
            `\\left(${part1_f}${op}${part2_f}\\right)`
          );
          expression_en_cours_d.push(
            `\\left(${part1_d}${op}${part2_d}\\right)`
          );
          nombres_restants.push(c);
        } else break;
      } else if (op == "+") {
        c = a + b;
        if (part2_f.substring(0, 2) == "\\l") {
          part2_f = part2_f.substring(6, part2_f.length);
          part2_f = part2_f.substring(0, part2_f.length - 7);
        }
        expression_en_cours_f.push(`\\left(${part1_f}${op}${part2_f}\\right)`);
        if (part2_d.substring(0, 2) == "\\l") {
          part2_d = part2_d.substring(6, part2_d.length);
          part2_d = part2_d.substring(0, part2_d.length - 7);
        }
        expression_en_cours_d.push(`\\left(${part1_d}${op}${part2_d}\\right)`);
        nombres_restants.push(c);
      }
      operations_successives.push(`${a}` + op + `${b}=${c}`);
    }

    if (nombres_restants.length == 1 && operations_restantes.length == 0) {
      solution = nombres_restants[0];
      if (solution >= min && solution <= max) {
        eureka = true;
        if (
          expression_en_cours_f[0][0] == "\\" &&
          expression_en_cours_f[0][1] == `l`
        ) {
          expression_en_cours_f[0] = expression_en_cours_f[0].substring(
            6,
            expression_en_cours_f[0].length
          );
          expression_en_cours_f[0] = expression_en_cours_f[0].substring(
            0,
            expression_en_cours_f[0].length - 7
          );
        }
        if (
          expression_en_cours_d[0][0] == "\\" &&
          expression_en_cours_d[0][1] == `l`
        ) {
          expression_en_cours_d[0] = expression_en_cours_d[0].substring(
            6,
            expression_en_cours_d[0].length
          );
          expression_en_cours_d[0] = expression_en_cours_d[0].substring(
            0,
            expression_en_cours_d[0].length - 7
          );
        }
        return [
          tirage,
          solution,
          operations_successives,
          expression_en_cours_f,
          expression_en_cours_d,
        ];
      } else operations_successives = [];
    } else operations_successives = [];
  }
}
/**
 * Lire un nombre / Ã©crire un nombre : passer d'une Ã©criture Ã  une autre et inversement
 * On peut fixer la classe maximale : unitÃ©s, miliers, millions, milliards
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N10
 */

function Ecrire_nombres_entiers() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire un nombre en chiffres ou en lettres"
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 3
  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 2)
      this.consigne = "Ãcrire le nombre en chiffres"
    else
      this.consigne = "Ãcrire le nombre en lettres"
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es 
    let type_de_questions_disponibles;
    if (this.sup2==1) type_de_questions_disponibles=[1,1,1,2,2]
    else if (this.sup2==2) type_de_questions_disponibles=[1,2,2,2,3]
    else if (this.sup2==3)  type_de_questions_disponibles=[2,2,3,3,4]
    else type_de_questions_disponibles=[2,3,3,4,4]

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b,c,nombre,tranche, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
  
      nombre = 0
      tranche=[]
      while (nombre == 0) {
        tranche.splice(0)
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          a = randint(1,9)
          b=randint(1,9)
          c=randint(1,9)
          tranche.push(choice([0,100,20,80,a,a*100,a*100+b*10+c,a*100+80+b,a*10,a*100+b*10+1]))
        }
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          nombre += tranche[j] * 10 ** (j*3)
        }
        if (tranche[liste_type_de_questions[i]-1]==0) nombre=0
      }
      if (this.sup == 1) {
        if (!est_diaporama) texte = `$${tex_nombre(nombre)}$ : \\dotfill`
        else texte =`$${tex_nombre(nombre)}$`
       if (!est_diaporama) texte_corr = `$${tex_nombre(nombre)}$ : ${nombreEnLettres(nombre)}.`
       else texte_corr = `${nombreEnLettres(nombre)}.`
      }
      else {
        if (!est_diaporama) texte = `${nombreEnLettres(nombre)} : \\dotfill`
        else texte = `${nombreEnLettres(nombre)}`
        if (!est_diaporama) texte_corr = `${nombreEnLettres(nombre)} : $${tex_nombre(nombre)}$.`
        else texte_corr = `$${tex_nombre(nombre)}$.`
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  this.besoin_formulaire2_numerique = ['Niveau', 4, '1 : ÃlÃ©mentaire\n2 : Facile\n3 : Moyen\n4 : Difficile']
}

/**
 * 6N10-4
 * Supprimer les zÃ©ros inutiles, sÃ©parer les classes d'un nombre entier.
 * @Auteur Jean-Claude Lhote
 */
function Ecrire_nombres_entiers_formates() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire correctement les grands nombres entiers."
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 2
  this.nouvelle_version = function (numero_de_l_exercice) {
  this.consigne=`Ãcrire les nombres en chiffres en supprimant les zÃ©ros inutiles et en sÃ©parant les classes.`
  this.liste_questions = []; // Liste de questions
  this.liste_corrections = []; // Liste de questions corrigÃ©es 
  function zeroSuperflus(n) {
    let nzero=randint(0,2),nombrestring=n.toString()
    for (let k=0;k<nzero;k++) nombrestring=`0`+nombrestring
    return nombrestring
  }
  for (
      let i = 0, texte, texte_corr, a, b,c,nombre,tranche,nombrestring, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
  
      nombre = 0
      tranche=[]
      while (nombre == 0) {
        tranche.splice(0)
        for (let j = 0; j < 3; j++) {
          a = randint(1,9)
          b=randint(1,9)
          c=randint(1,9)
          tranche.push(choice([0,100,20,80,a,a*100,a*100+b*10+c,a*100+80+b,a*10,a*100+b*10+1]))
        }
        for (let j = 0; j < 3; j++) {
          nombre += tranche[j] * 10 ** (j*3)
        }
        if (tranche[2]==0) nombre=0
      }
      nombrestring=zeroSuperflus(nombre)
        if (!est_diaporama) texte = `$${nombrestring}$ : \\dotfill`
        else texte =`$${nombrestring}$`
       if (!est_diaporama) texte_corr = `$${nombrestring}=${tex_nombre(nombre)}$.`
       else texte_corr = `${tex_nombre(nombre)}.`
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  //this.besoin_formulaire2_numerique = ['Niveau', 3, '1 : Facile\n2 : Moyen\n3 : Difficile']
}
/**
 * Lire un nombre / Ã©crire un nombre : passer d'une Ã©criture Ã  une autre et inversement
 * On peut fixer la classe maximale : unitÃ©s, miliers, millions, milliards
 * @Auteur Jean-Claude Lhote
 * 6N23-0
 */

function Ecrire_nombres_decimal() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire un nombre dÃ©cimal en chiffres ou en lettres"
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 1
  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 2)
      this.consigne = "Ãcrire le nombre en chiffres"
    else
      this.consigne = "Ãcrire le nombre en lettres"
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es 
    let type_de_questions_disponibles = [parseInt(this.sup2)+1]; // <1 000, <1 000 000) 
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b,c,nombre,tranche,part_ent,part_dec,nb_dec, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
  
      nombre = 0
      tranche=[]
      while (nombre == 0) {
        tranche.splice(0)
        part_ent=0
        part_dec=0
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          a = randint(1,9)
          b=randint(1,9)
          c=randint(1,9)
          tranche.push(choice([0,100,20,80,a,a*100,a*100+b*10+c,a*100+80+b,a*10,a*100+b*10+1]))
        }
        for (let j = 1; j < liste_type_de_questions[i]; j++) {
          part_ent+= tranche[j] * 10 ** ((j-1)*3)
         // nombre += tranche[j] * 10 ** ((j-1)*3)
        }
        part_dec=tranche[0]
        nombre=calcul(part_ent+part_dec/1000)
        // if (tranche[liste_type_de_questions[i]-1]==0) nombre=0
        if (tranche[1]<2) nombre=0
        if (tranche[0]==0) nombre=0
        
      }
      if (part_dec%10!=0) nb_dec=3
      else if (part_dec%100!=0) nb_dec=2
      if (this.sup == 1) {
        if (!est_diaporama) texte = `$${tex_nombre(nombre)}$ : \\dotfill`
        else texte =`$${tex_nombre(nombre)}$`
       if (!est_diaporama) texte_corr = `$${tex_nombre(nombre)}$ : ${nombreEnLettres(nombre)}.`
       else texte_corr = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)}.`
      }
      else {
        if (!est_diaporama) texte = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)} : \\dotfill`
        else texte = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)}`
        if (!est_diaporama) texte_corr = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)} : $${tex_nombre(nombre)}$.`
        else texte_corr = `$${tex_nombre(nombre)}$.`
      }
      texte=texte.replace('et-un unitÃ©s','et-une unitÃ©s')
      texte_corr=texte_corr.replace('et-un unitÃ©s','et-une unitÃ©s')
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  this.besoin_formulaire2_numerique = ['Classe maximum', 2, '1 : UnitÃ©s\n2 : Milliers']
}

/**
 * Le nombre de dizaines, centaines et milliers Ã©tant donnÃ©, il faut Ã©crire le nombre.
 *
 * 2 fois sur 5 il y a chevauchement entre les classes
 * @Auteur RÃ©mi Angot
 * 6N10-1
 */
function Exercice_numeration_entier() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Ãcrire un nombre Ã  partir de son nombre de dizaines, de centaines, de milliers...";
  this.consigne = "Ãcrire en chiffres chacun des nombres.";
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2]; // sans chevauchement ou avec chevauchement
    let liste_type_de_questions = combinaison_listes(
      [1, 1, 1, 2, 2],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, rang_a, rang_b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, 8) * 10 + randint(1, 5);
      b = randint(2, 8) * 10 + randint(1, 5);
      let rangs = [
        "unitÃ©s",
        "dizaines",
        "centaines",
        "milliers",
        "dizaines de mille",
        "centaines de mille",
        "millions",
      ];
      rang_a = randint(0, 2);
      if (liste_type_de_questions[i] == 1) {
        rang_b = randint(rang_a + 2, 6);
      } else {
        rang_b = rang_a + 1;
      }

      texte = `$\\text{${b}  ${rangs[rang_b]} et ${a} ${rangs[rang_a]}}$`;
      texte_corr = `$${b} \\text{ ${rangs[rang_b]} et }${a} \\text{ ${
        rangs[rang_a]
      } : } ${tex_nombre(b*Math.pow(10, rang_b))} + ${a*tex_nombre(Math.pow(10, rang_a))} =${tex_nombre(
        b * Math.pow(10, rang_b) + a * Math.pow(10, rang_a)
      )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Des questions sur le nombre ou le chiffre de centaines, de dizaines, de dixiÃ¨mes, de centiÃ¨mes...
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N10-2
 */
function Decomposition_nombre_decimal() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©composer un nombre dÃ©cimal (nombre de..., chiffre de...)";
  this.consigne = "ComplÃ©ter les phrases suivantes.";
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [
      1,
      2,
      choice([3, 4, 5]),
      choice([6, 7, 8]),
      choice([9, 10]),
      choice([11, 12]),
    ]; // sans chevauchement ou avec chevauchement
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let m = randint(1, 9); // le nombre sera le mÃªme pour tout l'exercice
    let c = randint(0, 9, [m]);
    let d = randint(0, 9, [m, c]);
    let u = randint(0, 9, [m, c, d]);
    let di = randint(0, 9, [m, c, d, u]);
    let ci = randint(0, 9, [m, c, d, u, di]);
    let mi = randint(1, 9, [m, c, d, u, di, ci]);
    let n =
      m.toString() +
      "" +
      c.toString() +
      d.toString() +
      u.toString() +
      "," +
      di.toString() +
      ci.toString() +
      mi;
    //calcul ne semble pas marcher avec 7 chiffres significatifs
    this.consigne = `On considÃ¨re le nombre $${n}$. ComplÃ©ter les phrases suivantes.`;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          texte = "La partie entiÃ¨re de ce nombre est : ";
          texte_corr =
            texte + `$${tex_nombrec(m * 1000 + c * 100 + d * 10 + u)}$`;
          break;
        case 2:
          texte = "La partie dÃ©cimale de ce nombre est : ";
          texte_corr =
            texte + `$${tex_nombrec(di / 10 + ci / 100 + mi / 1000)}$`;
          break;
        case 3:
          texte = "Le chiffre des dizaines de ce nombre est : ";
          texte_corr = texte + `$${d}$`;
          break;
        case 4:
          texte = "Le chiffre des centaines de ce nombre est : ";
          texte_corr = texte + `$${c}$`;
          break;
        case 5:
          texte = "Le chiffre des miliers de ce nombre est : ";
          texte_corr = texte + `$${m}$`;
          break;
        case 6:
          texte = "Le chiffre des dixiÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${di}$`;
          break;
        case 7:
          texte = "Le chiffre des centiÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${ci}$`;
          break;
        case 8:
          texte = "Le chiffre des milliÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${mi}$`;
          break;
        case 9:
          texte = "Le nombre de dizaines de ce nombre est : ";
          texte_corr = texte + `$${tex_nombrec(d + c * 10 + m * 100)}$`;
          break;
        case 10:
          texte = "Le nombre de centaines de ce nombre est : ";
          texte_corr = texte + `$${tex_nombrec(c + m * 10)}$`;
          break;
        case 11:
          texte = "Le nombre de dixiÃ¨mes de ce nombre est : ";
          texte_corr =
            texte +
            `$${tex_nombrec(di + u * 10 + d * 100 + c * 1000 + m * 10000)}$`;
          break;
        case 12:
          texte = "Le nombre de centiÃ¨mes de ce nombre est : ";
          texte_corr =
            texte +
            `$${tex_nombrec(
              ci + di * 10 + u * 100 + d * 1000 + c * 10000 + m * 100000
            )}$`;
          break;
      }

      texte_corr += ".";
      texte += "\\ldots";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * 100-...=
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM012
 */
function Complement_a_100() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ComplÃ©ment Ã  100";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(11, 89);
      texte = `$100-${a}$`;
      texte_corr = `$100-${a}=${100 - a}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Une soustraction dont le premier terme est un multiple de 10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM013
*/
function Complement_a_une_dizaine() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ComplÃ©ment Ã  une dizaine";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, 9) * 10;
      b = randint(2, a - 11);
      texte = `$${a}-${b}$`;
      texte_corr = `$${a}-${b}=${a - b}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Division d'un entier par 10, 100, 1000
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM016
*/
function Diviser_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Diviser un entier par 10, 100 ou 1000";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice([randint(1, 9), randint(11, 99), randint(101, 999)]);
      b = choice([10, 100, 1000]);
      texte = `$${tex_nombre(a)}\\div${tex_nombre(b)}$`;
      texte_corr = `$${tex_nombre(a)}\\div${tex_nombre(b)}=${tex_nombrec(
        a / b
      )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Un entier Ã  un 1 ou 2 chiffres, un nombre dÃ©cimal avec une partie dÃ©cimale Ã  un ou 2 chiffres Ã  diviser par 10, 100 ou 1000
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM017
*/
function Diviser_decimal_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Diviser un nombre dÃ©cimal par 10, 100 ou 1000";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice([
        randint(1, 9),
        randint(11, 99),
        calcul(randint(11, 99) / 10),
        calcul(randint(101, 999) / 100),
        calcul(randint(1, 9) / 10),
      ]);
      b = choice([10, 100, 1000]);
      texte = `$${tex_nombre(a)}\\div${tex_nombre(b)}$`;
      texte_corr = `$${tex_nombre(a)}\\div${tex_nombre(b)}=${tex_nombrec(
        a / b
      )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer la moitiÃ© d'un nombre pair, d'un impair infÃ©rieur Ã  20, d'un multiple de 200, d'un nombre de la forme a00 avec a impair, d'un nombre de la forme
 *  a,b avec a et b pairs ou 1xx avec xx un nombre pair
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM009
*/
function Moitie() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "MoitiÃ©";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(6);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 2
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${a * 2} \\text{ est } ${a}$`;
          break;
        case 2: // Impair infÃ©rieur Ã  20
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${a * 2 + 1}$`;
          texte_corr = `$\\text{La moitiÃ© de }${
            a * 2 + 1
          } \\text{ est } ${tex_nombrec(a + 5 / 10)}$`;
          break;
        case 3: // Table de 200
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombre(a * 2 * 100)}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombre(
            a * 2 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 4: // a00 avec a impair
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombre((a * 2 + 1) * 100)}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombre(
            (a * 2 + 1) * 100
          )} \\text{ est } ${tex_nombre(a * 100 + 50)}$`;
          break;
        case 5: // a,b avec a et b pairs
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombrec(
            a * 2 + (b * 2) / 100
          )}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombrec(
            a * 2 + (b * 2) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
        case 6: // 1xx avec xx un nombre pair
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${100 + a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${100 + a * 2} \\text{ est } ${
            50 + a
          }$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le tiers d'un multiple de 3, d'un multiple de 300, d'un multiple de 30 ou d'un nombre a,b avec a et b multiples de 3
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM010
 */
function Tiers() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tiers";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 3
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${a * 3}$`;
          texte_corr = `$\\text{Le tiers de }${a * 3} \\text{ est } ${a}$`;
          break;
        case 2: // Table de 300
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombre(a * 3 * 100)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombre(
            a * 3 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 3: // Table de 30
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombre(a * 3 * 10)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombre(
            a * 3 * 10
          )} \\text{ est } ${tex_nombre(a * 10)}$`;
          break;
        case 4: // a,b avec a et b divisibles par 3
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombrec(a * 3 + (b * 3) / 100)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombrec(
            a * 3 + (b * 3) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le quart d'un multiple de 4, d'un impair, d'un multiple de 400, d'un multiple de 40, d'un nombre a,b avec a et b multiples de 4
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM011
*/
function Quart() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Quart";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(5);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 4
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${a * 4}$`;
          texte_corr = `$\\text{Le quart de }${a * 4} \\text{ est } ${a}$`;
          break;
        case 2: // Impair
          a = randint(2, 9);
          b = choice([1, 2, 3]);
          texte = `$\\text{Le quart de }${a * 4 + b}$`;
          texte_corr = `$\\text{Le quart de }${
            a * 4 + b
          } \\text{ est } ${tex_nombrec(a + b / 4)}$`;
          break;
        case 3: // Table de 400
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombre(a * 4 * 100)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombre(
            a * 4 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 4: // Table de 40
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombre(a * 4 * 10)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombre(
            a * 4 * 10
          )} \\text{ est } ${tex_nombre(a * 10)}$`;
          break;
        case 5: // a,b avec a et b divisibles par 4
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombrec(a * 4 + (b * 4) / 100)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombrec(
            a * 4 + (b * 4) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le double ou le triple d'un nombre, calculer la moitiÃ© d'un nombre pair ou le tiers d'un multiple de 3
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM014
 */
function Double_moitie_tiers_triple() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Double, moitiÃ©, tiers, triple";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Double
          a = randint(2, 9);
          texte = `$\\text{Le double de }${a}$`;
          texte_corr = `$\\text{Le double de }${a} \\text{ est } ${a * 2}$`;
          break;
        case 2: // MoitiÃ©
          a = randint(2, 9) * 2;
          texte = `$\\text{La moitiÃ© de }${a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${a * 2} \\text{ est } ${a}$`;
          break;
        case 3: // Triple
          a = randint(2, 9);
          texte = `$\\text{Le triple de }${a}$`;
          texte_corr = `$\\text{Le triple de }${a} \\text{ est } ${a * 3}$`;
          break;
        case 4: // Tiers
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${a * 3}$`;
          texte_corr = `$\\text{Le tiers de }${a * 3} \\text{ est } ${a}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Les 2 facteurs peuvent terminer par aucun, 1, 2 ou 3 zÃ©ros
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence 6C10-2
 */
function Exercice_tables_de_multiplications_et_multiples_de_10(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.titre = "Tables de multiplications et multiples de 10";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    for (
      let i = 0, a, b, k1, k2, texte, texte_corr, melange;
      i < this.nb_questions;
      i++
    ) {
      a = couples[i][0];
      b = couples[i][1];
      if (a > 1) {
        k1 = choice([1, 10, 100, 1000]);
      } else {
        k1 = choice([10, 100, 1000]);
      }
      k2 = choice([1, 10, 100, 1000]);
      a = k1 * a;
      b = k2 * b;
      melange = randint(0, 1);
      if (melange == 1) {
        // Ã©change a et b pour que les multiplications ne soient pas toujours dans le mÃªme ordre (surtout lorsque tables n'a qu'un seul Ã©lÃ©ment)
        let c = a;
        a = b;
        b = c;
      }

      texte =
        "$ " + tex_nombre(a) + " \\times " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " \\times " +
        tex_nombre(b) +
        " = " +
        tex_nombre(a * b) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}

/**
 * Multiplier deux nombres dÃ©cimaux
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10-3
 */
function Exercice_tables_de_multiplications_et_decimaux(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.titre = "Tables de multiplications et nombres dÃ©cimaux";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    for (
      let i = 0, a, b, k1, k2, couple, texte, texte_corr;
      i < this.nb_questions;
      i++
    ) {
      a = couples[i][0];
      b = couples[i][1];
      couple = choice([
        [1, 10],
        [1, 100],
        [1, 1000],
        [10, 100],
        [10, 1000],
        [100, 100],
        [100, 1000],
      ]);
      k1 = couple[0];
      k2 = couple[1];
      a = Algebrite.eval(a / k1);
      b = Algebrite.eval(b / k2);
      if (a == 1) {
        a = 0.01;
      }
      if (b == 1) {
        b = 0.1;
      }
      texte =
        "$ " + tex_nombre(a) + " \\times " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " \\times " +
        tex_nombre(b) +
        " = " +
        tex_nombre(Algebrite.eval(a * b)) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}

/**
 * Additionner deux entiers
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10-4
 */
function Exercice_tables_d_additions(max = 20) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Addition de deux entiers";
  this.consigne = "Calculer";
  this.sup = max; // Le paramÃ¨tre accessible Ã  l'utilisateur sera la valeur maximale
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, this.sup);
      b = randint(2, this.sup);
      texte = "$ " + tex_nombre(a) + " + " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " + " +
        tex_nombre(b) +
        " = " +
        tex_nombre(a + b) +
        " $";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 99999];
}

/**
 * Simplifier une fraction, le facteur commun est infÃ©rieur Ã  une valeur donnÃ©e en paramÃ¨tre qui est 11 par dÃ©faut
 * @Auteur RÃ©mi Angot
 *  5N13
 */
function Exercice_fractions_simplifier(max = 11) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = max; // Correspond au facteur commun
  this.titre = "Simplification de fractions";
  this.consigne = "Simplifier les fractions suivantes.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux
    for (
      let i = 0, fraction, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions;
      i++
    ) {
      fraction = choice(liste_fractions); //
      a = fraction[0];
      b = fraction[1];
      k = randint(2, this.sup);
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme rÃ©ponse
      texte =
        "$ " +
        tex_fraction(k * a, k * b) +
        " = " +
        tex_fraction("\\phantom{00000000000000}", "") +
        " = " +
        tex_fraction("\\phantom{0000}", "") +
        " $";
      texte_corr =
        "$ " +
        tex_fraction(k * a, k * b) +
        " = " +
        tex_fraction(k + " \\times " + a, k + " \\times " + b) +
        " = " +
        tex_fraction(a, b) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Valeur maximale du facteur commun",
    99999,
  ];
}

/**
 * Ãcrire une fraction avec un nouveau dÃ©nominateur qui est un multiple de son dÃ©nominateur (ce multiple est infÃ©rieur Ã  une valeur maximale de 11 par dÃ©faut)
 * @Auteur RÃ©mi Angot
 * 5N13-2 et 6N41
 */
function Egalites_entre_fractions() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 11; // Correspond au facteur commun
  this.titre = "ÃgalitÃ©s entre fractions simples";
  this.consigne = "ComplÃ©ter les Ã©galitÃ©s.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux
    let liste_type_de_questions = combinaison_listes(
      [1, 1, 1, 1, 2],
      this.nb_questions
    );
    for (
      let i = 0, fraction, a, b, c, d, k, texte, texte_corr, cpt = 0;
      i < this.nb_questions;
      i++
    ) {
      if (liste_type_de_questions[i] == 1) {
        // Ã©galitÃ© entre 2 fractions
        fraction = choice(liste_fractions); //
        a = fraction[0];
        b = fraction[1];
        k = randint(2, this.sup);
        c = k * a;
        d = k * b;
        enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme fraction de dÃ©part
        texte = `$${tex_fraction(a, b)} = ${tex_fraction(
          "\\phantom{00000000000000}",
          "\\phantom{00000000000000}"
        )} = ${tex_fraction("\\phantom{0000}", d)}$`;
        texte_corr = `$${tex_fraction(a, b)} = ${tex_fraction(
          a + mise_en_evidence("\\times" + k),
          b + mise_en_evidence("\\times" + k)
        )} = ${tex_fraction(c, d)}$`;
      } else {
        //Ã©crire un entier sous la forme d'une fraction
        a = randint(1, 9);
        d = randint(2, 9);
        c = a * d;
        texte = `$${a} = ${tex_fraction(
          "\\phantom{00000000000000}",
          "\\phantom{00000000000000}"
        )} = ${tex_fraction("\\phantom{0000}", d)}$`;
        texte_corr = `$${a} = \\dfrac{${a}}{1} =${tex_fraction(
          a + mise_en_evidence("\\times" + d),
          "1" + mise_en_evidence("\\times" + d)
        )} = ${tex_fraction(c, d)}$`;
      }

      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale du facteur commun", 99];
}

/**
 * Un nombre est-il divisible par :
 *
 * * 2, 5, 10 ?
 * * 3, 9 ?
 * * 2, 3, 5, 9, 10 ?
 * * 2, 3, 5, 9, 10  et un autre nombre qui peut Ãªtre 7, 13, 17, ou 19 ?
 * @Auteur RÃ©mi Angot
 * 6N43
 */
function Criteres_de_divisibilite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 4; // Correspond au facteur commun
  this.titre = "CritÃ¨res de divisibilitÃ©";
  this.consigne = "RÃ©pondre aux questions suivantes en justifiant.";
  this.spacing = 2;
  this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_des_exercices_disponibles;
    if (this.sup == 1) {
      liste_des_exercices_disponibles = [2, 5, 10];
    }
    if (this.sup == 2) {
      liste_des_exercices_disponibles = [3, 9];
    }
    if (this.sup == 3) {
      liste_des_exercices_disponibles = [2, 3, 5, 9, 10];
    }
    if (this.sup > 3) {
      liste_des_exercices_disponibles = [2, 3, 5, 9, 10, "autre"];
    }
    let liste_type_de_questions = combinaison_listes(
      liste_des_exercices_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, fraction, n, u, texte, texte_corr, somme_string, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 2:
          u = randint(1, 2);
          n = randint(10, 999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $2$ ?`;
          if (u % 2 == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $2$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $2$.`;
          }
          break;

        case 3:
          n = choice([randint(100, 999), randint(10000, 99999)]).toString(); // transformÃ© en string pour avoir accÃ¨s aux chiffres
          somme_string = somme_des_chiffre(n);
          texte = `$${tex_nombre(n)}$ est-il divisible par $3$ ?`;
          if (calcul(somme_string) % 3 == 0) {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=3\\times${
              calcul(somme_string) / 3
            }$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ est divisible par $3$ donc $${tex_nombre(
              n
            )}$ est divisible par $3$.`;
          } else {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=3\\times${
              (calcul(somme_string) - (calcul(somme_string) % 3)) / 3
            }+${calcul(somme_string) % 3}$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ n'est pas divisible par $3$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $3$.`;
          }
          break;

        case 9:
          n = choice([randint(100, 999), randint(10000, 99999)]).toString(); // transformÃ© en string pour avoir accÃ¨s aux chiffres
          somme_string = somme_des_chiffre(n);
          texte = `$${tex_nombre(n)}$ est-il divisible par $9$ ?`;
          if (calcul(somme_string) % 9 == 0) {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=9\\times${
              calcul(somme_string) / 9
            }$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ est divisible par $9$ donc $${tex_nombre(
              n
            )}$ est divisible par $9$.`;
          } else {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=9\\times${
              (calcul(somme_string) - (calcul(somme_string) % 9)) / 9
            }+${calcul(somme_string) % 9}$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ n'est pas divisible par $9$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $9$.`;
          }
          break;

        case 5:
          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]); // 1 fois sur 2 Ã§a sera divisible par 5
          n = randint(10, 9999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $5$ ?`;
          if (u % 5 == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $5$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $5$.`;
          }
          break;

        case 10:
          u = choice([randint(1, 9), 0]); // 1 fois sur 2 Ã§a sera divisible par 10
          n = randint(10, 9999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $10$ ?`;
          if (u == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $10$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $10$.`;
          }
          break;

        case "autre":
          n = randint(100, 999);
          u = choice([7, 7, 7, 7, 13, 17, 19]);
          if (u == 7) {
            n = choice(
              [randint(10, 99) * 10 + 7],
              7 * randint(11, 99),
              randint(100, 999)
            ); //un nombre qui se termine par 7, un divisible par 7, un au hasard
          } else {
            n = choice(
              [randint(10, 99) * 100 + u],
              u * randint(11, 99),
              randint(100, 999)
            ); //un nombre qui se termine par u, un divisible par u, un au hasard
          }
          texte = `$${tex_nombre(n)}$ est-il divisible par $${u}$ ?`;
          texte_corr = `On ne connait pas de critÃ¨re de divisibilitÃ© par $${u}$, on calcule donc la division euclidienne de $${tex_nombre(
            n
          )}$ par $${u}$.<br>`;
          if (n % u == 0) {
            texte_corr += `$${tex_nombre(n)}=${u}\\times${tex_nombre(
              n / u
            )}$<br>`;
            texte_corr += `Le reste de la division euclidienne est nul donc $${tex_nombre(
              n
            )}$ est divisible par $${u}$.`;
          } else {
            texte_corr += `$${tex_nombre(n)}=${u}\\times${(n - (n % u)) / u}+${
              n % u
            }$<br>`;
            texte_corr += `Le reste de la division euclidienne n'est pas nul donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $${u}$.`;
          }

          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Choix des questions",
    4,
    "1 : CritÃ¨res de divisibilitÃ© par 2, 5, 10\n\
2 : CritÃ¨res de divisibilitÃ© par 3,9\n3 : CritÃ¨res de divisibilitÃ© par 2, 3, 5, 9, 10\n4 : Avec ou sans critÃ¨re de divisibilitÃ©",
  ];
}

/**
 * Un nombre est-il divisible par 2, 3, 5, 9 ?
 *
 *
 * @Auteur RÃ©mi Angot
 * 6N43-2
 */
function Tableau_criteres_de_divisibilite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 4; // Correspond au facteur commun
  this.titre = "CritÃ¨res de divisibilitÃ©";
  this.consigne =
    "ComplÃ©ter le tableau en mettant oui ou non dans chaque case.";
  this.spacing = 1;
  this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_des_nombres_possibles = [
      "div2",
      "div3",
      "div39",
      "div5",
      "div25",
      "div23",
      "div239",
      "div35",
      "div2359",
      "divrien",
    ];
    // divisible par 2, divisible par 3, divisible par 3 et 9...

    let liste_des_types_de_nombres = combinaison_listes(
      liste_des_nombres_possibles,
      this.nb_questions
    );
    let tableau_de_nombres = [];
    let tableau_de_nombres_avec_correction = [];
    let liste_de_facteurs = [
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151,
      157,
      163,
      167,
      173,
      179,
      181,
      191,
      193,
      197,
      199,
      211,
      223,
      227,
      229,
      233,
      239,
      241,
      251,
      257,
      263,
      269,
      271,
      277,
      281,
      283,
      293,
    ];
    for (let i = 0; i < this.nb_questions; i++) {
      switch (liste_des_types_de_nombres[i]) {
        case "div2":
          tableau_de_nombres[i] = 2 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div3":
          tableau_de_nombres[i] = 3 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div39":
          tableau_de_nombres[i] = 9 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} \\\\`;
          break;
        case "div5":
          tableau_de_nombres[i] = 5 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div25":
          tableau_de_nombres[i] = 10 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div23":
          tableau_de_nombres[i] = 6 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div239":
          tableau_de_nombres[i] = 18 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} \\\\`;
          break;
        case "div35":
          tableau_de_nombres[i] = 15 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div2359":
          tableau_de_nombres[i] = 90 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
        case "divrien":
          tableau_de_nombres[i] = choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
      }
    }

    if (sortie_html) {
      texte = `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|c|}\n`;
    } else {
      texte = `$\\begin{array}{|l|c|c|c|c|}\n`;
    }

    texte += `\\hline\n`;
    texte += `\\text{... est divisible} & \\text{par }2 & \\text{par }3 & \\text{par }5 & \\text{par }9\\\\\n`;
    texte += `\\hline\n`;
    for (var i = 0; i < this.nb_questions; i++) {
      texte += `${tex_nombre(tableau_de_nombres[i])} & & & & \\\\\n`;
      texte += `\\hline\n`;
    }

    texte += `\\end{array}\n$`;

    if (sortie_html) {
      texte_corr = `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|c|}\n`;
    } else {
      texte_corr = `$\\begin{array}{|l|c|c|c|c|}\n`;
    }
    texte_corr += `\\hline\n`;
    texte_corr += `\\text{... est divisible} & \\text{par }2 & \\text{par }3 & \\text{par }5 & \\text{par }9\\\\\n`;
    texte_corr += `\\hline\n`;
    for (var i = 0; i < this.nb_questions; i++) {
      texte_corr += tableau_de_nombres_avec_correction[i];
      texte_corr += `\\hline\n`;
    }

    texte_corr += `\\end{array}$\n`;

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
}

/**
 * Exercice sur la notion de proportionnalitÃ© (ou pas)
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6P10
 */
function Proportionnalite_pas_proportionnalite() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ReconnaÃ®tre une situation de proportionnalitÃ©";
  this.consigne = "RÃ©pondre aux questions posÃ©es en justifiant";
  sortie_html ? this.spacing = 1.5 : this.spacing = 1.4;
  sortie_html ? this.spacing_corr = 1.5 : this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;
  this.nb_cols = 1;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_index_disponibles = [0, 1, 2, 3, 4];
    let liste_index = combinaison_listes(
      liste_index_disponibles,
      this.nb_questions
    );
    let liste_choix_disponibles = [1, 2, 3, 4, 5, 6];
    let liste_choix = combinaison_listes(
      liste_choix_disponibles,
      this.nb_questions
    );
    let liste_de_lieux = [
      "dans un magasin de bricolage",
      "dans une animalerie",
      "au supermarchÃ© local",
      "Ã  l'Ã©picerie",
      "dans la boutique du musÃ©e",
    ];
    let liste_de_choses = [[]];
    let liste_de_prix_unit = [[]];
    let tirages = [[]];
    let index3 = [];
    let villes = ["Moscou", "Berlin", "Paris", "Bruxelles", "Rome", "Belgrade"];
    let verbes = [
      "double",
      "triple",
      "quadruple",
      "est multipliÃ© par 5",
      "est multipliÃ© par 6",
    ];
    liste_de_choses[0] = [
      "articles",
      "outils",
      "accessoires",
      "piÃ¨ces d'outillage",
      "pinceaux",
      "ampoules",
      "tournevis",
      "spatules",
      "raccords de tuyaux",
    ];
    liste_de_choses[1] = [
      "poissons rouges",
      "canetons",
      "perruches",
      "phasmes",
      "colliers anti-puces",
      "souris",
      "lapereaux",
      "paquets de graines",
    ];
    liste_de_choses[2] = [
      "sets de tables",
      "verres",
      "assiettes",
      "os Ã  macher",
      "dosettes de cafÃ©",
      "packs de lait",
      "paquets de pÃ¢tes",
    ];
    liste_de_choses[3] = [
      "mangues",
      "ananas",
      "fruits de la passion",
      "melons",
      "paquets de madeleines de Commercy",
      "bergamottes",
      "bredeles",
      "pots de cancoillotte",
    ];
    liste_de_choses[4] = [
      "cartes",
      "livres",
      "gravures",
      "puzzles",
      "maquettes",
      "roches",
      "jeux de sociÃ©tÃ©",
    ];
    liste_de_prix_unit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5];
    liste_de_prix_unit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8];
    liste_de_prix_unit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3];
    liste_de_prix_unit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3];
    liste_de_prix_unit[4] = [0.5, 5, 7, 13.5, 10, 15, 20];

    for (
      let i = 0,
        x,
        y,
        z,
        pu,
        n,
        p,
        somme,
        prenoms,
        index1,
        index2,
        objet,
        met,
        choix,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_choix[i]) {
        case 1:
          index1 = liste_index[i];
          prenoms = [prenomF(), prenomM()];
          index2 = randint(0, liste_de_choses[index1].length - 1);
          objet = liste_de_choses[index1][index2];
          pu =
            liste_de_prix_unit[index1][index2] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          y = randint(2, 5);
          somme = calcul(y * pu, 2);
          p = y * randint(2, 5);
          z = calcul(p * pu, 2);
          texte = `${prenoms[0]} achÃ¨te ${liste_de_lieux[index1]} des ${objet}. `;
          texte += `Elle  repart avec ${y} ${objet} pour $${tex_prix(
            somme
          )}$â¬. ${
            prenoms[1]
          } achÃ¨te quant Ã  lui, au mÃªme endroit ${p} ${objet} pour $${tex_prix(
            z
          )}$â¬.<br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quantitÃ© achetÃ©e  ?<br>`;
          texte_corr = `${prenoms[0]} dÃ©pense $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>`;
          texte_corr = `${prenoms[1]} a achetÃ©  $${mise_en_evidence(
            tex_nombre(p / y)
          )}$ fois la quantitÃ© des ${objet} achetÃ©e par ${
            prenoms[0]
          } pour $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>Il a payÃ© $${tex_prix(z)}$â¬ $=${mise_en_evidence(
            tex_nombrec(p / y)
          )}\\times${mise_en_evidence(tex_prix(somme), "blue")}$â¬.<br>`;
          texte_corr += `A l'aide de ces donnÃ©es, on constate que le prix des ${objet} et leur quantitÃ© sont tous les deux multipliÃ©s par le mÃªme nombre, donc ces deux grandeurs sont proportionnelles.<br>`;
          break;
        case 2:
          index1 = liste_index[i];
          prenoms = [prenomF(), prenomM()];
          index2 = randint(0, liste_de_choses[index1].length - 1);
          objet = liste_de_choses[index1][index2];
          pu =
            liste_de_prix_unit[index1][index2] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          y = randint(2, 5);
          somme = calcul(y * pu, 2);
          pu -= 0.1;
          p = y * randint(2, 5);
          z = calcul(p * pu, 2);
          texte = `${prenoms[0]} achÃ¨te ${liste_de_lieux[index1]} des ${objet}. `;
          texte += `Elle a obtenu ${y} ${objet} pour $${tex_prix(somme)}$â¬. ${
            prenoms[1]
          } achÃ¨te quant Ã  lui, au mÃªme endroit ${p} ${objet} pour $${tex_prix(
            z
          )}$â¬.<br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quantitÃ© achetÃ©e  ?<br>`;
          texte_corr = `${prenoms[0]} dÃ©pense $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>`;
          texte_corr = `${prenoms[1]} a achetÃ©  $${mise_en_evidence(
            tex_nombrec(p / y)
          )}$ fois la quantitÃ© des ${objet} achetÃ©e par ${
            prenoms[0]
          } pour $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>Il a payÃ© $${tex_prix(z)}$â¬.<br>Mais $${mise_en_evidence(
            tex_nombrec(p / y)
          )}\\times${mise_en_evidence(tex_prix(somme), "blue")}$â¬ $=${tex_prix(
            calcul((p * somme) / y)
          )}$â¬.<br>`;
          texte_corr += `Ã l'aide de ces donnÃ©es, on constate que le prix unitaire des ${objet} n'est pas le mÃªme pour ${prenoms[0]} qui en a achetÃ© $${y}$ que pour ${prenoms[1]} qui en a achetÃ© ${p}, donc ces deux grandeurs ne sont pas proportionnelles.<br>`;
          break;
        case 3:
          prenoms = [prenomF(), prenomM()];
          x = randint(5, 20);
          y = randint(5, 20, x) * 100;
          x = x * 100;
          n = arrondi(calcul((x / 60) * (1 + randint(0, 2) * 0.2)), 0);
          p = arrondi(calcul((y / 60) * (1 + randint(0, 2) * 0.2)), 0);
          index1 = calcul(x / n); //vitesse fille
          index2 = calcul(y / p); //vitesse garÃ§on

          texte = `${prenoms[0]} habite Ã  $${tex_nombre(x)}$ m du collÃ¨ge. Elle met ${n} minutes pour s'y rendre depuis chez elle.<br>`;
          texte += `${prenoms[1]}, lui, habite Ã  $${tex_nombre(y)}$ m du collÃ¨ge. Il met ${p} minutes pour s'y rendre depuis chez lui.<br>`;
          texte += `Le temps mis pour venir au collÃ¨ge est-il proportionnel Ã  la distance du foyer au collÃ¨ge ?<br>`;
          texte_corr = `${prenoms[0]} parcourt chaque minute environ $${tex_nombrec(arrondi(index1, 1))}$ m.<br>`;
          texte_corr += `${
            prenoms[1]
          } parcourt chaque minute environ $${tex_nombrec(arrondi(index2, 1))}$ m.<br>`;
          if (index1 == index2)
            texte_corr += `Pour ces deux Ã©lÃ¨ves le temps mis et la distance parcourue sont proportionnelles (si l'on compare leur vitesse moyenne)`;
          else
            texte_corr += `Pour ces deux Ã©lÃ¨ves le temps mis et la distance parcourue ne sont pas proportionnelles (si l'on compare leur vitesse moyenne).<br>`;
          break;
        case 4:
          prenoms = [prenomF(), prenomM()];
          x = randint(5, 20);
          y = x + randint(25, 35);
          texte = `${prenoms[0]} vient d'avoir ${x} ans cette annÃ©e. Son pÃ¨re ${prenoms[1]} vient de fÃªter  son ${y}Ã¨me anniversaire.<br>`;
          texte += `L'Ã¢ge de son pÃ¨re est-il proportionnel Ã  l'Ã¢ge de ${prenoms[0]} ?<br>`;
          texte_corr = `Aujourd'hui la diffÃ©rence d'Ã¢ge entre ${
            prenoms[0]
          } et ${prenoms[1]} est de ${y - x} ans.<br>`;
          texte_corr += `Dans ${x} annÃ©es, ${prenoms[0]} aura ${
            2 * x
          } ans, c'est Ã  dire le double d'aujourd'hui.<br>`;
          texte_corr += `Son pÃ¨re ${prenoms[1]} aura ${
            x + y
          } ans cette annÃ©e-lÃ .<br>Quand l'Ã¢ge de ${
            prenoms[0]
          } double, l'Ã¢ge de ${prenoms[1]} ne double pas, donc l'Ã¢ge de ${
            prenoms[0]
          } et l'Ã¢ge de son pÃ¨re ne sont pas propotionnels.<br>`;
          break;
        case 5:
          index1 = randint(0, 5);
          index2 = randint(0, 4);
          texte = `Une Ã©pidÃ©mie se rÃ©pand dans la ville de ${villes[index1]}.<br>`;
          texte += `Le nombre de malades ${verbes[index2]} tous les ${
            index2 + 2
          } jours.<br>`;
          texte += `Le nombre de malades est-il proportionnel au nombre de jours passÃ©s depuis le dÃ©but de l'Ã©pidÃ©mie ?<br>`;
          texte_corr = `Admettons qu'il y ait 10 malades le premier jour. Le ${
            1 + 2 + index2
          }Ã¨me jour il y aura $10 \\times ${index2 + 2} = ${
            10 * (index2 + 2)
          }$ malades.<br>`;
          texte_corr += `Entre le premier jour et le ${
            3 + index2
          }Ã¨me jour, le nombre de malades est multipliÃ© par ${
            index2 + 2
          } mais le nombre de jours est multipliÃ© par ${3 + index2}.<br>`;
          texte_corr += `Donc le nombre de malades n'est pas proportionnel au nombre de jours passÃ©s.<br>`;
          break;
        case 6:
          prenoms = [prenomF(), prenomM()];
          index1 = randint(0, 5);
          objet = liste_de_choses[4][index1];
          index2 = randint(0, 4);
          pu =
            liste_de_prix_unit[4][index1] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          n = randint(2, 6);
          p = randint(0, 3);
          tirages[0] = [n, n * pu];
          tirages[1] = [n + 1, (n + 1) * pu];
          tirages[2] = [2 * n + 1, (2 * n + 1) * pu];
          tirages[3] = [3 * n + 3, (3 * n + 3) * pu];
          met = choice([true, false]);
          if (!met) tirages[p][1] -= 0.1;
          texte = `${prenoms[1]} relÃ¨ve les prix des ${objet} sur un catalogue par correspondance en fonction de la quantitÃ© saisie dans le panier<br>`;
          texte += `Il note les prix dans le tableau suivant :<br> <br>`;
          texte += `$\\def\\arraystretch{1.5}\\begin{array}{|c`; // construction du tableau des effectifs en un seul morceau
          for (let j = 0; j <= tirages.length; j++) texte += `|c`;
          texte += `|}\\hline  \\text{${objet}}`;
          for (let j = 0; j < tirages.length; j++) texte += `&${tirages[j][0]}`;
          texte += `\\\\\\hline \\text{Prix (en â¬})`;
          for (let j = 0; j < tirages.length; j++)
            texte += `&${tex_prix(arrondi(tirages[j][1], 2))}`;
          texte += `\\\\\\hline\\end{array}$<br> <br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quatitÃ© achetÃ©e ?<br>`;
          texte_corr = `Il faut calculer le prix unitaire des ${objet} dans chaque cas de figure :<br><br>`;
          if (met) index3 = range(3);
          else index3 = range(3, [p]);
          texte_corr += `$`;
          for (let j = 0; j < index3.length; j++) {
            texte_corr += `\\dfrac{${tex_prix(
              arrondi(tirages[index3[j]][1], 2)
            )}}{${tirages[index3[j]][0]}}=`;
          }
          texte_corr += `${tex_prix(pu)}$<br><br>`;
          if (!met) {
            texte_corr += `Mais $\\dfrac{${tex_prix(
              arrondi(tirages[p][1], 2)
            )}}{${tirages[p][0]}}=${tex_prix(
              arrondi(calcul(tirages[p][1] / tirages[p][0]), 2)
            )}$â¬/${objet.substring(0, objet.length - 1)}<br>`;
            texte_corr += `Le prix des ${objet} n'est pas proportionnel Ã  leur nombre.<br>`;
          } else {
            texte_corr += `Le prix des ${objet} est bien proportionnel Ã  leur nombre.<br>`;
          }
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * On donne une relation de proportionnalitÃ© du type n objets coÃ»tent xâ¬ et on demande le prix de y objets
 * et le nombre d'objets qu'on peut acheter avec zâ¬.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6P11
*/
function Proportionnalite_par_linearite() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "RÃ©soudre des problÃ¨mes de proportionnalitÃ© en utilisant la linÃ©aritÃ© simple";
  this.consigne = "RÃ©pondre aux questions posÃ©es en justifiant";
  sortie_html ? (this.spacing = 2) : (this.spacing = 1);
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1);
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_index_disponibles = [0, 1, 2, 3, 4];
    let liste_index = combinaison_listes(
      liste_index_disponibles,
      this.nb_questions
    );
    let liste_de_lieux = [
      "dans un magasin de bricolage",
      "dans une animalerie",
      "au supermarchÃ© local",
      "Ã  l'Ã©picerie",
      "dans la boutique du musÃ©e",
    ];
    let liste_de_choses = [[]];
    let liste_de_prix_unit = [[]];
    liste_de_choses[0] = [
      "articles",
      "outils",
      "accessoires",
      "piÃ¨ces d'outillage",
      "pinceaux",
      "ampoules",
      "tournevis",
      "spatules",
      "raccords de tuyaux",
    ];
    liste_de_choses[1] = [
      "poissons rouges",
      "cannetons",
      "perruches",
      "phasmes",
      "colliers anti-puces",
      "souris",
      "lapereaux",
      "paquets de graines",
    ];
    liste_de_choses[2] = [
      "sets de tables",
      "verres",
      "assiettes",
      "os Ã  macher",
      "dosettes de cafÃ©",
      "packs de lait",
      "paquets de pÃ¢tes",
    ];
    liste_de_choses[3] = [
      "mangues",
      "ananas",
      "fruits de la passion",
      "melons",
      "paquets de madeleines de Commercy",
      "bergamottes",
      "bredeles",
      "pots de cancoillotte",
    ];
    liste_de_choses[4] = [
      "cartes",
      "livres",
      "gravures",
      "puzzles",
      "maquettes",
      "roches",
      "jeux de sociÃ©tÃ©",
    ];
    liste_de_prix_unit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5];
    liste_de_prix_unit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8];
    liste_de_prix_unit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3];
    liste_de_prix_unit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3];
    liste_de_prix_unit[4] = [0.5, 5, 7, 13.5, 10, 15, 20];
    for (
      let i = 0,
        x,
        y,
        z,
        pu,
        n,
        p,
        somme,
        prenoms,
        index1,
        index2,
        objet,
        met,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      index1 = liste_index[i];
      prenoms = [prenomF(), prenomM()];
      index2 = randint(0, liste_de_choses[index1].length - 1);
      objet = liste_de_choses[index1][index2];
      pu =
        liste_de_prix_unit[index1][index2] *
        (1 + randint(1, 2) * 0.2 * randint(-1, 1));
      n = randint(3, 6);
      y = n * randint(2, 5);
      x = calcul(n * pu, 2);
      somme = calcul(y * pu, 2);
      met = false;
      while (met == false) {
        p = n * randint(2, 5);
        if (p != y) met = true;
      }
      z = calcul(p * pu, 2);

      texte = `${prenoms[0]} a repÃ©rÃ© ${liste_de_lieux[index1]} des ${objet} qui l\'intÃ©ressent.<br> `;
      texte += `Elle lit que ${n} ${objet} coÃ»tent ${tex_prix(x)} â¬. `;
      texte += `Elle veut en acheter ${y}.<br> Combien va-t-elle dÃ©penser ?<br>`;
      texte_corr = `${y} ${objet}, c'est ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${texte_en_couleur(
        n,
        "blue"
      )} ${objet}.<br> Si ${texte_en_couleur(
        n,
        "blue"
      )} ${objet} coÃ»tent ${tex_prix(x)} â¬, alors ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${texte_en_couleur(
        n,
        "blue"
      )} ${objet} coutent ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${tex_prix(x)} â¬.<br>`;
      texte_corr += `Donc ${prenoms[0]} dÃ©pensera ${texte_en_couleur(
        tex_nombrec(y / n)
      )} $\\times$ ${tex_prix(x)} â¬ = ${tex_prix(somme)} â¬.<br>`;
      texte += `${
        prenoms[1]
      } veut lui aussi acheter ces ${objet}. Il dispose de ${tex_prix(
        z
      )} â¬.<br> Combien peut-il en acheter ?<br>`;
      texte_corr += `${tex_prix(z)} â¬, c'est ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${tex_prix(x)} â¬.<br> Si avec ${tex_prix(
        x
      )} â¬ on peut acheter ${texte_en_couleur(
        n,
        "blue"
      )} ${objet}, alors avec ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${tex_prix(x)} â¬, on peut acheter ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${texte_en_couleur(n, "blue")} ${objet}.<br>`;
      texte_corr += `Donc ${prenoms[1]} pourra acheter ${texte_en_couleur(
        tex_nombrec(z / x)
      )} $\\times$ ${texte_en_couleur(n, "blue")} = ${p} ${objet}.<br>`;
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1) puis donner l'Ã©criture dÃ©cimale.
 * @Auteur RÃ©mi Angot
 * 6N20-2
 */
function Exercice_fractions_differentes_ecritures() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1) puis donner l'Ã©criture dÃ©cimale.";
  this.consigne =
    "Ãcrire sous la forme de la somme d'un nombre entier et d'une fraction infÃ©rieure Ã  1 puis donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 5, ",2"],
      [2, 5, ",4"],
      [3, 5, ",6"],
      [4, 5, ",8"],
      [1, 8, ",125"],
      [3, 8, ",375"],
      [1, 10, ",1"],
      [3, 10, ",3"],
      [7, 10, ",7"],
      [9, 10, ",9"],
    ]; // Fractions irrÃ©ductibles avec une Ã©criture dÃ©cimale exacte
    liste_fractions1 = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 8, ",125"],
    ];
    liste_fractions1.push(
      choice([
        [1, 10, ",1"],
        [2, 10, ",2"],
        [3, 10, ",3"],
        [7, 10, ",7"],
        [9, 10, ",9"],
      ])
    );
    liste_fractions1.push(
      choice([
        [1, 5, ",2"],
        [2, 5, ",4"],
        [3, 5, ",6"],
        [4, 5, ",8"],
      ])
    ); // liste_fractions pour les 6 premiÃ¨res questions
    for (
      let i = 0, cpt = 0, fraction, a, b, c, n, texte, texte_corr;
      i < this.nb_questions && cpt < 50;

    ) {
      if (i < 6) {
        fraction = choice(liste_fractions1);
        enleve_element(liste_fractions1, fraction);
      } else {
        fraction = choice(liste_fractions);
      }
      //
      c = fraction[0];
      b = fraction[1];
      n = randint(1, 4);
      a = n * b + c;
      ed = n + fraction[2];
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme partie dÃ©cimale
      texte =
        "$ " +
        tex_fraction(a, b) +
        " = \\phantom{0000} + " +
        tex_fraction("\\phantom{00000000}", "") +
        " =  $";
      texte_corr =
        "$ " +
        tex_fraction(a, b) +
        " = " +
        n +
        "+" +
        tex_fraction(c, b) +
        " = " +
        ed +
        " $";

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * @Auteur RÃ©mi Angot
 * 6N20
 */
function Exercice_fractions_decomposer() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1).";
  this.consigne =
    "Ãcrire sous la forme de la somme d'un nombre entier et d'une fraction infÃ©rieure Ã  1.";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.sup = false; // Donner l'Ã©criture dÃ©cimale

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 5, ",2"],
      [2, 5, ",4"],
      [3, 5, ",6"],
      [4, 5, ",8"],
      [1, 8, ",125"],
      [3, 8, ",375"],
      [1, 10, ",1"],
      [3, 10, ",3"],
      [7, 10, ",7"],
      [9, 10, ",9"],
    ]; // Fractions irrÃ©ductibles avec une Ã©criture dÃ©cimale exacte
    liste_fractions1 = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 8, ",125"],
    ];
    liste_fractions1.push(
      choice([
        [1, 10, ",1"],
        [2, 10, ",2"],
        [3, 10, ",3"],
        [7, 10, ",7"],
        [9, 10, ",9"],
      ])
    );
    liste_fractions1.push(
      choice([
        [1, 5, ",2"],
        [2, 5, ",4"],
        [3, 5, ",6"],
        [4, 5, ",8"],
      ])
    ); // liste_fractions pour les 6 premiÃ¨res questions
    for (
      let i = 0, fraction, a, b, c, n, texte, texte_corr;
      i < this.nb_questions;
      i++
    ) {
      if (i < 6) {
        fraction = choice(liste_fractions1);
        enleve_element(liste_fractions1, fraction);
      } else {
        fraction = choice(liste_fractions);
      }
      //
      c = fraction[0];
      b = fraction[1];
      n = randint(1, 4);
      a = n * b + c;
      ed = n + fraction[2];
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme partie dÃ©cimale
      texte =
        "$ " +
        tex_fraction(a, b) +
        " = \\phantom{0000} + " +
        tex_fraction("\\phantom{00000000}", "") +
        " $";
      texte_corr =
        "$ " + tex_fraction(a, b) + " = " + n + "+" + tex_fraction(c, b) + " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}
/**
 * 6N14
 * ReprÃ©senter des fractions simples avec des disques partagÃ©s de faÃ§on adÃ©quate.
 * @Auteur Jean-Claude Lhote
 */
function Representer_une_fraction() {
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "ReprÃ©senter des fractions";
    this.consigne = "";
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 3;
  
    this.nouvelle_version = function (numero_de_l_exercice) {
      this.liste_questions = []; // Liste de questions
      this.liste_corrections = []; // Liste de questions corrigÃ©es
      let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, k, carreaux,objets
      ppc=20
        if (sortie_html) {
          sc=0.5
        } else {
          sc=0.4
        }
  
      let  params = {
        xmin: -2.2,
        ymin: -2.2,
        xmax: 18,
        ymax: 3,
        pixelsParCm: ppc,
        scale: sc,
      },den,num,f
      
      let liste = combinaison_listes([2,3,4,5,6], this.nb_questions);
  
      for (
        let i = 0, texte, texte_corr, cpt = 0;
        i < this.nb_questions && cpt < 50;) {
        objets=[]
        den=liste[i]
        num=randint(1,den*3)
        f=fraction(num,den)
        texte=`Sachant qu'un disque reprÃ©sente une unitÃ©, reprÃ©senter la fraction $${f.texFraction()}$ en coloriant la part correspondante.<br>`
        texte+=mathalea2d(params,fraction(den*3,den).representation(0,0,2,0,'gateau','white'))
        texte_corr =`Voici sur ces dessins, coloriÃ© en bleu, la part correspondante Ã  la fraction $${f.texFraction()}$ :<br>`
        texte_corr += mathalea2d(params,f.representation(0,0,2,randint(0,den-1),'gateau','blue'))
        if (this.liste_questions.indexOf(texte) == -1) {
          // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
          this.liste_questions.push(texte);
          this.liste_corrections.push(texte_corr);
          i++;
        }
        cpt++;
      }
      liste_de_question_to_contenu(this);
    };
    this.besoin_formulaire_numerique = [
      "Type de cahier",
      3,
      `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
    ];

  
}

/**
 * Conversions de longueur en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * * 1 : De dam, hm, km vers m
 * * 2 : De dm, cm, mm vers m
 * * 3 : Conversions en mÃ¨tres
 * * 4 : Toutes les conversions de longueurs
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 */
function Exercice_conversions_de_longueurs(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions de longueurs";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      [" da", 10],
      [" h", 100],
      [" k", 1000],
    ];
    let prefixe_div = [
      [" d", 10],
      [" c", 100],
      [" m", 1000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    let liste_unite1 = combinaison_listes([0,1,2,3,4,5,6],this.nb_questions)
    let liste_de_k = combinaison_listes([0, 1, 2], this.nb_questions);
    for (
      let i = 0,
        a,
        k,
        div,
        resultat,
        type_de_questions,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let type_de_questions
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      // k = randint(0,2); // Choix du prÃ©fixe
      k = liste_de_k[i]; //PlutÃ´t que de prendre un prÃ©fix au hasard, on alterne entre 10,100 et 1000
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";

        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (div && type_de_questions < 4) {
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          tex_nombre(prefixe_div[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else {
        // pour type de question = 4
        let unite1 = liste_unite1[i]
        let unite2 = randint(Math.max(0,unite1-3),Math.min(unite1+3,6),unite1)
        if (unite1>unite2){
          [unite1,unite2]=[unite2,unite1]
        }
        let ecart = unite2-unite1; // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, ecart)) +
            tex_texte(liste_unite[unite1]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, ecart)) +
            tex_texte(liste_unite[unite2]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "$";
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : De dam, hm, km vers m\n\
2 : De dm, cm, mm vers m\n3 : Conversions en mÃ¨tres\n4 : Toutes les conversions de longueurs",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions  mÃ¨tres, litres, grammes, octets (et euros pour la version LaTeX) en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * * 1 : De da, h, k vers l'unitÃ© de rÃ©fÃ©rence
 * * 2 : De d, c, m vers l'unitÃ© de rÃ©fÃ©rence
 * * 3 : Multiplications ou divisions vers l'unitÃ© de rÃ©fÃ©rence
 * * 4 : Conversions d'octets
 * * 5 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 */
function Exercice_conversions(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre =
    "Conversions de longueurs, masses, contenance, prix ou unitÃ©s informatiques";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.correction_avec_des_fractions = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      ["da", 10],
      ["h", 100],
      ["k", 1000],
    ]; //['M',1000000],['G',1000000000],['T',1000000000000]];
    let prefixe_div = [
      ["d", 10],
      ["c", 100],
      ["m", 1000],
    ]; //['$\\mu{}$',1000000]];
    for (
      let i = 0,
        a,
        k,
        div,
        resultat,
        unite,
        type_de_questions,
        texte,
        texte_corr,
        liste_unite_info,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      k = randint(0, 2); // Choix du prÃ©fixe
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        liste_unite_info = ["o", "ko", "Mo", "Go", "To"];
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir
        if (k < 2) {
          // Choix de l'unitÃ©
          unite = choice(["m", "L", "g"]);
        } else if (k == 2) {
          if (sortie_html) {
            unite = choice(["m", "L", "g"]); // pas de signe â¬ pour KaTeX
          } else {
            unite = choice(["m", "L", "g", "â¬"]);
          }
        } else {
          unite = "o";
        }
        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (
        div &&
        type_de_questions < 4 &&
        this.correction_avec_des_fractions
      ) {
        unite = choice(["m", "L", "g"]);
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_fraction(tex_nombre(a), tex_nombre(prefixe_div[k][1])) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (div && type_de_questions < 4) {
        unite = choice(["m", "L", "g"]);
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          tex_nombre(prefixe_div[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else {
        // pour type de question = 4
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 1000 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite2]) +
            " = \\dotfill " +
            tex_texte(liste_unite_info[unite1]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite2]) +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, 3 * ecart)) +
            tex_texte(liste_unite_info[unite1]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite_info[unite1]) +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite1]) +
            " = \\dotfill " +
            tex_texte(liste_unite_info[unite2]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite1]) +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, 3 * ecart)) +
            tex_texte(liste_unite_info[unite2]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite_info[unite2]) +
            "$";
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    5,
    "1 : De da, h, k vers l'unitÃ© de rÃ©fÃ©rence\n\
2 : De d, c, m vers l'unitÃ© de rÃ©fÃ©rence\n3 : Multiplications ou divisions vers l'unitÃ© de rÃ©fÃ©rence\n4 : Conversions avec les octets\n5: Toutes les conversions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions d'aires en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * Dans la correction, on montre que l'on multiplie ou divisie Ã  2 reprises par le coefficient donnÃ© par le prÃ©fixe
 *
 * * 1 : De damÂ², hmÂ², kmÂ² vers mÂ²
 * * 2 : De dmÂ², cmÂ², mmÂ² vers mÂ²
 * * 3 : Conversions en mÃ¨tres-carrÃ©s
 * * 4 : Conversions avec des multiplications ou des divisions
 * * 5 : Conversions avec des ares, des centiares et des hectares
 * * 6 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M23
 */
function Exercice_conversions_aires(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions d'aires";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      [" da", "\\times10\\times10", 100],
      [" h", "\\times100\\times100", 10000],
      [" k", "\\times1~000\\times1~000", 1000000],
    ];
    let prefixe_div = [
      [" d", "\\div10\\div10", 100],
      [" c", "\\div100\\div100", 10000],
      [" m", "\\div1~000\\div1~000", 1000000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    let liste_de_k = combinaison_listes([0, 1, 2], this.nb_questions);
    for (
      let i = 0,
        a,
        k,
        div,
        resultat,
        type_de_questions,
        texte,
        texte_corr,
        liste_unite_info,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 6) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 5);
      }
      // k = randint(0,2); // Choix du prÃ©fixe
      k = liste_de_k[i];
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        prefixe_multi = [
          [" da", "\\times10\\times10", 100],
          [" h", "\\times100\\times100", 10000],
          [" k", "\\times1~000\\times1~000", 1000000],
        ]; // On rÃ©initialise cette liste qui a pu Ãªtre modifiÃ©e dans le cas des ares
        resultat = Algebrite.eval(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^2" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^2" +
          " =  " +
          tex_nombre(a) +
          prefixe_multi[k][1] +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      } else if (div && type_de_questions < 4) {
        prefixe_div = [
          [" d", "\\div10\\div10", 100],
          [" c", "\\div100\\div100", 10000],
          [" m", "\\div1~000\\div1~000", 1000000],
        ];
        k = randint(0, 1); // Pas de conversions de mm^2 en m^2 avec des nombres dÃ©cimaux car rÃ©sultat infÃ©rieur Ã  10e-8
        resultat = Algebrite.eval(a / prefixe_div[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^2" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^2" +
          " =  " +
          tex_nombre(a) +
          prefixe_div[k][1] +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      } else if (type_de_questions == 4) {
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, 2 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, 2 * ecart)) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, 2 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, 2 * ecart)) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            "$";
        }
      } else if (type_de_questions == 5) {
        // Pour type_de_questions==5
        prefixe_multi = [
          ["ha", 10000],
          ["a", 100],
        ];
        k = randint(0, 1);
        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0]) +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0]) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    6,
    "1 : Conversions en mÂ² avec des multiplications\n\
2 : Conversions en mÂ² avec des divisions\n3 : Conversions en mÂ² avec des multiplications ou divisions\n4 : Conversions avec des multiplications ou divisions\n\
5 : Conversions d'hectares et ares en mÂ² \n6 : Toutes les conversions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions de volumes.
 *
 * Dans la correction, on ne voit qu'une multiplication ou qu'un division pour obtenir le rÃ©sultat
 *
 * * 1 : Conversions en mÃ¨tres-cubes avec des multiplications
 * * 2 : Conversions en mÃ¨tres-cubes avec des divisions
 * * 3 : Conversions en mÃ¨tres-cubes avec des multiplications ou divisions
 * * 4 : Conversions avec des multiplications ou divisions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M31
 */
function Exercice_conversions_volumes(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions de volume";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      ["da", "10\\times10\\times10", 1000],
      ["h", "100\\times100\\times100", 1000000],
      ["k", "1~000\\times1~000\\times1~000", 1000000000],
    ];
    let prefixe_div = [
      ["d", "10\\div10\\div10", 1000],
      ["c", "100\\div100\\div100", 1000000],
      ["m", "1~000\\div1~000\\div1~000", 1000000000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    for (
      let i = 0,
        a,
        k,
        div,
        resultat,
        type_de_questions,
        texte,
        texte_corr,
        liste_unite_info,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      k = randint(0, 2); // Choix du prÃ©fixe
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        resultat = Algebrite.eval(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^3" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^3" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^3" +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          prefixe_multi[k][1] +
          tex_texte(unite) +
          "^3" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^3" +
          "$";
      } else if (div && type_de_questions < 4) {
        k = randint(0, 1); // Pas de conversions de mm^3 en m^3 avec des nombres dÃ©cimaux car rÃ©sultat infÃ©rieur Ã  10e-8
        resultat = Algebrite.eval(a / prefixe_multi[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^3" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^3" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^3" +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          prefixe_div[k][1] +
          tex_texte(unite) +
          "^3" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^3" +
          "$";
      } else if (type_de_questions == 4) {
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        let multiplications_par_1000 = "";

        if (randint(0, 1) > 0) {
          switch (ecart) {
            case 1:
              multiplications_par_1000 = "\\times 1~000";
              break;
            case 2:
              multiplications_par_1000 = "\\times 1~000 \\times 1~000";
              break;
            case 3:
              multiplications_par_1000 =
                "\\times 1~000 \\times 1~000 \\times 1~000";
              break;
          }
          resultat = Algebrite.eval(a * Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " =  " +
            tex_nombre(a) +
            multiplications_par_1000 +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            "$";
        } else {
          switch (ecart) {
            case 1:
              multiplications_par_1000 = "\\div 1~000";
              break;
            case 2:
              multiplications_par_1000 = "\\div 1~000 \\div 1~000";
              break;
            case 3:
              multiplications_par_1000 = "\\div 1~000 \\div 1~000 \\div 1~000";
              break;
          }
          resultat = Algebrite.eval(a / Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " =  " +
            tex_nombre(a) +
            multiplications_par_1000 +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            "$";
        }
      }
      // else if(type_de_questions==5) { // Pour type_de_questions==5
      // 	prefixe_multi = [['L',0.001],['dL',0.0001],['cL',0.00001],['mL',0.000001]];
      // 	k = randint(0,1)
      // 	resultat = Algebrite.eval(a*prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
      // 	texte = '$ '+ tex_nombre(a) + tex_texte(prefixe_multi[k][0]) + ' = \\dotfill ' + tex_texte(unite)  + '^3' + '$';
      // 	texte_corr = '$ '+ tex_nombre(a) + tex_texte(prefixe_multi[k][0]) + ' =  ' + tex_nombre(a) + '\\times' + tex_nombre(prefixe_multi[k][1]) + tex_texte(unite)  + '^3'
      // 		 + ' = ' + tex_nombre(resultat) + tex_texte(unite)+ '^2' + '$';
      // }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Conversions en mÃ¨tres-cubes avec des multiplications\n\
2 : Conversions en mÃ¨tres-cubes avec des divisions\n3 : Conversions en mÃ¨tres-cubes avec des multiplications ou divisions\n4 : Conversions avec des multiplications ou divisions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions d'unitÃ©s de volumes vers les unitÃ©s de capacitÃ© ou inversement.
 *
 * Dans la correction, on passe systÃ©matiquement par l'Ã©quivalence dm3 = L
 *
 * * 1 : De dam3, m3, dm3, cm3 ou mm3 vers L ou inversement
 * * 2 :
 * * 3 :
 * * 4 :
 * * 5 :
 * * 6 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M31-2
 */
function Unites_de_volumes_et_de_capacite(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions avec des unitÃ©s de volumes ou de capacitÃ©s";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_questions = 8;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup == 1) {
      liste_type_de_questions = combinaison_listes(
        ["dam3toL", "m3toL", "dm3toL", "cm3toL"],
        this.nb_questions
      );
    }
    if (this.sup == 2) {
      liste_type_de_questions = combinaison_listes(
        ["Ltodm3", "Ltocm3", "Ltom3"],
        this.nb_questions
      );
    }
    if (this.sup == 3) {
      liste_type_de_questions = combinaison_listes(
        [
          "dam3toL",
          "m3toL",
          "dm3toL",
          "cm3toL",
          "mm3toL",
          "Ltodm3",
          "Ltocm3",
          "Ltom3",
        ],
        this.nb_questions
      );
    }
    let liste_de_n = [];
    if (this.sup2) {
      liste_de_n = combinaison_listes([1, 2, 3, 4], this.nb_questions);
    } else {
      liste_de_n = combinaison_listes([1, 2, 3, 4, 5, 6], this.nb_questions);
    }
    for (
      let i = 0, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (this.sup2) {
        switch (liste_de_n[i]) {
          case 1:
            n = calcul(randint(2, 9) / 10);
            break;
          case 2:
            n = calcul(randint(11, 99) / 100);
            break;
          case 3:
            n = calcul(randint(1, 9) * 10 + randint(1, 9) / 10);
            break;
          case 4:
            n = calcul(
              randint(11, 99, [10, 20, 30, 40, 50, 60, 70, 80, 90]) / 100
            );
            break;
        }
      } else {
        switch (liste_de_n[i]) {
          case 1:
            n = randint(2, 9);
            break;
          case 2:
            n = randint(11, 99);
            break;
          case 3:
            n = randint(1, 9) * 10;
            break;
          case 4:
            n = randint(1, 9) * 100;
            break;
          case 5:
            n = randint(11, 99) * 100;
            break;
          case 6:
            n = randint(1, 9) * 1000;
            break;
        }
      }
      switch (liste_type_de_questions[i]) {
        case "dam3toL":
          texte = `$${tex_nombre(n)}~\\text{dam}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{dam}^3=${tex_nombre(
            n
          )}\\times1~000\\times1~000~\\text{dm}^3=${tex_nombrec(
            n * 1000000
          )}~\\text{L}$`;
          break;
        case "m3toL":
          texte = `$${tex_nombre(n)}~\\text{m}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{m}^3=${tex_nombre(
            n
          )}\\times1~000~\\text{dm}^3=${tex_nombrec(n * 1000)}~\\text{L}$`;
          break;
        case "dm3toL":
          texte = `$${tex_nombre(n)}~\\text{dm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{dm}^3=${tex_nombre(
            n
          )}~\\text{L}$`;
          break;
        case "cm3toL":
          texte = `$${tex_nombre(n)}~\\text{cm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{cm}^3=${tex_nombre(
            n
          )}\\div 1~000~\\text{dm}^3=${tex_nombrec(n / 1000)}~\\text{L}$`;
          break;
        case "mm3toL":
          texte = `$${tex_nombre(n)}~\\text{mm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{mm}^3=${tex_nombre(
            n
          )}\\div1~000\\div 1~000~\\text{dm}^3=${tex_nombrec(
            n / 1000000
          )}~\\text{L}$`;
          break;
        case "Ltodm3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{dm}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3$`;
          break;
        case "Ltocm3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{cm}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3=${tex_nombre(
            n
          )}\\times1~000~\\text{cm}^3=${tex_nombrec(n * 1000)}~\\text{cm}^3$`;
          break;
        case "Ltom3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{m}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3=${tex_nombre(n)}\\div1~000~\\text{m}^3=${tex_nombrec(
            n / 1000
          )}~\\text{m}^3$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : UnitÃ©s de volume vers litre\n2 : Litre vers unitÃ©s de volume\n3 : UnitÃ©s de volumes vers litre ou inversement ",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * DÃ©terminer le pÃ©rimÃ¨tre et l'aire d'un carrÃ©, d'un rectangle, d'un triangle rectangle, d'un cercle
 *
 * * 1 : CarrÃ©, rectangle et triangle rectangle
 * * 2: Uniquement des cercles
 * * 3 : Les 4 sont demandÃ©s
 * @Auteur RÃ©mi Angot
 */
function Exercice_perimetres_et_aires(difficulte = 1) {
  //Calculer le pÃ©rimÃ¨tre et l'aire de figures
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = difficulte;
  this.titre = "Calculs de pÃ©rimÃ¨tres et d'aires";
  this.consigne =
    "Pour chacune des figures, calculer son pÃ©rimÃ¨tre puis son aire (valeur exacte et si nÃ©cessaire valeur approchÃ©e au dixiÃ¨me prÃ¨s).";
  this.spacing = 1;
  this.nb_questions = 4;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let triplets_pythagoriciens = [
      [3, 4, 5],
      [6, 8, 10],
      [15, 8, 17],
      [24, 10, 26],
      [5, 12, 13],
      [12, 16, 20],
      [21, 20, 29],
      [9, 40, 41],
    ];
    let type_de_questions_disponibles = [
      "carre",
      "rectangle",
      "triangle_rectangle",
      "cercle",
    ];
    if (this.sup == 1) {
      enleve_element(type_de_questions_disponibles, "cercle");
      this.nb_cols = 1;
    } else if (this.sup == 2) {
      type_de_questions_disponibles = ["cercle"];
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case "carre":
          let cote = randint(2, 11);
          let nom_carre = creerNomDePolygone(4);
          if (choice([true, false])) {
            // 2 Ã©noncÃ©s possibles Ã©quiprobables
            texte = `Un carrÃ© $${nom_carre}$ de $${cote}$ cm de cÃ´tÃ© .`;
          } else {
            texte = `Un carrÃ© $${nom_carre}$ tel que $${
              nom_carre[0] + nom_carre[1]
            } = ${cote}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_carre}}=4\\times${cote}~\\text{cm}=${
            4 * cote
          }~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_carre}}=${cote}~\\text{cm}\\times${cote}~\\text{cm}=${
            cote * cote
          }~\\text{cm}^2$`;
          break;
        case "rectangle":
          let L = randint(3, 11);
          let l = randint(2, L - 1);
          let nom_rectangle = creerNomDePolygone(4);
          if (choice([true, false])) {
            // 2 Ã©noncÃ©s possibles Ã©quiprobables
            texte = `Un rectangle $${nom_rectangle}$ de $${L}$ cm de longueur et de $${l}$ cm de largeur.`;
          } else {
            texte = `Un rectangle $${nom_rectangle}$ tel que $${
              nom_rectangle[0] + nom_rectangle[1] + " = " + L
            }$ cm et $${nom_rectangle[1] + nom_rectangle[2] + " = " + l}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_rectangle}}=(${L}~\\text{cm}+${l}~\\text{cm})\\times2=${
            (L + l) * 2
          }~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_rectangle}}=${L}~\\text{cm}\\times${l}~\\text{cm}=${
            L * l
          }~\\text{cm}^2$`;
          break;
        case "triangle_rectangle":
          let triplet = choice(triplets_pythagoriciens);
          enleve_element(triplets_pythagoriciens, triplet);
          let a = triplet[0];
          let b = triplet[1];
          let c = triplet[2];
          let nom_triangle = creerNomDePolygone(3);
          if (choice([true, false])) {
            texte = `Un triangle $${nom_triangle}$ rectangle en $${
              nom_triangle[1]
            }$ tel que $${
              nom_triangle[0] + nom_triangle[1] + " = " + a
            }$ cm, $${nom_triangle[1] + nom_triangle[2] + " = " + b}$ cm\
 et $${nom_triangle[0] + nom_triangle[2] + " = " + c}$ cm.`;
          } else {
            texte = `Un triangle rectangle $${nom_triangle}$ a pour cÃ´tÃ©s : $${a}$ cm, $${c}$ cm et $${b}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_triangle}}=${a}~\\text{cm}+${b}~\\text{cm}+${c}~\\text{cm}=${
            a + b + c
          }~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_triangle}}=${a}~\\text{cm}\\times${b}~\\text{cm}\\div2=${Algebrite.eval(
            (a * b) / 2
          )}~\\text{cm}^2$`;
          break;
        case "cercle":
          let R = randint(3, 11);
          let donne_le_diametre = choice([true, false]);
          if (donne_le_diametre) {
            texte = `Un cercle de $${2 * R}$ cm de diamÃ¨tre.`;
            texte_corr = `Le diamÃ¨tre est de $${
              2 * R
            }$ cm donc le rayon est de $${R}$~cm.<br>`;
          } else {
            texte = `Un cercle de $${R}$ cm de rayon.`;
            texte_corr = "";
          }

          texte_corr += `$\\mathcal{P}=2\\times${R}\\times\\pi~\\text{cm}=${
            2 * R
          }\\pi~\\text{cm}\\approx${arrondi_virgule(
            2 * R * Math.PI,
            1
          )}~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}=${R}\\times${R}\\times\\pi~\\text{cm}^2=${
            R * R
          }\\pi~\\text{cm}^2\\approx${arrondi_virgule(
            R * R * Math.PI,
            1
          )}~\\text{cm}^2$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : CarrÃ©, rectangle et triangle rectangle\n2: Cercles\n3: MÃ©langÃ©",
  ];
}

/**
 * On donne une fraction qui a pour dÃ©nominateur 10, 100 ou 1 000, il faut donner l'Ã©criture dÃ©cimale.
 *
 * Le numÃ©rateur est de la forme X, XX, X0X, X00X ou XXX
 * @Auteur RÃ©mi Angot
 * 6N23
 */
function Exercice_ecriture_decimale_a_partir_de_fraction_decimale() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Donner l'Ã©criture dÃ©cimale d'une fraction dÃ©cimale";
  this.consigne = "Donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 8;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice(
        [
          randint(2, 9),
          randint(11, 99),
          randint(1, 9) * 100 + randint(1, 9),
          randint(1, 9) * 1000 + randint(1, 9),
        ],
        randint(101, 999)
      );
      // X, XX, X0X, X00X,XXX
      b = choice([10, 100, 1000]);
      texte =
        "$ " + tex_fraction(tex_nombre(a), tex_nombre(b)) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_fraction(tex_nombre(a), tex_nombre(b)) +
        " = " +
        tex_nombre(Algebrite.eval(a / b)) +
        " $";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        if (est_diaporama) {
          texte = texte.replace("=\\dotfill", "");
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Multiplier ou diviser un nombre entier par 10, 100 ou 1 000
 *
 * Le nombre entier est de la forme X, XX, X0X, X00X ou XXX
 * @Auteur RÃ©mi Angot
 * 6N24-1
 */
function Exercice_multiplier_ou_diviser_un_nombre_entier_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplier ou diviser un nombre entier par 10, 100 ou 1 000";
  this.consigne = "Donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice(
        [
          randint(2, 9),
          randint(11, 99),
          randint(1, 9) * 100 + randint(1, 9),
          randint(1, 9) * 1000 + randint(1, 9),
        ],
        randint(101, 999)
      );
      // X, XX, X0X, X00X,XXX
      b = choice([10, 100, 1000]);
      if (choice([true, false])) {
        texte =
          "$ " + tex_fraction(tex_nombre(a), tex_nombre(b)) + " = \\dotfill $";
        texte_corr =
          "$ " +
          tex_fraction(tex_nombre(a), tex_nombre(b)) +
          " = " +
          tex_nombre(Algebrite.eval(a / b)) +
          " $";
      } else {
        texte =
          "$ " + tex_nombre(a) + "\\times" + tex_nombre(b) + " = \\dotfill $";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(b) +
          " = " +
          tex_nombre(Algebrite.eval(a * b)) +
          " $";
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 99999];
}

/**
 * Comparer deux nombres dÃ©cimaux
 *
 * Les types de comparaisons sont :
 * * ab ? ba
 * * aa,bb ? aa,cc
 * * a,b  a,cc avec b>c
 * * 0,ab 0,ba
 * * 0,a0b 0,b0a
 * * a,b a,b0
 * * 0,0ab 0,0a0b
 * * a,bb  a,ccc avec b>c
 * * a+1,bb  a,cccc avec cccc>bb
 *
 * aa, bb, cc correspondent Ã  des nombres Ã  2 chiffres (ces 2 chiffres pouvant Ãªtre distincts)
 * @Auteur RÃ©mi Angot
 * 6N31
 */
function Comparer_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Comparer des nombres dÃ©cimaux";
  this.consigne = "ComplÃ©ter avec le signe < , > ou =.";
  this.nb_questions = 8;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [
      choice([1, 4, 5]),
      2,
      2,
      3,
      6,
      7,
      8,
      9,
    ]; // une seule question du type inversion de chiffres (1,4,5)
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let x,
        y,
        a,
        b,
        c,
        d,
        zero_inutile = false;

      switch (liste_type_de_questions[i]) {
        case 1: // ab ba
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = a * 10 + b;
          y = b * 10 + a;
          break;
        case 2: // aa,bb aa,cc
          a = randint(1, 99);
          b = randint(11, 99);
          c = randint(11, 99);
          x = calcul(a + b / 100);
          y = calcul(a + c / 100);
          break;
        case 3: // a,b  a,cc avec b>c
          a = randint(1, 99);
          b = randint(1, 8);
          c = randint(1, b * 10);
          x = calcul(a + b / 10);
          y = calcul(a + c / 100);
          break;
        case 4: // 0,ab 0,ba
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = calcul((a * 10 + b) / 100);
          y = calcul((b * 10 + a) / 100);
          break;
        case 5: // 0,a0b 0,b0a
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = calcul((a * 100 + b) / 1000);
          y = calcul((b * 100 + a) / 1000);
          break;
        case 6: // a,b a,b0
          a = randint(11, 999);
          while (a % 10 == 0) {
            // pas de nombre divisible par 10
            a = randint(11, 999);
          }
          x = calcul(a / 10);
          y = x;
          zero_inutile = true;
          break;
        case 7: // 0,0ab 0,0a0b
          a = randint(1, 9);
          b = randint(1, 9);
          x = calcul(a / 100 + b / 1000);
          y = calcul(a / 100 + b / 10000);
          break;
        case 8: // a,bb  a,ccc avec b>c
          a = randint(11, 99);
          b = randint(11, 99);
          c = randint(100, b * 10);
          x = calcul(a + b / 100);
          y = calcul(a + c / 1000);
          if (randint(1, 2) == 1) {
            [x, y] = [y, x];
          }
          break;
        case 9: // a+1,bb  a,cccc avec cccc>bb
          a = randint(11, 98);
          b = randint(11, 99);
          c = randint(b * 100, 10000);
          x = calcul(a + 1 + b / 100);
          y = calcul(a + c / 10000);
          if (randint(1, 2) == 1) {
            [x, y] = [y, x];
          }
          break;
      }

      texte = `${tex_nombre(x)}\\ldots\\ldots${tex_nombre(y)}`;
      if (parseFloat(x) > parseFloat(y)) {
        texte_corr = `${tex_nombre(x)} > ${tex_nombre(y)}`;
      } else if (parseFloat(x) < parseFloat(y)) {
        texte_corr = `${tex_nombre(x)} < ${tex_nombre(y)}`;
      } else {
        texte_corr = `${tex_nombre(x)} = ${tex_nombre(y)}`;
      }

      if (zero_inutile) {
        if (randint(1, 2) == 1) {
          texte = `${tex_prix(x)}\\ldots\\ldots${tex_nombre(y)}`;
          if (parseFloat(x) > parseFloat(y)) {
            texte_corr = `${tex_prix(x)} > ${tex_nombre(y)}`;
          } else if (parseFloat(x) < parseFloat(y)) {
            texte_corr = `${tex_prix(x)} < ${tex_nombre(y)}`;
          } else {
            texte_corr = `${tex_prix(x)} = ${tex_nombre(y)}`;
          }
        } else {
          texte = `${tex_nombre(x)}\\ldots\\ldots${tex_prix(y)}`;
          if (parseFloat(x) > parseFloat(y)) {
            texte_corr = `${tex_nombre(x)} > ${tex_prix(y)}`;
          } else if (parseFloat(x) < parseFloat(y)) {
            texte_corr = `${tex_nombre(x)} < ${tex_prix(y)}`;
          } else {
            texte_corr = `${tex_nombre(x)} = ${tex_prix(y)}`;
          }
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * DÃ©duire un pourcentage par complÃ©ment Ã  100%
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N33-2
 */
function Calculer_un_pourcentage() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨mes de calcul de pourcentage par complÃ©ment Ã  100%";
  this.nb_questions = 1;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles=[1,2,3]
    let liste_choix=combinaison_listes(type_de_questions_disponibles,this.nb_questions)
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_moyens=[`en bus`,`en deux-roues`,`Ã   pieds`,`en voiture`]
    let liste_sports=[`le foot`,`la natation`,`le basket`,`le ping-pong`,`le volley`,`la gym`]
    let liste_hobbies=[`la couture`,`le cinÃ©ma`,`la musique`,`le sport`,`la programmation`,`le jardinage`,`la cuisine`]
    let p1,p2,p3,moy1,moy2,moy3
    let objets,centre=point(5,5),depart=point(10,5)

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;
    ) {
      objets=[]
      p1=randint(6,9)*5
      p2=randint(6,9)*5
      p3=100-p1-p2
      switch(liste_choix[i]) {
        case 1: // Les moyens de dÃ©placement maison collÃ¨ge
          [moy1,moy2,moy3]=combinaison_listes(liste_moyens,3)
          texte = `Dans un collÃ¨ge, $${p1}\\%$ des Ã©lÃ¨ves ${moy1}, $${p2}\\%$ ${moy2} et les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des Ã©lÃ¨ves qui ${moy3} ?` 
          texte_corr=`Les Ã©lÃ¨ves qui ${moy1} ou qui ${moy2} reprÃ©sentent $${p1}\\%$ + $${p2}\\% = ${p1+p2}\\%$.<br>`
          texte_corr+=`Donc on calcule : $100 - ${p1+p2}\\% = ${p3}\\%$<br>`
          texte_corr+=`$${p3}\\%$ des Ã©lÃ¨ves ${moy3}.<br>`
          break;
          case 2: // Les sports pratiquÃ©s par les ados
          [moy1,moy2,moy3]=combinaison_listes(liste_sports,3)
          texte = `Dans une association sportive, $${p1}\\%$ des ados pratiquent ${moy1}, $${p2}\\%$ ${moy2} et les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des ados qui pratiquent ${moy3} ?`
          texte_corr=`Les ados qui pratiquent ${moy1} ou ${moy2} reprÃ©sentent $${p1}\\% + ${p2}\\% = ${p1+p2}\\%$.<br>`
          texte_corr+=`Donc on calcule : $100\\% - ${p1+p2}\\% = ${p3}\\%$<br>`
          texte_corr+=`$${p3}\\%$ des ados de cette association sportive pratiquent ${moy3}.<br>`
          break;
          case 3: // Les sports pratiquÃ©s par les ados
          [moy1,moy2,moy3]=combinaison_listes(liste_hobbies,3)
          texte = `Dans une association culturelle, $${p1}\\%$ des membres ont comme passe-temps favorit ${moy1}, pour $${p2}\\%$ c'est ${moy2} et pour les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des membres qui prÃ©fÃ¨rent ${moy3} ?`
          texte_corr=`Les membres qui prÃ©fÃ¨re ${moy1} ou ${moy2} reprÃ©sentent $${p1}\\% + ${p2}\\% = ${p1+p2}\\%$.<br>`
          texte_corr+=`Donc on calcule : $100\\% - ${p1+p2}\\% = ${p3}\\%$<br>`
          texte_corr+=`$${p3}\\%$ des membres de cette association culturelle prÃ©fÃ¨rent ${moy3}.<br>`
          break;

      }
      objets.push(codeAngle(depart,centre,p1*3.6,4.9,'','black',2,1,'red',0.4),texteParPoint(`${moy1.substring(3)}`,pointSurSegment(centre,rotation(depart,centre,p1*1.8),3),0) )
      objets.push(codeAngle(rotation(depart,centre,p1*3.6),centre,p2*3.6,4.9,'','black',2,1,'blue',0.4),texteParPoint(`${moy2.substring(3)}`,pointSurSegment(centre,rotation(depart,centre,p1*3.6+p2*1.8),3),0) )
      objets.push(codeAngle(depart,centre,-p3*3.6,4.9,'','black',2,1,'yellow',0.4),texteParPoint(`${moy3.substring(3)}`,pointSurSegment(centre,rotation(depart,centre,-p3*1.8),3),0) )
      texte_corr+=mathalea2d({xmin : 0,ymin : 0,xmax : 10, ymax : 10,pixelsParCm : 20,scale : 0.5,mainlevee:false,amplitude:1}, ...objets)

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}
/**
 * Calculer le montant d'une rÃ©duction donnÃ©e en pourcentage d'un prix initial
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N33-3
 */
function Appliquer_un_pourcentage() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨mes avec des calculs de pourcentages";
  this.nb_questions = 1;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles=[1,2]
    let choix=combinaison_listes(type_de_questions_disponibles,this.nb_questions)
    liste_pourcentages = [10, 20, 30, 40, 50];
    let article=[[`Un pull`,20,40],[`Une chemise`,15,35],[`Un pantalon`,30,60],[`Un T-shirt`,15,25],[`Une jupe`,20,40]]
    let legume=[[`Une aubergine`,100,200],[`Un melon`,200,300],[`Une tomate`,50,100],[`Une betterave`,75,100],[`Une carotte`,30,50]]
    let liste_index=[0,1,2,3,4]
    let prix=[],pourcent=[],masse=[]
    let index=combinaison_listes(liste_index,this.nb_questions)
    for (
      let i = 0, p, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pourcent[i]=choice(liste_pourcentages)
      switch(choix[i]){
      case 1 :
      prix[i]=randint(article[index[i]][1],article[index[i]][2])
      texte=`${article[index[i]][0]} coÃ»tant $${prix[i]}$â¬ bÃ©nÃ©ficie d'une rÃ©duction de $${pourcent[i]} \\%$.<br>`
      texte+=`Quel est le montant en euro de cette rÃ©duction ?`
      texte_corr=`On doit calculer $${pourcent[i]}\\%$ de $${prix[i]}$â¬ :<br>`
      texte_corr+= `$${pourcent[i]}\\%\\text{ de }${prix[i]}=${tex_fraction(pourcent[i],100)}\\times${prix[i]}=(${pourcent[i]}\\times${prix[i]})\\div100=${tex_nombre(pourcent[i] * prix[i])}\\div100=${tex_nombre(Algebrite.eval((pourcent[i] * prix[i]) / 100))}$<br>`;
      texte_corr+=`Le montant de la rÃ©duction est de ${tex_prix(calcul(prix[i]*pourcent[i]/100))}â¬`
      break;
      case 2 :
        masse[i]=randint(legume[index[i]][1],article[index[i]][2])
        texte=`${legume[index[i]][0]} pesant $${masse[i]}$ grammes a subit une croissance de $${pourcent[i]} \\%$.<br>`
        texte+=`Quel est la masse supplÃ©mentaire en grammes correspondant Ã  cette croissance ?`
        texte_corr=`On doit calculer $${pourcent[i]}\\%$ de $${masse[i]}$ grammes :<br>`
        texte_corr+= `$${pourcent[i]}\\%\\text{ de }${masse[i]}=${tex_fraction(pourcent[i],100)}\\times${masse[i]}=(${pourcent[i]}\\times${masse[i]})\\div100=${tex_nombre(pourcent[i] * masse[i])}\\div100=${tex_nombre(Algebrite.eval((pourcent[i] * masse[i]) / 100))}$<br>`;
        texte_corr+=`La masse a augmentÃ© de $${tex_nombre(calcul(masse[i]*pourcent[i]/100))}$ g.`
         
      break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Calculer 10, 20, 30, 40 ou 50% d'un nombre
 * @Auteur RÃ©mi Angot + Jean-claude Lhote
 * 6N33-1
 */
function Pourcentage_d_un_nombre() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer le pourcentage d'un nombre de tÃªte";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2.5;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_pourcentages = [10, 20, 30, 40, 50];

    for (
      let i = 0, p, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      p = choice(liste_pourcentages);
      n = choice([
        randint(2, 9),
        randint(2, 9) * 10,
        randint(1, 9) * 10 + randint(1, 2),
      ]);
      texte = `$${p}~\\%~\\text{de }${n}$`;
      if (p == 50) {
        texte_corr = `$${p}~\\%~\\text{de }${n}=${n}\\div${2}=${tex_nombre(
          Algebrite.eval(n / 2)
        )}$`; // calcul de n/2 si p = 50%
      } else {
        texte_corr = `$${p}~\\%~\\text{de }${n}=${tex_fraction(
          p,
          100
        )}\\times${n}=(${p}\\times${n})\\div100=${tex_nombre(
          p * n
        )}\\div100=${tex_nombre(Algebrite.eval((p * n) / 100))}$`;
        //		texte_corr += `$\\phantom {Blanc}${p}~\\%~\\text{de }${n}=${tex_fraction(p,100)}\\times${n}=\\dfrac{${p}\\times${n}}{100}=${tex_fraction(p*n,100)}=${tex_nombre(Algebrite.eval(p*n/100))}$`
        if (this.sup2)
          texte_corr += `<br>$${p}~\\%~\\text{de }${n}=${tex_fraction(
            p,
            100
          )}\\times${n}=(${n}\\div100)\\times${p}=${tex_nombrec(
            calcul(n / 100)
          )}\\times${p}=${tex_nombre(Algebrite.eval((p * n) / 100))}$`;
        //		texte_corr += `$\\phantom {Blanc}${p}~\\%~\\text{de }${n}=${tex_fraction(p,100)}\\times${n}=${tex_fraction(n,100)}\\times${p}=${tex_nombrec(calcul(n/100))}\\times${p}=${tex_nombre(Algebrite.eval(p*n/100))}$<br>`
        if (this.sup2)
          texte_corr += `<br>$${p}~\\%~\\text{de }${n}=${tex_fraction(
            p,
            100
          )}\\times${n}=${tex_nombrec(calcul(p / 100))}\\times${n}=${tex_nombre(
            Algebrite.eval((p * n) / 100)
          )}$`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
  this.besoin_formulaire2_case_a_cocher = ["Plusieurs mÃ©thodes"];
}
/**
 * Tracer un segment de longueur une fraction de l'unitÃ©.
 * @Auteur Jean-Claude Lhote
 * 6N32
 */

function Fractions_d_unite() {
  "use strict"
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ReprÃ©senter une fraction de l\'unitÃ©";
  this.nb_questions = 5;
  this.consigne = "Colorier en bleu un segment de longueur ...";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = 1;
  this.sup2=1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles,g,carreaux,sc,unit
    let liste_type_de_questions=[]
    if (this.sup<5)
      type_de_questions_disponibles=[parseInt(this.sup)]
    else
      type_de_questions_disponibles=[1,2,3,4]
    liste_type_de_questions=combinaison_listes(type_de_questions_disponibles,this.nb_questions)
    for (
      let i = 0, den,num ,choix,longueur,numIrred,denIrred,k, masse,frac,frac_unite, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]){
        case 1 :
          den=choice([4,5,6,10])
          num=randint(1,den-1)
     break
        case 2 :
          den=choice([2,3,4])
          if (den==3)  num=randint(3,2*den-1,den)
          else num=randint(3,3*den-1,den)
         break
        case 3 :
          den=choice([4,5,6,10])
          if (den==4) num=randint(5,3*den-1,den)
          else num=randint(5,2*den-1,den)
        break
        case 4:
          den=choice([2,3,4,5,6,10])
          if (den==2||den==4) num=randint(den+1,3*den-1,den)
          else num=randint(den+1,2*den-1,den)
        break
      }
      if (den%3==0) unit=12
      else if (den%5==0) unit=10
      else unit=8
      frac=fraction(num,den)
      frac_unite=fraction(3*den-1,den)
      texte=`$${frac.texFraction()}$ unitÃ© en prenant ${unit} carreaux pour une unitÃ©.`
      if (this.sup2 < 3) g = grille(0, 0,26, 2, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        sc = 0.6;
        carreaux = seyes(0, 0, 26, 2);
      } else {
        sc = 0.5;
        carreaux = "";
      }
 
      
      texte_corr=mathalea2d({xmin:0,ymin:0,xmax:26,ymax:2,pixelsParCm:20,scale:sc},frac.representation(1,1,unit,0,'segment','blue',0,1),g,carreaux)



      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
    cpt++;
  }
  liste_de_question_to_contenu(this);
};
this.besoin_formulaire_numerique = ["Type d\'exercices",4,"1 : fracion infÃ©rieure Ã  1\n2 : demis, tiers et quarts\n3 : quarts, cinquiÃ¨mes, sixiÃ¨mes et dixiÃ¨mes\n4 : toutes les fractions entre 1 et 3"];
this.besoin_formulaire2_numerique = ["Type de cahier",2,"1 :  petits carreaux\n2 : Cahier gros carreaux type Seyes"];
}
/**
 * Calculer la fracton d'une quantitÃ© avec ou sans dessin.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33-0
 */
function Fraction_d_une_quantite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer la fraction d'une quantitÃ©";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = 1;
  this.sup2=true
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles
    let liste_type_de_questions=[]
    if (this.sup<5)
      type_de_questions_disponibles=[parseInt(this.sup)]
    else
      type_de_questions_disponibles=[1,2,3,4]
    liste_type_de_questions=combinaison_listes(type_de_questions_disponibles,this.nb_questions)
    for (
      let i = 0, den,num ,choix,longueur,numIrred,denIrred,k, masse,frac, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]){
        case 1 :
          den=choice([2,3,4,5,10])
          num=randint(1,den-1)
          frac=fraction(num,den)
          texte=`Ã combien de minutes correspondent $${frac.texFraction()}$ d\'heure ?<br>`
          if (this.sup2){
            texte+=`cette fraction est reprÃ©sentÃ©e ci dessous :<br>`
            texte+=mathalea2d({xmin:0,ymin:0,xmax:15,ymax:5},frac.representation(2.5,2.5,2,0,'gateau','blue'))
          }
          texte_corr=`Comme l\'heure est partagÃ©e en ${den} parts Ã©gales, chaque part reprÃ©sente $${tex_fraction(1,den)}$ d\'heure, soit $${calcul(60/den)}$ minutes.<br>`
          texte_corr+=`Ici, il y a $${tex_fraction(num,den)}$ d\'heure, ce qui reprÃ©sente $${num}$ fois plus, soit $${num}\\times${calcul(60/den)}=${calcul(num*60/den)}$.<br>`
          texte_corr+=`$${frac.texFraction()}$ d\'heure correspond donc Ã  $${calcul(num*60/den)}$ minutes.`
        break
        case 2 :
          den=choice([2,3,4,5,10])
          num=randint(1,3*den,den)
          frac=fraction(num,den)
          texte=`Ã combien de minutes correspondent $${frac.texFraction()}$ d\'heure ?<br>`
          if (this.sup2){
            texte+=`Cette fraction est reprÃ©sentÃ©e ci dessous :<br>`
            texte+=mathalea2d({xmin:0,ymin:0,xmax:15,ymax:5},frac.representation(2.5,2.5,2,0,'gateau','blue'))
          }
          texte_corr=`Comme l\'heure est partagÃ©e en ${den} parts Ã©gales, chaque part reprÃ©sente $${tex_fraction(1,den)}$ d\'heure, soit $${calcul(60/den)}$ minutes.<br>`
          texte_corr+=`Ici, il y a $${tex_fraction(num,den)}$ d\'heure, ce qui reprÃ©sente $${num}$ fois plus, soit $${num}\\times${calcul(60/den)}=${calcul(num*60/den)}$.<br>`
          texte_corr+=`$${frac.texFraction()}$ d\'heure correspond donc Ã  $${calcul(num*60/den)}$ minutes.`
        break
        case 3 :
          masse=choice([120,180,240,300])
          denIrred=choice([2,3,4,5,10])
          numIrred=randint(1,denIrred-1)
          while (pgcd(denIrred,numIrred)!=1||calcul(denIrred/numIrred)==2){
            denIrred=choice([2,3,4,5,10])
            numIrred=randint(1,denIrred-1)      
          }
          frac=fraction(numIrred,denIrred)
          frac2=frac.entierMoinsFraction(1)
          texte=`Voici une tablette de chocolat dont la masse totale est de $${masse}$ grammes. Quelqu'un en a dÃ©jÃ  consommÃ© les $${frac.texFractionSimplifiee()}$.<br>`
          choix=randint(1,2)
          if (choix==1) {
            texte+=`Quelle masse de chocoloat a-t-elle Ã©tÃ© consommÃ©e ?<br>`
            texte_corr=`Comme la tablette a une masse de $${masse}$ grammes, $${tex_fraction(1,denIrred)}$ de la tablette reprÃ©sente une masse de $${calcul(masse/denIrred)}$ grammes.<br>`
            texte_corr+=`Ici, il y a $${frac.texFractionSimplifiee()}$ de la tablette qui a Ã©tÃ© consommÃ©, ce qui reprÃ©sente $${numIrred}$ fois plus, soit $${numIrred}\\times${calcul(masse/denIrred)}=${calcul(numIrred*masse/denIrred)}$.<br>`
            texte_corr+=`La masse de chocolat consommÃ©e est $${calcul(numIrred*masse/denIrred)}$ grammes.`
          }
          else {
            texte+=`Quelle masse de chocolat reste-t-il ?<br>`
            texte_corr=`Comme la tablette a une masse de $${masse}$ grammes, $${tex_fraction(1,denIrred)}$ de la tablette reprÃ©sente une masse de $${calcul(masse/denIrred)}$ grammes.<br>`
            texte_corr+=`Ici, il y a $${frac.texFractionSimplifiee()}$ de la tablette qui a Ã©tÃ© consommÃ©, ce qui reprÃ©sente $${numIrred}$ fois plus, soit $${numIrred}\\times${calcul(masse/denIrred)}=${calcul(numIrred*masse/denIrred)}$.<br>`
            texte_corr+=`La masse de chocolat consommÃ©e est $${calcul(numIrred*masse/denIrred)}$ grammes.<br>`
            texte_corr+=`Il reste donc : $${masse}-${calcul(numIrred*masse/denIrred)}=${calcul(masse-numIrred*masse/denIrred)}$ grammes de chocolat.<br>`
            texte_corr+=`une autre faÃ§on de faire est d'utiliser la fraction restante : $${tex_fraction(denIrred,denIrred)}-${frac.texFractionSimplifiee()}=${tex_fraction(denIrred-numIrred,denIrred)}$.<br>`
            texte_corr+=`$${tex_fraction(denIrred-numIrred,denIrred)}$ de $${masse}$ grammes c\'est $${denIrred-numIrred}$ fois $${calcul(masse/denIrred)}$ grammes.<br>`
            texte_corr+=`Il reste donc : $${denIrred-numIrred}\\times${calcul(masse/denIrred)}=${(denIrred-numIrred)*masse/denIrred}$ grammes de chocolat.`

           }
          if (this.sup2){
          texte+=`La tablette de chocolat est reprÃ©sentÃ©e ci dessous :<br>`
          texte+=mathalea2d({xmin:-0.5,ymin:-0.5,xmax:5,ymax:7},frac2.representationIrred(0,0,4,0,'baton','brown'))
         }
        break
        case 4:
          den=choice([2,3,4,5,10])
          num=randint(1,den-1)
          longueur=choice([120,180,240,300])
          denIrred=choice([2,3,4,5,10])
          numIrred=randint(1,denIrred-1)
          while (pgcd(denIrred,numIrred)!=1||calcul(denIrred/numIrred)==2){
            denIrred=choice([2,3,4,5,10])
            numIrred=randint(1,denIrred-1)      
          }
          k=calcul(300/denIrred)
          den=calcul(denIrred*k)
          num=calcul(numIrred*k)
          frac=fraction(num,den)
          texte=`Un bÃ¢ton de $${tex_nombrec(longueur/100)}$ mÃ¨tre`
          if (longueur>=200) texte+=`s`
          texte+=` de longueur est coupÃ© Ã  $${frac.texFractionSimplifiee()}$ de sa longueur.<br>`
          texte+=`Calculer la longueur de chacun des morceaux en mÃ¨tres.<br>`
          if (this.sup2){
            texte+=`Ce bÃ¢ton est reprÃ©sentÃ© ci dessous :<br>`
          texte+=mathalea2d({xmin:-0.5,ymin:0,xmax:10,ymax:2},frac.representationIrred(0,1,8,0,'segment','blue',"0",`${tex_nombre(calcul(longueur/100))}`))
          }
          texte_corr=`$${tex_fraction(1,denIrred)}$ de $${tex_nombrec(longueur/100)}$ reprÃ©sente $${tex_nombrec(longueur/100)} \\div ${denIrred} = ${tex_nombrec(longueur/100/denIrred)}$.<br>`
          texte_corr+=`Le premier morceau du bÃ¢ton correspondant Ã  $${frac.texFractionSimplifiee()}$ du bÃ¢ton mesure : $${numIrred} \\times ${tex_nombrec(longueur/100/denIrred)}=${tex_nombrec(numIrred*longueur/100/denIrred)}$ m.<br>`
          texte_corr+=`Le deuxiÃ¨me morceau mesure donc : $${tex_nombrec(longueur/100)}-${tex_nombrec(numIrred*longueur/100/denIrred)}=${tex_nombrec(longueur/100-numIrred*longueur/100/denIrred)}$ m.`

        break
      }



      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
    cpt++;
  }
  liste_de_question_to_contenu(this);
};
this.besoin_formulaire_numerique = ["Type d\'exercices",5,"1 : Heures & minutes (infÃ©rieur Ã  1h)\n2 : Heures & minutes (jusqu\'Ã  3h)\n3 : tablettes de chocolat\n4 : BÃ¢ton cassÃ©\n5 : MÃ©lange"];
this.besoin_formulaire2_case_a_cocher = ["Avec dessin", true];
}
/**
 * Calculer la fracton d'un nombre divisible par le dÃ©nominateur ... ou pas.
 *
 * Par dÃ©faut la division du nombre par le dÃ©nominateur est infÃ©rieure Ã  11
 * @Auteur RÃ©mi Angot + Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33
 */
function Fraction_d_un_nombre(max = 11) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer la fraction d'un nombre";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = true;
  this.sup2 = false;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux

    for (
      let i = 0, a, b, k, n, j, fraction, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      fraction = choice(liste_fractions);
      a = fraction[0];
      b = fraction[1];
      k = randint(1, 11);
      j = false;
      if (this.sup) n = b * k;
      else if (randint(0, 1) == 0) n = b * k;
      else n = randint(10, b * 11);
      texte = `$${tex_fraction(a, b)}\\times${n}=$`;
      texte_corr = ``;
      if (a == 1) {
        // Si n * 1/b
        if (calcul(n / b - arrondi(n / b, 4)) == 0)
          texte_corr += `$${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=${n}\\div${mise_en_evidence(b)}=${tex_nombrec(
            Algebrite.eval(n / b)
          )}$`;
        // si rÃ©sultat dÃ©cimal
        else
          texte_corr += `$${tex_fraction(a, b)}\\times${n}=${tex_fraction(
            n,
            b
          )}${simplification_de_fraction_avec_etapes(n, b)}$`; //si rÃ©sultat non dÃ©cimal
      } else {
        if (calcul(n / b - arrondi(n / b, 4)) == 0) {
          //si n/b dÃ©cimal calcul (n/b)*a
          texte_corr += `$${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${n}\\div${mise_en_evidence(
            b
          )})\\times${a}=${tex_nombrec(
            Algebrite.eval(n / b)
          )}\\times${a}=${tex_nombrec(Algebrite.eval((n / b) * a))}$<br>`;
        } else {
          if (calcul((n * a) / b - arrondi((n * a) / b, 4)) == 0) {
            // si n/b non dÃ©cimal, alors on se rabat sur (n*a)/b
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_nombrec(Algebrite.eval((n / b) * a))}$<br>`;
          } else {
            // si autre mÃ©thode et rÃ©sultat fractionnaire calcul (n*a)/b
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_fraction(n * a, mise_en_evidence(b))}$<br>`;
          }
          j = true;
        }
        if (
          calcul((n * a) / b - arrondi((n * a) / b, 4)) == 0 &&
          this.sup2 &&
          !j
        ) {
          // Si autres mÃ©thodes et si (a*n)/b dÃ©cimal calcul (n*a)/b
          texte_corr += ` $${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
            b
          )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(b)}=${tex_nombrec(
            Algebrite.eval((n / b) * a)
          )}$<br>`;
        } else {
          // si autre mÃ©thode et rÃ©sultat fractionnaire calcul (n*a)/b
          if (this.sup2 && !j)
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_fraction(n * a, mise_en_evidence(b))}$<br>`;
        }
        // si autre mÃ©thode et a/b dÃ©cimal calcul (a/b)*n
        if ((b == 2 || b == 4 || b == 5 || b == 8 || b == 10) && this.sup2)
          texte_corr += ` $${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${a}\\div${mise_en_evidence(
            b
          )})\\times${n}=${tex_nombrec(
            Algebrite.eval(a / b)
          )}\\times${n}=${tex_nombrec(Algebrite.eval((n / b) * a))}$`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_case_a_cocher = ["Forcer rÃ©sultat entier", true];
  this.besoin_formulaire2_case_a_cocher = ["Plusieurs mÃ©thodes", false];
}

/**
 * On achÃ¨te 2 aliments dont on connait la masse (un en grammes et l'autre en kilogrammes) et le prix au kilogramme. Il faut calculer le prix total.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C32
 */
function Probleme_course() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨me - Les courses";
  this.consigne = "";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prenom = choice([
      "Benjamin",
      "LÃ©a",
      "Aude",
      "Julie",
      "Corinne",
      "Mehdi",
      "Joaquim",
    ]);
    let masse_en_kg_de_aliment1 = Algebrite.eval(
      randint(2, 5) + randint(1, 9) / 10
    );
    let prix_aliment1 = Algebrite.eval(randint(2, 4) + randint(1, 9) / 10);
    let aliment1 = choice(["courgettes", "carottes", "pommes"]);
    let masse_en_g_de_aliment2 = randint(21, 97) * 10;
    let prix_aliment2 = Algebrite.eval(randint(12, 23) + randint(1, 9) / 10);
    let aliment2 = choice(["boeuf", "veau", "poulet"]);

    texte = `${prenom} achÃ¨te ${tex_nombre(
      masse_en_kg_de_aliment1
    )} kg de ${aliment1} Ã  ${tex_prix(prix_aliment1)} â¬/kg `;
    texte += `et ${masse_en_g_de_aliment2} g de ${aliment2} Ã  ${tex_prix(
      prix_aliment2
    )} â¬/kg. Quel est le prix total Ã  payer ?`;
    texte_corr =
      `Prix des ${aliment1} : ${tex_nombre(
        masse_en_kg_de_aliment1
      )} kg Ã ${tex_prix(prix_aliment1)} â¬/kg = ${tex_prix(
        Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
      )} â¬` + "<br>";
    texte_corr +=
      `Prix du ${aliment2} : ${tex_nombre(
        Algebrite.eval(masse_en_g_de_aliment2 / 1000)
      )} kg Ã ${tex_prix(prix_aliment2)} â¬/kg = ${tex_nombre(
        Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
      )} â¬ ` + "<br>";
    texte_corr += `Prix total Ã  payer : ${tex_nombre(
      Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
    )} â¬ + ${tex_nombre(
      Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
    )} â¬ â ${arrondi_virgule(
      Algebrite.eval(
        masse_en_kg_de_aliment1 * prix_aliment1 +
          (masse_en_g_de_aliment2 * prix_aliment2) / 1000
      )
    )} â¬<br>`;
    texte_corr += `<br><i>Le prix total aurait aussi pu Ãªtre trouvÃ© en un seul calcul</i> : ${tex_nombre(
      masse_en_kg_de_aliment1
    )} kg Ã ${tex_prix(prix_aliment1)} â¬/kg + ${tex_nombre(
      Algebrite.eval(masse_en_g_de_aliment2 / 1000)
    )} kg Ã ${tex_prix(prix_aliment2)} â¬/kg â ${arrondi_virgule(
      Algebrite.eval(
        masse_en_kg_de_aliment1 * prix_aliment1 +
          (masse_en_g_de_aliment2 * prix_aliment2) / 1000
      )
    )} â¬.`;

    if (!sortie_html) {
      texte_corr =
        `Prix des ${aliment1} : $${tex_nombre(
          masse_en_kg_de_aliment1
        )}~\\text{kg}\\times${tex_prix(
          prix_aliment1
        )}~\\text{\\euro{}/kg} = ${tex_prix(
          Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
        )}~\\text{\\euro}$` + "<br>";
      texte_corr +=
        `Prix du ${aliment2} : $${tex_nombre(
          Algebrite.eval(masse_en_g_de_aliment2 / 1000)
        )}~\\text{kg}\\times${tex_prix(
          prix_aliment2
        )}~\\text{\\euro{}/kg} = ${tex_nombre(
          Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
        )}~\\text{\\euro}$` + "<br>";
      texte_corr += `Prix total Ã  payer : $${tex_nombre(
        Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
      )}~\\text{\\euro} + ${tex_nombre(
        Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
      )}~\\text{\\euro} \\approx ${arrondi_virgule(
        Algebrite.eval(
          masse_en_kg_de_aliment1 * prix_aliment1 +
            (masse_en_g_de_aliment2 * prix_aliment2) / 1000
        )
      )}~\\text{\\euro}$<br>`;
    }

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);

    liste_de_question_to_contenu_sans_numero(this);
  };
}

/**
 * Calculer l'aire de 3 triangles dont une hauteur est tracÃ©e.
 *
 * Une figure dynamique est disponible sur laquelle on peut dÃ©placer le pied de la hauteur.
 *
 * Il n'existe pas de version LaTeX de cet exercice.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M20
 */
function Aire_de_triangles() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "Aires de triangles";
  this.consigne =
    "Calculer l'aire des 3 triangles suivants (vous pouvez dÃ©placer certains points).";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [500, 450];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let tableau_des_cotes = shuffle([3, 4, 5, 6, 7]); //pour s'assurer que les 3 cÃ´tÃ©s sont diffÃ©rents
    let c1 = tableau_des_cotes[0];
    let c2 = tableau_des_cotes[1];
    let c3 = tableau_des_cotes[2];
    let tableau_des_hauteurs = shuffle([3, 4, 5, 6]); //pour s'assurer que les 3 hauteurs sont diffÃ©rents
    let h1 = tableau_des_hauteurs[0];
    let h2 = tableau_des_hauteurs[1];
    let h3 = tableau_des_hauteurs[2];

    let codeBase64 = "";
    if (randint(1, 2) == 1) {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAABAAAABgAQTG9uZ3VldXJPcmllbnRlZQArIzE6IExlIHByZW1pZXIgcG9pbnQKIzI6IExlIGRldXhpw6htZSBwb2ludAAAAAIAAAADAAAAAAn#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAUEAAAAA#####wAAAAAAAUIAAAAA##########8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AAAAAAEQAAABAAEAAAAAAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAAAC#####wAAAAEACENTZWdtZW50Af####8AAAAAABAAAAEAAQAAAAAAAAAB#####wAAAAIAE0NNZXN1cmVBbmdsZU9yaWVudGUA#####wAEYW5nJwAAAAMAAAAAAAAAAf####8AAAABAAlDTG9uZ3VldXIB#####wAAAAAAAAAB#####wAAAAEAB0NNaWxpZXUA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAAAAAAB#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQH#####AAAAAABAAAAAAAAAAMAAAAAAAAAAAAAABxAAAAAAAAEAAAAC#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAUAAAAAAgAAAAYAAAABAAAAuP####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2#####wAAAAEACkNDb25zdGFudGVACSH7VEQtGP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmYAAAABAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAAAAAACAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUA8ZmZmZmZmAAAAAgAAAAMA#####wEAAAAAEAAAAQABAAAAAQAAAAMAAAAGAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAoAAAAAAAAAAAABMQAAAAUA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACYzEAATQAAAAKQBAAAAAAAAAAAAANAP####8AAmgxAAE0AAAACkAQAAAAAAAAAAAADQD#####AAJjMgABNQAAAApAFAAAAAAAAAAAAA0A#####wACaDIAATQAAAAKQBAAAAAAAAAAAAANAP####8AAmMzAAE1AAAACkAUAAAAAAAAAAAADQD#####AAJoMwABNAAAAApAEAAAAAAAAAAAAAsA#####wAAAAAAEAABQQDAKgAAAAAAAD#wAAAAAAAAAwABQDwAAAAAAABAYSAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAIAAAADv####8AAAACAAlDQ2VyY2xlT1IAAAAADwEAAAAAAQAAAA4AAAAIAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAA8AAAAAABAAAUIAwBgAAAAAAABAFAAAAAAAAAMAAUAXmRub7wU+AAAAEAAAAAMBAAAADwAAAAAAEAAAAQABAAAADgAAABEAAAACAP####8AAAAAABAAAUgAwCYAAAAAAABAFAAAAAAAAAMAAT#nUJEwLKgdAAAAEv####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAABMAAAASAAAADwD#####AQAAAAABAAAAEwAAAAgAAAAJAP####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAUAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABAAAAFgAAABMA#####wAAAAAAEAABQwC#8AAAAAAAAMA7AAAAAAAAAwACAAAAFgAAAAMA#####wAAAAAAEAAAAQABAAAADgAAABgAAAADAP####8AAAAAABAAAAEAAQAAABgAAAARAAAAAwD#####AAAAAAAQAAABAQEAAAATAAAAGAAAAAsA#####wAAAAAAEAABRADAJgAAAAAAAMA7AAAAAAAAAwABQHpQAAAAAABATYAAAAAAAAAAAA4A#####wAbU2VnbWVudCBkZSBsb25ndWV1ciBkb25uw6llAAAAAQAAAAIAAAACAAAACgAAABwAAAAPAAAAAB0BAAAAAAEAAAAcAAAACAAAAAoAAAAAEAEAAAAdAAAAAAAQAAFFAMAyAAAAAAAAwDAAAAAAAAADAAFADDWm90SREAAAAB4AAAADAQAAAB0AAAAAABAAAAEAAQAAABwAAAAfAAAAAgD#####AAAAAAAQAAFHAMAkAAAAAAAAQBAAAAAAAAADAAE#5pq7A1eUfwAAACAAAAARAP####8BAAAAABAAAAEAAQAAACEAAAAgAAAADwD#####AQAAAAABAAAAIQAAAAgAAAALAAAAABIA#####wAAACIAAAAjAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAACQAAAATAP####8AAAAAABAAAUYAwBAAAAAAAABAIAAAAAAAAAMAAgAAACQAAAADAP####8AAAAAABAAAAEAAQAAABwAAAAmAAAAAwD#####AAAAAAAQAAABAAEAAAAmAAAAHwAAAAMA#####wAAAAAAEAAAAQEBAAAAIQAAACYAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAABMAAAAY#####wAAAAEAC0NNZWRpYXRyaWNlAAAAACoBAAAAAA0AAAEAAQAAABMAAAAYAAAABgAAAAAqAQAAAAANAAABBQAAAAATAAAAGAAAAA8AAAAAKgEAAAAAAQAAACwAAAAKQDAAAAAAAAABAAAAEgAAAAAqAAAAKwAAAC0AAAATAAAAACoBAAAAAA0AAAEFAAEAAAAuAAAABQEAAAAqAAAAEwAAABgAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACEAAAAmAAAAFAAAAAAxAQAAAAANAAABAAEAAAAhAAAAJgAAAAYAAAAAMQEAAAAADQAAAQUAAAAAIQAAACYAAAAPAAAAADEBAAAAAAEAAAAzAAAACkAwAAAAAAAAAQAAABIAAAAAMQAAADIAAAA0AAAAEwAAAAAxAQAAAAANAAABBQABAAAANQAAAAUBAAAAMQAAACEAAAAmAAAACwD#####AAAAAAAQAAFNAMAoAAAAAAAAQBAAAAAAAAADAAFAS4AAAAAAAEBywAAAAAAAAAAADgD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAMAAAAOAAAAA8AAAAAOQEAAAAAAQAAADgAAAAIAAAADAAAAAAQAQAAADkAAAAAABAAAU4AwCIAAAAAAABACAAAAAAAAAMAAUAXx81SzkwjAAAAOgAAAAMBAAAAOQAAAAAAEAAAAQABAAAAOAAAADv#####AAAAAQAJQ0Ryb2l0ZUFCAP####8BAAAAABAAAAEAAQAAADgAAAA7AAAAAgD#####AAAAAAAQAAFJAAAAAAAAAAAAQAgAAAAAAAADAAE#99qox0vglgAAAD0AAAARAP####8BAAAAABAAAAEAAQAAAD4AAAA9AAAADwD#####AQAAAAABAAAAPgAAAAgAAAANAAAAABIA#####wAAAD8AAABAAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAAEEAAAATAP####8AAAAAABAAAU8AwAgAAAAAAADAPAAAAAAAAAMAAgAAAEEAAAADAP####8AAAAAABAAAAEAAQAAADsAAABDAAAAAwD#####AAAAAAAQAAABAAEAAABDAAAAOAAAAAMA#####wAAAAAAEAAAAQEBAAAAOwAAAD4AAAADAP####8AAAAAABAAAAEBAQAAAD4AAABD#####wAAAAIAF0NNYXJxdWVBbmdsZUdlb21ldHJpcXVlAP####8AAAAAAAEAAAABQDAAAAAAAAAAAABDAAAAPgAAADsAAAAWAP####8AAAAAAAEAAAABQDAAAAAAAAAAAAAYAAAAEwAAAA4AAAAWAP####8AAAAAAAEAAAABQDAAAAAAAAAAAAAmAAAAIQAAABwAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAAD4AAABDAAAAFAAAAABLAQAAAAANAAABAAEAAAA+AAAAQwAAAAYAAAAASwEAAAAADQAAAQUAAAAAPgAAAEMAAAAPAAAAAEsBAAAAAAEAAABNAAAACkAwAAAAAAAAAQAAABIAAAAASwAAAEwAAABOAAAAEwAAAABLAQAAAAANAAABBQABAAAATwAAAAUBAAAASwAAAD4AAABDAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAEwAAABgAAAABAAAAAFIAAAAAARAAAAEAAQAAABMBP#AAAAAAAAAAAAACAAAAAFIAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAFMAAAADAQAAAFIAAAAAABAAAAEBAQAAABMAAAAYAAAABAAAAABSAARhbmcnAAAAVAAAABMAAAAYAAAABQEAAABSAAAAEwAAABgAAAAGAAAAAFIAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAATAAAAGAAAAAcBAAAAUgAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAFgQAAAAAAABAAAAAgAAAAgAAABWAAAAAyBjbQIAAABXAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAIQAAACYAAAABAAAAAFoAAAAAARAAAAEAAQAAACEBP#AAAAAAAAAAAAACAAAAAFoAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAFsAAAADAQAAAFoAAAAAABAAAAEBAQAAACEAAAAmAAAABAAAAABaAARhbmcnAAAAXAAAACEAAAAmAAAABQEAAABaAAAAIQAAACYAAAAGAAAAAFoAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAhAAAAJgAAAAcBAAAAWgAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAGAQAAAAAAABAAAAAgAAAAgAAABeAAAAAyBjbQIAAABfAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAAAwAAAAIAAAACAAAAOwAAAEMAAAABAAAAAGIAAAAAARAAAAEAAQAAADsBP#AAAAAAAAAAAAACAAAAAGIAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAGMAAAADAQAAAGIAAAAAABAAAAEAAQAAADsAAABDAAAABAAAAABiAARhbmcnAAAAZAAAADsAAABDAAAABQEAAABiAAAAOwAAAEMAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAA+AAAAQwAAAAEAAAAAaAAAAAABEAAAAQABAAAAPgE#8AAAAAAAAAAAAAIAAAAAaAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAaQAAAAMBAAAAaAAAAAAAEAAAAQEBAAAAPgAAAEMAAAAEAAAAAGgABGFuZycAAABqAAAAPgAAAEMAAAAFAQAAAGgAAAA+AAAAQwAAAAYAAAAAaAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAD4AAABDAAAABwEAAABoAAAAAABAMAAAAAAAAEAQAAAAAAAAAAAAbhAAAAAAAAEAAAACAAAACAAAAGwAAAADIGNtAgAAAG0AAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAAOAAAAEQAAAAEAAAAAcAAAAAABEAAAAQABAAAADgE#8AAAAAAAAAAAAAIAAAAAcAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAcQAAAAMBAAAAcAAAAAAAEAAAAQABAAAADgAAABEAAAAEAAAAAHAABGFuZycAAAByAAAADgAAABEAAAAFAQAAAHAAAAAOAAAAEQAAAAYAAAAAcAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAARAAAABwEAAABwAAAAAADAJAAAAAAAAEAyAAAAAAAAAAAAdhAAAAAAAAEAAAACAAAACAAAAHQAAAADIGNtAgAAAHUAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAAfAAAAHAAAAAEAAAAAeAAAAAABEAAAAQABAAAAHwE#8AAAAAAAAAAAAAIAAAAAeAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAeQAAAAMBAAAAeAAAAAAAEAAAAQABAAAAHwAAABwAAAAEAAAAAHgABGFuZycAAAB6AAAAHwAAABwAAAAFAQAAAHgAAAAfAAAAHAAAAAYAAAAAeAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB8AAAAcAAAABwEAAAB4AAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAfhAAAAAAAAEAAAACAAAACAAAAHwAAAADIGNtAgAAAH0AAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAA4AAAAOwAAAAEAAAAAgAAAAAABEAAAAQABAAAAOAE#8AAAAAAAAAAAAAIAAAAAgAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAgQAAAAMBAAAAgAAAAAAAEAAAAQABAAAAOAAAADsAAAAEAAAAAIAABGFuZycAAACCAAAAOAAAADsAAAAFAQAAAIAAAAA4AAAAOwAAAAYAAAAAgAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADgAAAA7AAAABwEAAACAAAAAAADAJAAAAAAAAEAyAAAAAAAAAAAAhhAAAAAAAAEAAAACAAAACAAAAIQAAAADIGNtAgAAAIUAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAAOAAAAGAAAAAEAAAAAiAAAAAABEAAAAQABAAAADgE#8AAAAAAAAAAAAAIAAAAAiAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAiQAAAAMBAAAAiAAAAAAAEAAAAQABAAAADgAAABgAAAAEAAAAAIgABGFuZycAAACKAAAADgAAABgAAAAFAQAAAIgAAAAOAAAAGAAAAAYAAAAAiAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAAYAAAABwEAAACIAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAjhAAAAAAAAEAAAACAAAACAAAAIwAAAADIGNtAQAAAI0AAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAARAAAAGAAAAAEAAAAAkAAAAAABEAAAAQABAAAAEQE#8AAAAAAAAAAAAAIAAAAAkAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAkQAAAAMBAAAAkAAAAAAAEAAAAQABAAAAEQAAABgAAAAEAAAAAJAABGFuZycAAACSAAAAEQAAABgAAAAFAQAAAJAAAAARAAAAGAAAAAYAAAAAkAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABEAAAAYAAAABwEAAACQAAAAAABAMQAAAAAAAD#wAAAAAAAAAAAAlhAAAAAAAAEAAAACAAAACAAAAJQAAAADIGNtAQAAAJUAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAAfAAAAJgAAAAEAAAAAmAAAAAABEAAAAQABAAAAHwE#8AAAAAAAAAAAAAIAAAAAmAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAmQAAAAMBAAAAmAAAAAAAEAAAAQABAAAAHwAAACYAAAAEAAAAAJgABGFuZycAAACaAAAAHwAAACYAAAAFAQAAAJgAAAAfAAAAJgAAAAYAAAAAmAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB8AAAAmAAAABwEAAACYAAAAAADAMAAAAAAAAEAqAAAAAAAAAAAAnhAAAAAAAAEAAAACAAAACAAAAJwAAAADIGNtAQAAAJ0AAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAAmAAAAHAAAAAEAAAAAoAAAAAABEAAAAQABAAAAJgE#8AAAAAAAAAAAAAIAAAAAoAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAoQAAAAMBAAAAoAAAAAAAEAAAAQABAAAAJgAAABwAAAAEAAAAAKAABGFuZycAAACiAAAAJgAAABwAAAAFAQAAAKAAAAAmAAAAHAAAAAYAAAAAoAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAcAAAABwEAAACgAAAAAABAMQAAAAAAAEAUAAAAAAAAAAAAphAAAAAAAAEAAAACAAAACAAAAKQAAAADIGNtAQAAAKUAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAA4AAAAQwAAAAEAAAAAqAAAAAABEAAAAQABAAAAOAE#8AAAAAAAAAAAAAIAAAAAqAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAqQAAAAMBAAAAqAAAAAAAEAAAAQABAAAAOAAAAEMAAAAEAAAAAKgABGFuZycAAACqAAAAOAAAAEMAAAAFAQAAAKgAAAA4AAAAQwAAAAYAAAAAqAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADgAAABDAAAABwEAAACoAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAArhAAAAAAAAEAAAACAAAACAAAAKwAAAADIGNtAQAAAK0AAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAAA7AAAAQwAAAAEAAAAAsAAAAAABEAAAAQABAAAAOwE#8AAAAAAAAAAAAAIAAAAAsAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAsQAAAAMBAAAAsAAAAAAAEAAAAQABAAAAOwAAAEMAAAAEAAAAALAABGFuZycAAACyAAAAOwAAAEMAAAAFAQAAALAAAAA7AAAAQwAAAAYAAAAAsAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADsAAABDAAAABwEAAACwAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAthAAAAAAAAEAAAACAAAACAAAALQAAAADIGNtAQAAALUAAAAH##########8=";
    } else {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAABAAAABgAQTG9uZ3VldXJPcmllbnRlZQArIzE6IExlIHByZW1pZXIgcG9pbnQKIzI6IExlIGRldXhpw6htZSBwb2ludAAAAAIAAAADAAAAAAn#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAUEAAAAA#####wAAAAAAAUIAAAAA##########8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AAAAAAEQAAABAAEAAAAAAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAAAC#####wAAAAEACENTZWdtZW50Af####8AAAAAABAAAAEAAQAAAAAAAAAB#####wAAAAIAE0NNZXN1cmVBbmdsZU9yaWVudGUA#####wAEYW5nJwAAAAMAAAAAAAAAAf####8AAAABAAlDTG9uZ3VldXIB#####wAAAAAAAAAB#####wAAAAEAB0NNaWxpZXUA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAAAAAAB#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQH#####AAAAAABAAAAAAAAAAMAAAAAAAAAAAAAABxAAAAAAAAEAAAAC#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAUAAAAAAgAAAAYAAAABAAAAw#####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2#####wAAAAEACkNDb25zdGFudGVACSH7VEQtGP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmYAAAABAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAAAAAACAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUA8ZmZmZmZmAAAAAgAAAAMA#####wEAAAAAEAAAAQABAAAAAQAAAAMAAAAGAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAoAAAAAAAAAAAABMQAAAAUA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACYzEAATQAAAAKQBAAAAAAAAAAAAANAP####8AAmgxAAE0AAAACkAQAAAAAAAAAAAADQD#####AAJjMgABNQAAAApAFAAAAAAAAAAAAA0A#####wACaDIAATQAAAAKQBAAAAAAAAAAAAANAP####8AAmMzAAE1AAAACkAUAAAAAAAAAAAADQD#####AAJoMwABNAAAAApAEAAAAAAAAAAAAAsA#####wAAAAAAEAABQQDAMgAAAAAAAMAwAAAAAAAAAwABQFDAAAAAAABAQoAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAIAAAADv####8AAAACAAlDQ2VyY2xlT1IAAAAADwEAAAAAAQAAAA4AAAAIAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAA8AAAAAABAAAUIAwDMAAAAAAADACAAAAAAAAAMAAUAS60sQO3OGAAAAEAAAAAMBAAAADwAAAAAAEAAAAQABAAAADgAAABEAAAACAP####8AAAAAABAAAUgAP#AAAAAAAAA#8AAAAAAAAAMAAT#ouymi+6YKAAAAEv####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAABMAAAASAAAADwD#####AQAAAAABAAAAEwAAAAgAAAAJAP####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAUAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABAAAAFgAAABMA#####wAAAAAAEAABQwBAIAAAAAAAAMAoAAAAAAAAAwACAAAAFgAAAAMA#####wAAAAAAEAAAAQABAAAADgAAABgAAAADAP####8AAAAAABAAAAEAAQAAABgAAAARAAAAAwD#####AAAAAAAQAAABAQEAAAATAAAAGAAAAAsA#####wAAAAAAEAABRABAEAAAAAAAAAAAAAAAAAAAAwABQH0QAAAAAABAZGAAAAAAAAAAAA4A#####wAbU2VnbWVudCBkZSBsb25ndWV1ciBkb25uw6llAAAAAQAAAAIAAAACAAAACgAAABwAAAAPAAAAAB0BAAAAAAEAAAAcAAAACAAAAAoAAAAAEAEAAAAdAAAAAAAQAAFFAMAyAAAAAAAAwDAAAAAAAAADAAFAA5gUsW2nVQAAAB4AAAADAQAAAB0AAAAAABAAAAEAAQAAABwAAAAfAAAAAgD#####AAAAAAAQAAFHAMA3AAAAAAAAwCIAAAAAAAADAAE#5pq7A1eUfwAAACAAAAARAP####8BAAAAABAAAAEAAQAAACEAAAAgAAAADwD#####AQAAAAABAAAAIQAAAAgAAAALAAAAABIA#####wAAACIAAAAjAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAACQAAAATAP####8AAAAAABAAAUYAwDIAAAAAAAC#8AAAAAAAAAMAAgAAACQAAAADAP####8AAAAAABAAAAEAAQAAABwAAAAmAAAAAwD#####AAAAAAAQAAABAAEAAAAmAAAAHwAAAAMA#####wAAAAAAEAAAAQEBAAAAIQAAACYAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAABMAAAAY#####wAAAAEAC0NNZWRpYXRyaWNlAAAAACoBAAAAAA0AAAEAAQAAABMAAAAYAAAABgAAAAAqAQAAAAANAAABBQAAAAATAAAAGAAAAA8AAAAAKgEAAAAAAQAAACwAAAAKQDAAAAAAAAABAAAAEgAAAAAqAAAAKwAAAC0AAAATAAAAACoBAAAAAA0AAAEFAAEAAAAuAAAABQEAAAAqAAAAEwAAABgAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACEAAAAmAAAAFAAAAAAxAQAAAAANAAABAAEAAAAhAAAAJgAAAAYAAAAAMQEAAAAADQAAAQUAAAAAIQAAACYAAAAPAAAAADEBAAAAAAEAAAAzAAAACkAwAAAAAAAAAQAAABIAAAAAMQAAADIAAAA0AAAAEwAAAAAxAQAAAAANAAABBQABAAAANQAAAAUBAAAAMQAAACEAAAAmAAAACwD#####AAAAAAAQAAFNAMAgAAAAAAAAwD0AAAAAAAADAAFAdBAAAAAAAEBwcAAAAAAAAAAADgD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAMAAAAOAAAAA8AAAAAOQEAAAAAAQAAADgAAAAIAAAADAAAAAAQAQAAADkAAAAAABAAAU4AwBwAAAAAAADAOgAAAAAAAAMAAUAJOHyA#SdXAAAAOgAAAAMBAAAAOQAAAAAAEAAAAQABAAAAOAAAADv#####AAAAAQAJQ0Ryb2l0ZUFCAP####8BAAAAABAAAAEAAQAAADgAAAA7AAAAAgD#####AAAAAAAQAAFJAMAIAAAAAAAAwDwAAAAAAAADAAE#99qox0vglgAAAD0AAAARAP####8BAAAAABAAAAEAAQAAAD4AAAA9AAAADwD#####AQAAAAABAAAAPgAAAAgAAAANAAAAABIA#####wAAAD8AAABAAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAAEEAAAATAP####8AAAAAABAAAU8AwBwAAAAAAABAHAAAAAAAAAMAAgAAAEEAAAADAP####8AAAAAABAAAAEAAQAAADsAAABDAAAAAwD#####AAAAAAAQAAABAAEAAABDAAAAOAAAAAMA#####wAAAAAAEAAAAQEBAAAAOwAAAD4AAAADAP####8AAAAAABAAAAEBAQAAAD4AAABD#####wAAAAIAF0NNYXJxdWVBbmdsZUdlb21ldHJpcXVlAP####8AAAAAAAEAAAABQDAAAAAAAAAAAABDAAAAPgAAADsAAAAWAP####8AAAAAAAEAAAABQDAAAAAAAAAAAAAYAAAAEwAAAA4AAAAWAP####8AAAAAAAEAAAABQDAAAAAAAAAAAAAmAAAAIQAAABwAAAAOAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAAD4AAABDAAAAFAAAAABLAQAAAAANAAABAAEAAAA+AAAAQwAAAAYAAAAASwEAAAAADQAAAQUAAAAAPgAAAEMAAAAPAAAAAEsBAAAAAAEAAABNAAAACkAwAAAAAAAAAQAAABIAAAAASwAAAEwAAABOAAAAEwAAAABLAQAAAAANAAABBQABAAAATwAAAAUBAAAASwAAAD4AAABDAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAEwAAABgAAAABAAAAAFIAAAAAARAAAAEAAQAAABMBP#AAAAAAAAAAAAACAAAAAFIAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAFMAAAADAQAAAFIAAAAAABAAAAEBAQAAABMAAAAYAAAABAAAAABSAARhbmcnAAAAVAAAABMAAAAYAAAABQEAAABSAAAAEwAAABgAAAAGAAAAAFIAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAATAAAAGAAAAAcBAAAAUgAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAFgQAAAAAAABAAAAAgAAAAgAAABWAAAAAyBjbQIAAABXAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAAAwAAAAIAAAACAAAAIQAAACYAAAABAAAAAFoAAAAAARAAAAEAAQAAACEBP#AAAAAAAAAAAAACAAAAAFoAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAFsAAAADAQAAAFoAAAAAABAAAAEBAQAAACEAAAAmAAAABAAAAABaAARhbmcnAAAAXAAAACEAAAAmAAAABQEAAABaAAAAIQAAACYAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAADAAAAAgAAAAIAAAA7AAAAQwAAAAEAAAAAYAAAAAABEAAAAQABAAAAOwE#8AAAAAAAAAAAAAIAAAAAYAAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAYQAAAAMBAAAAYAAAAAAAEAAAAQABAAAAOwAAAEMAAAAEAAAAAGAABGFuZycAAABiAAAAOwAAAEMAAAAFAQAAAGAAAAA7AAAAQwAAAA4A#####wAQTG9uZ3VldXJPcmllbnRlZQAAAAQAAAADAAAAAgAAAD4AAABDAAAAAQAAAABmAAAAAAEQAAABAAEAAAA+AT#wAAAAAAAAAAAAAgAAAABmAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAABnAAAAAwEAAABmAAAAAAAQAAABAQEAAAA+AAAAQwAAAAQAAAAAZgAEYW5nJwAAAGgAAAA+AAAAQwAAAAUBAAAAZgAAAD4AAABDAAAABgAAAABmAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAPgAAAEMAAAAHAQAAAGYAAAAAAMAyAAAAAAAAwAgAAAAAAAAAAABsEAAAAAAAAQAAAAIAAAAIAAAAagAAAAMgY20CAAAAawAAAA4A#####wAQTG9uZ3VldXJPcmllbnRlZQAAAAQAAAADAAAAAgAAAA4AAAARAAAAAQAAAABuAAAAAAEQAAABAAEAAAAOAT#wAAAAAAAAAAAAAgAAAABuAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAABvAAAAAwEAAABuAAAAAAAQAAABAAEAAAAOAAAAEQAAAAQAAAAAbgAEYW5nJwAAAHAAAAAOAAAAEQAAAAUBAAAAbgAAAA4AAAARAAAABgAAAABuAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAABEAAAAHAQAAAG4AAAAAAMA2AAAAAAAAQDQAAAAAAAAAAAB0EAAAAAAAAQAAAAIAAAAIAAAAcgAAAAMgY20CAAAAcwAAAA4A#####wAQTG9uZ3VldXJPcmllbnRlZQAAAAQAAAADAAAAAgAAAB8AAAAcAAAAAQAAAAB2AAAAAAEQAAABAAEAAAAfAT#wAAAAAAAAAAAAAgAAAAB2AAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAAB3AAAAAwEAAAB2AAAAAAAQAAABAAEAAAAfAAAAHAAAAAQAAAAAdgAEYW5nJwAAAHgAAAAfAAAAHAAAAAUBAAAAdgAAAB8AAAAcAAAABgAAAAB2AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHwAAABwAAAAHAQAAAHYAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAB8EAAAAAAAAQAAAAIAAAAIAAAAegAAAAMgY20CAAAAewAAAA4A#####wAQTG9uZ3VldXJPcmllbnRlZQAAAAMAAAACAAAAAgAAADgAAAA7AAAAAQAAAAB+AAAAAAEQAAABAAEAAAA4AT#wAAAAAAAAAAAAAgAAAAB+AAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAAB#AAAAAwEAAAB+AAAAAAAQAAABAAEAAAA4AAAAOwAAAAQAAAAAfgAEYW5nJwAAAIAAAAA4AAAAOwAAAAUBAAAAfgAAADgAAAA7AAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAOwAAADgAAAABAAAAAIQAAAAAARAAAAEAAQAAADsBP#AAAAAAAAAAAAACAAAAAIQAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAIUAAAADAQAAAIQAAAAAABAAAAEAAQAAADsAAAA4AAAABAAAAACEAARhbmcnAAAAhgAAADsAAAA4AAAABQEAAACEAAAAOwAAADgAAAAGAAAAAIQAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA7AAAAOAAAAAcBAAAAhAAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAIoQAAAAAAABAAAAAgAAAAgAAACIAAAAAyBjbQIAAACJAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAEQAAABgAAAABAAAAAIwAAAAAARAAAAEAAQAAABEBP#AAAAAAAAAAAAACAAAAAIwAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAI0AAAADAQAAAIwAAAAAABAAAAEAAQAAABEAAAAYAAAABAAAAACMAARhbmcnAAAAjgAAABEAAAAYAAAABQEAAACMAAAAEQAAABgAAAAGAAAAAIwAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAGAAAAAcBAAAAjAAAAAAAQBQAAAAAAABAMwAAAAAAAAAAAJIQAAAAAAABAAAAAgAAAAgAAACQAAAAAyBjbQEAAACRAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAADgAAABgAAAABAAAAAJQAAAAAARAAAAEAAQAAAA4BP#AAAAAAAAAAAAACAAAAAJQAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAJUAAAADAQAAAJQAAAAAABAAAAEAAQAAAA4AAAAYAAAABAAAAACUAARhbmcnAAAAlgAAAA4AAAAYAAAABQEAAACUAAAADgAAABgAAAAGAAAAAJQAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAOAAAAGAAAAAcBAAAAlAAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAJoQAAAAAAABAAAAAgAAAAgAAACYAAAAAyBjbQEAAACZAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAJgAAAB8AAAABAAAAAJwAAAAAARAAAAEAAQAAACYBP#AAAAAAAAAAAAACAAAAAJwAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAJ0AAAADAQAAAJwAAAAAABAAAAEAAQAAACYAAAAfAAAABAAAAACcAARhbmcnAAAAngAAACYAAAAfAAAABQEAAACcAAAAJgAAAB8AAAAGAAAAAJwAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAmAAAAHwAAAAcBAAAAnAAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAKIQAAAAAAABAAAAAgAAAAgAAACgAAAAAyBjbQEAAAChAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAMAAAACAAAAJgAAABwAAAABAAAAAKQAAAAAARAAAAEAAQAAACYBP#AAAAAAAAAAAAACAAAAAKQAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAKUAAAADAQAAAKQAAAAAABAAAAEAAQAAACYAAAAcAAAABAAAAACkAARhbmcnAAAApgAAACYAAAAcAAAABQEAAACkAAAAJgAAABwAAAAGAAAAAKQAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAmAAAAHAAAAAcBAAAApAAAAAAAQAgAAAAAAABAMwAAAAAAAAAAAKoQAAAAAAABAAAAAgAAAAgAAACoAAAAAyBjbQEAAACpAAAADgD#####ABBMb25ndWV1ck9yaWVudGVlAAAABAAAAAIAAAACAAAAJgAAACEAAAABAAAAAKwAAAAAARAAAAEAAQAAACYBP#AAAAAAAAAAAAACAAAAAKwAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAK0AAAAEAAAAAKwABGFuZycAAACuAAAAJgAAACEAAAAFAQAAAKwAAAAmAAAAIQAAAAYAAAAArAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAhAAAABwEAAACsAAAAAABALgAAAAAAAEAmAAAAAAAAAAAAsRAAAAAAAAEAAAACAAAACAAAAK8AAAADIGNtAQAAALAAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAABDAAAAOwAAAAEAAAAAswAAAAABEAAAAQABAAAAQwE#8AAAAAAAAAAAAAIAAAAAswAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAtAAAAAMBAAAAswAAAAAAEAAAAQABAAAAQwAAADsAAAAEAAAAALMABGFuZycAAAC1AAAAQwAAADsAAAAFAQAAALMAAABDAAAAOwAAAAYAAAAAswAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEMAAAA7AAAABwEAAACzAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAuRAAAAAAAAEAAAACAAAACAAAALcAAAADIGNtAQAAALgAAAAOAP####8AEExvbmd1ZXVyT3JpZW50ZWUAAAAEAAAAAwAAAAIAAABDAAAAOAAAAAEAAAAAuwAAAAABEAAAAQABAAAAQwE#8AAAAAAAAAAAAAIAAAAAuwAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAvAAAAAMBAAAAuwAAAAAAEAAAAQABAAAAQwAAADgAAAAEAAAAALsABGFuZycAAAC9AAAAQwAAADgAAAAFAQAAALsAAABDAAAAOAAAAAYAAAAAuwAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEMAAAA4AAAABwEAAAC7AAAAAABAKAAAAAAAAEAsAAAAAAAAAAAAwRAAAAAAAAEAAAACAAAACAAAAL8AAAADIGNtAQAAAMAAAAAH##########8=";
    }
    texte_corr = `$\\mathcal{A}_{ABC}=\\dfrac{1}{2}\\times AB\\times HC=\\dfrac{1}{2}\\times${c1}~\\text{cm}\\times ${h1}~\\text{cm}=${tex_nombre(
      Algebrite.eval((c1 * h1) / 2)
    )}~\\text{cm}^2$`;
    texte_corr += "<br>";
    texte_corr += `$\\mathcal{A}_{DEF}=\\dfrac{1}{2}\\times DE\\times GF=\\dfrac{1}{2}\\times${c2}~\\text{cm}\\times ${h2}~\\text{cm}=${tex_nombre(
      Algebrite.eval((c2 * h2) / 2)
    )}~\\text{cm}^2$`;
    texte_corr += "<br>";
    texte_corr += `$\\mathcal{A}_{ABC}=\\dfrac{1}{2}\\times MN\\times IO=\\dfrac{1}{2}\\times${c3}~\\text{cm}\\times ${h3}~\\text{cm}=${tex_nombre(
      Algebrite.eval((c3 * h3) / 2)
    )}~\\text{cm}^2$`;

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c1", "${c1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c2", "${c2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c3", "${c3}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h3", "${h3}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };
}

/**
 * 4 cercles sont tracÃ©s, 2 dont on connait le rayon et 2 dont on connait le diamÃ¨tre.
 * * 1 : Calculer le pÃ©rimÃ¨tre de cercles
 * * 2 : Calculer l'aire de disques
 * * 3 : Calculer le pÃ©rimÃ¨tre et l'aire de disques
 *
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M22-1
 */
function Perimetre_aire_disques(pa = 3) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de disques";
  this.sup = pa; // 1 : pÃ©rimÃ¨tre, 2 : aire, 3 : pÃ©rimÃ¨tres et aires
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [500, 500];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let tableau_des_rayons = shuffle([2, 3, 4, 5, 6, 7, 8]); //pour s'assurer que les 4 rayons sont diffÃ©rents
    let r1 = tableau_des_rayons[0];
    let r2 = tableau_des_rayons[1];
    let r3 = tableau_des_rayons[2];
    let r4 = tableau_des_rayons[3];
    if (this.sup == 1) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre des 4 cercles suivants.";
    }
    if (this.sup == 2) {
      this.consigne = "Calculer l'aire des 4 disques suivants.";
    }
    if (this.sup == 3) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 4 disques suivants.";
    }

    this.consigne +=
      "</br>Donner la valeur exacte et une valeur approchÃ©e au dixiÃ¨me prÃ¨s.";

    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAAAAAAAAQAAAEv#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFACAAAAAAAAEB#UAAAAAAA#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUA8ZmZmZmZmAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQANQ1BvaW50QmFzZUVudAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAyAAAAAAAAAQEAAAARAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAAAAAAAAAAAAAQH#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEAAAABH#####AAAAAQALQ01lZGlhdHJpY2UAAAAAEwEAAAAAEAAAAQABAAAAEAAAABH#####AAAAAQAHQ01pbGlldQAAAAATAQAAAAAQAAABBQAAAAAQAAAAEf####8AAAACAAlDQ2VyY2xlT1IAAAAAEwEAAAAAAQAAABUAAAABQDAAAAAAAAABAAAACAAAAAATAAAAFAAAABYAAAAJAAAAABMBAAAAABAAAAEFAAEAAAAXAAAAEAEAAAATAAAAEAAAABH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABMBAAAAAQAAABgRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAGQAAABIA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEgAAABEAAAATAAAAABsBAAAAABAAAAEAAQAAABIAAAARAAAAFAAAAAAbAQAAAAAQAAABBQAAAAASAAAAEQAAABUAAAAAGwEAAAAAAQAAAB0AAAABQDAAAAAAAAABAAAACAAAAAAbAAAAHAAAAB4AAAAJAAAAABsBAAAAABAAAAEFAAEAAAAfAAAAEAEAAAAbAAAAEgAAABEAAAAWAQAAABsBAAAAAQAAACARAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAIf####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAUAAAAAAAAAAAAAUAqAAAAAAAAAAAAFwD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACgAAAAFAKgAAAAAAAAAAAAFAKgAAAAAAAAAAABcA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAoAAAABQBQAAAAAAAAAAAABQBDMzMzMzM0AAAAXAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAqAAAAAAAAAAAAAUAQzMzMzMzN#####wAAAAEAB0NDYWxjdWwA#####wACcjEAATgAAAABQCAAAAAAAAAAAAAYAP####8AAnIyAAE4AAAAAUAgAAAAAAAAAAAAGAD#####AAJyMwABOAAAAAFAIAAAAAAAAAAAABgA#####wACcjQAATgAAAABQCAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAjAAAADQMAAAAOAAAAJwAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAkAAAADQMAAAAOAAAAKAAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAlAAAADQMAAAAOAAAAKQAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAmAAAADQMAAAAOAAAAKgAAAAFAAAAAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABP+2jc+MfDgIAAAArAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAT#oCnbou8r7AAAALgAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAFAA2#XuqaBNQAAACwAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAUiuM2Ua#MAAAAt#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wEAAAAAEAAAAQABAAAAMQAAACQAAAAaAP####8BAAAAABAAAAEAAQAAADIAAAAl#####wAAAAEAI0NBdXRyZVBvaW50SW50ZXJzZWN0aW9uRHJvaXRlQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAsAAAAMwAAADEAAAAbAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAtAAAANAAAADL#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQEBAAAAIwAAAC8AAAAcAP####8AAAAAABAAAAEBAQAAADEAAAA1AAAAHAD#####AAAAAAAQAAABAQEAAAAyAAAANgAAABwA#####wAAAAAAEAAAAQEBAAAAJgAAADAAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAjAAAALwAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAACYAAAAwAAAAFgD#####AAAAAABAEAAAAAAAAEAUAAAAAAAAAAAAOxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAyBjbQIAAAAnAAAAGAD#####AAJkMgAEMipyMgAAAA0CAAAAAUAAAAAAAAAAAAAADgAAACgAAAAYAP####8AAmQzAAQyKnIzAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAKQAAABYA#####wAAAAAAQBQAAAAAAADALAAAAAAAAAAAACQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPgAAABYA#####wAAAAAAQBAAAAAAAADAMQAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPwAAABYA#####wAAAAAAQBAAAAAAAABAAAAAAAAAAAAAADwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAJjbQIAAAAqAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUAC6DhJtPdjAAAAKwAAABkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAE#54KANM#JugAAACwAAAAZAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAH6z0QhlKUAAAAtAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUABlMNYoHZ0AAAALv####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwDUAAAAAAADANwAAAAAAAAAAAEMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQyNMKDEpAAAAHQD#####AAAAAABAGAAAAAAAAMAwAAAAAAAAAAAARBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZDI0woMikAAAAdAP####8AAAAAAMA3AAAAAAAAwDUAAAAAAAAAAABFEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAABkMjTCgzKQAAAB0A#####wAAAAAAwDgAAAAAAADANQAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQyNMKDQpAAAADv##########";
    //	let codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAH0AAAB9AAAAQEAAAAAAAAAAQAAAEv#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFACAAAAAAAAEB#UAAAAAAA#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUA8ZmZmZmZmAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQANQ1BvaW50QmFzZUVudAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAyAAAAAAAAAQEAAAARAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAAAAAAAAAAAAAQH#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEAAAABH#####AAAAAQALQ01lZGlhdHJpY2UAAAAAEwEAAAAAEAAAAQABAAAAEAAAABH#####AAAAAQAHQ01pbGlldQAAAAATAQAAAAAQAAABBQAAAAAQAAAAEf####8AAAACAAlDQ2VyY2xlT1IAAAAAEwEAAAAAAQAAABUAAAABQDAAAAAAAAABAAAACAAAAAATAAAAFAAAABYAAAAJAAAAABMBAAAAABAAAAEFAAEAAAAXAAAAEAEAAAATAAAAEAAAABH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABMBAAAAAQAAABgRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAGQAAABIA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEgAAABEAAAATAAAAABsBAAAAABAAAAEAAQAAABIAAAARAAAAFAAAAAAbAQAAAAAQAAABBQAAAAASAAAAEQAAABUAAAAAGwEAAAAAAQAAAB0AAAABQDAAAAAAAAABAAAACAAAAAAbAAAAHAAAAB4AAAAJAAAAABsBAAAAABAAAAEFAAEAAAAfAAAAEAEAAAAbAAAAEgAAABEAAAAWAQAAABsBAAAAAQAAACARAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAIf####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAUAAAAAAAAAAAAAUAqAAAAAAAAAAAAFwD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACgAAAAFAKgAAAAAAAAAAAAFAKgAAAAAAAAAAABcA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAoAAAABQBQAAAAAAAAAAAABQBDMzMzMzM0AAAAXAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAqAAAAAAAAAAAAAUAQzMzMzMzN#####wAAAAEAB0NDYWxjdWwA#####wACcjEAATgAAAABQCAAAAAAAAAAAAAYAP####8AAnIyAAE4AAAAAUAgAAAAAAAAAAAAGAD#####AAJyMwABOAAAAAFAIAAAAAAAAAAAABgA#####wACcjQAATgAAAABQCAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAjAAAADQMAAAAOAAAAJwAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAkAAAADQMAAAAOAAAAKAAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAlAAAADQMAAAAOAAAAKQAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAmAAAADQMAAAAOAAAAKgAAAAFAAAAAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABP+2jc+MfDgIAAAArAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAT#oCnbou8r7AAAALgAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAFAA2#XuqaBNQAAACwAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAUiuM2Ua#MAAAAt#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wEAAAAADQAAAQABAAAAMQAAACQAAAAaAP####8BAAAAAA0AAAEAAQAAADIAAAAl#####wAAAAEAI0NBdXRyZVBvaW50SW50ZXJzZWN0aW9uRHJvaXRlQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAsAAAAMwAAADEAAAAbAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAtAAAANAAAADL#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQEBAAAAIwAAAC8AAAAcAP####8AAAAAABAAAAEBAQAAADEAAAA1AAAAHAD#####AAAAAAAQAAABAQEAAAAyAAAANgAAABwA#####wAAAAAAEAAAAQEBAAAAJgAAADAAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAjAAAALwAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAACYAAAAwAAAAFgD#####AAAAAABAEAAAAAAAAEAUAAAAAAAAAAAAOxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAyBjbQIAAAAnAAAAGAD#####AAJkMgAEMipyMgAAAA0CAAAAAUAAAAAAAAAAAAAADgAAACgAAAAYAP####8AAmQzAAQyKnIzAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAKQAAABYA#####wAAAAAAQBQAAAAAAADALAAAAAAAAAAAACQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPgAAABYA#####wAAAAAAQBAAAAAAAADAMQAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPwAAABYA#####wAAAAAAQBAAAAAAAABAAAAAAAAAAAAAADwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAJjbQIAAAAqAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUAC6DhJtPdjAAAAKwAAABkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAE#54KANM#JugAAACwAAAAZAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAH6z0QhlKUAAAAtAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUABlMNYoHZ0AAAALv####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwDAAAAAAAADAMwAAAAAAAAAAAEMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAPJFxtYXRoY2Fse0N9XzEkAAAAHQD#####AAAAAABAGAAAAAAAAMAwAAAAAAAAAAAARBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAA8kXG1hdGhjYWx7Q31fMiQAAAAdAP####8AAAAAAMAyAAAAAAAAwDQAAAAAAAAAAABFEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAADyRcbWF0aGNhbHtDfV8zJAAAAB0A#####wAAAAAAwDMAAAAAAADAMAAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAPJFxtYXRoY2Fse0N9XzQkAAAADv##########";
    //  Si affichage LaTeX alors bug de MG32
    texte_corr = "";
    if (this.sup == 1) {
      //si on ne demande pas les aires
      texte_corr = `$\\mathcal{P}_1=2\\times${r1}\\times\\pi=${
        2 * r1
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r1 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_2=${2 * r2}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r2 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_3=${2 * r3}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r3 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_4=2\\times${r4}\\times\\pi=${
        2 * r4
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r4 * Math.PI), 1)
      )}$ cm<br>`;
    }

    if (this.sup == 2) {
      texte_corr += `$\\mathcal{A}_1=${r1}\\times${r1}\\times\\pi=${
        r1 * r1
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r1 * r1 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_2$ est ${
        2 * r2
      } cm donc son rayon est ${r2} cm.<br>`;
      texte_corr += `$\\mathcal{A}_2=${r2}\\times${r2}\\times\\pi=${
        r2 * r2
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r2 * r2 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_3$ est ${
        2 * r3
      } cm donc son rayon est ${r3} cm.<br>`;
      texte_corr += `$\\mathcal{A}_3=${r3}\\times${r3}\\times\\pi=${
        r3 * r3
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r3 * r3 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `$\\mathcal{A}_4=${r4}\\times${r4}\\times\\pi=${
        r4 * r4
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r4 * r4 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
    }

    if (this.sup == 3) {
      texte_corr = `$\\mathcal{P}_1=2\\times${r1}\\times\\pi=${
        2 * r1
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r1 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_2=${2 * r2}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r2 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_3=${2 * r3}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r3 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_4=2\\times${r4}\\times\\pi=${
        2 * r4
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r4 * Math.PI), 1)
      )}$ cm<br>`;

      texte_corr += `<br>`;

      texte_corr += `$\\mathcal{A}_1=${r1}\\times${r1}\\times\\pi=${
        r1 * r1
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r1 * r1 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_2$ est ${
        2 * r2
      } cm donc son rayon est ${r2} cm.<br>`;
      texte_corr += `$\\mathcal{A}_2=${r2}\\times${r2}\\times\\pi=${
        r2 * r2
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r2 * r2 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_3$ est ${
        2 * r3
      } cm donc son rayon est ${r3} cm.<br>`;
      texte_corr += `$\\mathcal{A}_3=${r3}\\times${r3}\\times\\pi=${
        r3 * r3
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r3 * r3 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
      texte_corr += `$\\mathcal{A}_4=${r4}\\times${r4}\\times\\pi=${
        r4 * r4
      }\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(r4 * r4 * Math.PI), 1)
      )}~\\text{cm}^2$<br>`;
    }

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r1", "${r1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r2", "${r2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r3", "${r3}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r4", "${r4}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : PÃ©rimÃ¨tres\n\
2 : Aires\n3 : PÃ©rimÃ¨tres et aires",
  ];
}

/**
 * 3 figures sont donnÃ©es, 1 quart de disque, un demi-disque et un 3-quarts de disque
 * * 1 : Calculer les pÃ©rimÃ¨tres
 * * 2 : Calculer les aires
 * * 3 : Calculer les pÃ©rimÃ¨tres et aires
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©Ã©fÃ©rence 6M22-2
 */
function Perimetre_aire_et_portions_de_disques(pa = 3) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de portions de cercles";
  this.consigne =
    "Calculer le pÃ©rimÃ¨tre et l'aire de chacune des figures suivantes";
  this.sup = pa; // 1 : pÃ©rimÃ¨tre, 2 : aire, 3 : pÃ©rimÃ¨tres et aires
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [600, 450];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let r = randint(1, 5);
    let r2 = randint(2, 4);
    let r3 = randint(2, 4);
    let figure = randint(1, 2);
    let codeBase64 = "";
    if (this.sup == 1) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre de chacune des figures suivantes";
    }
    if (this.sup == 2) {
      this.consigne = "Calculer l'aire de chacune des figures suivantes";
    }

    if (figure == 1) {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAIoAAACNQAAAQEAAAAAAAAAAQAAAE######AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAJyMwABNgAAAAFAGAAAAAAAAP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmb#####AAAAAQAUQ0Ryb2l0ZURpcmVjdGlvbkZpeGUA#####wEAAAAAEAAAAQABAAAAAgE#8AAAAAAAAP####8AAAABAA9DUG9pbnRMaWVEcm9pdGUA#####wEAAAAADgABVgDAAAAAAAAAAEAQAAAAAAAABQABQDxmZmZmZmYAAAAD#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAAIAAAAE#####wAAAAEAB0NNaWxpZXUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAIAAAAE#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAAAAAAAAAAAAAEAYAAAAAAAAAAAABgwAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAEx#####wAAAAEACUNMb25ndWV1cgD#####AAAAAgAAAAQAAAADAP####8BAAAAABAAAU8AAAAAAAAAAABACAAAAAAAAAMAAUBRQAAAAAAAQGQAAAAAAAAAAAACAP####8AAXIAATQAAAABQBAAAAAAAAAAAAAEAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAM#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAANAAAADQD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAADAAEAAAAN#####wAAAAEADENBcmNEZUNlcmNsZQD#####AAAAAAABAAAACQAAAA######AAAAAUBWgAAAAAAAAAAABgD#####AAAAAAAQAAABAAEAAAAJAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAARAAAADAD#####AAAAEgAAABAAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABAAAAEwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAATAAAABgD#####AAAAAAAQAAABAAEAAAAVAAAACf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAAJAAAAD#####8AAAABAAtDTWVkaWF0cmljZQAAAAAXAQAAAAAQAAABAAEAAAAJAAAADwAAAAcAAAAAFwEAAAAAEAAAAQUAAAAACQAAAA8AAAAKAAAAABcBAAAAAAEAAAAZAAAAAUAwAAAAAAAAAQAAAAwAAAAAFwAAABgAAAAaAAAADQAAAAAXAQAAAAAQAAABBQABAAAAGwAAAAkBAAAAFwAAAAkAAAAP#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQEAAAAXAAAAAAEAAAAcEQAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAADIGNtAQAAAB3#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQA#####wAAAP8AAgEAAAAWAAAAEwD#####AAAA#wACAQAAABEAAAACAP####8AAnIyAAE1AAAAAUAUAAAAAAAAAAAACgD#####AQAA#wABAAAACf####8AAAABAApDT3BlcmF0aW9uAAAAABQAAAAACwAAAAoAAAALAAAAIQAAAAFAAAAAAAAAAAAAAAAMAP####8AAAALAAAAIgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAAjAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAACMAAAAKAP####8BAAAAAAEAAAAlAAAACwAAACEAAAAADAD#####AAAACwAAACYAAAANAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAMAAgAAACcAAAANAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAMAAQAAACcAAAAOAP####8AAAAAAAEAAAAlAAAAKQAAACgAAAAGAP####8AAAAAABAAAAEAAQAAACgAAAApAAAAEAD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAAoAAAAKQAAABEAAAAALAEAAAAAEAAAAQABAAAAKAAAACkAAAAHAAAAACwBAAAAABAAAAEFAAAAACgAAAApAAAACgAAAAAsAQAAAAABAAAALgAAAAFAMAAAAAAAAAEAAAAMAAAAACwAAAAtAAAALwAAAA0AAAAALAEAAAAAEAAAAQUAAQAAADAAAAAJAQAAACwAAAAoAAAAKQAAABIBAAAALAAAAAABAAAAMREAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAAAyAAAABwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACQAAACkAAAAPAP####8BAAAAABAAAAEAAQAAADQAAAArAAAACgD#####AQAAAAABAAAANAAAABQAAAAACwAAAAEAAAABQAAAAAAAAAAAAAAADAD#####AAAANQAAADYAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwACAAAANwAAAA0A#####wEAAAAAEAABRQAAAAAAAAAAAEAIAAAAAAAAAwABAAAANwAAAAQA#####wEAAAABEAAAAQABAAAAOQE#8AAAAAAAAAAAAAoA#####wEAAAAAAQAAADkAAAALAAAAAQAAAAAMAP####8AAAA6AAAAOwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAA8AAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAADwAAAAMAP####8AAAA1AAAAOwAAAA0A#####wEAAAAAEAABRAAAAAAAAAAAAEAIAAAAAAAAAwACAAAAPwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAAA######wAAAAEAEUNHcmFuZEFyY0RlQ2VyY2xlAP####8AAAAAAAEAAAA5AAAAPgAAAEAAAAAGAP####8AAAAAABAAAAEAAQAAAEAAAAA5AAAABgD#####AAAAAAAQAAABAAEAAAA5AAAAPgAAABMA#####wAAAP8AAgIAAABDAAAAEwD#####AAAA#wACAgAAAEQAAAAQAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAEAAAAA5AAAAEQAAAABHAQAAAAAQAAABAAEAAABAAAAAOQAAAAcAAAAARwEAAAAAEAAAAQUAAAAAQAAAADkAAAAKAAAAAEcBAAAAAAEAAABJAAAAAUAwAAAAAAAAAQAAAAwAAAAARwAAAEgAAABKAAAADQAAAABHAQAAAAAQAAABBQABAAAASwAAAAkBAAAARwAAAEAAAAA5AAAAEgEAAABHAAAAAABARgAAAAAAAAAAAAAAAAAAAAAATBEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABNAAAACP##########";

      if (this.sup == 1) {
        //si on ne demande pas les aires
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${
          2 * r2
        } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{1}{2}\\times${
          2 * r2
        }\\times\\pi+${2 * r2}=${r2}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval(r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r3} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{3}{4}\\times2\\times${r3}\\times\\pi+${r3}+${r3}=${tex_nombre(
          Algebrite.eval((6 * r3) / 4)
        )}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(((6 * r3) / 4) * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
      }

      if (this.sup == 2) {
        texte_corr = `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est la moitiÃ© d'un disque de diamÃ¨tre ${
          2 * r2
        } cm donc de ${r2} cm de rayon.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{1}{2}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          Algebrite.eval((r2 * r2) / 2)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r2 * r2) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{3}{4}\\times${r3}\\times${r3}\\times\\pi=${tex_nombre(
          Algebrite.eval((3 / 4) * r3 * r3)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$`;
      }

      if (this.sup == 3) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${
          2 * r2
        } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{1}{2}\\times${
          2 * r2
        }\\times\\pi+${2 * r2}=${r2}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval(r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r3} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{3}{4}\\times2\\times${r3}\\times\\pi+${r3}+${r3}=${tex_nombre(
          Algebrite.eval((6 * r3) / 4)
        )}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(((6 * r3) / 4) * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
        texte_corr += `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est la moitiÃ© d'un disque de diamÃ¨tre ${
          2 * r2
        } cm donc de ${r2} cm de rayon.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{1}{2}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          Algebrite.eval((r2 * r2) / 2)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r2 * r2) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{3}{4}\\times${r3}\\times${r3}\\times\\pi=${tex_nombre(
          Algebrite.eval((3 / 4) * r3 * r3)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$`;
      }
    } else {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAAAAAAAAQAAAGX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAJyMwABNgAAAAFAGAAAAAAAAP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmb#####AAAAAQAUQ0Ryb2l0ZURpcmVjdGlvbkZpeGUA#####wEAAAAAEAAAAQABAAAAAgE#8AAAAAAAAP####8AAAABAA9DUG9pbnRMaWVEcm9pdGUA#####wEAAAAADgABVgDAAAAAAAAAAEAQAAAAAAAABQABQDxmZmZmZmYAAAAD#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAAIAAAAE#####wAAAAEAB0NNaWxpZXUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAIAAAAE#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAAAAAAAAAAAAAEAYAAAAAAAAAAAABgwAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAEx#####wAAAAEACUNMb25ndWV1cgD#####AAAAAgAAAAQAAAADAP####8BAAAAABAAAU8AAAAAAAAAAABACAAAAAAAAAMAAUBRQAAAAAAAQGQAAAAAAAAAAAACAP####8AAXIAATQAAAABQBAAAAAAAAAAAAAEAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAM#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAANAAAADQD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAADAAEAAAANAAAABgD#####AAAAAAAQAAABAAEAAAAJAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAAQ#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAAkAAAAP#####wAAAAEAC0NNZWRpYXRyaWNlAAAAABIBAAAAABAAAAEAAQAAAAkAAAAPAAAABwAAAAASAQAAAAAQAAABBQAAAAAJAAAADwAAAAoAAAAAEgEAAAAAAQAAABQAAAABQDAAAAAAAAABAAAADAAAAAASAAAAEwAAABUAAAANAAAAABIBAAAAABAAAAEFAAEAAAAWAAAACQEAAAASAAAACQAAAA######AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABIAAAAAAQAAABcRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAAGAAAAAIA#####wACcjIAATQAAAABQBAAAAAAAAAAAAAKAP####8BAAD#AAEAAAAJ#####wAAAAEACkNPcGVyYXRpb24AAAAAEgAAAAALAAAACgAAAAsAAAAaAAAAAUAAAAAAAAAAAAAAAAwA#####wAAAAsAAAAbAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAgAAABwAAAANAP####8BAAAAABAAAUcAAAAAAAAAAABACAAAAAAAAAMAAQAAABwAAAAKAP####8BAAAAAAEAAAAeAAAACwAAABoAAAAADAD#####AAAACwAAAB8AAAANAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAMAAgAAACAAAAANAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAMAAQAAACAAAAAGAP####8BAAAAABAAAAEAAQAAACEAAAAiAAAADwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAQAAAAIAAAAhAAAAIgAAABAAAAAAJAEAAAAAEAAAAQABAAAAIQAAACIAAAAHAAAAACQBAAAAABAAAAEFAAAAACEAAAAiAAAACgAAAAAkAQAAAAABAAAAJgAAAAFAMAAAAAAAAAEAAAAMAAAAACQAAAAlAAAAJwAAAA0AAAAAJAEAAAAAEAAAAQUAAQAAACgAAAAJAQAAACQAAAAhAAAAIgAAAAcA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAkAAAAiAAAADgD#####AQAAAAAQAAABAAEAAAArAAAAIwAAAAoA#####wEAAAAAAQAAACsAAAASAgAAAAE#+AAAAAAAAAAAAAsAAAAaAAAAAAwA#####wAAACwAAAAtAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAgAAAC4AAAANAP####8BAAAAABAAAUUAAAAAAAAAAABACAAAAAAAAAMAAQAAAC4AAAAEAP####8BAAAAARAAAAEAAQAAADABP#AAAAAAAAAAAAAKAP####8BAAAAAAEAAAAwAAAACwAAAAEAAAAADAD#####AAAAMQAAADIAAAANAP####8BAAAAABAAAUkAAAAAAAAAAABACAAAAAAAAAMAAgAAADMAAAANAP####8BAAAAABAAAUgAAAAAAAAAAABACAAAAAAAAAMAAQAAADMAAAAMAP####8AAAAsAAAAMgAAAA0A#####wEAAAAAEAABRAAAAAAAAAAAAEAIAAAAAAAAAwACAAAANgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAAA2AAAABgD#####AQAAAAAQAAABAAEAAAA3AAAAMAAAAAYA#####wAAAAAAEAAAAQABAAAAMAAAADUAAAAPAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAADcAAAAwAAAAEAAAAAA7AQAAAAAQAAABAAEAAAA3AAAAMAAAAAcAAAAAOwEAAAAAEAAAAQUAAAAANwAAADAAAAAKAAAAADsBAAAAAAEAAAA9AAAAAUAwAAAAAAAAAQAAAAwAAAAAOwAAADwAAAA+AAAADQAAAAA7AQAAAAAQAAABBQABAAAAPwAAAAkBAAAAOwAAADcAAAAwAAAAEQEAAAA7AQAAAABARgAAAAAAAAAAAAAAAAAAAAAAQBEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABBAAAADAD#####AAAAEQAAAAwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAQwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAABDAAAABgD#####AAAAAAAQAAABAAEAAAAwAAAANAAAAA4A#####wEAAP8AEAAAAQACAAAAHgAAACMAAAAMAP####8AAABHAAAAHwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAABIAAAADQD#####AQAAAAAQAAFGAAAAAAAAAAAAQAgAAAAAAAADAAIAAABIAAAABgD#####AAAAAAAQAAABAAEAAAAeAAAASgAAAAYA#####wAAAAAAEAAAAQABAAAAHgAAACH#####AAAAAQAMQ0FyY0RlQ2VyY2xlAP####8AAAAAAAEAAAAJAAAADwAAAEQAAAAPAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAEoAAAAeAAAAEAAAAABOAQAAAAAQAAABAAEAAABKAAAAHgAAAAcAAAAATgEAAAAAEAAAAQUAAAAASgAAAB4AAAAKAAAAAE4BAAAAAAEAAABQAAAAAUAwAAAAAAAAAQAAAAwAAAAATgAAAE8AAABRAAAADQAAAABOAQAAAAAQAAABBQABAAAAUgAAAAkBAAAATgAAAEoAAAAeAAAAEQEAAABOAAAAAADAKgAAAAAAAAAAAAAAAAAAAAAAUxEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABUAAAADwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAA1AAAANAAAABAAAAAAVgEAAAAAEAAAAQABAAAANQAAADQAAAAHAAAAAFYBAAAAABAAAAEFAAAAADUAAAA0AAAACgAAAABWAQAAAAABAAAAWAAAAAFAMAAAAAAAAAEAAAAMAAAAAFYAAABXAAAAWQAAAA0AAAAAVgEAAAAAEAAAAQUAAQAAAFoAAAAJAQAAAFYAAAA1AAAANAAAABEBAAAAVgAAAAAAAAAAAAAAAADACAAAAAAAAAAAAFsRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAAXAAAAAYA#####wAAAAAAEAAAAQABAAAACQAAAEQAAAATAP####8AAAAAAAEAAAAwAAAANP####8AAAABQGaAAAAAAAD#####AAAAAQARQ0dyYW5kQXJjRGVDZXJjbGUA#####wAAAAAAAQAAAB4AAAAh#####wAAAAFAcOAAAAAAAP####8AAAABAA5DTWFycXVlU2VnbWVudAD#####AAAA#wACAgAAAF4AAAAVAP####8AAAD#AAICAAAAEAAAABUA#####wAAAP8AAgAAAABLAAAAFQD#####AAAA#wACAAAAAEwAAAAI##########8=";
      texte_corr = `La premiÃ¨re figure est un quart de cercle de rayon ${r} cm auquel il faut ajouter les 2 rayons qui ferment la figure.<br>`;

      if (this.sup == 1) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r2} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{3}{4}\\times2\\times${r2}\\times\\pi+${r2}+${r2}=${tex_nombre(
          (6 / 4) * r2
        )}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval((6 / 4) * r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${
          2 * r3
        } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{1}{2}\\times${
          2 * r3
        }\\times\\pi+${2 * r3}=${r3}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(r3 * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
      }

      if (this.sup == 2) {
        texte_corr = `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque rayon ${r2} cm.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{3}{4}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          (3 / 4) * r2 * r2
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-cercle de diamÃ¨tre ${
          2 * r3
        } cm donc de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{1}{2}\\times${r3}\\times${r3}\\times\\pi=${
          (r3 * r3) / 2
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r3 * r3) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      }

      if (this.sup == 3) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r2} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{3}{4}\\times2\\times${r2}\\times\\pi+${r2}+${r2}=${tex_nombre(
          (6 / 4) * r2
        )}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval((6 / 4) * r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${
          2 * r3
        } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{1}{2}\\times${
          2 * r3
        }\\times\\pi+${2 * r3}=${r3}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(r3 * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
        texte_corr += `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque rayon ${r2} cm.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{3}{4}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          (3 / 4) * r2 * r2
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-cercle de diamÃ¨tre ${
          2 * r3
        } cm donc de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{1}{2}\\times${r3}\\times${r3}\\times\\pi=${
          (r3 * r3) / 2
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r3 * r3) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      }
    }

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r", "${r}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r2", "${r2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r3", "${r3}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : PÃ©rimÃ¨tres\n\
2 : Aires\n3 : PÃ©rimÃ¨tres et aires",
  ];
}

/**
 * Un carrÃ©, un rectangle et un triangle rectangle sont tracÃ©s.
 *
 * Il faut calculer les aires et pÃ©rimÃ¨tres.
 *
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M11-1
 */
function Perimetre_ou_aire_de_carres_rectangles_triangles() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires carrÃ©s, rectangles et triangles rectangles";
  this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 3 figures suivantes";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [600, 450];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let c = randint(2, 6);
    let L = randint(2, 5);
    let l = randint(1, 4);
    while (l == L) {
      // Le rectangle ne doit pas Ãªtre un carrÃ©
      l = randint(1, 4);
    }
    let a = randint(2, 5);
    let b = randint(2, 5);
    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAH0AAAB9AAAAQEAAAAAAAAAAQAAAH######AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wABYwABNQAAAAFAFAAAAAAAAAAAAAkA#####wABTAABNQAAAAFAFAAAAAAAAAAAAAkA#####wABbAABMgAAAAFAAAAAAAAAAAAAAAkA#####wABYgABNQAAAAFAFAAAAAAAAAAAAAkA#####wABYQABMwAAAAFACAAAAAAAAAAAAAIA#####wAAAAAAEAABQQDALgAAAAAAAAAAAAAAAAAABQABQDkAAAAAAABAaOAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAAGAAAAAwAAAAIAAAAIAAAADf####8AAAACAAlDQ2VyY2xlT1IAAAAADgEAAAAAAQAAAA3#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAA4AAAAAABAAAUIAQAgAAAAAAAAAAAAAAAAAAAUAAUAYC8chUUHEAAAADwAAAAUBAAAADgAAAAAAEAAAAQABAAAADQAAABAAAAAGAAAAAA4BAAAAAA0AAAEFAAAAAA0AAAAQ#####wAAAAEAC0NNZWRpYXRyaWNlAAAAAA4BAAAAAA0AAAEAAQAAAA0AAAAQAAAACwAAAAAOAQAAAAABAAAAEgAAAAFAMAAAAAAAAAH#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQAAAAAOAAAAEwAAABT#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAAAAAAOAQAAAAANAAABBQABAAAAFf####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAADgAAAAABAAAAFhAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAAAI#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wEAAAAAEAAAAQABAAAADQAAABEAAAASAP####8BAAAAABAAAAEAAQAAABAAAAAR#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAEAAAAA0AAAATAP####8BAAAAAAEAAAANAAAAEAAAAA8A#####wAAABkAAAAaAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAABwAAAAQAP####8AAAAAABAAAUMAQBAAAAAAAADANQAAAAAAAAUAAgAAABwAAAAPAP####8AAAAYAAAAGwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAfAAAAEAD#####AAAAAAAQAAFEAMAsAAAAAAAAwDcAAAAAAAAFAAIAAAAf#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAAA0AAAAQAAAAHgAAACEAAAANAAAABQD#####AAAAAAAQAAABAAEAAAAQAAAAHgAAAAUA#####wAAAAAAEAAAAQABAAAAHgAAACEAAAAFAP####8AAAAAABAAAAEAAQAAACEAAAAN#####wAAAAIAF0NNYXJxdWVBbmdsZUdlb21ldHJpcXVlAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAhAAAADQAAABAAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAANAAAAEAAAAB4AAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAQAAAAHgAAACEAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAeAAAAIQAAAA0AAAACAP####8AAAAAABAAAUgAwDEAAAAAAADAAAAAAAAAAAUAAUBymAAAAAAAQHEHCj1wo9cAAAAKAP####8AG1NlZ21lbnQgZGUgbG9uZ3VldXIgZG9ubsOpZQAAAAYAAAADAAAAAgAAAAkAAAAqAAAACwAAAAArAQAAAAABAAAAKgAAAAwAAAAJAAAAAA0BAAAAKwAAAAAAEAABRQBACAAAAAAAAAAAAAAAAAAABQABP8sfH32jwU4AAAAsAAAABQEAAAArAAAAAAAQAAABAAEAAAAqAAAALQAAAAYAAAAAKwEAAAAADQAAAQUAAAAAKgAAAC0AAAAOAAAAACsBAAAAAA0AAAEAAQAAACoAAAAtAAAACwAAAAArAQAAAAABAAAALwAAAAFAMAAAAAAAAAEAAAAPAAAAACsAAAAwAAAAMQAAABAAAAAAKwEAAAAADQAAAQUAAQAAADIAAAARAQAAACsAAAAAAQAAADMQAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAACQAAABIA#####wEAAAAAEAAAAQABAAAALQAAAC4AAAASAP####8BAAAAABAAAAEAAQAAACoAAAAuAAAACwD#####AQAAAAABAAAALQAAAAwAAAAKAAAAAAsA#####wEAAAAAAQAAACoAAAAMAAAACgAAAAAPAP####8AAAA1AAAANwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAA5AAAAEAD#####AAAAAAAQAAFGAEAAAAAAAAAAwDgAAAAAAAAFAAIAAAA5AAAADwD#####AAAANgAAADgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAPAAAABAA#####wAAAAAAEAABRwDALgAAAAAAAMA2AAAAAAAABQACAAAAPAAAAAUA#####wAAAAAAEAAAAQABAAAALQAAADsAAAAFAP####8AAAAAABAAAAEAAQAAADsAAAA+AAAABQD#####AAAAAAAQAAABAAEAAAA+AAAAKgAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAALQAAADsAAAADAAAAAEIAAAAAABAAAAEAAQAAAC0BP#AAAAAAAAAAAAAEAAAAAEIAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAEP#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQAAAABCAAJhbgAAAEQAAAAtAAAAOwAAAAgBAAAAQgAAAC0AAAA7AAAABgAAAABCAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAADv#####AAAAAQANQ1BvaW50UHJvamV0ZQAAAABCAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAAA7AAAAQwAAABYAAAAAQgACbWEAAABEAAAALQAAAEj#####AAAAAQAOQ1Rlc3RFeGlzdGVuY2UAAAAAQgADdG1hAAAASQAAABEBAAAAQgAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAEcQAAAAAAABAAAAAv####8AAAABAA1DRm9uY3Rpb24zVmFyAAAAAAwAAABK#####wAAAAEACkNPcGVyYXRpb24AAAAADAAAAEUAAAAMAAAASQAAAAwAAABFAAAAAyBjbQEAAABGAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAALQAAADsAAAA+AAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAOwAAAD4AAAAqAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAPgAAACoAAAAtAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAKgAAAC0AAAA7AAAAAgD#####AAAAAAAQAAFJAEAIAAAAAAAAAAAAAAAAAAAFAAFAbkAAAAAAAEB5kAAAAAAAAAAACgD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAMAAAAUAAAAAsAAAAAUQEAAAAAAQAAAFAAAAAMAAAADAAAAAANAQAAAFEAAAAAABAAAUoAwAgAAAAAAADAOgAAAAAAAAUAAT##e1lPr88TAAAAUgAAAAUBAAAAUQAAAAAAEAAAAQABAAAAUAAAAFMAAAASAP####8BAAAAABAAAAEAAQAAAFMAAABUAAAACwD#####AQAAAAABAAAAUwAAAAwAAAALAAAAAA8A#####wAAAFUAAABWAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAFcAAAAQAP####8AAAAAABAAAUsAwDIAAAAAAADACAAAAAAAAAUAAgAAAFcAAAAFAP####8AAAAAABAAAAEAAQAAAFMAAABZAAAABQD#####AAAAAAAQAAABAAEAAABZAAAAUAAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAUwAAAFkAAAADAAAAAFwAAAAAABAAAAEAAQAAAFMBP#AAAAAAAAAAAAAEAAAAAFwAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAF0AAAAWAAAAAFwAAmFuAAAAXgAAAFMAAABZAAAACAEAAABcAAAAUwAAAFkAAAAGAAAAAFwAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABTAAAAWQAAABcAAAAAXAAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAWQAAAF0AAAAWAAAAAFwAAm1hAAAAXgAAAFMAAABiAAAAGAAAAABcAAN0bWEAAABjAAAAEQEAAABcAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAYRAAAAAAAAEAAAACAAAAGQAAAAAMAAAAZAAAABoAAAAADAAAAF8AAAAMAAAAYwAAAAwAAABfAAAAAyBjbQEAAABgAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABZAAAAUAAAAAMAAAAAZgAAAAAAEAAAAQABAAAAWQE#8AAAAAAAAAAAAAQAAAAAZgAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAZwAAABYAAAAAZgACYW4AAABoAAAAWQAAAFAAAAAIAQAAAGYAAABZAAAAUAAAAAYAAAAAZgAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFkAAABQAAAAFwAAAABmAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAAZwAAABYAAAAAZgACbWEAAABoAAAAWQAAAGwAAAAYAAAAAGYAA3RtYQAAAG0AAAARAQAAAGYAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAABrEAAAAAAAAQAAAAIAAAAZAAAAAAwAAABuAAAAGgAAAAAMAAAAaQAAAAwAAABtAAAADAAAAGkAAAADIGNtAQAAAGoAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAABQAAAAUwAAAFn#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQA#####wAAAP8AAgEAAAARAAAAGwD#####AAAA#wACAQAAACMAAAAbAP####8AAAD#AAIBAAAAJAAAABsA#####wAAAP8AAgEAAAAlAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABQAAAAUwAAAAMAAAAAdQAAAAAAEAAAAQABAAAAUAE#8AAAAAAAAAAAAAQAAAAAdQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAdgAAABYAAAAAdQACYW4AAAB3AAAAUAAAAFMAAAAIAQAAAHUAAABQAAAAUwAAAAYAAAAAdQAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFAAAABTAAAAFwAAAAB1AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABTAAAAdgAAABYAAAAAdQACbWEAAAB3AAAAUAAAAHsAAAAYAAAAAHUAA3RtYQAAAHwAAAARAQAAAHUAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAB6EAAAAAAAAQAAAAIAAAAZAAAAAAwAAAB9AAAAGgAAAAAMAAAAeAAAAAwAAAB8AAAADAAAAHgAAAADIGNtAQAAAHkAAAAH##########8=";
    let c2 = Math.sqrt(a * a + b * b);
    let pIJK = Algebrite.eval(a + b + c2).d.toFixed(1);

    texte_corr = `$\\mathcal{P}_{ABCD}=${c}~\\text{cm}+${c}~\\text{cm}+${c}~\\text{cm}+${c}~\\text{cm}=${
      4 * c
    }~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{ABCD}=${c}~\\text{cm}\\times${c}~\\text{cm}=${
      c * c
    }~\\text{cm}^2$`;
    texte_corr += `<br>$\\mathcal{P}_{EFGH}=${L}~\\text{cm}+${l}~\\text{cm}+${L}~\\text{cm}+${l}~\\text{cm}=${
      2 * L + 2 * l
    }~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{EFGH}=${L}~\\text{cm}\\times${l}~\\text{cm}=${
      L * l
    }~\\text{cm}^2$`;
    texte_corr += `<br>$\\mathcal{P}_{IJK}=${a}~\\text{cm}+${b}~\\text{cm}+${tex_nombre(
      c2.toFixed(1)
    )}~\\text{cm}=${tex_nombre(pIJK)}~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{IJK}=${a}~\\text{cm}\\times${b}~\\text{cm}\\div2=${tex_nombre(
      Algebrite.eval((a * b) / 2)
    )}~\\text{cm}^2$`;

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L", "${L}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "l", "${l}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "a", "${a}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "b", "${b}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  // 	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : PÃ©rimÃ¨tres\n\
  // 2 : Aires\n3 : PÃ©rimÃ¨tres et aires"];
}

/**
 * Deux figures composÃ©s de rectangles et de triangles sont tracÃ©s.
 *
 * Il faut calculer le pÃ©rimÃ¨tre et l'aire par addition ou soustraction d'aires
 *
 * Pas de version LaTeX
 *
 * Un seul type de figure pour l'instant.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M11-2
 */
function Perimetre_ou_aire_de_figures_composees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de figures composÃ©es";
  this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 2 figures suivantes";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [500, 500];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let L1 = randint(4, 7);
    let l1 = randint(2, 4);
    let L2 = randint(2, 4);
    if (L1 == l1) {
      l1--;
    } // pour que le rectangle ne soit pas un carrÃ©
    let c = randint(4, 7);
    let h = randint(2, c - 1);
    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAAKj#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACTDEAATUAAAABQBQAAAAAAAAAAAAJAP####8AAmwxAAEzAAAAAUAIAAAAAAAAAAAACQD#####AAJMMgABMwAAAAFACAAAAAAAAAAAAAIA#####wAAAAABEAABQwBACAAAAAAAAAAAAAAAAAAABQABQFKgAAAAAABAaW4UeuFHrv####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAAGAAAAAwAAAAIAAAAIAAAAC#####8AAAACAAlDQ2VyY2xlT1IAAAAADAEAAAAAAQAAAAv#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAAwAAAAAARAAAUQAQAgAAAAAAAAAAAAAAAAAAAUAAT++v3IzOUsjAAAADQAAAAUBAAAADAAAAAAAEAAAAQABAAAACwAAAA4AAAAGAAAAAAwBAAAAABAAAAEFAAAAAAsAAAAO#####wAAAAEAC0NNZWRpYXRyaWNlAAAAAAwBAAAAABAAAAEAAQAAAAsAAAAOAAAACwAAAAAMAQAAAAABAAAAEAAAAAFAMAAAAAAAAAH#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQAAAAAMAAAAEQAAABL#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAAAAAAMAQAAAAAQAAABBQABAAAAE#####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAADAAAAAABAAAAFBAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAEAAAAI#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wEAAAAAEAAAAQABAAAACwAAAA8AAAASAP####8BAAAAABAAAAEAAQAAAA4AAAAPAAAACwD#####AQAAAAABAAAACwAAAAwAAAAJAAAAAAsA#####wEAAAAAAQAAAA4AAAAMAAAACQAAAAAPAP####8AAAAWAAAAGAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAaAAAAEAD#####AQAAAAAQAAFCAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAaAAAADwD#####AAAAFwAAABkAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAHQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAdAAAACwD#####AQAAAAABAAAAHwAAAAwAAAAKAP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAHAAAAB8AAAAPAP####8AAAAhAAAAIAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAiAAAAEAD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAi#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABgAAAA4AAAALAAAAHAAAAB8AAAAkAAAADgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAJAAAABwAAAAOAAAAACYBAAAAABAAAAEAAQAAACQAAAAcAAAABgAAAAAmAQAAAAAQAAABBQAAAAAkAAAAHAAAAAsAAAAAJgEAAAAAAQAAACgAAAABQDAAAAAAAAABAAAADwAAAAAmAAAAJwAAACkAAAAQAAAAACYBAAAAABAAAAEFAAEAAAAqAAAACAEAAAAmAAAAJAAAABwAAAARAQAAACYAAAAAAQAAACsRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAALAAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAHAAAAAsAAAAOAAAAAC4BAAAAABAAAAEAAQAAABwAAAALAAAABgAAAAAuAQAAAAAQAAABBQAAAAAcAAAACwAAAAsAAAAALgEAAAAAAQAAADAAAAABQDAAAAAAAAABAAAADwAAAAAuAAAALwAAADEAAAAQAAAAAC4BAAAAABAAAAEFAAEAAAAyAAAACAEAAAAuAAAAHAAAAAsAAAARAQAAAC4AAAAAAQAAADMRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAANP####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAADgAAAAsAAAAcAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAACwAAABwAAAAkAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAHAAAAB8AAAAOAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAACwAAAA4AAAAfAAAABQD#####AAAAAAAQAAABAQEAAAAfAAAADgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAEAAAACAAAADgAAACQAAAAOAAAAADsBAAAAABAAAAEAAQAAAA4AAAAkAAAABgAAAAA7AQAAAAAQAAABBQAAAAAOAAAAJAAAAAsAAAAAOwEAAAAAAQAAAD0AAAABQDAAAAAAAAABAAAADwAAAAA7AAAAPAAAAD4AAAAQAAAAADsBAAAAABAAAAEFAAEAAAA#AAAACAEAAAA7AAAADgAAACQAAAAJAP####8AAWMAATcAAAABQBwAAAAAAAAAAAACAP####8AAAAAABAAAABACAAAAAAAAAAAAAAAAAAABQABQGlwAAAAAABAfecKPXCj1wAAAAoA#####wAbU2VnbWVudCBkZSBsb25ndWV1ciBkb25uw6llAAAABgAAAAMAAAACAAAAQgAAAEMAAAALAAAAAEQBAAAAAAEAAABDAAAADAAAAEIAAAAADQEAAABEAAAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAT#LiKDqIUKnAAAARQAAAAUBAAAARAAAAAAAEAAAAQEBAAAAQwAAAEYAAAAGAAAAAEQBAAAAABAAAAEFAAAAAEMAAABGAAAADgAAAABEAQAAAAAQAAABAAEAAABDAAAARgAAAAsAAAAARAEAAAAAAQAAAEgAAAABQDAAAAAAAAABAAAADwAAAABEAAAASQAAAEoAAAAQAAAAAEQBAAAAABAAAAEFAAEAAABLAAAAEQEAAABEAAAAAAEAAABMEAAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAQAAAEIAAAAKAP####8ADUNhcnLDqSBkaXJlY3QAAAAFAAAAAgAAAAIAAABDAAAARgAAAAUAAAAATgEAAAAAEAAAAQABAAAAQwAAAEYAAAASAAAAAE4AAAAAABAAAAEBAQAAAEMAAABP#####wAAAAEACUNDZXJjbGVPQQAAAABOAAAAAAEBAAAAQwAAAEYAAAAPAAAAAE4AAABQAAAAUQAAABABAAAATgEAAAAAEAABSAEFAAIAAABS#####wAAAAEADENUcmFuc2xhdGlvbgAAAABOAAAAQwAAAEb#####AAAAAQALQ1BvaW50SW1hZ2UBAAAATgEAAAAAEAABRwEFAAAAAFMAAABUAAAABQD#####AAAAAAAQAAABAQEAAABGAAAAVQAAAAUA#####wAAAAAAEAAAAQEBAAAAVQAAAFMAAAAFAP####8AAAAAABAAAAEBAQAAAFMAAABDAAAAFAD#####AQAAAAEBAAAABQAAAEMAAABGAAAAVQAAAFMAAABDAAAACQD#####AAFyAAEyAAAAAUAAAAAAAAAAAAAACwD#####AQAAAAEBAAAAUwAAAAwAAABaAAAAAA8A#####wAAAFcAAABbAAAAEAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAFwAAAAQAP####8BAAAAABAAAUYAAAAAAAAAAABACAAAAAAAAAUAAgAAAFwAAAASAP####8BAAAAABAAAAEBAQAAAF4AAABXAAAACQD#####AAFoAAE0AAAAAUAQAAAAAAAAAAAACwD#####AQAAAAEBAAAAXgAAAAwAAABgAAAAAA8A#####wAAAF8AAABhAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGIAAAAQAP####8BAAAAABAAAUUAAAAAAAAAAABACAAAAAAAAAUAAgAAAGIAAAAUAP####8AAAAAAAEAAAAGAAAAVQAAAEYAAABDAAAAUwAAAGQAAABVAAAABQD#####AAAAAAAQAAABAQEAAABeAAAAZP####8AAAABAA5DTWFycXVlU2VnbWVudAD#####AAAAAAABAQAAAFYAAAAZAP####8AAAAAAAEBAAAARwAAABkA#####wAAAAAAAQEAAABYAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAVQAAAEYAAABDAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAARgAAAEMAAABTAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAUwAAAFUAAABGAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAVQAAAFMAAABDAAAACgD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAQAAAAIAAABkAAAAXgAAAA4AAAAAbgEAAAAAEAAAAQABAAAAZAAAAF4AAAAGAAAAAG4BAAAAABAAAAEFAAAAAGQAAABeAAAACwAAAABuAQAAAAABAAAAcAAAAAFAMAAAAAAAAAEAAAAPAAAAAG4AAABvAAAAcQAAABAAAAAAbgEAAAAAEAAAAQUAAQAAAHIAAAAIAQAAAG4AAABkAAAAXgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAEAAAACAAAAVQAAAGQAAAAOAAAAAHUBAAAAABAAAAEAAQAAAFUAAABkAAAABgAAAAB1AQAAAAAQAAABBQAAAABVAAAAZAAAAAsAAAAAdQEAAAAAAQAAAHcAAAABQDAAAAAAAAABAAAADwAAAAB1AAAAdgAAAHgAAAAQAAAAAHUBAAAAABAAAAEFAAEAAAB5AAAACAEAAAB1AAAAVQAAAGQAAAAKAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAAFMAAABkAAAADgAAAAB8AQAAAAAQAAABAAEAAABTAAAAZAAAAAYAAAAAfAEAAAAAEAAAAQUAAAAAUwAAAGQAAAALAAAAAHwBAAAAAAEAAAB+AAAAAUAwAAAAAAAAAQAAAA8AAAAAfAAAAH0AAAB#AAAAEAAAAAB8AQAAAAAQAAABBQABAAAAgAAAAAgBAAAAfAAAAFMAAABkAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAQAAAAMAAACCAAAAUwAAAGQAAAADAAAAAIMAAAAAABAAAAEAAQAAAFMBP#AAAAAAAAAAAAAEAAAAAIMAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAIT#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQAAAACDAAJhbgAAAIUAAABTAAAAZAAAAAYAAAAAgwAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFMAAABk#####wAAAAEADUNQb2ludFByb2pldGUAAAAAgwAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAZAAAAIQAAAAaAAAAAIMAAm1hAAAAhQAAAFMAAACI#####wAAAAEADkNUZXN0RXhpc3RlbmNlAAAAAIMAA3RtYQAAAIkAAAARAQAAAIMAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACHEAAAAAAAAQAAAAL#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAMAAAAiv####8AAAABAApDT3BlcmF0aW9uAAAAAAwAAACGAAAADAAAAIkAAAAMAAAAhgAAAAABAAAAggAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAEAAAADAAAAewAAAGQAAABVAAAAAwAAAACMAAAAAAAQAAABAAEAAABkAT#wAAAAAAAAAAAABAAAAACMAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAACNAAAAGgAAAACMAAJhbgAAAI4AAABkAAAAVQAAAAYAAAAAjAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGQAAABVAAAAGwAAAACMAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABVAAAAjQAAABoAAAAAjAACbWEAAACOAAAAZAAAAJEAAAAcAAAAAIwAA3RtYQAAAJIAAAARAQAAAIwAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACQEAAAAAAAAQAAAAIAAAAdAAAAAAwAAACTAAAAHgAAAAAMAAAAjwAAAAwAAACSAAAADAAAAI8AAAAAAQAAAHsAAAAKAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAABAAAAAwAAAHQAAABkAAAAXgAAAAMAAAAAlQAAAAAAEAAAAQABAAAAZAE#8AAAAAAAAAAAAAQAAAAAlQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAlgAAABoAAAAAlQACYW4AAACXAAAAZAAAAF4AAAAGAAAAAJUAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABkAAAAXgAAABsAAAAAlQAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAXgAAAJYAAAAaAAAAAJUAAm1hAAAAlwAAAGQAAACaAAAAHAAAAACVAAN0bWEAAACbAAAAEQEAAACVAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAmRAAAAAAAAEAAAACAAAAHQAAAAAMAAAAnAAAAB4AAAAADAAAAJgAAAAMAAAAmwAAAAwAAACYAAAAAAEAAAB0AAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAQAAAAMAAABBAAAADgAAACQAAAADAAAAAJ4AAAAAABAAAAEAAQAAAA4BP#AAAAAAAAAAAAAEAAAAAJ4AAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAJ8AAAAaAAAAAJ4AAmFuAAAAoAAAAA4AAAAkAAAABgAAAACeAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAACQAAAAbAAAAAJ4AAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAACQAAACfAAAAGgAAAACeAAJtYQAAAKAAAAAOAAAAowAAABwAAAAAngADdG1hAAAApAAAABEBAAAAngAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAKIQAAAAAAABAAAAAgAAAB0AAAAADAAAAKUAAAAeAAAAAAwAAAChAAAADAAAAKQAAAAMAAAAoQAAAAABAAAAQQAAABkA#####wAAAAAAAQEAAABXAAAAB###########";
    let DA = arrondi(Math.sqrt(L2 ** 2 + l1 ** 2), 1);
    let t1 = arrondi(Math.sqrt(4 + h ** 2), 1); // longueur d'un cÃ´tÃ© du triangle
    let t2 = arrondi(Math.sqrt((c - 2) ** 2 + h ** 2), 1); // longueur de l'autre cÃ´tÃ© d'un triangle
    let texte_corr = "";
    texte_corr += `La premiÃ¨re figure est composÃ©e d'un rectangle de ${L1} cm par ${l1} cm`;
    texte_corr += ` et d'un triangle rectangle dont les cÃ´tÃ©s de l'angle droit mesurent ${L2} cm et ${l1} cm.<br>`;
    texte_corr += `$\\mathcal{P}_{1}=${L1 + L2}+${tex_nombre(
      DA
    )}+${L1}+${l1}=${tex_nombrec(L1 + L2 + DA + L1 + l1)}$ cm.<br>`;
    texte_corr += `$\\mathcal{A}_{1}=${L1}\\times${l1}+${L2}\\times${l1}\\div2=${
      L1 * l1
    }+${calcul((L2 * l1) / 2)}=${calcul(L1 * l1 + (L2 * l1) / 2)}~${tex_texte(
      " cm"
    )}^2$.`;
    texte_corr += "<br><br>";
    texte_corr += `La deuxiÃ¨me figure est un carrÃ© de cÃ´tÃ© ${c} cm auquel il faut enlever un triangle de ${c} cm de base et ${h} cm de hauteur.<br>`;
    texte_corr += `$\\mathcal{P}_{2}=${c}+${c}+${c}+${tex_nombre(
      t1
    )}+${tex_nombre(t2)}=${tex_nombrec(3 * c + t1 + t2)}$ cm<br>`;
    texte_corr += `$\\mathcal{A}_{2}=${c}\\times${c}-${c}\\times${h}\\div2=${
      c * c
    }-${(c * h) / 2}=${tex_nombrec(c ** 2 - (c * h) / 2)}~${tex_texte(
      " cm"
    )}^2$.`;

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L1", "${L1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "l1", "${l1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L2", "${L2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h", "${h}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
}

/**
 * Citer des formules de pÃ©rimÃ¨tre, des formules d'aire ou la dÃ©finition de Ï
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M25
 */
function Connaitre_formules_de_perimetre_et_aires() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Connaitre le cours sur le pÃ©rimÃ¨tre et l'aire";
  this.consigne = "Calculer";
  this.nb_questions = 4;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_type_de_questions = combinaison_listes(
      [
        "pi",
        "prectangle",
        "pcarre",
        "acarre",
        "arectangle",
        "pcercle",
        "acercle",
        "atrianglerectangle",
        "atriangle",
      ],
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case "pi":
          texte = "Rappeler la dÃ©finition du nombre $\\pi$.";
          texte_corr = "$\\pi$ est la longueur d'un cercle de diamÃ¨tre 1.";
          break;
        case "prectangle":
          texte = "Donner une formule du pÃ©rimÃ¨tre du rectangle.";
          texte_corr =
            "$\\mathcal{P}_{\\text{rectangle}}=(L+l)\\times2=L\\times2+l\\times2=L+l+L=l$<br><br>";
          texte_corr += "Avec $L$ la longueur et $l$ la largeur du rectangle.";
          break;
        case "pcarre":
          texte = "Donner une formule du pÃ©rimÃ¨tre du carrÃ©.";
          texte_corr =
            "$\\mathcal{P}_{\\text{carrÃ©}}=c\\times4=c+c+c+c$<br><br>";
          texte_corr += "Avec $c$ la longueur du cÃ´tÃ© du carrÃ©.";
          break;
        case "arectangle":
          texte = "Donner une formule de l'aire du rectangle.";
          texte_corr = "$\\mathcal{A}_{\\text{rectangle}}=L\\times l$<br><br>";
          texte_corr += "Avec $L$ la longueur et $l$ la largeur du rectangle.";
          break;
        case "acarre":
          texte = "Donner une formule de l'aire du carrÃ©.";
          texte_corr = "$\\mathcal{A}_{\\text{carrÃ©}}=c\\times c=c^2$<br><br>";
          texte_corr += "Avec $c$ la longueur du cÃ´tÃ© du carrÃ©.";
          break;
        case "atrianglerectangle":
          texte = "Donner une formule de l'aire du triangle rectangle.";
          texte_corr =
            "$\\mathcal{A}_{\\text{triangle rectangle}}=a\\times b \\div2=\\dfrac{a\\times b}{2}$<br><br>";
          texte_corr +=
            "Avec $a$ et $b$ les longueurs des cÃ´tÃ©s de l'angle droit.";
          break;
        case "atriangle":
          texte = "Donner une formule de l'aire d'un triangle quelconque.";
          texte_corr =
            "$\\mathcal{A}_{\\text{triangle rectangle}}=b\\times h \\div2=\\dfrac{b\\times h}{2}$<br><br>";
          texte_corr +=
            "Avec $b$ la longueur d'un cÃ´tÃ© et $h$ la longueur de la hauteur relative Ã  ce cÃ´tÃ©.";
          break;
        case "pcercle":
          texte =
            "Donner une formule de la longueur d'un cercle (aussi appelÃ©e circonfÃ©rence).";
          texte_corr =
            "$\\mathcal{P}_{\\text{cercle}}=D\\times \\pi = 2\\times R \\times \\pi = 2\\pi{}R$<br><br>";
          texte_corr += "Avec $D$ le diamÃ¨tre et $R$ le rayon de ce cercle.";
          break;
        case "acercle":
          texte = "Donner une formule de l'aire d'un disque.";
          texte_corr =
            "$\\mathcal{A}_{\\text{disque}}=R\\times R\\times\\pi=\\pi R^2$<br><br>";
          texte_corr += "Avec $R$ le rayon de ce disque.";
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * ComplÃ©ter des Ã©galitÃ©s sur les nombres dÃ©cimaux
 * * n/100 = .../10 + .../100
 * * n/100 = .../100 + .../10
 * * .../100 = u+ d/10 + c/100
 * * u = .../10
 * * u = .../100
 * * n/10 = ... + .../10 + .../100
 * @Auteur RÃ©mi Angot
 * 6N23-1
 */
function Exercice_differentes_ecritures_nombres_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DiffÃ©rentes Ã©critures des nombres dÃ©cimaux";
  this.consigne = "ComplÃ©ter l'Ã©galitÃ© puis donner l'Ã©criture dÃ©cimale.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4, 5, 6];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      let u = randint(2, 9); //chiffre des unitÃ©s
      let d = randint(1, 9); //chiffre des dixiÃ¨mes
      let c = randint(1, 9); //chiffre des centiÃ¨mes
      let n = 100 * u + 10 * d + c;
      let ecriture_decimale;
      switch (type_de_questions) {
        case 1: // n/100 = .../10 + .../100
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction(n, "100")}=\\ldots\\ldots+${tex_fraction(
            "",
            10
          )}+${tex_fraction("", 100)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=${ecriture_decimale}$`;

          break;
        case 2: // n/100 = .../100 + .../10
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction(n, "100")}=\\ldots\\ldots+${tex_fraction(
            "",
            100
          )}+${tex_fraction("", 10)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            c,
            100
          )}+${tex_fraction(d, 10)}=${ecriture_decimale}$`;
          break;
        case 3: // .../100 = u+ d/10 + c/100
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction("", "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=${ecriture_decimale}$`;
          break;
        case 4: // u = .../10
          texte = `$${u}=${tex_fraction("", "10")}$`;
          texte_corr = `$${u}=${tex_fraction(10 * u, "10")}$`;
          break;
        case 5: // u = .../100
          texte = `$${u}=${tex_fraction("", "100")}$`;
          texte_corr = `$${u}=${tex_fraction(100 * u, "10")}$`;
          break;
        case 6: // n/10 = ... + .../10 + .../100
          ecriture_decimale = tex_nombre(calcul(n / 10));
          texte = `$${tex_fraction(n, 10)}=\\ldots\\ldots+${tex_fraction(
            "",
            10
          )}+${tex_fraction("", 100)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, 10)}=${u * 10 + d}+${tex_fraction(
            c,
            10
          )}+${tex_fraction(0, 100)}=${ecriture_decimale}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Additions, soustractions et multiplications posÃ©es de nombres entiers
 *
 * * abcd +efg
 * * abc0-efg
 * * 1abc-def
 * * abc*d0e tables de 2 Ã  5
 * * abc*de tables de 5 Ã  9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10 
 */
function Additions_soustractions_multiplications_posees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Additions, soustractions et multiplications posÃ©es de nombres entiers";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon les opÃ©rations posÃ©es ne sont pas jolies
  this.nb_questions = 5;
  // this.pas_de_version_HMTL=true;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4, 5];
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    if (this.nb_questions == 3) {
      liste_type_de_questions = [1, 2, 5];
    }
    if (this.nb_questions == 4) {
      liste_type_de_questions = [1, 2, 4, 5];
    }

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // abcd +efg
          a =
            randint(1, 9) * 10000 +
            randint(5, 9) * 1000 +
            randint(5, 9) * 100 +
            randint(7, 9) * 10 +
            randint(1, 9);
          b = randint(5, 9) * 100 + randint(7, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}+${b}$`;
          !sortie_html
            ? (texte_corr = `$\\opadd{${a}}{${b}}$`)
            : (texte_corr = `$${tex_nombre(a)}+${b}=${tex_nombre(a + b)}$`);
          break;
        case 2: // abc0-efg
          a = randint(1, 9);
          b = randint(1, 9);
          c = randint(1, 9);
          e = randint(b, 9);
          f = randint(c, 9);
          g = randint(2, 9);
          x = a * 1000 + b * 100 + c * 10;
          y = e * 100 + f * 10 + g;
          texte = `$${tex_nombre(x)}-${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opsub{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}+${y}=${tex_nombre(x + y)}$`);
          break;
        case 3: // 1abc-def
          a = randint(1, 9);
          b = randint(1, 9);
          c = randint(1, 9);
          d = randint(a, 9);
          e = randint(1, 9);
          f = randint(c, 9);
          x = 1000 + a * 100 + b * 10 + c;
          y = d * 100 + e * 10 + f;
          texte = `$${tex_nombre(x)}-${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opsub{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}-${y}=${tex_nombre(x - y)}$`);
          break;
        case 4: // abc*d0e tables de 2 Ã  5
          a = randint(2, 5);
          b = randint(2, 5);
          c = randint(2, 5);
          d = randint(2, 5);
          e = randint(2, 5);
          x = 100 * a + 10 * b + c;
          y = d * 100 + e;
          texte = `$${tex_nombre(x)}\\times${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opmul{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}\\times${y}=${tex_nombre(
                x * y
              )}$`);
          break;
        case 5: // abc*de tables de 5 Ã  9
          a = randint(5, 9);
          b = randint(5, 9);
          c = randint(5, 9);
          d = randint(5, 9);
          e = randint(5, 9);
          x = 100 * a + 10 * b + c;
          y = 10 * d + e;
          texte = `$${x}\\times${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opmul{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}\\times${y}=${tex_nombre(
                x * y
              )}$`);
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        if (!sortie_html && i == 0) {
          texte_corr = `\\setlength\\itemsep{2em}` + texte_corr;
        } // espacement entre les questions
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Additions et soustractions de nombres dÃ©cimaux
 * * xxx-xx,x
 * * xxx-xx,xx
 * * xxx,x-xxx
 * * x0x-xx9,x
 * * xxx+xx,x
 * * xxx+xx,xx
 * * xxx,x+xxx
 * * x0x+xx9,x
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C20
 */
function Additionner_soustraires_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Additions et soustractions de nombres dÃ©cimaux";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon les opÃ©rations posÃ©es ne sont pas jolies
  this.nb_questions = 4;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_de_type_d_additions = combinaison_listes(
      [5, 6, 7, 8],
      this.nb_questions
    );
    let liste_de_type_de_soustractions = combinaison_listes(
      [1, 2, 3, 4],
      this.nb_questions
    );
    let liste_type_de_questions = [];
    for (let i = 0; i < this.nb_questions; i++) {
      if (i + 1 < this.nb_questions / 2) {
        // premiÃ¨re moitiÃ© sont des additions mais si c'est impair on prendra plus de soustractions
        liste_type_de_questions.push(liste_de_type_d_additions[i]);
      } else {
        liste_type_de_questions.push(liste_de_type_de_soustractions[i]);
      }
    }

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // xxx-xx,x
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(randint(5, 9) * 10 + randint(6, 9) + randint(1, 9) / 10);
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
                a - b
              )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 2: // xxx-xx,xx
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(
            randint(5, 9) * 10 +
              randint(6, 9) +
              randint(1, 9) / 10 +
              randint(1, 9) / 100
          );
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
                a - b
              )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 3: // xxx,x-xxx
          a = calcul(
            randint(5, 9) * 100 +
              randint(2, 5) * 10 +
              randint(1, 9) +
              randint(1, 9) / 10
          );
          b = randint(1, 4) * 100 + randint(6, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
                a - b
              )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 4: // x0x-xx9,x
          a = calcul(randint(5, 9) * 100 + randint(1, 5));
          b = calcul(
            randint(1, 4) * 100 + randint(1, 9) * 10 + 9 + randint(1, 9) / 10
          );
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
                a - b
              )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 5: // xxx+xx,x
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(randint(5, 9) * 10 + randint(6, 9) + randint(1, 9) / 10);
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
                a + b
              )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 6: // xxx+xx,xx
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(
            randint(5, 9) * 10 +
              randint(6, 9) +
              randint(1, 9) / 10 +
              randint(1, 9) / 100
          );
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
                a + b
              )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 7: // xxx,x+xxx
          a = calcul(
            randint(5, 9) * 100 +
              randint(2, 5) * 10 +
              randint(1, 9) +
              randint(1, 9) / 10
          );
          b = randint(1, 4) * 100 + randint(6, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
                a + b
              )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 8: // x0x+xx9,x
          a = calcul(randint(5, 9) * 100 + randint(1, 5));
          b = calcul(
            randint(1, 4) * 100 + randint(1, 9) * 10 + 9 + randint(1, 9) / 10
          );
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
                a + b
              )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Poser et effectuer les divisions euclidiennes suivantes puis donner l'Ã©galitÃ© fondamentale correspondante.
 *
 * Niveau de difficultÃ© 1 :
 * * division par 2, 3 , 4 ou 5
 * * division par 6 Ã  9
 * * un 0 dans le quotient
 *
 * Niveau de difficultÃ© 2 :
 * * division par 11, 12, 15, 25
 * * division par 13,14,21,22,23 ou 24 et un 0 dans le quotient
 * * division par un multiple de 10 et un 0 dans le quotient
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C11
 */
function Divisions_euclidiennes() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Divisions euclidiennes";
  this.consigne =
    "Poser et effectuer les divisions euclidiennes suivantes puis donner l'Ã©galitÃ© fondamentale correspondante.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon opidiv n'est pas joli
  this.nb_questions = 4;
  this.sup = 1;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup==0) type_de_questions_disponibles=[1,1,1,1]
    else if (this.sup ==1)  type_de_questions_disponibles = [1, 2, 2, 3]
    else if  (this.sup==2) type_de_questions_disponibles = [4, 4, 5, 6];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, q, r;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // division par 2, 3 , 4 ou 5
          q = randint(2, 5) * 100 + randint(2, 5) * 10 + randint(2, 5);
          b = randint(2, 5);
          break;
        case 2: // division par 6 Ã  9
          q = randint(5, 9) * 100 + randint(2, 5) * 10 + randint(5, 9);
          b = randint(6, 9);
          break;
        case 3: // un 0 dans le quotient
          if (randint(1, 2) == 1) {
            q = randint(2, 9) * 1000 + randint(2, 9) * 100 + randint(2, 9);
          } else {
            q = randint(2, 9) * 1000 + randint(2, 9) * 10 + randint(2, 9);
          }
          b = randint(7, 9);
          break;
        case 4: // division par 11, 12, 15, 25
          q = randint(1, 5) * 100 + randint(1, 5) * 10 + randint(1, 5);
          b = choice([11, 12, 15, 25]);
          break;
        case 5: // division par 13,14,21,22,23 ou 24 et un 0 dans le quotient
          q = randint(1, 5) * 1000 + randint(6, 9) * 100 + randint(1, 5);
          b = choice([11, 12, 13, 14, 21, 22, 23, 24]);
          break;
        case 6: // division par un multiple de 10 et un 0 dans le quotient
          q = randint(6, 9) * 1000 + randint(6, 9) * 10 + randint(1, 5);
          b = randint(2, 9) * 10;
          break;
      }
      r = randint(0, b - 1); //reste infÃ©rieur au diviseur
      a = b * q + r;
      texte = `$${tex_nombre(a)}\\div${b}$`;
      if (r == 0) {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}=${q}$`)
          : (texte_corr = `$\\opidiv[voperation=top]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
              a
            )}\\div${b}=${q}$`);
      } else {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}=${b}\\times${q}+${r}$`)
          : (texte_corr = `$\\opidiv[voperation=top]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
              a
            )}=${b}\\times${q}+${r}$`);
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Quotient infÃ©rieur Ã  10\n2: Quotient Ã  2 chiffres",
  ];
}

/**
 * Effectuer les divisions dÃ©cimales suivantes et donner la valeur exacte de leur quotient.
 *
 * Niveau de difficultÃ© 1 :
 * * entier divisÃ© par 4 quotient : xx,25 ou xx,75
 * * entier divisÃ© par 8 quotient : x,125 ou x,375 ou x,625 ou x,875
 * * entier divisÃ© par 6 quotient : xxx,5
 * * quotient xx,xx division par 2, 3 , 4 ou 5
 * * quotient x,xxx division par 6 Ã  9
 * * un 0 dans le quotient
 *
 * Niveau de difficultÃ© 2 : division par 3, 7 ou 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C31
 */
function Division_decimale() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Divisions dÃ©cimales";
  this.consigne =
    "Effectuer les divisions dÃ©cimales suivantes et donner la valeur exacte de leur quotient.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon opdiv n'est pas joli
  this.nb_questions = 4;
  this.sup = 1;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    this.sup == 1
      ? (type_de_questions_disponibles = [choice([1, 2, 3]), 4, 5, 6])
      : (type_de_questions_disponibles = [7, 8, 9]);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, q, r;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // entier divisÃ© par 4 quotient : xx,25 ou xx,75
          b = 4;
          a = (randint(2, 9) * 10 + randint(2, 9)) * 4 + choice([1, 3]);
          q = calcul(a / b);
          break;
        case 2: // entier divisÃ© par 8 quotient : x,125 ou x,375 ou x,625 ou x,875
          b = 8;
          a = randint(2, 9) * 8 + choice([1, 3, 5, 7]);
          q = calcul(a / b);
          break;
        case 3: // entier divisÃ© par 6 quotient : xxx,5
          b = 6;
          q = calcul(
            randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) + 0.5
          );
          a = q * 6;
          break;
        case 4: // quotient xx,xx division par 2, 3 , 4 ou 5
          q = calcul(
            randint(2, 5) * 10 +
              randint(2, 5) +
              randint(2, 5) / 10 +
              randint(2, 5) / 100
          );
          b = randint(2, 5);
          a = calcul(b * q);
          break;
        case 5: // quotient x,xxx division par 6 Ã  9
          q = calcul(
            randint(6, 9) +
              randint(5, 9) / 10 +
              randint(6, 9) / 100 +
              randint(6, 9) / 1000
          );
          b = randint(6, 9);
          a = calcul(b * q);
          break;
        case 6: // un 0 dans le quotient
          if (randint(1, 2) == 1) {
            //x0x,x
            q = calcul(
              randint(2, 9) * 100 + randint(2, 9) + randint(2, 9) / 10
            );
          } else {
            //xx0,x
            q = calcul(
              randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) / 10
            );
          }
          b = randint(7, 9);
          a = calcul(b * q);
          break;
        case 7: // division par 7
          a = randint(2, 9) * 7 + randint(1, 6);
          b = 7;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
          break;
        case 8: // division par 9
          a = calcul((randint(11, 19) * 9) / 10 + randint(1, 8) / 10);
          b = 9;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
          break;
        case 9: //division par 3
          a = calcul((randint(11, 99) * 3) / 100 + randint(1, 2) / 100);
          b = 3;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
      }
      if (this.sup == 2) {
        this.consigne =
          "Effectuer les divisions dÃ©cimales suivantes et donner une valeur approchÃ©e de leur quotient au milliÃ¨me prÃ¨s.";
      }
      texte = `$${tex_nombre(a)}\\div${b}$`;
      if (this.sup == 1) {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}=${tex_nombre(q)}$`)
          : (texte_corr = `$\\opdiv[displayintermediary=all,voperation=top,decimalsepsymbol={,},shiftdecimalsep=none]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
              a
            )}\\div${b}=${tex_nombre(q)}$`);
      } else {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}\\approx${tex_nombre(q)}$`)
          : (texte_corr = `$\\opdiv[displayintermediary=all,voperation=top,period,decimalsepsymbol={,},shiftdecimalsep=none]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
              a
            )}\\div${b}\\approx${tex_nombre(q)}$`);
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de questions",
    2,
    "1 : DÃ©terminer le quotient exact\n2: DÃ©terminer un quotient approchÃ© au milliÃ¨me prÃ¨s",
  ];
}

/**
 * Multiplication de deux nombres dÃ©cimaux
 *
 * * xxx * xx,x chiffres infÃ©rieurs Ã  5
 * * xx,x * x,x
 * * x,xx * x0x
 * * 0,xx * x,x
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C30
 */
function Multiplier_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplications posÃ©es de nombres dÃ©cimaux";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  this.spacing_corr = 1; //Important sinon le calcul posÃ© ne fonctionne pas avec opmul et spacing
  this.nb_questions = 4;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // xxx * xx,x chiffres infÃ©rieurs Ã  5
          a = randint(2, 5) * 100 + randint(2, 5) * 10 + randint(2, 5);
          b = calcul(randint(2, 5) * 10 + randint(2, 5) + randint(2, 5) / 10);
          break;
        case 2: // xx,x * x,x
          a = calcul(randint(2, 9) * 10 + randint(2, 9) + randint(2, 9) / 10);
          b = calcul(randint(6, 9) + randint(6, 9) / 10);
          break;
        case 3: // x,xx * x0x
          a = calcul(randint(2, 9) + randint(2, 9) / 10 + randint(2, 9) / 100);
          b = calcul(randint(2, 9) * 100 + randint(2, 9));
          break;
        case 4: // 0,xx * x,x
          a = calcul(randint(2, 9) / 10 + randint(2, 9) / 100);
          b = calcul(randint(2, 9) + randint(2, 9) / 10);
          break;
      }

      texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`;
      sortie_html
        ? (texte_corr = `$${tex_nombre(a)}\\times${tex_nombre(b)}=${tex_nombrec(
            a * b
          )}$`)
        : (texte_corr = `$\\opmul[decimalsepsymbol={,}]{${a}}{${b}}$`);

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Multiplication d'un nombre dÃ©cimal dans diffÃ©rentes Ã©critures par 10, 100, 1000
 *
 *  * Type 1 : Ã©criture dÃ©cimale
 *  * Type 2 : Ã©criture fractionnaire
 *  * Type 3 : Ã©critures fractionnaires et dÃ©cimales
 *
 *
 *  * Sup2 : avec ou sans calculs Ã  trous
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence 6C30-1
  *
 */
function Multiplier_decimaux_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplications d'un nombre dÃ©cimal par 10, 100 ou 1 000.";
  this.consigne = "Calculer.";
  this.sup = 3;
  this.sup2 = false;
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 8;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [];
    if (this.sup == 1 && !this.sup2) type_de_questions_disponibles = [1, 2];
    if (this.sup == 1 && this.sup2)
      type_de_questions_disponibles = [1, 2, 5, 6];
    if (this.sup == 2 && !this.sup2) type_de_questions_disponibles = [3, 4];
    if (this.sup == 2 && this.sup2)
      type_de_questions_disponibles = [3, 4, 3, 4, 7, 8, 9, 10];
    if (this.sup == 3 && !this.sup2)
      type_de_questions_disponibles = [1, 2, 3, 4];
    if (this.sup == 3 && this.sup2)
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    if (this.sup2) this.consigne = "Calculer et complÃ©ter.";

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_de_facteurs = combinaison_listes(
      [10, 100, 1000],
      this.nb_questions
    );

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, den;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // a,abcd Ã 10
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`;
          texte_corr = `$${tex_nombre(a)} \\times ${tex_nombre(
            b
          )} = ${tex_nombrec(a * b)}$`;
          break;
        case 2: // 10 Ã a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_nombre(a)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_nombre(
            a
          )} = ${tex_nombrec(a * b)}$`;
          break;
        case 3: // abcd/10 Ã 10
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, den)}\\times${tex_nombre(b)}$`;
          texte_corr = `$${tex_fraction(a, den)} \\times ${tex_nombre(
            b
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 4: // 10 Ã abcd/10
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_fraction(a, den)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_fraction(
            a,
            den
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 5: // .... Ã 10 = a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$\\ldots \\times${tex_nombre(b)} = ${tex_nombrec(a * b)}$`;
          texte_corr = `$${mise_en_evidence(
            tex_nombre(a)
          )} \\times ${tex_nombre(b)} = ${tex_nombrec(a * b)}$`;
          break;
        case 6: // 10 Ã .... = a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)} \\times \\ldots = ${tex_nombrec(a * b)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${mise_en_evidence(
            tex_nombre(a)
          )}  = ${tex_nombrec(a * b)}$`;
          break;
        case 7: // case 3 avec un trou sur l'entier
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, den)}\\times \\ldots = ${tex_nombrec(
            (a / den) * b
          )}$`;
          texte_corr = `$${tex_fraction(a, den)} \\times ${mise_en_evidence(
            tex_nombre(b)
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 8: // case 4 avec un trou sur l'entier
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$ \\ldots \\times${tex_fraction(a, den)}= ${tex_nombrec(
            (a / den) * b
          )}$`;
          texte_corr = `$${mise_en_evidence(
            tex_nombre(b)
          )} \\times ${tex_fraction(a, den)} = ${tex_fraction(
            a * b,
            den
          )} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 9: // case 3 avec trou sur la fraction
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, "\\ldots")}\\times${tex_nombre(
            b
          )} = ${tex_nombrec((a / den) * b)}$`;
          texte_corr = `$${tex_fraction(
            a,
            mise_en_evidence(tex_nombre(den))
          )} \\times ${tex_nombre(b)} = ${tex_fraction(
            a * b,
            den
          )} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 10: // case 4 avec trou sur la fraction
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_fraction(
            a,
            "\\ldots"
          )} = ${tex_nombrec((a / den) * b)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_fraction(
            a,
            mise_en_evidence(tex_nombre(den))
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Types de calculs",
    3,
    "1 : Ãcriture dÃ©cimale\n2 : Ãcriture fractionnaire\n3 : Ãcritures dÃ©cimales et fractionnaires",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des calculs Ã  trous"];
}

/**
 * Plusieurs type de calcul avec des entiers.
 *
 * Sans parenthÃ¨ses :
 * * a+b*c
 * * a+bÃ·c
 * * aÃ·b*c
 * * a-b*c
 * * a*bÃ·c
 * * a*b+c
 * * a-b+c
 * * a+b+c*d
 * * a*b+c*d
 * * a*b*c-d
 * * a*b-cÃ·d
 * * a*b+cÃ·d
 *
 * Avec parenthÃ¨ses :
 * * a*(b-c)
 * * (a-b)*c
 * * (a-b)Ã·c
 * * aÃ·(b+c)
 * * (a-b)Ã·c
 * * a*(b-c)*d
 * * a*b*(c-d)
 * * a*(b-c*d)
 * * (a+b*c)Ã·d
 * * a*(b-c*d)
 * * a*bÃ·(c+d)
 * * a*(bÃ·c+d)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C33
 */
function Priorites() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer en utilisant les prioritÃ©s opÃ©ratoires";
  this.consigne = "Calculer";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_questions_disponibles = []; //
    if (this.sup == 1) {
      liste_questions_disponibles = range1(12);
    } else if (this.sup == 2) {
      liste_questions_disponibles = range1(22, range1(12));
    } else {
      liste_questions_disponibles = range1(22);
    }
    let liste_type_de_questions = combinaison_listes(
      liste_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, a, b, c, d, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          texte = `$${a}+${b}\\times${c}$`;
          texte_corr = `$${a}+${mise_en_evidence(b + "\\times" + c)}=${a}+${
            b * c
          }=${a + b * c}$`;
          break;
        case 2:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c * randint(2, 11);
          texte = `$${a}+${b}\\div${c}$`;
          texte_corr = `$${a}+${mise_en_evidence(b + "\\div" + c)}=${a}+${
            b / c
          }=${a + b / c}$`;
          break;
        case 3:
          b = randint(2, 11);
          c = randint(2, 11);
          a = b * randint(2, 11);
          texte = `$${a}\\div${b}\\times${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\div" + b)}\\times${c}=${
            a / b
          }\\times${c}=${(a / b) * c}$`;
          break;
        case 4:
          b = randint(2, 11);
          c = randint(2, 11);
          a = b * c + randint(2, 11);
          texte = `$${a}-${b}\\times${c}$`;
          texte_corr = `$${a}-${mise_en_evidence(b + "\\times" + c)}=${a}-${
            b * c
          }=${a - b * c}$`;
          break;
        case 5:
          if (choice([true, false])) {
            //a est un multiple de c
            c = randint(2, 6);
            a = c * randint(2, 5);
            b = randint(2, 6);
          } else {
            // b est un multiple de c
            c = randint(2, 6);
            b = c * randint(2, 5);
            a = randint(2, 6);
          }
          texte = `$${a}\\times${b}\\div${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + b)}\\div${c}=${
            a * b
          }\\div${c}=${(a * b) / c}$`;
          break;
        case 6:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          texte = `$${a}\\times${b}+${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + b)}+${c}=${
            a * b
          }+${c}=${a * b + c}$`;
          break;
        case 7:
          b = randint(20, 59);
          a = b + randint(11, 29);
          c = randint(11, 29);
          texte = `$${a}-${b}+${c}$`;
          texte_corr = `$${mise_en_evidence(a + "-" + b)}+${c}=${a - b}+${c}=${
            a - b + c
          }$`;
          break;
        case 8:
          a = randint(2, 20);
          b = randint(2, 20);
          c = randint(2, 11);
          d = randint(2, 11);
          texte = `$${a}+${b}+${c}\\times${d}$`;
          texte_corr = `$${a}+${b}+${mise_en_evidence(
            c + "\\times" + d
          )}=${a}+${b}+${c * d}=${a + b + c * d}$`;
          break;
        case 9:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          d = randint(2, 11);
          texte = `$${a}\\times${b}+${c}\\times${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}+${mise_en_evidence(c + "\\times" + d)}=${a * b}+${c * d}=${
            a * b + c * d
          }$`;
          break;
        case 10:
          a = randint(2, 5);
          b = randint(2, 5);
          c = randint(2, 5);
          d = randint(2, a * b * c - 1);
          texte = `$${a}\\times${b}\\times${c}-${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}\\times${c}-${d}=${mise_en_evidence(a * b + "\\times" + c)}-${d}=${
            a * b * c - d
          }$`;
          break;
        case 11:
          a = randint(3, 11);
          b = randint(3, 11);
          d = randint(2, 11);
          c = d * randint(2, 8);
          texte = `$${a}\\times${b}-${c}\\div${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}-${mise_en_evidence(c + "\\div" + d)}=${a * b}-${c / d}=${
            a * b - c / d
          }$`;
          break;
        case 12:
          a = randint(2, 11);
          b = randint(2, 11);
          d = randint(2, 11);
          c = d * randint(2, 8);
          texte = `$${a}\\times${b}+${c}\\div${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}+${mise_en_evidence(c + "\\div" + d)}=${a * b}+${c / d}=${
            a * b + c / d
          }$`;
          break;
        case 13:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c + randint(2, 11);
          texte = `$${a}\\times(${b}-${c})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `-` + c
          )})=${a}\\times${b - c}=${a * (b - c)}$`;
          break;
        case 14:
          b = randint(11, 39);
          a = b + randint(2, 11);
          c = randint(2, 11);
          texte = `$(${a}-${b})\\times${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\times${c}=${
            a - b
          }\\times${c}=${(a - b) * c}$`;
          break;
        case 15:
          c = randint(2, 11);
          b = randint(11, 39);
          a = b + c * randint(2, 9);
          texte = `$(${a}-${b})\\div${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\div${c}=${
            a - b
          }\\div${c}=${(a - b) / c}$`;
          break;
        case 16:
          b = randint(2, 5);
          c = randint(2, 6);
          a = (b + c) * randint(2, 9);
          texte = `$${a}\\div(${b}+${c})$`;
          texte_corr = `$${a}\\div(${mise_en_evidence(b + `+` + c)})=${a}\\div${
            b + c
          }=${a / (b + c)}$`;
          break;
        case 17:
          c = randint(2, 11);
          b = randint(11, 39);
          a = b + c * randint(2, 9);
          texte = `$(${a}-${b})\\div${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\div${c}=${
            a - b
          }\\div${c}=${(a - b) / c}$`;
          break;
        case 18:
          c = randint(11, 39);
          b = c + randint(2, 5);
          a = randint(2, 5);
          d = randint(2, 5);
          texte = `$${a}\\times(${b}-${c})\\times${d}$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `-` + c
          )})\\times${d}=${a}\\times${b - c}\\times${d}=${a * (b - c) * d}$`;
          break;
        case 19:
          d = randint(11, 39);
          c = d + randint(2, 5);
          a = randint(2, 5);
          b = randint(2, 5);
          texte = `$${a}\\times${b}\\times(${c}-${d})$`;
          texte_corr = `$${a}\\times${b}\\times(${mise_en_evidence(
            c + `-` + d
          )})=${a}\\times${b}\\times${c - d}=${a * b * (c - d)}$`;
          break;
        case 20:
          a = randint(2, 11);
          c = randint(2, 11);
          d = randint(2, 11);
          b = c * d + randint(2, 11);
          texte = `$${a}\\times(${b}-${c}\\times${d})$`;
          texte_corr = `$${a}\\times(${b}-${mise_en_evidence(
            c + `\\times` + d
          )})=${a}\\times(${mise_en_evidence(b + `-` + c * d)})=${a}\\times${
            b - c * d
          }=${a * (b - c * d)}$`;
          break;
        case 21:
          a = randint(2, 11);
          b = randint(2, 11);
          if (liste_des_diviseurs(a * b).length <= 2) {
          }
          let liste = liste_des_diviseurs(a * b);
          if (liste.length > 2) {
            liste.pop(); //on supprime le plus grand diviseur qui est le produit
          }
          if (liste.length > 2) {
            enleve_element(liste, liste[1]); //on supprime le plus petit diviseur (autre que 1)
          }

          let somme = choice(liste, [1]); // la somme doit Ãªtre un diviseur diffÃ©rent de 1
          c = randint(1, somme - 1);
          d = somme - c;
          texte = `$${a}\\times${b}\\div(${c}+${d})$`;
          texte_corr = `$${a}\\times${b}\\div(${mise_en_evidence(
            c + `+` + d
          )})=${mise_en_evidence(a + "\\times" + b)}\\div${c + d}=${
            a * b
          }\\div${c + d}=${(a * b) / (c + d)}$`;
          break;
        case 22:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c * randint(2, 5);
          d = randint(2, 6);
          texte = `$${a}\\times(${b}\\div${c}+${d})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `\\div` + c
          )}+${d})=${a}\\times(${mise_en_evidence(
            b / c + `+` + d
          )})=${a}\\times${b / c + d}=${a * (b / c + d)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de calculs",
    3,
    "1 : Sans parenthÃ¨ses\n2: Avec parenthÃ¨ses\n3: Avec ou sans parenthÃ¨ses",
  ];
}

/**
 * @Auteur RÃ©mi Angot
 */
function Code_LaTeX_personnalise() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Code LaTeX personnalisÃ©";
  this.pas_de_version_HMTL = true;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "%Votre code LaTeX";
  this.sup2 = "%Votre code LaTeX pour le corrigÃ©";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_texte = [
    "Code LaTeX Ã©noncÃ©",
    "Par exemple : \\input{mon_fichier}",
  ]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  this.besoin_formulaire2_texte = [
    "Code LaTeX correction",
    "Par exemple : \\input{mon_fichier_corr}",
  ];
  this.besoin_formulaire_case_a_cocher = false; // Sinon this.besoin_formulaire_case_a_cocher = [texte];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.contenu = this.sup;
    this.contenu_correction = this.sup2;
  };
}

/**
 * @Auteur RÃ©mi Angot
 */
function HTML_personnalise() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Exercice personnalisÃ©";
  this.pas_de_version_HMTL = false;
  this.pas_de_version_LaTeX = true;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "ÃnoncÃ© de l'exercice";
  this.sup2 = "ÃnoncÃ© de la correction";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_long_texte = ["Exercice"]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  this.besoin_formulaire2_texte = ["Correction"];
  this.besoin_formulaire_case_a_cocher = false; // Sinon this.besoin_formulaire_case_a_cocher = [texte];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.contenu = this.sup;
    this.contenu_correction = this.sup2;
  };
}

/**
 * Pavages et symÃ©trie axiale.
 * Pas de version LaTeX
 * rÃ©fÃ©rence 6G25-1
 */
function Pavages_et_reflexion() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie axiale dans un pavage triangulaire";
  this.pas_de_version_LaTeX = true;
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  // this.sup = 1; // 1 pour les 6Ã¨me, 2 pour les 5Ã¨mes, 3 pour les 4Ã¨mes, et 4 pour les 3Ã¨mes.
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.MG32editable = false;
    this.taille_div_MG32 = [700, 700];
    this.MG32codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAIP#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAEQAAFPAAAAAAAAAAAAQAgAAAAAAAAFAAFATMAAAAAAAEBTYUeuFHri#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAARAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQF6AAAAAAAAAAAAC#####wAAAAEAB0NDYWxjdWwA#####wAEem9vbQABOAAAAAFAIAAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAAAf####8AAAABAApDT3BlcmF0aW9uAwAAAAE#8AAAAAAAAAAAAAcBAAAAAUA0AAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAADAAAABf####8AAAABAAlDUm90YXRpb24A#####wAAAAH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBOAAAAAAAAAAAACQD#####AQAAAAEQAAFKAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAYAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAAGAAAACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAUA#####wACeEIAATYAAAABQBgAAAAAAAAAAAAFAP####8AAnlCAAEwAAAAAQAAAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAABEAABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAAAoAAAAIAAAACwAAAAUA#####wACeEMAATAAAAABAAAAAAAAAAAAAAAFAP####8AAnlDAAE2AAAAAUAYAAAAAAAAAAAADQD#####AQAAAAEQAAFDAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAADQAAAAgAAAAOAAAABQD#####AAN4TTEAAjQwAAAAAUBEAAAAAAAAAAAABQD#####AAN5TTEAATAAAAABAAAAAAAAAAAAAAANAP####8BAAAAABAAAk0xAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAAEAAAAAgAAAARAAAADQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAP####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAABMAAAABAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAABQAAAAOAP####8AAAABAAAAFQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAAWAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAABYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAFv####8AAAABAAlDUG9seWdvbmUA#####wAAfwAAAQAAAAQAAAAXAAAAGAAAABkAAAAX#####wAAAAEAEENTdXJmYWNlUG9seWdvbmUA#####wAAfwAAAAAFAAAAGgAAAAUA#####wACbngAATcAAAABQBwAAAAAAAAAAAAFAP####8AAm55AAE3AAAAAUAcAAAAAAAAAAAADAD#####AObm5gABAAAAAQAAAAwAAAAPAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAADQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAAgAAAAcAAAACAAAAB3#####AAAAAQAHQ01pbGlldQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAB8AAAAFAP####8AA3hOMwABOAAAAAFAIAAAAAAAAAAAAAUA#####wADeU4zAAEyAAAAAUAAAAAAAAAAAAAABQD#####AAN4TTMAATQAAAABQBAAAAAAAAAAAAAFAP####8AA3lNMwACMTAAAAABQCQAAAAAAAAAAAANAP####8BAAD#ABAAAk4zAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAAIQAAAAgAAAAiAAAADQD#####AQAA#wAQAAJNMwAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACMAAAAIAAAAJP####8AAAABAAtDTWVkaWF0cmljZQD#####AAAA#wAQAAABAAIAAAAlAAAAJgAAAAUA#####wADeE4yAAEwAAAAAQAAAAAAAAAAAAAABQD#####AAN5TjIAATYAAAABQBgAAAAAAAAAAAAFAP####8AA3lNMgABNgAAAAFAGAAAAAAAAAAAAAUA#####wADeE0yAAEwAAAAAQAAAAAAAAAAAAAADQD#####AQB#AAAQAAJOMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACgAAAAIAAAAKQAAAA0A#####wEAfwAAEAACTTIAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAArAAAACAAAACoAAAAFAP####8AA3hOMQACNDIAAAABQEUAAAAAAAAAAAAFAP####8AA3lOMQABMgAAAAFAAAAAAAAAAAAAAA0A#####wEAAAAAEAACTjEAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAuAAAACAAAAC8AAAASAP####8AAH8AARAABChkMSkBAAI#7MzMzMzMzQAAADAAAAAS#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAADAAAAAcBAAAACAAAABwAAAABP#AAAAAAAAD#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQABAAAAAQAAADIAAAATAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAADwAAAAcBAAAACAAAAB0AAAABP#AAAAAAAAAAAAAEAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAAAAAAAAAAAAzAAAADgD#####AAAAAQAAADQAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAANgAAABQA#####wEAAAAAEAAAAQABAAAANQAAADcAAAAEAP####8BAAAAARAAAVUAAAAAAAAAAABACAAAAAAAAAUAAT#Q3iTV#EVNAAAAOP####8AAAACAA1DTWVzdXJlQWZmaXhlAP####8AAXoAAAAeAAAAOf####8AAAABAA1DRm9uY0NvbXBsZXhlAP####8AA251bQASMipyZSh6KSsyKm54KmltKHopAAAABwAAAAAHAgAAAAFAAAAAAAAAAP####8AAAACAAlDRm9uY3Rpb25M#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAcCAAAABwIAAAABQAAAAAAAAAD#####AAAAAQAXQ1Jlc3VsdGF0VmFsZXVyQ29tcGxleGUAAAAcAAAAF00AAAAYAAAAAAABegAAAA8A#####wH#AP8AAQAAAAQAAAABAAAADAAAAA8AAAAB#####wAAAAIACENNZXN1cmVZAP####8AAnlVAAAACQAAADn#####AAAAAgAIQ01lc3VyZVgA#####wACeFUAAAAJAAAAOQAAAA4A#####wAAAAEAAAA5AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAPwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAAA#AAAADwD#####AQAAAAABAAAABAAAAEAAAABBAAAAQgAAAED#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8AAAAAAAAAQwAAAAgAAAAdAAAAOQAAAAYAAAA5AAAAPwAAAEAAAABBAAAAQgAAAEMAAAAcAP####8AAAAAAAAARAAAAAgAAAAcAAAANQAAAAoAAAA1AAAANwAAADgAAAA5AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAACgD#####AAAADAAAAAFATgAAAAAAAAAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABGAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAEYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAARgAAAA8A#####wH#AP8ABAAAAAQAAABHAAAASAAAAEkAAABHAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAPwAAAAkA#####wEAAAAAEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAPwAAAA8A#####wEAAAAAAQAAAAQAAABLAAAATAAAAE0AAABLAAAAHAD#####AQAAAAAAAE4AAAAIAAAAHQAAADkAAAAGAAAAOQAAAD8AAABLAAAATAAAAE0AAABOAAAAHAD#####AAAAAAAAAE8AAAAIAAAAHAAAADUAAAAKAAAANQAAADcAAAA4AAAAOQAAAD8AAABLAAAATAAAAE0AAABOAAAATwAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADkAAABNAAAAAT#VVUdaMaS+AAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAOQAAAE0AAAABP+VVR1oxpL4AAAAFAP####8AA3hVJwAbaW50KHhVKjEwMDAwMDArMC41KS8xMDAwMDAwAAAABwMAAAAXAgAAAAcAAAAABwIAAAAIAAAAPgAAAAFBLoSAAAAAAAAAAAE#4AAAAAAAAAAAAAFBLoSAAAAAAAAAAAUA#####wADeVUnABtpbnQoeVUqMTAwMDAwMCswLjUpLzEwMDAwMDAAAAAHAwAAABcCAAAABwAAAAAHAgAAAAgAAAA9AAAAAUEuhIAAAAAAAAAAAT#gAAAAAAAAAAAAAUEuhIAAAAAA#####wAAAAEAD0NDYWxjdWxDb21wbGV4ZQD#####AAJ6VQAJeFUnK2kqeVUnAAAABwAAAAAZAAAAUwAAAAcC#####wAAAAEAC0NDb25zdGFudGVpAAAAGQAAAFQAAAAdAP####8ABG51bVUABm51bSh6Kf####8AAAABABZDQXBwZWxGb25jdGlvbkNvbXBsZXhlAAAAOwAAABkAAAA6#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAMQAAAAAAAMAkAAAAAAAAAAAAURAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABWAAAAHQD#####AAVudW1VMQAGbnVtVSsxAAAABwAAAAAZAAAAVgAAAAE#8AAAAAAAAAAAACAA#####wEAAAAAwC4AAAAAAADAIAAAAAAAAAAAAFIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAWAAAABwA#####wAAAAAAAABXAAAACAAAAB0AAAA5AAAABwAAADkAAAA6AAAAPwAAAE0AAABRAAAAVgAAAFcAAAAcAP####8AAAAAAAAAWgAAAAgAAAAcAAAANQAAAAsAAAA1AAAANwAAADgAAAA5AAAAOgAAAD8AAABNAAAAUQAAAFYAAABXAAAAWgAAABwA#####wAAAAAAAABZAAAACAAAAB0AAAA5AAAACAAAADkAAAA6AAAAPwAAAE0AAABSAAAAVgAAAFgAAABZAAAAHAD#####AAAAAAAAAFwAAAAIAAAAHAAAADUAAAAMAAAANQAAADcAAAA4AAAAOQAAADoAAAA#AAAATQAAAFIAAABWAAAAWAAAAFkAAABcAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAABQAAAAOAP####8AAAABAAAAXgAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABfAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAF8AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAXwAAAA8A#####wD#AAAAAgAAAAQAAABgAAAAYQAAAGIAAABgAAAAEAD#####AP8AAAAAAAUAAABjAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAJgAAABQAAAAOAP####8AAAABAAAAZQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABmAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAZgAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAUAAAADgD#####AAAAAQAAABMAAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAATAAAAawAAAA4A#####wAAAGwAAAAmAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAG0AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAbQAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEkAAABtAAAADwD#####AAAA#wABAAAABAAAAG4AAABvAAAAcAAAAG4AAAAQAP####8AAAD#AAAABQAAAHEAAAAOAP####8AAAABAAAADwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADQAAABzAAAAFAD#####AAAAAAAQAAABAAEAAAB0AAAAH#####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAxAAAAM#####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAfwAAQDUAAAAAAADARQAAAAAAAQAAAHYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAAUAP####8AAAD#ABAAAAEAAQAAAAEAAAA0AAAAIQD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAeAAAACcAAAAiAP####8AAAD#AMBAAAAAAAAAwAgAAAAAAAAAAAB5EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMykpAAAAIQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAAHUAAAAiAP####8AAH8AAMBEgAAAAAAAP#AAAAAAAAAAAAB7EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMSkpAAAAEQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAACz#####AAAAAQAJQ0Ryb2l0ZU9tAP####8A#wAAABAAAAEAAgAAAAkAAAB9AAAAAT#wAAAAAAAAAAAAIQD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAfgAAADMAAAAiAP####8A#wAAAMA1AAAAAAAAwEKAAAAAAAAAAAB#EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMikpAAAAIQD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAfgAAAHUAAAAiAP####8A#wAAAMAUAAAAAAAAQCYAAAAAAAAAAACBEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMikp################";
    this.MG32codeBase64corr =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAMz#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAEQAAFPAAAAAAAAAAAAQAgAAAAAAAAFAAFATMAAAAAAAEBTYUeuFHri#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAARAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQF6AAAAAAAAAAAAC#####wAAAAEAB0NDYWxjdWwA#####wAEem9vbQABOAAAAAFAIAAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAAAf####8AAAABAApDT3BlcmF0aW9uAwAAAAE#8AAAAAAAAAAAAAcBAAAAAUA0AAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAADAAAABf####8AAAABAAlDUm90YXRpb24A#####wAAAAH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBOAAAAAAAAAAAACQD#####AQAAAAEQAAFKAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAYAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAAGAAAACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAUA#####wACeEIAATYAAAABQBgAAAAAAAAAAAAFAP####8AAnlCAAEwAAAAAQAAAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAABEAABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAAAoAAAAIAAAACwAAAAUA#####wACeEMAATAAAAABAAAAAAAAAAAAAAAFAP####8AAnlDAAE2AAAAAUAYAAAAAAAAAAAADQD#####AQAAAAEQAAFDAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAADQAAAAgAAAAOAAAABQD#####AAN4TTEAATgAAAABQCAAAAAAAAAAAAAFAP####8AA3lNMQABMgAAAAFAAAAAAAAAAAAAAA0A#####wEAAAAAEAACTTEAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAQAAAACAAAABEAAAANAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAAA#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAAEwAAAAEAAAAJAP####8BAAAAABAAAVcAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAABQAAAAOAP####8AAAABAAAAFQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAAWAAAACQD#####AQAAAAAQAAFYAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAwAAAAWAAAACQD#####AQAAAAAQAAFZAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAAAW#####wAAAAEACUNQb2x5Z29uZQD#####AQB#AAABAAAABAAAABcAAAAYAAAAGQAAABf#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQB#AAAAAAUAAAAaAAAABQD#####AAJueAABNwAAAAFAHAAAAAAAAAAAAAUA#####wACbnkAATcAAAABQBwAAAAAAAAAAAAMAP####8A5ubmAAEAAAABAAAADAAAAA8AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAANAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAACAAAABwAAAAIAAAAHf####8AAAABAAdDTWlsaWV1AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAHwAAAAUA#####wADeE4zAAIyNgAAAAFAOgAAAAAAAAAAAAUA#####wADeU4zAAEyAAAAAUAAAAAAAAAAAAAABQD#####AAN4TTMAAjE2AAAAAUAwAAAAAAAAAAAABQD#####AAN5TTMAAjIyAAAAAUA2AAAAAAAAAAAADQD#####AQAA#wAQAAJOMwAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACEAAAAIAAAAIgAAAA0A#####wEAAP8AEAACTTMAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAjAAAACAAAACT#####AAAAAQALQ01lZGlhdHJpY2UA#####wEAAP8AEAAAAQACAAAAJQAAACYAAAAFAP####8AA3hOMgACMTQAAAABQCwAAAAAAAAAAAAFAP####8AA3lOMgABMgAAAAFAAAAAAAAAAAAAAAUA#####wADeU0yAAIxNAAAAAFALAAAAAAAAAAAAAUA#####wADeE0yAAEyAAAAAUAAAAAAAAAAAAAADQD#####AQB#AAAQAAJOMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACgAAAAIAAAAKQAAAA0A#####wEAfwAAEAACTTIAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAArAAAACAAAACoAAAAFAP####8AA3hOMQACMTYAAAABQDAAAAAAAAAAAAAFAP####8AA3lOMQACMTAAAAABQCQAAAAAAAAAAAANAP####8BAAAAABAAAk4xAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAALgAAAAgAAAAvAAAAEgD#####AQB#AAEQAAQoZDEpAQACP+zMzMzMzM0AAAAwAAAAEv####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAAwAAAAHAQAAAAgAAAAcAAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8AAAAAABAAAAEAAQAAAAEAAAAyAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAA8AAAAHAQAAAAgAAAAdAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAAAAAAAAAAAMwAAAA4A#####wAAAAEAAAA0AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANQAAADYAAAAUAP####8BAAAAABAAAAEAAQAAADUAAAA3AAAABAD#####AQAAAAEQAAFVAAAAAAAAAAAAQAgAAAAAAAAFAAE#0N4k1fxFTQAAADj#####AAAAAgANQ01lc3VyZUFmZml4ZQD#####AAF6AAAAHgAAADn#####AAAAAQANQ0ZvbmNDb21wbGV4ZQD#####AANudW0AEjIqcmUoeikrMipueCppbSh6KQAAAAcAAAAABwIAAAABQAAAAAAAAAD#####AAAAAgAJQ0ZvbmN0aW9uTP####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAAHAgAAAAcCAAAAAUAAAAAAAAAA#####wAAAAEAF0NSZXN1bHRhdFZhbGV1ckNvbXBsZXhlAAAAHAAAABdNAAAAGAAAAAAAAXoAAAAPAP####8B#wD#AAEAAAAEAAAAAQAAAAwAAAAPAAAAAf####8AAAACAAhDTWVzdXJlWQD#####AAJ5VQAAAAkAAAA5#####wAAAAIACENNZXN1cmVYAP####8AAnhVAAAACQAAADkAAAAOAP####8AAAABAAAAOQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAA#AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAPwAAAA8A#####wEAAAAAAQAAAAQAAABAAAAAQQAAAEIAAABA#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AAAAAAAAAEMAAAAIAAAAHQAAADkAAAAGAAAAOQAAAD8AAABAAAAAQQAAAEIAAABDAAAAHAD#####AAAAAAAAAEQAAAAIAAAAHAAAADUAAAAKAAAANQAAADcAAAA4AAAAOQAAAD8AAABAAAAAQQAAAEIAAABDAAAARAAAAAoA#####wAAAAwAAAABQE4AAAAAAAAAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAARgAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAwAAABGAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADwAAAEYAAAAPAP####8B#wD#AAQAAAAEAAAARwAAAEgAAABJAAAARwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEcAAAA#AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAD8AAAAJAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAD8AAAAPAP####8BAAAAAAEAAAAEAAAASwAAAEwAAABNAAAASwAAABwA#####wEAAAAAAABOAAAACAAAAB0AAAA5AAAABgAAADkAAAA#AAAASwAAAEwAAABNAAAATgAAABwA#####wAAAAAAAABPAAAACAAAABwAAAA1AAAACgAAADUAAAA3AAAAOAAAADkAAAA#AAAASwAAAEwAAABNAAAATgAAAE8AAAATAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA5AAAATQAAAAE#1VVHWjGkvgAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADkAAABNAAAAAT#lVUdaMaS+AAAABQD#####AAN4VScAG2ludCh4VSoxMDAwMDAwKzAuNSkvMTAwMDAwMAAAAAcDAAAAFwIAAAAHAAAAAAcCAAAACAAAAD4AAAABQS6EgAAAAAAAAAABP+AAAAAAAAAAAAABQS6EgAAAAAAAAAAFAP####8AA3lVJwAbaW50KHlVKjEwMDAwMDArMC41KS8xMDAwMDAwAAAABwMAAAAXAgAAAAcAAAAABwIAAAAIAAAAPQAAAAFBLoSAAAAAAAAAAAE#4AAAAAAAAAAAAAFBLoSAAAAAAP####8AAAABAA9DQ2FsY3VsQ29tcGxleGUA#####wACelUACXhVJytpKnlVJwAAAAcAAAAAGQAAAFMAAAAHAv####8AAAABAAtDQ29uc3RhbnRlaQAAABkAAABUAAAAHQD#####AARudW1VAAZudW0oein#####AAAAAQAWQ0FwcGVsRm9uY3Rpb25Db21wbGV4ZQAAADsAAAAZAAAAOv####8AAAABAA9DVmFsZXVyQWZmaWNoZWUA#####wEAAAAAwDEAAAAAAADAJAAAAAAAAAAAAFEQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAVgAAAB0A#####wAFbnVtVTEABm51bVUrMQAAAAcAAAAAGQAAAFYAAAABP#AAAAAAAAAAAAAgAP####8BAAAAAMAuAAAAAAAAwCAAAAAAAAAAAABSEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAFgAAAAcAP####8AAAAAAAAAVwAAAAgAAAAdAAAAOQAAAAcAAAA5AAAAOgAAAD8AAABNAAAAUQAAAFYAAABXAAAAHAD#####AAAAAAAAAFoAAAAIAAAAHAAAADUAAAALAAAANQAAADcAAAA4AAAAOQAAADoAAAA#AAAATQAAAFEAAABWAAAAVwAAAFoAAAAcAP####8AAAAAAAAAWQAAAAgAAAAdAAAAOQAAAAgAAAA5AAAAOgAAAD8AAABNAAAAUgAAAFYAAABYAAAAWQAAABwA#####wAAAAAAAABcAAAACAAAABwAAAA1AAAADAAAADUAAAA3AAAAOAAAADkAAAA6AAAAPwAAAE0AAABSAAAAVgAAAFgAAABZAAAAXAAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC0AAAAUAAAADgD#####AAAAAQAAAF4AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAXwAAAAkA#####wH#AP8AEAABUQAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAXwAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAABfAAAADwD#####Af8AAAACAAAABAAAAGAAAABhAAAAYgAAAGAAAAAQAP####8B#wAAAAAABQAAAGMAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAmAAAAFAAAAA4A#####wAAAAEAAABlAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAZgAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAABmAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAJgAAABQAAAAOAP####8AAAABAAAAEwAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABMAAABrAAAADgD#####AAAAbAAAACYAAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABHAAAAbQAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEgAAABtAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAG0AAAAPAP####8BAAD#AAEAAAAEAAAAbgAAAG8AAABwAAAAbgAAABAA#####wEAAP8AAAAFAAAAcQAAAA4A#####wAAAAEAAAAPAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAAHMAAAAUAP####8AAAAAABAAAAEAAQAAAHQAAAAf#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADEAAAAz#####wAAAAIADENDb21tZW50YWlyZQD#####AQB#AABANQAAAAAAAMBFAAAAAAABAAAAdhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAABQA#####wAAAP8AEAAAAQABAAAAAQAAADQAAAAhAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAAJwAAACIA#####wEAAP8AwEAAAAAAAADACAAAAAAAAAAAAHkQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgzKSkAAAAhAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAxAAAAdQAAACIA#####wAAfwAAwESAAAAAAAA#8AAAAAAAAAAAAHsQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAARAP####8BAH8AABAAAkgyAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC0AAAAs#####wAAAAEACUNEcm9pdGVPbQD#####Af8AAAAQAAABAAIAAAAJAAAAfQAAAAE#8AAAAAAAAAAAACEA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAH4AAAAzAAAAIgD#####Af8AAADANQAAAAAAAMBCgAAAAAAAAAAAfxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDIpKQAAACEA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAH4AAAB1AAAAIgD#####Af8AAADAFAAAAAAAAEAmAAAAAAAAAAAAgRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDIpKQAAABEA#####wEAfwAAEAACSDEAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAADAAAAAUAP####8BAH8AABAAAAEAAgAAABIAAAAwAAAABAD#####AQB#AAEQAANNJzEAAAAAAAAAAABACAAAAAAAAAUAAT#YiIhSPtDkAAAAhP####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAM#####wAAAAIAD0NNZXN1cmVBYnNjaXNzZQD#####AAJrMQAAAIMAAAASAAAAhQAAAAYA#####wAAAIMAAAAIAAAAhwAAAAkA#####wEAfwAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAAAAFQAAAIj#####AAAAAQANQ1BvaW50UHJvamV0ZQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGAAAADEAAAAGAP####8AAACKAAAACAAAAIcAAAAJAP####8BAH8AABAAAlgnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABgAAACLAAAAJgD#####AQB#AAAQAAJZJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAAMQAAAAYA#####wAAAI0AAAAIAAAAhwAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAACOAAAADwD#####AQB#AAACAAAABAAAAIkAAACMAAAAjwAAAIkAAAAQAP####8BAH8AAAAABQAAAJD#####AAAAAQAPQ1N5bWV0cmllQXhpYWxlAP####8AAAAxAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAFwAAAJIAAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAYAAAAkgAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAACSAAAADwD#####AQB#AAACAAAABAAAAJMAAACUAAAAlQAAAJMAAAAQAP####8BAH8AAAAABQAAAJb#####AAAAAgAXQ01hY3JvQW5pbWF0aW9uUG9pbnRMaWUA#####wAAfwAB#####wpAi1QAAAAAAEA#hR64UeuGAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFYW5pbTEAAAAAAAAUAAAAZAAAADwAAACFAAEA#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8AAH8AAf####8KQIs8AAAAAABAT8KPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTEAAAAAAAgAAACRAAAAkAAAABsAAAAaAAAAMQAAAHcAAACXAAAAlv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8AAH8AAf####8KQItEAAAAAABAV+FHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MQAAAAAACAAAAJEAAACQAAAAGwAAABoAAAAxAAAAdwAAAJcAAACWAP####8AAAABAAtDTWFjcm9QYXVzZQD#####AAB#AAH#####EECN1AAAAAAAQEJCj1wo9cMCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAf####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AAB#AAH#####EEBTYAAAAAAAQCMKPXCj1wwCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGEAAAAAAAQAAACaAAAAmAAAAJkAAACbAAAAFAD#####AQB#AAAQAAABAAIAAAAtAAAALAAAAAQA#####wEAfwAAEAADTScyAAAAAAAAAAAAQAgAAAAAAAAFAAE#089zR#b9RQAAAJ0AAAAlAP####8AAmsyAAAAfQAAAC0AAACeAAAAJgD#####AAB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYAAAAH4AAAAGAP####8AAACgAAAACAAAAJ8AAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABgAAAAoQAAACYA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGIAAAB+AAAABgD#####AAAAowAAAAgAAACfAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYgAAAKQAAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABhAAAApAAAAA8A#####wH#AAAAAgAAAAQAAACiAAAApQAAAKYAAACiAAAAEAD#####Af8AAAAAAAUAAACnAAAAKAD#####AP8AAAH#####CkCLlAAAAAAAQGKQo9cKPXECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVhbmltMgAAAAAAABQAAABkAAAAPAAAAJ4AAQAAAAAnAP####8AAAB+AAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYAAAAKoAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABhAAAAqgAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGIAAACqAAAADwD#####Af8AAAACAAAABAAAAKsAAACsAAAArQAAAKsAAAAQAP####8B#wAAAAAABQAAAK4AAAApAP####8A#wAAAf####8KQIu0AAAAAABAZpCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTIAAAAAAAkAAABkAAAAYwAAAKgAAACnAAAArwAAAK4AAAB+AAAAggAAAIAAAAAqAP####8A#wAAAf####8KQIvMAAAAAABAahCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MgAAAAAACQAAAGQAAABjAAAAqAAAAKcAAACvAAAArgAAAH4AAACCAAAAgAAAAAAsAP####8A#wAAAf####8QQGhwAAAAAABAIwo9cKPXDAIAAAAAAAAAAAAAAAABAAAAAAAAAAAADENvcnJlY3Rpb24gYgAAAAAABAAAALEAAACpAAAAsAAAAJsAAAARAP####8B#wAAABAAAkgzAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAlAAAAFAD#####Af8AAAAQAAABAAIAAAAmAAAAJQAAAAQA#####wH#AAAAEAADTSczAAAAAAAAAAAAQAgAAAAAAAAFAAE#0spidDyBMgAAALQAAAAlAP####8AAmszAAAAswAAACYAAAC1AAAAJgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAbgAAACcAAAAmAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABwAAAAJwAAAAYA#####wAAALcAAAAIAAAAtgAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAG4AAAC5AAAABgD#####AAAAuAAAAAgAAAC2AAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAcAAAALsAAAAGAP####8AAACzAAAACAAAALYAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABvAAAAvQAAAA8A#####wEAAP8AAgAAAAQAAAC6AAAAvgAAALwAAAC6AAAAJwD#####AAAAJwAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAG4AAADAAAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAbwAAAMAAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABwAAAAwAAAAA8A#####wEAAP8AAgAAAAQAAADBAAAAwgAAAMMAAADBAAAAEAD#####AQAA#wAAAAUAAADEAAAAEAD#####AQAA#wAAAAUAAAC#AAAAKAD#####AAAA#wH#####CkCL9AAAAAAAQHAoUeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVhbmltMwAAAAAAABQAAABkAAAAPAAAALUAAQAAAAApAP####8AAAD#Af####8KQIwEAAAAAABAcjhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTMAAAAAAAgAAAByAAAAcQAAAMYAAAC#AAAAxQAAAMQAAAAnAAAAegAAACoA#####wAAAP8B#####wpAjAwAAAAAAEB0CFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJYXBwYXJhaXQzAAAAAAAIAAAAcgAAAHEAAADGAAAAvwAAAMUAAADEAAAAJwAAAHoAAAAALAD#####AAAA#wH#####EEBzWAAAAAAAQCUKPXCj1wwCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGMAAAAAAAQAAADJAAAAxwAAAJsAAADIAAAALAD#####AAAA#wH#####EECMdAAAAAAAQHb4UeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApDb3JyZWN0aW9uAAAAAAADAAAAnAAAALIAAADKAAAAhv##########";
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let texte = ``,
      texte_corr = ``;
    let tabfigA = [],
      tabfigB = [];
    let nx = 7,
      ny = 7,
      xB = 6,
      yB = 0,
      xC = 0,
      yC = 6,
      zoom = 8;
    let xM1, yM1, xN1, yN1, xM2, yM2, xN2, yN2, xM3, yM3, xN3, yN3;
    let trouver = false,
      indexa,
      numa,
      anum,
      indexaxe1,
      xmil1,
      ymil1,
      indexb,
      numb,
      bnum,
      indexaxe2,
      xmil2,
      ymil2,
      indexc,
      numc,
      cnum,
      indexaxe3,
      xmil3,
      ymil3;
    let point = [0, 0, 0];

    for (let y = 0; y < ny; y++) {
      // On initialise les tableaux avec les coordonnÃ©es des points de rÃ©fÃ©rence (A,B,C et D) de chaque translatÃ© et son numÃ©ro dans le pavage.
      for (let x = 0; x < nx; x++) {
        tabfigA.push([2 + x * 6, 2 + y * 6, 2 * x + 2 * y * nx]);
        tabfigB.push([4 + x * 6, 4 + y * 6, 2 * x + 2 * y * nx + 1]);
      }
    }

    // PremiÃ¨re question : une figure dans tabfigA, une symÃ©trie par rapport Ã  une droite parallÃ¨le Ã  y=-x, l'image est dans tabfigB	 !
    // L'axe de symÃ©trie est la mÃ©diatrice du segment d'extrÃ©mitÃ©s les centres de gravitÃ©s des figures A et B.

    indexa = randint(0, nx * ny - 1);
    numa = tabfigA[indexa][2];
    indexaxe1 = randint(0, nx * ny - 1); // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    //on calcule les coordonnÃ©es du milieu de [BC] on ajoute aux coordonnÃ©es du milieu de [BC] celles du vecteur BB'. (j'aurais pu rÃ©duire mais cela aurait rendu le calcul plus opaque)
    xmil1 = tabfigA[indexaxe1][0] - 2;
    ymil1 = tabfigA[indexaxe1][1] - 2;
    point = [tabfigA[indexa][0], tabfigA[indexa][1]];
    point = image_point_par_transformation(2, point, [xmil1, ymil1]);

    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigB[j][0] && point[1] == tabfigB[j][1]) {
          trouver = true;
          anum = tabfigB[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexa = randint(0, nx * ny - 1);
        numa = tabfigA[indexa][2];
        indexaxe1 = randint(0, nx * ny - 1);
        xmil1 = tabfigA[indexaxe1][0] - 2;
        ymil1 = tabfigA[indexaxe1][1] - 2;
        point = [tabfigA[indexa][0], tabfigA[indexa][1]];
        point = image_point_par_transformation(2, point, [xmil1, ymil1]);
      }
    }
    xM1 = tabfigA[indexa][0];
    yM1 = tabfigA[indexa][1];
    xN1 = point[0];
    yN1 = point[1];

    texte = `Le point O peut Ãªtre dÃ©placÃ© pour recadrer Ã©ventuellement le pavage.<br>`;
    texte +=
      num_alpha(0) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numa} dans la symÃ©trie par rapport Ã  la droite $(d_1)$ ?<br>`,
        `green`
      );
    texte_corr =
      num_alpha(0) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numa} dans la symÃ©trie par rapport Ã  la droite $(d_1)$ porte le numÃ©ro ${anum}.<br>`,
        `green`
      );
    // DeuxiÃ¨me question : une figure dans tabfigA, une symÃ©trie par rapport Ã  une parallÃ¨le Ã  y=x ql'image est une figure dans tabfigA
    // On tracera la mÃ©diatrice du segment d'extrÃ©mitÃ© les 2 centres de gravitÃ©s symÃ©triques.
    indexb = randint(0, nx * ny - 1);
    numb = tabfigA[indexb][2];
    indexaxe2 = randint(0, nx * ny - 1, [indexb]); // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    xmil2 = tabfigA[indexaxe2][0] - 2;
    ymil2 = tabfigA[indexaxe2][1] - 2;
    point = image_point_par_transformation(
      1,
      [tabfigA[indexb][0], tabfigA[indexb][1]],
      [xmil2, ymil2]
    );
    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
          trouver = true;
          bnum = tabfigA[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexb = randint(0, nx * ny - 1);
        numb = tabfigA[indexb][2];
        indexaxe2 = randint(0, nx * ny - 1);
        xmil2 = tabfigA[indexaxe2][0] - 2;
        ymil2 = tabfigA[indexaxe2][1] - 2;
        point = image_point_par_transformation(
          1,
          [tabfigA[indexb][0], tabfigA[indexb][1]],
          [xmil2, ymil2]
        );
      }
    }
    xM2 = tabfigA[indexb][0];
    yM2 = tabfigA[indexb][1];
    xN2 = point[0];
    yN2 = point[1];

    texte +=
      num_alpha(1) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numb} dans la symÃ©trie par rapport Ã  la droite $(d_2)$ ?<br>`,
        `red`
      );
    texte_corr +=
      num_alpha(1) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numb} dans la symÃ©trie par rapport Ã  la droite $(2)$ porte le numÃ©ro ${bnum}.<br>`,
        `red`
      );

    // troisiÃ¨me question : une figure dans tabfigB, une symÃ©trie par rapport Ã  une parallÃ¨le Ã  y=0, l'image est dans tabfigA
    indexc = 3; //randint(0,nx*ny-1)
    numc = tabfigB[indexc][2];
    indexaxe3 = 14; //randint(0,nx*ny-1) // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    xmil3 = tabfigA[indexaxe3][0] - 2;
    ymil3 = tabfigA[indexaxe3][1] - 2;
    point = [tabfigB[indexc][0], tabfigB[indexc][1]];
    point = changement_de_base_ortho_tri(
      image_point_par_transformation(
        3,
        changement_de_base_tri_ortho(point),
        changement_de_base_tri_ortho([xmil3, ymil3])
      )
    );
    point[0] = arrondi(point[0], 1); // Les coordonnÃ©es sont censÃ©es Ãªtre entiÃ¨res mais les calculs JS laissent toujours de cent-milliardiÃ¨mes indÃ©sirables.
    point[1] = arrondi(point[1], 1);
    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
          trouver = true;
          cnum = tabfigA[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexc = randint(0, nx * ny - 1);
        numc = tabfigB[indexc][2];
        indexaxe3 = randint(0, nx * ny - 1);
        xmil3 = tabfigA[indexaxe3][0] - 2;
        ymil3 = tabfigA[indexaxe3][1] - 2;
        point = [tabfigA[indexa][0], tabfigA[indexa][1]];
        point = changement_de_base_ortho_tri(
          image_point_par_transformation(
            3,
            changement_de_base_tri_ortho(point),
            [xmil3, ymil3]
          )
        );
        point[0] = arrondi(point[0], 1);
        point[1] = arrondi(point[1], 1);
      }
    }

    xM3 = tabfigB[indexc][0];
    yM3 = tabfigB[indexc][1];
    xN3 = point[0];
    yN3 = point[1];

    texte +=
      num_alpha(2) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numc} dans la symÃ©trie par rapport Ã  la droite $(d_3)$ ?<br>`,
        `blue`
      );
    texte_corr +=
      num_alpha(2) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numc} dans la symÃ©trie par rapport Ã  la droite $(d_3)$ porte le numÃ©ro ${cnum}.<br>`,
        `blue`
      );

    if (sortie_html) {
      this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM1", "${xM1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM1", "${yM1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN1", "${xN1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN1", "${yN1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM2", "${xM2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM2", "${yM2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN2", "${xN2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN2", "${yN2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM3", "${xM3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM3", "${yM3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN3", "${xN3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN3", "${yN3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "zoom", "${zoom}");

			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM1", "${xM1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM1", "${yM1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN1", "${xN1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN1", "${yN1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM2", "${xM2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM2", "${yM2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN2", "${xN2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN2", "${yN2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM3", "${xM3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM3", "${yM3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN3", "${xN3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN3", "${yN3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ny", "${ny}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "zoom", "${zoom}");

			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.executeMacro("MG32svgcorr${numero_de_l_exercice}","Correction")
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`;

      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    } else {
      texte = ``;
      texte_cor = ``;
      this.liste_questions.push(texte); // on envoie la question
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    }
  };
  // this.besoin_formulaire_numerique = ['Transformations',5, '1 : SymÃ©tries axiales\n 2 : SymÃ©tries centrales\n 3 : Rotations\n 4 : Translations\n 5 : HomothÃ©ties\n'];
}

/**
 * Calcul de volumes (cube et pavÃ© droit).
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6M30
 */

function Calcul_de_volumes() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculs de volumes";
  this.consigne = "Calculer en dÃ©taillant le volume des solides donnÃ©s";
  this.nb_questions = 4;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.classe == 6) type_de_questions_disponibles = [1, 2];
    // sixiÃ¨me : cube et pavÃ© droit
    else if (this.classe == 5) type_de_questions_disponibles = [1, 2, 3, 4];
    // cinquiÃ¨me : on ajoute les prismes et le cylindre
    else if (this.classe == 4)
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 6];
    // QuatriÃ¨me : on ajoute pyramides et cones
    else type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7]; // TroisiÃ¨me : on ajoute les boules.
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_unites = [
      [`~\\text{m}`, `~\\text{m}^3`],
      [`~\\text{dm}`, `~\\text{dm}^3`],
      [`~\\text{cm}`, `~\\text{cm}^3`],
      [`~\\text{mm}`, `~\\text{mm}^3`],
    ];
    for (
      let i = 0, texte, texte_corr, L, l, h, c, r, A, j, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // cube
          c = randint(2, 10);
          j = randint(0, 3); // pour le choix de l'unitÃ©
          texte = `Un cube de $${c} ${liste_unites[j][0]}$ d'arÃªte.`;
          texte_corr = `$\\mathcal{V}= c^3 =c \\times c \\times c = ${c}${
            liste_unites[j][0]
          }\\times${c}${liste_unites[j][0]}\\times${c}${
            liste_unites[j][0]
          }=${tex_nombrec(c * c * c)}${liste_unites[j][1]}$`;
          break;
        case 2: // pavÃ© droit
          if (this.sup == 1) {
            //sans conversion
            j = randint(0, 3); // pour le choix de l'unitÃ©
            l = randint(2, 5);
            h = randint(3, 6);
            L = randint(6, 10);
            texte = `Un pavÃ© droit de $${l}${liste_unites[j][0]}$ de largeur, de $${L}${liste_unites[j][0]}$ de longueur et de $${h}${liste_unites[j][0]}$ de hauteur.`;
            texte_corr = `$\\mathcal{V}= l \\times L \\times h = ${l}${
              liste_unites[j][0]
            }\\times${L}${liste_unites[j][0]}\\times${h}${
              liste_unites[j][0]
            }=${tex_nombrec(l * L * h)}${liste_unites[j][1]}$`;
          } else {
            // avec conversion
            j = randint(1, 2); // pour le choix de l'unitÃ©	centrale
            l = randint(2, 5);
            h = randint(3, 6) * 10;
            L = arrondi(randint(6, 10) / 10, 1);
            texte = `Un pavÃ© droit de $${l}${
              liste_unites[j][0]
            }$ de largeur, de $${tex_nombre(L)}${
              liste_unites[j - 1][0]
            }$ de longueur et de $${h}${liste_unites[j + 1][0]}$ de hauteur.`;
            texte_corr = `$\\mathcal{V}= l \\times L \\times h = ${l}${
              liste_unites[j][0]
            }\\times${tex_nombre(L)}${liste_unites[j - 1][0]}\\times${h}${
              liste_unites[j + 1][0]
            }=${l}${liste_unites[j][0]}\\times${L * 10}${
              liste_unites[j][0]
            }\\times${h / 10}${liste_unites[j][0]}=${tex_nombrec(
              arrondi(l * L * h)
            )}${liste_unites[j][1]}$`;
          }
          break;
        case 3: // Cylindre
          if (this.sup == 1) {
            //sans conversion
            j = randint(0, 3); // pour le choix de l'unitÃ©
            r = randint(2, 10);
            h = randint(2, 15);
            texte = `Un cylindre de $${r}${
              liste_unites[j][0]
            }$ de rayon et de $${tex_nombre(h)}${
              liste_unites[j][0]
            }$ de hauteur.`;
            texte_corr = `$\\mathcal{V}=\\pi \\times R ^2 \\times h =\\pi\\times\\left(${r}${
              liste_unites[j][0]
            }\\right)^2\\times${h}${liste_unites[j][0]}=${tex_nombrec(
              r * r * h
            )}\\pi${liste_unites[j][1]}\\approx${tex_nombrec(
              arrondi(r * r * h * Math.PI, 1)
            )}${liste_unites[j][1]}$`;
          } else {
            j = randint(2, 3); // pour le choix de l'unitÃ©
            r = randint(2, 10);
            h = randint(20, 150);
            texte = `Un cylindre de $${r}${
              liste_unites[j][0]
            }$ de rayon et de $${tex_nombrec(h / 10)}${
              liste_unites[j - 1][0]
            }$ de hauteur.`;
            texte_corr = `$\\mathcal{V}=\\pi \\times R ^2 \\times h =\\pi\\times\\left(${r}${
              liste_unites[j][0]
            }\\right)^2\\times${tex_nombrec(h / 10)}${
              liste_unites[j - 1][0]
            }=\\pi\\times${r * r}${liste_unites[j][0]}^2\\times${h}${
              liste_unites[j][0]
            }=${tex_nombrec(r * r * h)}\\pi${
              liste_unites[j][1]
            }\\approx${tex_nombrec(calcul(r * r * h * Math.PI, 1))}${
              liste_unites[j][1]
            }$`;
          }
          break;
        case 4: // prisme droit
          if (this.sup == 1) {
            //sans conversion
            j = randint(0, 3); // pour le choix de l'unitÃ©
            c = randint(2, 10);
            h = randint(2, 5);
            l = randint(6, 10);
            texte = `Un prisme droit de hauteur $${l}${liste_unites[j][0]}$ et dont les bases sont des triangles de base $${c}${liste_unites[j][0]}$ et de hauteur correspondante $${h}${liste_unites[j][0]}$.`;
            texte_corr = `$\\mathcal{V}=\\mathcal{B} \\times h=\\dfrac{${c}${
              liste_unites[j][0]
            }\\times${h}${liste_unites[j][0]}}{2}\\times${l}${
              liste_unites[j][0]
            }=${tex_nombrec(arrondi(calcul((c * h * l) / 2), 1))}${
              liste_unites[j][1]
            }$`;
          } else {
            j = randint(1, 2); // pour le choix de l'unitÃ©
            c = randint(2, 10);
            h = randint(30, 50);
            l = arrondi(randint(5, 15) / 10, 1);
            texte = `Un prisme droit de hauteur $${l}${
              liste_unites[j - 1][0]
            }$ et dont les bases sont des triangles de base $${c}${
              liste_unites[j][0]
            }$ et de hauteur correspondante $${h}${liste_unites[j + 1][0]}$.`;
            texte_corr = `$\\mathcal{V}=\\mathcal{B} \\times h=\\dfrac{${c}${
              liste_unites[j][0]
            }\\times${h}${liste_unites[j + 1][0]}}{2}\\times${tex_nombrec(l)}${
              liste_unites[j - 1][0]
            }=\\dfrac{${c}${liste_unites[j][0]}\\times${tex_nombrec(
              calcul(h / 10)
            )}${liste_unites[j][0]}}{2}\\times${l * 10}${
              liste_unites[j][0]
            }=${tex_nombrec(calcul((c * h * l) / 2))}${liste_unites[j][1]}$`;
          }
          break;
        case 5: // cone
          if (this.sup == 1) {
            //sans conversion
            j = randint(0, 3); // pour le choix de l'unitÃ©
            r = randint(2, 10);
            h = randint(2, 15);
            texte = `Un cÃ´ne de $${r}${
              liste_unites[j][0]
            }$ de rayon et de $${tex_nombre(h)}${
              liste_unites[j][0]
            }$ de hauteur.`;
            texte_corr = `$\\mathcal{V}=\\dfrac{1}{3} \\times \\mathcal{B} \\times h=\\dfrac{1}{3}\\times\\pi\\times\\left(${r}${
              liste_unites[j][0]
            }\\right)^2\\times${h}${liste_unites[j][0]}=${tex_fraction(
              r * r * h,
              3
            )}\\pi${liste_unites[j][1]}\\approx${tex_nombrec(
              arrondi((r * r * h * Math.PI) / 3)
            )}${liste_unites[j][1]}$`;
          } else {
            j = randint(2, 3); // pour le choix de l'unitÃ©
            r = randint(2, 10);
            h = randint(20, 150);
            texte = `Un cÃ´ne de $${r}${
              liste_unites[j][0]
            }$ de rayon et de $${tex_nombrec(h / 10)}${
              liste_unites[j - 1][0]
            }$ de hauteur.`;
            texte_corr = `$\\mathcal{V}=\\dfrac{1}{3} \\times \\mathcal{B} \\times h=\\dfrac{1}{3}\\times\\pi\\times\\left(${r}${
              liste_unites[j][0]
            }\\right)^2\\times${tex_nombrec(calcul(h / 10))}${
              liste_unites[j - 1][0]
            }=\\dfrac{1}{3}\\times\\pi\\times\\left(${r}${
              liste_unites[j][0]
            }\\right)^2\\times${tex_nombrec(h)}${
              liste_unites[j][0]
            }=${tex_fraction(r * r * h, 3)}\\pi\\approx${tex_nombrec(
              calcul((r * r * h * Math.PI) / 3, 1)
            )}${liste_unites[j][1]}$`;
          }
          break;
        case 6: // pyramide
          if (this.sup == 1) {
            //sans conversion
            j = randint(0, 3); // pour le choix de l'unitÃ©
            c = randint(2, 10);
            h = randint(2, 5);
            l = randint(6, 10);
            texte = `Une pyramide de hauteur $${h}${liste_unites[j][0]}$ et dont la base  est un carrÃ© de $${c}${liste_unites[j][0]}$ de cÃ´tÃ©.`;
            texte_corr = `$\\mathcal{V}=\\dfrac{1}{3} \\times \\mathcal{B} \\times h=\\dfrac{1}{3}\\times\\left(${c}${liste_unites[j][0]}\\right)^2\\times${h}${liste_unites[j][0]}`;
            if (calcul((c * c * h) / 3, false) == arrondi((c * c * h) / 3, 1))
              texte_corr += `=${tex_nombrec(
                arrondi(calcul((c * c * h) / 3), 1)
              )}${liste_unites[j][1]}$`;
            else
              texte_corr += `\\approx${tex_nombrec(
                arrondi(calcul((c * c * h) / 3), 1)
              )}${liste_unites[j][1]}$`;
          } else {
            j = randint(1, 2); // pour le choix de l'unitÃ©
            c = randint(2, 10);
            h = randint(30, 50);
            l = arrondi(randint(5, 15) / 10, 1);
            texte = `Une pyramide de hauteur $${tex_nombrec(h / 10)}${
              liste_unites[j - 1][0]
            }$ et dont la base  est un carrÃ© de $${c}${
              liste_unites[j][0]
            }$ et de hauteur correspondante $${h}${liste_unites[j + 1][0]}$.`;
            texte_corr = `$\\mathcal{V}=\\dfrac{1}{3} \\times \\mathcal{B} \\times h=\\dfrac{1}{3}\\times\\left(${c}${
              liste_unites[j][0]
            }\\right)^2\\times${tex_nombrec(h / 10)}${
              liste_unites[j - 1][0]
            }=\\dfrac{1}{3}\\times${c * c}${
              liste_unites[j][0]
            }^2\\times${tex_nombrec(h)}${liste_unites[j][0]}`;
            if (calcul((c * c * h) / 3, false) == arrondi((c * c * h) / 3, 1))
              texte_corr += `=${tex_nombrec(
                arrondi(calcul((c * h * c) / 3), 1)
              )}${liste_unites[j][1]}$`;
            else
              texte_corr += `\\approx${tex_nombrec(
                arrondi(calcul((c * h * c) / 3), 1)
              )}${liste_unites[j][1]}$`;
          }
          break;
        case 7: // boule
          j = randint(0, 3); // pour le choix de l'unitÃ©
          r = randint(2, 10);
          texte = `Une boule de $${r}${liste_unites[j][0]}$ de rayon.`;
          texte_corr = `$\\mathcal{V}=\\dfrac{4}{3} \\times \\pi \\times R^3=\\dfrac{4}{3}\\times\\pi\\times\\left(${r}${
            liste_unites[j][0]
          }\\right)^3=${tex_fraction(calcul(4 * r * r * r), 3)}\\pi${
            liste_unites[j][1]
          }\\approx${tex_nombrec(
            arrondi(calcul((4 * Math.PI * r * r * r) / 3), 1)
          )}${liste_unites[j][1]}$`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : pas de conversion\n2 : avec conversion",
  ];
}

/**
 * Transformations : trouvers un point numÃ©rotÃ© par une des transformations du plan. Fonction gÃ©nÃ©rale utilisÃ©e sur tous les niveaux
 * @Auteur Jean-Claude Lhote
 * Pas de version LaTeX
 */
function Transformations() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  // this.titre = "Trouver l'image d'un point par une transformation du plan";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.pas_de_version_LaTeX = true;
  // this.sup = 1; // 1 pour les 6Ã¨me, 2 pour les 5Ã¨mes, 3 pour les 4Ã¨mes, et 4 pour les 3Ã¨mes.
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.MG32editable = false;
    this.taille_div_MG32 = [700, 700];
    this.MG32codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAAAAAAEAAABt#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEAB0NDYWxjdWwA#####wACeU8AATQAAAABQBAAAAAAAAAAAAACAP####8AAnhPAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wEAAAAADgABRwDAKAAAAAAAAAAAAAAAAAAABQABQEnAAAAAAABAhAQo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####ANjY2AAQAAABAQEAAAADAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAOAAFJAMAcAAAAAAAAQDQAAAAAAAAFAAFAUIAAAAAAAAAAAAT#####AAAAAQAJQ0Ryb2l0ZUFCAP####8BAAAAABAAAAEAAQAAAAMAAAAF#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wDY2NgAEAAAAQEBAAAAAwAAAAb#####AAAAAQAJQ0NlcmNsZU9BAP####8BAAAAAAEAAAADAAAABf####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAHAAAACP####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAAA4AAUoAwC4AAAAAAABAGAAAAAAAAAUAAgAAAAn#####AAAAAgAHQ1JlcGVyZQD#####AObm5gEBAAAAAwAAAAUAAAAKAQEBAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAEAABUQAAAAAAAAAAAEAIAAAAAAAABQAAAAALAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAA#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAAAwAAAAX#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAAADgACUTEAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA0AAAANAP####8AAAADAAAACgAAAA4A#####wEAAAAADgACUTIAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA######AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAwAAAABQCIAAAAAAAAAAAAOAP####8BAAAAAA4AAlEzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAARAAAADgD#####AQAAAAAOAAJRNAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAEf####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAAMAAAAEgAAAAUA#####wEAAAAADgACUjEAAAAAAAAAAABACAAAAAAAAAUAAT#uZmZmZmZmAAAAFAAAAA0A#####wAAAAwAAAATAAAADgD#####AQAAAAAOAAJSMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAVAAAAFgAAABAA#####wEAAAAAEAAAAQABAAAAFQAAABcAAAAFAP####8Bf39#AA4AAlMxAAAAAAAAAAAAQAgAAAAAAAADAAE#u38NRim38QAAABgAAAALAP####8A5ubmAAEAAAAMAAAADgAAABAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAgAIQ01lc3VyZVgA#####wADeFMxAAAAGgAAABn#####AAAAAgAIQ01lc3VyZVkA#####wADeVMxAAAAGgAAABkAAAACAP####8ACE5vbVBvaW50AAoxMCp5UzEreFMx#####wAAAAEACkNPcGVyYXRpb24AAAAAEwIAAAABQCQAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAHAAAABQAAAAb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAABAKAAAAAAAAEAxAAAAAAAAAAAAGQ4AAf###wAAAAEAAAACAAAAAUBGgAAAAAAAAAAAAAIAAAAd#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAB4AAAABQCQAAAAAAAAAAAAZAAAABQAAABkAAAAbAAAAHAAAAB0AAAAeAAAAFgD#####AAAAAAAAAB8AAAABQCQAAAAAAAAAAAAVAAAACQAAABUAAAAXAAAAGAAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHwAAABYA#####wEAAAAAAAAZAAAAAUAkAAAAAAAAAAAAGQAAAAIAAAAZAAAAGQAAABYA#####wCkpKQAAAAhAAAAAUAkAAAAAAAAAAAAFQAAAAUAAAAVAAAAFwAAABgAAAAZAAAAIQAAAAoA#####wEAAAAAEAAAAQUAAQAAAAn#####AAAAAQAKQ1VuaXRleFJlcAD#####AAR1bml0AAAACwAAAA8A#####wAAAAMAAAATAwAAAAE#8AAAAAAAAAAAABQAAAAkAAAADgD#####AQAAAAAQAAJXIgBAJAAAAAAAAEAYAAAAAAAAAQAAAAAFAAAAJf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAMAAAAmAAAADAD#####AQAAAAAQAAJPIgDAMQAAAAAAAMBBAAAAAAAACQAAAAAL#####wAAAAIACUNGb25jdGlvbgAAAAAUAAAAAgAAABkAAAAAFAAAAAH#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAsAAAAoAAAAAT#wAAAAAAAAAAAAAgD#####AARiaXMxAAExAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAEQAAABAAEAAAAoAT#wAAAAAAAAAAAAAgD#####AAN4eCcAATEAAAABP#AAAAAAAAAAAAAPAP####8AAAAoAAAAFAAAACwAAAAEAP####8BAAAAARAAAAEAAQAAACgAP#AAAAAAAAAAAAACAP####8AA3l5JwABMQAAAAE#8AAAAAAAAAAAAA8A#####wAAACgAAAAUAAAALwAAABoA#####wEAAAAAEAAAAQABAAAACwAAACj#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAAgD#####AARiaXMyAAExAAAAAT#wAAAAAAAAAAAADwD#####AAAAKAAAABQAAAAyAAAADwD#####AAAAAwAAAAE#8AAAAAAAAAAAAA4A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACgAAAA0#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAADAAAABQAAAAFAHmZmZmZmZgAAAAIA#####wACeE4AATMAAAABQAgAAAAAAAAAAAAMAP####8BAAAAAQ4AAU0AwCwAAAAAAADAOQAAAAAAAAMAAAAACwAAAAFAGAAAAAAAAAAAAAFAFAAAAAAAAAAAAAIA#####wACeU4AAi0xAAAAGwAAAAE#8AAAAAAAAAAAAAwA#####wEAAAABDgABTgDAKAAAAAAAAMA9AAAAAAAAAwAAAAALAAAAEwAAAAABQBgAAAAAAAAAAAAUAAAANwAAABMAAAAAAUAUAAAAAAAAAAAAFAAAADkAAAACAP####8ACEFmZmljaGVOAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAhBZmZpY2hlTQABMAAAAAEAAAAAAAAAAAAAAA8A#####wAAAAMAAAATAwAAAAE#8AAAAAAAAAAAABQAAAA7AAAADgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAAOAAAAD0AAAAPAP####8AAAADAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAPAAAAA4A#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAADgAAAA#AAAADwD#####AAAAAwAAABMDAAAAAT#wAAAAAAAAAAAAFAAAADsAAAAOAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA6AAAAQf####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwC4AAAAAAADAOAAAAAAAAAAAAEAQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABTQAAAB0A#####wAAAAAAwCoAAAAAAADAOgAAAAAAAAAAAEIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABTgAAAAIA#####wAEbnVtMAACMjMAAAABQDcAAAAAAAAAAAACAP####8AAnkwAAxpbnQobnVtMC8xMCkAAAAZAgAAABMDAAAAFAAAAEUAAAABQCQAAAAAAAAAAAACAP####8AAngwAAxtb2QobnVtMCwxMCn#####AAAAAQANQ0ZvbmN0aW9uMlZhcgYAAAAUAAAARQAAAAFAJAAAAAAAAAAAAAwA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAUAAAARwAAABQAAABGAAAAAgD#####AARudW0yAAIyNwAAAAFAOwAAAAAAAAAAAAIA#####wACeTIADGludChudW0yLzEwKQAAABkCAAAAEwMAAAAUAAAASQAAAAFAJAAAAAAAAAAAAAIA#####wACeDIADG1vZChudW0yLDEwKQAAAB4GAAAAFAAAAEkAAAABQCQAAAAAAAAAAAAMAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAFAAAAEsAAAAUAAAASgAAAAIA#####wAEbnVtMQACNTEAAAABQEmAAAAAAAAAAAACAP####8AAnkxAAxpbnQobnVtMS8xMCkAAAAZAgAAABMDAAAAFAAAAE0AAAABQCQAAAAAAAAAAAACAP####8AAngxAAxtb2QobnVtMSwxMCkAAAAeBgAAABQAAABNAAAAAUAkAAAAAAAAAAAADAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAABQAAABPAAAAFAAAAE4AAAACAP####8ACEFmZmljaGVPAAExAAAAAT#wAAAAAAAAAAAADwD#####AAAAAwAAABMDAAAAAT#wAAAAAAAAAAAAFAAAAFEAAAAOAP####8AAAAAABIAAU8AwDEAAAAAAADAQgAAAAAAAAkAAAAAKAAAAFIAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAKv####8AAAABAAxDRHJvaXRlSW1hZ2UA#####wAAAAAAEAAAAQACAAAAKQAAAFQAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAMgAAAB8A#####wAAAAAAEAAAAQACAAAAMQAAAFYAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAALAAAAB8A#####wAAAAAAEAAAAQADAAAAKwAAAFgAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAALwAAAB8A#####wAAAAAAEAAAAQADAAAALgAAAFr#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAMAAAAoAAAAAUAUAAAAAAAAAAAAAAkA#####wAAAFcAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAQAAAF0AAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAXQAAAAkA#####wAAAFsAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAQAAAGAAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAYAAAAAkA#####wAAAFUAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAgAAAGMAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAYwAAAAkA#####wAAAFkAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAgAAAGYAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAZgAAAB0A#####wAAAAAAwDYAAAAAAADARoAAAAAAAAAAAF8QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAAdAP####8AAAAAAMA9AAAAAAAAwD8AAAAAAAAAAABiEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woNCkpAAAAHQD#####AAAAAADAAAAAAAAAAMBHAAAAAAAAAAAAZRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAAB0A#####wAAAAAAQBwAAAAAAADAPQAAAAAAAAAAAGgQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgzKSkAAAAn##########8=";
    this.MG32codeBase64corr =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAQAAAAYACFN5bWV0cmllAClDbHF1ZXIgc3VyIGxlIHBvaW50CkNsaXF1ZXIgc3VyIGxhIGRyb2l0ZQAAAAIAAAAGAAAAABr#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAAAAAAT#####AAAAAAAAAAAACf##########AAAAAQAHQ0NhbGN1bAD#####AAJ5TwABNP####8AAAABAApDQ29uc3RhbnRlQBAAAAAAAAAAAAABAP####8AAnhPAAE0AAAAAkAQAAAAAAAAAAAAAQD#####AARiaXMyAAExAAAAAj#wAAAAAAAAAAAAAQD#####AARudW0xAAI1MQAAAAJASYAAAAAAAAAAAAEA#####wACeTEADGludChudW0xLzEwKf####8AAAACAAlDRm9uY3Rpb24C#####wAAAAEACkNPcGVyYXRpb24D#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAUAAAACQCQAAAAAAAAAAAABAP####8AAngxAAxtb2QobnVtMSwxMCn#####AAAAAQANQ0ZvbmN0aW9uMlZhcgYAAAAFAAAABQAAAAJAJAAAAAAAAP####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAAAH#####AAAAAQALQ1BvaW50SW1hZ2UB#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAI#####wAAAAEAB0NNaWxpZXUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAJ#####wAAAAEACENTZWdtZW50Af####8AAAD#ABAAAAEAAgAAAAAAAAAKAAAACgH#####AAAA#wAQAAABAAIAAAAKAAAACf####8AAAACAAlDQ2VyY2xlT1IA#####wEAAP8AAgAAAAoAAAACP9MzMzMzMzMA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAN#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAAOAAAACgD#####AQAAAAAQAAABAAEAAAAKAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8AAAAAAA0AAAEBAQAAAAoAAAAQ#####wAAAAEACUNDZXJjbGVPQQD#####AAAAAAEBAAAACgAAAA8AAAAMAP####8AAAARAAAAEgAAAA0A#####wAAAP8AEgAAAQcAAgAAABP#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAAKAAAADwAAAAgA#####wAAAP8AEgAAAQcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAf####8AAAD#AAIAAAAFAAAACgAAAA8AAAAWAAAAFAAAAAr#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQB#####wAAAP8AAgAAAAALAAAAEgH#####AAAA#wACAAAAAAwAAAABAAABNP####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2AAAAAkAJIftURC0YAAAAAQD#####AAJ5TwABNAAAAAJAEAAAAAAAAAAAAAEA#####wACeE8AATQAAAACQBAAAAAAAAD#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFHAMAoAAAAAAAAAAAAAAAAAAAFAAFAScAAAAAAAECEBCj1wo9c#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8A2NjYABAAAAEBAQAAAAMBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBwAAAAAAABANAAAAAAAAAUAAUBQgAAAAAAAAAAABP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAwAAAAUAAAAOAP####8A2NjYABAAAAEBAQAAAAMAAAAGAAAADwD#####AQAAAAABAAAAAwAAAAUAAAAMAP####8AAAAHAAAACAAAAA0A#####wEAAAAADgABSgDALgAAAAAAAEAYAAAAAAAABQACAAAACf####8AAAACAAdDUmVwZXJlAP####8A5ubmAQEAAAADAAAABQAAAAoBAQEAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAACP#AAAAAAAAAAAAACP#AAAAAAAAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AQAAAAAQAAFRAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAsAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAP####8AAAADAAAABQAAAAgA#####wEAAAAADgACUTEAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA0AAAAQAP####8AAAADAAAACgAAAAgA#####wEAAAAADgACUTIAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA######AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAwAAAACQCIAAAAAAAAAAAAIAP####8BAAAAAA4AAlEzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAARAAAACAD#####AQAAAAAOAAJRNAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAEQAAAAoA#####wEAAAAAEAAAAQABAAAADAAAABIAAAAWAP####8BAAAAAA4AAlIxAAAAAAAAAAAAQAgAAAAAAAAFAAE#7mZmZmZmZgAAABQAAAAQAP####8AAAAMAAAAEwAAAAgA#####wEAAAAADgACUjIAAAAAAAAAAABACAAAAAAAAAUAAAAAFQAAABYAAAAKAP####8BAAAAABAAAAEAAQAAABUAAAAXAAAAFgD#####AX9#fwAOAAJTMQAAAAAAAAAAAEAIAAAAAAAAAwABP7t#DUYpt#EAAAAYAAAAGAD#####AObm5gABAAAADAAAAA4AAAAQAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAj#wAAAAAAAAAAAAAj#wAAAAAAAA#####wAAAAIACENNZXN1cmVYAP####8AA3hTMQAAABoAAAAZ#####wAAAAIACENNZXN1cmVZAP####8AA3lTMQAAABoAAAAZAAAAAQD#####AAhOb21Qb2ludAAKMTAqeVMxK3hTMQAAAAQAAAAABAIAAAACQCQAAAAAAAAAAAAFAAAAHAAAAAUAAAAb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAABAKAAAAAAAAEAxAAAAAAAAAAAAGQ4AAf###wAAAAEAAAACAAAAAkBGgAAAAAAAAAAAAAIAAAAd#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAB4AAAACQCQAAAAAAAAAAAAZAAAABQAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHgD#####AAAAAAAAAB8AAAACQCQAAAAAAAAAAAAVAAAACQAAABUAAAAXAAAAGAAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHwAAAB4A#####wEAAAAAAAAZAAAAAkAkAAAAAAAAAAAAGQAAAAIAAAAZAAAAGQAAAB4A#####wCkpKQAAAAhAAAAAkAkAAAAAAAAAAAAFQAAAAUAAAAVAAAAFwAAABgAAAAZAAAAIQAAAA0A#####wEAAAAAEAAAAQUAAQAAAAn#####AAAAAQAKQ1VuaXRleFJlcAD#####AAR1bml0AAAACwAAABoA#####wAAAAMAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAkAAAACAD#####AQAAAAAQAAJXIgBAJAAAAAAAAEAYAAAAAAAAAQAAAAAFAAAAJf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAMAAAAmAAAAGQD#####AQAAAAAQAAJPIgDAMQAAAAAAAMBBAAAAAAAACQAAAAALAAAAAwAAAAAFAAAAAgAAAAMAAAAABQAAAAH#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAsAAAAoAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMxAAExAAAAAj#wAAAAAAAAAAAAFQD#####AQAAAAEQAAABAAEAAAAoAT#wAAAAAAAAAAAAAQD#####AAN4eCcAATEAAAACP#AAAAAAAAAAAAAaAP####8AAAAoAAAABQAAACwAAAAVAP####8BAAAAARAAAAEAAQAAACgAP#AAAAAAAAAAAAABAP####8AA3l5JwABMQAAAAI#8AAAAAAAAAAAABoA#####wAAACgAAAAFAAAALwAAACEA#####wEAAAAAEAAAAQABAAAACwAAACj#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMyAAExAAAAAj#wAAAAAAAAAAAAGgD#####AAAAKAAAAAUAAAAyAAAAGgD#####AAAAAwAAAAI#8AAAAAAAAAAAAAgA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACgAAAA0#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAADAAAABQAAAAJAHmZmZmZmZgAAAAEA#####wACeE4AATMAAAACQAgAAAAAAAAAAAAZAP####8BAAAAAQ4AAU0AwCwAAAAAAADAOQAAAAAAAAMAAAAACwAAAAJAGAAAAAAAAAAAAAJAFAAAAAAAAAAAAAEA#####wACeU4AAi0xAAAAIgAAAAI#8AAAAAAAAAAAABkA#####wEAAAABDgABTgDAKAAAAAAAAMA9AAAAAAAAAwAAAAALAAAABAAAAAACQBgAAAAAAAAAAAAFAAAANwAAAAQAAAAAAkAUAAAAAAAAAAAABQAAADkAAAABAP####8ACEFmZmljaGVOAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAhBZmZpY2hlTQABMQAAAAI#8AAAAAAAAAAAABoA#####wAAAAMAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAA7AAAACAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAAOAAAAD0AAAAaAP####8AAAADAAAABAMAAAACP#AAAAAAAAAAAAAFAAAAPAAAAAgA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAADgAAAA#AAAAGgD#####AAAAAwAAAAQDAAAAAj#wAAAAAAAAAAAABQAAADsAAAAIAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA6AAAAQf####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwC4AAAAAAADAOAAAAAAAAAAAAEAQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAABTQAAACQA#####wAAAAAAwCoAAAAAAADAOgAAAAAAAAAAAEIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAABTgAAAAEA#####wAEbnVtMAACMjMAAAACQDcAAAAAAAAAAAABAP####8AAnkwAAxpbnQobnVtMC8xMCkAAAADAgAAAAQDAAAABQAAAEUAAAACQCQAAAAAAAAAAAABAP####8AAngwAAxtb2QobnVtMCwxMCkAAAAGBgAAAAUAAABFAAAAAkAkAAAAAAAAAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAAAUAAABHAAAABQAAAEYAAAABAP####8ABG51bTIAAjI3AAAAAkA7AAAAAAAAAAAAAQD#####AAJ5MgAMaW50KG51bTIvMTApAAAAAwIAAAAEAwAAAAUAAABJAAAAAkAkAAAAAAAAAAAAAQD#####AAJ4MgAMbW9kKG51bTIsMTApAAAABgYAAAAFAAAASQAAAAJAJAAAAAAAAAAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAFAAAASwAAAAUAAABKAAAAAQD#####AARudW0xAAI1MQAAAAJASYAAAAAAAAAAAAEA#####wACeTEADGludChudW0xLzEwKQAAAAMCAAAABAMAAAAFAAAATQAAAAJAJAAAAAAAAAAAAAEA#####wACeDEADG1vZChudW0xLDEwKQAAAAYGAAAABQAAAE0AAAACQCQAAAAAAAAAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAABQAAAE8AAAAFAAAATgAAAAEA#####wAIQWZmaWNoZU8AATEAAAACP#AAAAAAAAAAAAAaAP####8AAAADAAAABAMAAAACP#AAAAAAAAAAAAAFAAAAUQAAAAgA#####wEAAAAAEgABTwDAMQAAAAAAAMBCAAAAAAAACQAAAAAoAAAAUgAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAq#####wAAAAEADENEcm9pdGVJbWFnZQD#####AAAAAAAQAAABAAIAAAApAAAAVAAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAyAAAAJQD#####AAAAAAAQAAABAAIAAAAxAAAAVgAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAsAAAAJQD#####AAAAAAAQAAABAAMAAAArAAAAWAAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAvAAAAJQD#####AAAAAAAQAAABAAMAAAAuAAAAWgAAAAsA#####wEAAAAAAwAAACgAAAACQBAAAAAAAAAAAAAADAD#####AAAAVwAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAXQAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAIAAABdAAAADAD#####AAAAWwAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAYAAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAIAAABgAAAADAD#####AAAAVQAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAYwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAEAAABjAAAADAD#####AAAAWQAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAZgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAEAAABmAAAAJAD#####AAAAAADANgAAAAAAAMBGgAAAAAAAAAAAXxAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDIpKQAAACQA#####wAAAAAAwD0AAAAAAADAPwAAAAAAAAAAAGIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAIKGQjTCg0KSkAAAAkAP####8AAAAAAMAAAAAAAAAAwEcAAAAAAAAAAABlEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAACChkI0woMSkpAAAAJAD#####AAAAAABAHAAAAAAAAMA9AAAAAAAAAAAAaBAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDMpKf####8AAAABAAVDRm9uYwD#####AARhYnNuAAltb2QoeCwxMCkAAAAGBv####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAACQCQAAAAAAAAAAXgAAAAmAP####8ABG9yZG4ACWludCh4LzEwKQAAAAMCAAAABAMAAAAnAAAAAAAAAAJAJAAAAAAAAAABeAAAAAEA#####wACbjEAATEAAAACP#AAAAAAAAAAAAABAP####8AAm4yAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAJuMwACNzcAAAACQFNAAAAAAAAAAAABAP####8AAm40AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAJuNQACNTYAAAACQEwAAAAAAAAAAAABAP####8AAm42AAE2AAAAAkAYAAAAAAAAAAAAAQD#####AAJuNwABNwAAAAJAHAAAAAAAAAAAAAEA#####wACbjgAAjg1AAAAAkBVQAAAAAAAAAAAAQD#####AAJuOQACNTMAAAACQEqAAAAAAAAAAAAZAP####8BAAD#ABIAAlAxAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAv#####AAAAAQAOQ0FwcGVsRm9uY3Rpb24AAABtAAAABQAAAG8AAAAoAAAAbgAAAAUAAABvAAAAGQD#####AQAA#wASAAJQMgAAAAAAAAAAAEAIAAAAAAAABwAAAAALAAAAKAAAAG0AAAAFAAAAcAAAACgAAABuAAAABQAAAHAAAAAZAP####8BAAD#ABIAAnAzAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAsAAAAoAAAAbQAAAAUAAABxAAAAKAAAAG4AAAAFAAAAcQAAABkA#####wEAAP8AEgACUDQAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAACgAAABtAAAABQAAAHIAAAAoAAAAbgAAAAUAAAByAAAAGQD#####AQAA#wASAAJQNQAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAKAAAAG0AAAAFAAAAcwAAACgAAABuAAAABQAAAHMAAAAZAP####8BAAD#ABIAAlA2AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAoAAAAbQAAAAUAAAB0AAAAKAAAAG4AAAAFAAAAdAAAABkA#####wEAAP8AEgACUDcAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAACgAAABtAAAABQAAAHUAAAAoAAAAbgAAAAUAAAB1AAAAGQD#####AQAA#wASAAJQOAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAKAAAAG0AAAAFAAAAdgAAACgAAABuAAAABQAAAHYAAAAZAP####8BAAD#ABIAAlA5AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAoAAAAbQAAAAUAAAB3AAAAKAAAAG4AAAAFAAAAdwAAACYA#####wAFdGVzdG4ABzEtKHg8MCkAAAAEAQAAAAI#8AAAAAAAAAAAAAQEAAAAJwAAAAAAAAACAAAAAAAAAAAAAXgAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABvAAAACAD#####AAAA#wESAANQJzEAAAAAAAAAAABACAAAAAAAAAkAAAAAeAAAAIIAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABwAAAACAD#####AAAA#wESAANQJzIAAAAAAAAAAABACAAAAAAAAAkAAAAAeQAAAIQAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABxAAAACAD#####AAAA#wESAANQJzMAAAAAAAAAAABACAAAAAAAAAkAAAAAegAAAIYAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAByAAAACAD#####AAAA#wESAANQJzQAAAAAAAAAAABACAAAAAAAAAkAAAAAewAAAIgAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABzAAAACAD#####AAAA#wESAANQJzUAAAAAAAAAAABACAAAAAAAAAkAAAAAfAAAAIoAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB0AAAACAD#####AAAA#wESAANQJzYAAAAAAAAAAABACAAAAAAAAAkAAAAAfQAAAIwAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB1AAAACAD#####AAAA#wESAANQJzcAAAAAAAAAAABACAAAAAAAAAkAAAAAfgAAAI4AAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB2AAAACAD#####AAAA#wESAANQJzgAAAAAAAAAAABACAAAAAAAAAkAAAAAfwAAAJAAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB3AAAACAD#####AAAA#wESAANQJzkAAAAAAAAAAABACAAAAAAAAAkAAAAAgAAAAJL#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACDAAAAVQAAAAEAAAAAlAADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAACUAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAJQAA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAAlAADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAAlAABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAJgAAAACQCQAAAAAAAAAAAABAAAAAJQAAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAmAAAAAJAJAAAAAAAAAAAAAcAAAAAlAAAAFUAAAAIAQAAAJQAAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACDAAAAmwAAAAkAAAAAlAAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIMAAACcAAAACgEAAACUAAAA#wAQAAABAAIAAACDAAAAnQAAAAoBAAAAlAAAAP8AEAAAAQACAAAAnQAAAJwAAAALAAAAAJQBAAD#AAIAAACdAAAAAj#TMzMzMzMzAAAAAAwAAAAAlAAAAJ4AAACgAAAADQAAAACUAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAAKEAAAAKAAAAAJQBAAAAABAAAAEAAQAAAJ0AAACiAAAADgAAAACUAAAAAAAQAAABAQEAAACdAAAAowAAAA8AAAAAlAAAAAABAQAAAJ0AAACiAAAADAAAAACUAAAApAAAAKUAAAANAAAAAJQAAAD#ABAAAAEHAAIAAACmAAAAEAAAAACUAAAAnQAAAKIAAAAIAAAAAJQAAAD#ABAAAAEHAAAAAKcAAACoAAAAEQEAAACUAAAA#wACAAAABQAAAJ0AAACiAAAAqQAAAKcAAACdAAAAEgEAAACUAP8AAAEBAAAAAJ4AAAASAQAAAJQA#wAAAQEAAAAAnwAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACFAAAAVwAAAAEAAAAArQADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAACtAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAK0AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAArQADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAArQABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAALEAAAACQCQAAAAAAAAAAAABAAAAAK0AAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAsQAAAAJAJAAAAAAAAAAAAAcAAAAArQAAAFcAAAAIAQAAAK0AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACFAAAAtAAAAAkAAAAArQAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIUAAAC1AAAACgEAAACtAAAA#wAQAAABAAIAAACFAAAAtgAAAAoBAAAArQAAAP8AEAAAAQACAAAAtgAAALUAAAALAAAAAK0BAAD#AAIAAAC2AAAAAj#TMzMzMzMzAAAAAAwAAAAArQAAALcAAAC5AAAADQAAAACtAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAALoAAAAKAAAAAK0BAAAAABAAAAEAAQAAALYAAAC7AAAADgAAAACtAAAAAAAQAAABAQEAAAC2AAAAvAAAAA8AAAAArQAAAAABAQAAALYAAAC7AAAADAAAAACtAAAAvQAAAL4AAAANAAAAAK0AAAD#ABAAAAEHAAIAAAC#AAAAEAAAAACtAAAAtgAAALsAAAAIAAAAAK0AAAD#ABAAAAEHAAAAAMAAAADBAAAAEQEAAACtAAAA#wACAAAABQAAALYAAAC7AAAAwgAAAMAAAAC2AAAAEgEAAACtAP8AAAEBAQAAALcAAAASAQAAAK0A#wAAAQEBAAAAuAAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACHAAAAWQAAAAEAAAAAxgADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAADGAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAMYAA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAAxgADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAAxgABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAMoAAAACQCQAAAAAAAAAAAABAAAAAMYAAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAygAAAAJAJAAAAAAAAAAAAAcAAAAAxgAAAFkAAAAIAQAAAMYAAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACHAAAAzQAAAAkAAAAAxgAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIcAAADOAAAACgEAAADGAAAA#wAQAAABAAIAAACHAAAAzwAAAAoBAAAAxgAAAP8AEAAAAQACAAAAzwAAAM4AAAALAAAAAMYBAAD#AAIAAADPAAAAAj#TMzMzMzMzAAAAAAwAAAAAxgAAANAAAADSAAAADQAAAADGAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAANMAAAAKAAAAAMYBAAAAABAAAAEAAQAAAM8AAADUAAAADgAAAADGAAAAAAAQAAABAQEAAADPAAAA1QAAAA8AAAAAxgAAAAABAQAAAM8AAADUAAAADAAAAADGAAAA1gAAANcAAAANAAAAAMYAAAD#ABAAAAEHAAIAAADYAAAAEAAAAADGAAAAzwAAANQAAAAIAAAAAMYAAAD#ABAAAAEHAAAAANkAAADaAAAAEQEAAADGAAAA#wACAAAABQAAAM8AAADUAAAA2wAAANkAAADPAAAAEgEAAADGAP8AAAEBAgAAANAAAAASAQAAAMYA#wAAAQECAAAA0QAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACJAAAAWwAAAAEAAAAA3wADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAADfAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAN8AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAA3wADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAA3wABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAOMAAAACQCQAAAAAAAAAAAABAAAAAN8AAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAA4wAAAAJAJAAAAAAAAAAAAAcAAAAA3wAAAFsAAAAIAQAAAN8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACJAAAA5gAAAAkAAAAA3wAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIkAAADnAAAACgEAAADfAAAA#wAQAAABAAIAAACJAAAA6AAAAAoBAAAA3wAAAP8AEAAAAQACAAAA6AAAAOcAAAALAAAAAN8BAAD#AAIAAADoAAAAAj#TMzMzMzMzAAAAAAwAAAAA3wAAAOkAAADrAAAADQAAAADfAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAAOwAAAAKAAAAAN8BAAAAABAAAAEAAQAAAOgAAADtAAAADgAAAADfAAAAAAAQAAABAQEAAADoAAAA7gAAAA8AAAAA3wAAAAABAQAAAOgAAADtAAAADAAAAADfAAAA7wAAAPAAAAANAAAAAN8AAAD#ABAAAAEHAAIAAADxAAAAEAAAAADfAAAA6AAAAO0AAAAIAAAAAN8AAAD#ABAAAAEHAAAAAPIAAADzAAAAEQEAAADfAAAA#wACAAAABQAAAOgAAADtAAAA9AAAAPIAAADoAAAAEgEAAADfAP8AAAEBAwAAAOkAAAASAQAAAN8A#wAAAQEDAAAA6v####8AAAABAAlDUm90YXRpb24A#####wAAACgAAAACQFaAAAAAAAAAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACLAAAA+AAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAIsAAAAKAP####8AAAD#ABAAAAEAAQAAACgAAAD5#####wAAAAIAE0NNYXJxdWVBbmdsZU9yaWVudGUA#####wD#AAAAAQAAAAFAMAAAAAAAAAAAAIsAAAAoAAAA+QAAAAASAP####8A#wAAAAEBAAAA+gAAABIA#####wD#AAAAAQEAAAD7#####wAAAAEAEkNBcmNEZUNlcmNsZURpcmVjdAD#####AP8AAAABAAAAKAAAAIsAAAD5AAAAKgD#####AAAAKAAAACIAAAACQFaAAAAAAAAAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACNAAABAAAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAI0AAAAKAP####8AAAD#ABAAAAEAAQAAACgAAAEBAAAAEgD#####AP8AAAABAQAAAQMAAAASAP####8A#wAAAAEBAAABAgAAACsA#####wD#AAAAAQAAAAFAMAAAAAAAAAAAAI0AAAAoAAABAQD#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wD#AAAAAQAAACgAAACNAAABAf####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAAKAAAAAgA#####wAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAI8AAAEIAAAACgD#####AAAA#wAQAAABAAEAAACPAAAAKAAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAQkAAAASAP####8A#wAAAAECAAABCwAAABIA#####wD#AAAAAQIAAAEKAAAAEAD#####AAAAQAAAAEIAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACRAAABDv####8AAAABAAhDVmVjdGV1cgD#####AP8AAAAQAAABAAEAAACRAAABDwAAAAAvAP####8A#wAAABAAAAEAAQAAAEAAAABCAAAAAAoA#####wD#AAAAEAAAAQEBAAAAQAAAAJEAAAAKAP####8A#wAAABAAAAEBAQAAAEIAAAEPAAAAAQD#####AAFrAAE0AAAAAkAQAAAAAAAAAAAAGgD#####AAAAKAAAAAUAAAEUAAAACAD#####AAAA#wESAAFBAAAAAAAAAAAAQAgAAAAAAAAJAAAAAJMAAAEVAAAACgD#####AAAA#wAQAAABAQEAAAAoAAAAkwAAAAoA#####wAAAP8AEAAAAQEBAAAAKAAAARYAAAApAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACgAAACT#####wAAAAEAC0NNZWRpYXRyaWNlAAAAARkBAAAAABAAAAEAAQAAACgAAACTAAAACQAAAAEZAQAAAAAQAAABBQAAAAAoAAAAkwAAAAsAAAABGQEAAAAAAQAAARsAAAACQDAAAAAAAAABAAAADAAAAAEZAAABGgAAARwAAAANAAAAARkBAAAAABAAAAEFAAEAAAEdAAAAIAEAAAEZAAAAKAAAAJMAAAApAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACgAAAEWAAAAMAAAAAEgAQAAAAAQAAABAAEAAAAoAAABFgAAAAkAAAABIAEAAAAAEAAAAQUAAAAAKAAAARYAAAALAAAAASABAAAAAAEAAAEiAAAAAkAwAAAAAAAAAQAAAAwAAAABIAAAASEAAAEjAAAADQAAAAEgAQAAAAAQAAABBQABAAABJAAAACABAAABIAAAACgAAAEWAAAAFgD#####Af8AAAASAAFGAAAAAAAAAAAAQAgAAAAAAAAFAAE#585Z#OWfzwAAARgAAAAeAP####8A#wAAAAABJwAAAAQAAAAABQAAARQAAAACP#AAAAAAAAAAAAEnAAAAAgAAAScAAAEnAAAAAQD#####AANuMTAAAjE5AAAAAkAzAAAAAAAAAAAAGQD#####Af8AAAASAANQMTAAAAAAAAAAAABACAAAAAAAAAUAAAAACwAAACgAAABtAAAABQAAASkAAAAoAAAAbgAAAAUAAAEpAAAAGgD#####AAAAKAAAAAQDAAAAAj#wAAAAAAAAAAAAKAAAAIEAAAAFAAABKQAAAAgA#####wAAAP8BEgAEUCcxMAAAAAAAAAAAAEAIAAAAAAAACQAAAAEqAAABKwAAAAoA#####wAAAP8AEAAAAQEBAAAAKAAAASwAAAABAP####8AAmsyAAE0AAAAAkAQAAAAAAAAAAAAGgD#####AAAAKAAAAAQDAAAAAj#wAAAAAAAAAAAABQAAAS4AAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAEsAAABLwAAABYA#####wEAAP8AEgABRQAAAAAAAAAAAEAIAAAAAAAABQABP+MmybJsmyQAAAEtAAAAHgD#####AP8AAAAAATEAAAAEAAAAAAMAAAAABQAAAS4AAAACP#AAAAAAAAAAAAExAAAAAgAAATEAAAExAAAACgD#####AAAA#wAQAAABAQEAAAAoAAABMAAAACf##########w==";
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let antecedents = [0, 0, 0],
      images = [0, 0, 0],
      k = [1, 1, 1],
      k1,
      k2,
      xO = 4,
      yO = 4,
      xu,
      yu,
      point_reseau; // k : rapports d'homothÃ©ties, (xO,yO) point de rencontre des droites et centre, les composantes du vecteur de translation : (xu,yu)
    let bis1 = 0,
      bis2 = 0,
      xx = 0,
      yy = 0,
      AfficheO = 1,
      AfficheN = 0,
      AfficheM = 0;
    let n = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    let texte = ``,
      texte_corr = ``;
    let point = [[]];
    let transformation = parseInt(this.sup) - 1;
    let liste_type_de_questions = [
      [1, 2, 3, 4],
      [1, 2, 3, 4, 7],
      [1, 2, 3, 4, 7, 8],
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ];
    let choix_transformation = combinaison_listes(
      liste_type_de_questions[transformation],
      3
    );
    xu = randint(-3, 3);
    if (xu == 0) yu = randint(-3, 3, [0]);
    // pas de vecteur nul de translation.
    else yu = randint(-3, 3);
    for (let j = 0; j < 3; j++) {
      if (choix_transformation[j] == 10) {
        k[j] = choice([2, 4]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie < 1 ( 0.5 ou 0.25 )
        k2 = k[j];
      } else if (choix_transformation[j] == 9) {
        k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie >=1 (1,2 ou 3)
        k1 = k[j];
      }
      antecedents[j] = randint(0, 99);
      point[j] = image_point_par_transformation(
        choix_transformation[j],
        [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],
        [xO, yO],
        [xu, yu],
        k[j]
      );
      images[j] = point[j][0] + point[j][1] * 10;
      // Limitation des points invariants
      if (choix_transformation[j] == 1 && images[j] % 11 == 0) point[j][0] = -1; // Point impossible sur (d1) pour sa symÃ©trie
      if (choix_transformation[j] == 3 && Math.floor(images[j] / 10 == 4))
        point[j][0] = -1; // Point impossible sur (d3) pour sa symÃ©trie
      if (choix_transformation[j] == 4 && images[j] % 10 == 4) point[j][0] = -1; // Point impossible sur  (d4) pour sa symÃ©trie
      if (
        (choix_transformation[j] == 5 || choix_transformation[j] == 5) &&
        antecedents[j] == 44
      )
        point[j][0] = -1; // point O impossible pour rotation
      if (choix_transformation[j] == 10 && antecedents[j] == 44)
        point[j][0] = -1; // point O impossible par homothÃ©tie de rapport 1/k2
      // pour Ã©viter les points en dehors des clous dans homothÃ©tie de rapport 1/k2
      if (
        point[j][0] - Math.floor(point[j][0]) == 0 &&
        point[j][1] - Math.floor(point[j][1]) == 0
      )
        point_reseau = true;
      else point_reseau = false;
      // On vÃ©rifie que l'image est bien un point du rÃ©seau sinon, on change.
      while (
        point[j][0] < 0 ||
        point[j][0] > 9 ||
        point[j][1] < 0 ||
        point[j][1] > 9 ||
        point_reseau == false
      ) {
        if (choix_transformation[j] == 10) {
          k[j] = choice([2, 4]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie < 1 ( 0.5 ou 0.25 )
          k2 = k[j];
        } else if (choix_transformation[j] == 9) {
          k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie >=1 (1,2 ou 3)
          k1 = k[j];
        }
        antecedents[j] = randint(0, 99);
        point[j] = image_point_par_transformation(
          choix_transformation[j],
          [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],
          [xO, yO],
          [xu, yu],
          k[j]
        );
        images[j] = point[j][0] + point[j][1] * 10;
        // Limitation des points invariants
        if (choix_transformation[j] == 1 && images[j] % 11 == 0)
          point[j][0] = -1; // Point impossible sur (d1) pour sa symÃ©trie
        if (choix_transformation[j] == 3 && Math.floor(images[j] / 10 == 4))
          point[j][0] = -1; // Point impossible sur (d3) pour sa symÃ©trie
        if (choix_transformation[j] == 4 && images[j] % 10 == 4)
          point[j][0] = -1; // Point impossible sur  (d4) pour sa symÃ©trie
        if (
          (choix_transformation[j] == 5 || choix_transformation[j] == 5) &&
          antecedents[j] == 44
        )
          point[j][0] = -1; // point O impossible pour rotation
        if (choix_transformation[j] == 10 && antecedents[j] == 44)
          point[j][0] = -1; // point O impossible par homothÃ©tie de rapport 1/k2

        // pour Ã©viter les points en dehors des clous dans homothÃ©tie de rapport 1/k2
        if (
          point[j][0] - Math.floor(point[j][0]) == 0 &&
          point[j][1] - Math.floor(point[j][1]) == 0
        )
          point_reseau = true;
        else point_reseau = false;
      }
    }
    // n[i] est un tableau contenant -1 pour la transformation d'indice i si elle n'est pas utilisÃ©e, et contenant le numÃ©ro du point concernÃ© si la transformation i est utilisÃ©e pour ce point.
    // Je l'utilise pour faire apparaÃ®tre la correction liÃ©e au point et Ã  la transformation.
    for (let j = 0; j < 3; j++) {
      n[choix_transformation[j] - 1] = antecedents[j];
    }
    for (let i = 0; i < 3; i++) {
      switch (choix_transformation[i]) {
        case 1:
          bis1 = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_1)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_1)$ est le point ${images[i]}.<br>`;
          break;

        case 2:
          bis2 = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_2)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_2)$ est le point ${images[i]}.<br>`;
          break;

        case 3:
          xx = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_3)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_3)$ est le point ${images[i]}.<br>`;
          break;

        case 4:
          yy = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_4)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_4)$ est le point ${images[i]}.<br>`;
          break;

        case 5:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 6:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 7:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la symÃ©trie de centre O.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la symÃ©trie de centre O est le point ${images[i]}.<br>`;
          break;

        case 11:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 12:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 13:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 14:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 8:
          AfficheN = 1;
          AfficheM = 1;
          // AfficheOO=1
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la translation qui transforme M en N.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la translation qui transforme M en N est le point ${images[i]}.<br>`;
          break;

        case 9:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par l'homothÃ©tie de centre O et de rapport ${k1}.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par l'homothÃ©tie de centre O et de rapport ${k1} est le point ${images[i]}.<br>`;
          break;

        case 10:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${
              antecedents[i]
            } par l'homothÃ©tie de centre O et de rapport $${tex_fraction_reduite(
              1,
              k2
            )}$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${
              antecedents[i]
            } par l'homothÃ©tie de centre O et de rapport $${tex_fraction_reduite(
              1,
              k2
            )}$ est le point ${images[i]}.<br>`;
          break;
      }
    }
    if (sortie_html) {
      /*
			boolÃ©ens permettant l'affichage des Ã©lÃ©ments si =1 et le masquage si =0
			bis1 affiche la droite de coefficient directeur 1 passant par O'
			bis2 affiche la droite de coefficient directeur -1 passant par O'
			xx' affiche la droite horizontale passant par O'
			yy' affiche la droite verticale passant par O'
			AfficheO' affiche O' comme son nom l'indique.
			AfficheN, AffichM pour afficher les points M et N dÃ©finissant la translation.
			
			*/
      this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t0", "${choix_transformation[0]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t1", "${choix_transformation[1]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t2", "${choix_transformation[2]}");						
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num0", "${antecedents[0]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num1", "${antecedents[1]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num2", "${antecedents[2]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yO", "${yO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xO", "${xO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN", "${yu}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN", "${xu}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yy\'", "${yy}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xx\'", "${xx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheO", "${AfficheO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheM", "${AfficheM}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheN", "${AfficheN}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k", "${k1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k2", "${k2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n1", "${n[0]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n2", "${n[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n3", "${n[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n4", "${n[3]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n5", "${n[4]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n6", "${n[5]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n7", "${n[6]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n8", "${n[7]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n9", "${n[8]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n10", "${n[9]}");									
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num0", "${antecedents[0]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num1", "${antecedents[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num2", "${antecedents[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO", "${yO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO", "${xO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN", "${yu}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN", "${xu}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yy\'", "${yy}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xx\'", "${xx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheO", "${AfficheO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheM", "${AfficheM}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheN", "${AfficheN}");	

			
			
			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`;
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    } else {
      texte = ``;
      texte_corr = ``;
      this.liste_questions.push(texte); // on envoie la question
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    }
  };
  // this.besoin_formulaire_numerique = ['Transformations',5, '1 : SymÃ©tries axiales\n 2 : SymÃ©tries centrales\n 3 : Rotations\n 4 : Translations\n 5 : HomothÃ©ties\n'];
}

// Exercices paramÃ©trÃ©s pour correspondre au rÃ©fÃ©rentiel
// RÃ©fÃ©rence 5P10
//function Proportionnalite_pas_proportionnalite_5e(){
//  Proportionnalite_pas_proportionnalite.call(this)
  // Pas de paramÃ¨tres Sup
//}

// RÃ©fÃ©rence 6C23
function Exercice_additionner_des_fractions_6e() {
  Exercice_additionner_des_fractions_5e.call(this);
  this.level=6
  this.titre= "Additionner des fractions de mÃªme dÃ©nominateur"
}
/**
 * @Auteur Jean-Claude Lhote
 * vocabulaire arÃªte, face, perpendicularitÃ© dans l'espace, parallÃ©lisme dans l'espace
 * rÃ©fÃ©rence : 6G43
 */
function Utiliser_vocabulaire_pave() {
  Solide_6e.call(this);
  this.titre = "Utiliser le vocabulaire associÃ© au pavÃ© droit"
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G11
 */
function Tracer_des_perpendiculaires() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des perpendiculaires";
  this.sup = 1;
  this.besoin_formulaire_numerique = false;
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G12
 */
function Tracer_des_paralleles() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des parallÃ¨les";
  this.sup = 2;
  this.besoin_formulaire_numerique = false;
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G12-1
 */
function Tracer_des_perpendiculaires_et_des_paralleles() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des perpendiculaires et des parallÃ¨les";
  this.sup = 3;
  this.besoin_formulaire_numerique = false;
}
/**
 * Exercice en html seulement. SymÃ©trie centrale dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 5G12
 */
function Pavages_et_demi_tour() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie centrale dans un pavage";
  this.sup = 2;
}
/**
 * Exercice en html seulement. SymÃ©trie axiale dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G25-2
 */
function Pavages_et_symetries() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie axiale dans un pavage carrÃ©";
  this.sup = 1;
}
/**
 * Exercice en html seulement. Translations dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 4G11
 */
function Pavages_et_translation() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une translation dans un pavage";
  this.sup = 3;
}
/**
 * Exercice en html seulement. Rotationss dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 3G12
 */
function Pavages_et_rotation() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une rotation de 90 degrÃ©s dans un pavage";
  this.sup = 4;
}

/**
 * Lire les coordonnÃ©es d'un point du quart de plan positif avec une prÃ©cision allant de l'unitÃ© Ã  0,25.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33
 */
function Reperage_point_du_quart_de_plan() {
  Reperage_point_du_plan.call(this);
  this.titre = "DÃ©terminer les coordonnÃ©es (positives) d'un point";
  this.quart_de_plan = true;
}
// 3F21
function Lecture_expression_fonctions_lineaires() {
  Lecture_expression_fonctions_affines.call(this);
  this.titre = "DÃ©terminer une fonction linÃ©aire";
  this.lineaire = true;
}
// 3L14-1
function Resoudre_une_equation_produit_nul_niv2() {
  Resoudre_une_equation_produit_nul.call(this);
  this.titre = "RÃ©soudre une Ã©quation produit nul (niveau 2)";
  this.sup = 2;
}
// RÃ©fÃ©rence 6C21

function Divisions_euclidiennes_niv2() {
  Divisions_euclidiennes.call(this);
  this.sup = 2;
  this.titre = "Divisions euclidiennes - Niveau 2";
}
//4G40
function Exercice_Trigo_longueurs_4e() {
  Exercice_Trigo_longueurs.call(this);
  this.sup = 1;
  this.besoin_formulaire_numerique = false;
  this.titre =
    "Utiliser le cosinus pour calculer une longueur dans un triangle rectangle";
}
// 4G41
function Exercice_Trigo_angles_4e() {
  this.sup = 1;
  this.quatrieme = true;
  this.titre =
    "Utiliser le cosinus pour calculer la mesure d'un angle dans un triangle rectangle";
  Exercice_Trigo_angles.call(this);
}
// rÃ©fÃ©rence 6G24
function Transformations_6e() {
  Transformations.call(this);
  this.sup = 1;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale`;
  this.pas_de_version_LaTeX = true;
}

// 5G10
function Symetrie_axiale_5e() {
  Transformations.call(this);
  this.sup = 1;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale`;
  this.pas_de_version_LaTeX = true;
}
// 5G11
function Transformations_5e() {
  Transformations.call(this);
  this.sup = 2;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale ou centrale`;
  this.pas_de_version_LaTeX = true;
}
// 4G40
function Transformations_4e() {
  Transformations.call(this);
  this.sup = 3;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale ou centrale ou par une translation`;
  this.pas_de_version_LaTeX = true;
}
// 3G10-2
function Transformations_3e() {
  Transformations.call(this);
  this.sup = 4;
  this.titre = `Trouver l'image d'un point par une transformation choisie alÃ©atoirement`;
  this.pas_de_version_LaTeX = true;
}
// RÃ©fÃ©rence 6M30
function Calcul_de_volumes_6e() {
  this.sup = 1;
  this.classe = 6;
  Calcul_de_volumes.call(this);
}

// 5M20
function Calcul_de_volumes_5e() {
  this.sup = 1;
  this.classe = 5;
  Calcul_de_volumes.call(this);
}
// 4G53
function Calcul_de_volumes_4e() {
  this.sup = 1;
  this.classe = 4;
  Calcul_de_volumes.call(this);
}
// 3G43
function Calcul_de_volumes_3e() {
  this.sup = 1;
  this.classe = 3;
  Calcul_de_volumes.call(this);
}


function Exercice_6N13() {
  this.sup = 1;
  this.titre = "Utiliser les prÃ©fixes multiplicateurs (dÃ©ca Ã  kilo)";
  Exercice_conversions.call(this);
}
// 6N24
function Exercice_6N24() {
  Exercice_conversions.call(this);
  this.sup = 3;
  this.titre =
    "Utiliser les prÃ©fixes multiplicateurs et diviseurs (milli Ã  kilo)";
  this.correction_avec_des_fractions = true;
  this.spacing_corr = 2;
}
// RÃ©fÃ©rence 6M12
function Reglages_6M12() {
  Exercice_conversions_de_longueurs.call(this);
  this.sup = 3;
  this.nb_questions = 8;
}

function Reglages_6M23() {
  Exercice_conversions_aires.call(this);
  this.sup = 3;
  this.nb_cols_corr = 1;
}
// RÃ©fÃ©rence 6M10
function Reglages_6M10() {
  Exercice_perimetres_et_aires.call(this);
  this.sup = 1;
}
// RÃ©fÃ©rence 6M22
function Reglages_6M22() {
  Exercice_perimetres_et_aires.call(this);
  this.sup = 2;
  this.titre = "PÃ©rimÃ¨tres et aires de disques (Ã  partir d'un texte).";
}

function Reglages_6N34() {
  Exercice_conversions.call(this);
  this.sup = 5;
  this.titre = "Conversions avec tous les prÃ©fixes de milli Ã  tera.";
}

// 4G30
function Thales_4eme() {
  //Dans cette version, pas de configuration papillon reservÃ©e aux 3Ã¨mes.
  Exercice_Thales.call(this);
  this.quatrieme = true;
  sortie_html? this.spacing = 1.5 : this.spacing = 1; 
}
// 4G31
function Reciproque_Thales_4eme() {
  Reciproque_Thales.call(this);
  this.quatrieme = true;
}

/**
 * Vocabulaire des triangles
 * 6G20-2 ; 5G20-1
 * @author SÃ©bastien Lozano
 */

function Vocabulaire_des_triangles() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.consigne = "Donner la nature des triangles en justifiant.";
  this.sup = 1;
  this.titre = "Vocabulaire des triangles";
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions_modifiable = false;

  this.liste_packages = `bclogo`;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.classe == 6) {
      if (this.sup == 1) {
        this.nb_questions = 4;
      } else {
        //this.nb_questions = 9;
        this.nb_questions = 5;
      }
    } else if (this.classe == 5) {
      //this.nb_questions = 11;
      this.nb_questions = 5;
    }

    let texte_intro = ``;
    if (sortie_html) {
      if (this.classe == 6) {
        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle isocÃ¨le</b> est un triangle qui a deux cÃ´tÃ©s de mÃªme longueur.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle Ã©quilatÃ©ral</b> est un triangle qui a trois cÃ´tÃ©s de mÃªme longueur.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;
      } else if (this.classe == 5) {
        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle isocÃ¨le</b> est un triangle qui a deux cÃ´tÃ©s ou deux angles de mÃªme mesure.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle Ã©quilatÃ©ral</b> est un triangle qui a trois cÃ´tÃ©s ou trois angles de mÃªme mesure.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;
      }
      // this.introduction = lampe_message({
      // 	titre : `Quelques dÃ©finitions`,
      // 	texte : texte_intro,
      // 	couleur : `nombres`
      // });

      this.bouton_aide = modal_texte_long(
        numero_de_l_exercice,
        //`<i class="lightbulb outline icon"></i> Quelques dÃ©finitions`,
        `<i class="info circle icon"></i> Quelques dÃ©finitions`,
        texte_intro,
        "Aide",
        "info circle"
      );
    } else {
      if (this.classe == 6) {
        texte_intro = tex_enumerate_sans_numero(
          [
            `- Un \\textbf{triangle quelconque} est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`,
            `- Un \\textbf{triangle isocÃ¨le} est un triangle qui a deux cÃ´tÃ©s de mÃªme longueur.`,
            `- Un \\textbf{triangle Ã©quilatÃ©ral} est un triangle qui a trois cÃ´tÃ©s de mÃªme longueur.`,
            `- Un \\textbf{triangle rectangle} est un triangle qui a un angle droit.`,
          ],
          1
        );
      } else if (this.classe == 5) {
        texte_intro = tex_enumerate_sans_numero(
          [
            `- Un \\textbf{triangle quelconque} est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`,
            `- Un \\textbf{triangle isocÃ¨le} est un triangle qui a deux cÃ´tÃ©s ou deux angles de mÃªme mesure.`,
            `- Un \\textbf{triangle Ã©quilatÃ©ral} est un triangle qui a trois cÃ´tÃ©s ou trois angles de mÃªme mesure.`,
            `- Un \\textbf{triangle rectangle} est un triangle qui a un angle droit.`,
          ],
          1
        );
      }

      this.introduction = lampe_message({
        titre: `Quelques dÃ©finitions`,
        texte: texte_intro,
        couleur: `nombres`,
      });
    }

    if (this.classe == 6) {
      if (this.sup == 1) {
        type_de_questions_disponibles = [1, 3, 5, 7]; //6e facile isocÃ¨le, Ã©quilatÃ©ral et rectangle.
      } else if (this.sup == 2) {
        //type_de_questions_disponibles = [1,3,4,5,6,7,8,9]; //6e tout sauf par les angles
        type_de_questions_disponibles = [1, 4, 6, 8, 9]; //6e les autres cas sauf par les angles
      }
    } else if (this.classe == 5) {
      // type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10,11]; // 5e : on ajoute la caractÃ©isation par les angles
      type_de_questions_disponibles = [
        choice([1, 2]),
        choice([3, 4, 10]),
        choice([5, 6, 11]),
        7,
        choice([8, 9]),
      ]; // 5e : tout sauf les basiques de 6e, on ajoute la caractÃ©isation par les angles
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    //let liste_type_de_questions = type_de_questions_disponibles // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, l1, l2, l3, a1, a2, a3, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // on fixe longueur min et max en cm
      let l_min = 2;
      let l_max = 20;
      // on fixe angle min et max en degrÃ©
      let a_min = 30;
      let a_max = 100;

      // on crÃ©e les triangles
      let triangle_quelconque = new Triangles();
      let triangle_isocele = new Triangles();
      let triangle_equilateral = new Triangles();
      let triangle_rectangle = new Triangles();
      let triangle_isocele_rectangle = new Triangles();

      switch (liste_type_de_questions[i]) {
        case 1: // triangle quelconque par les longueurs sans conversion
          while (!triangle_quelconque.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            l3 = randint(l_min, l_max, [l1, l2]);
            triangle_quelconque.l1 = l1;
            triangle_quelconque.l2 = l2;
            triangle_quelconque.l3 = l3;
          }

          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${
            triangle_quelconque.getLongueurs()[0]
          } $= ${triangle_quelconque.l1}$ cm ; `;
          texte += `${triangle_quelconque.getLongueurs()[1]} $= ${
            triangle_quelconque.l2
          }$ cm et ${triangle_quelconque.getLongueurs()[2]} $= ${
            triangle_quelconque.l3
          }$ cm.`;
          texte_corr = `Les 3 cÃ´tÃ©s du triangle ${triangle_quelconque.getNom()} sont diffÃ©rents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;
          break;
        case 2: // triangle quelconque par les angles
          while (!triangle_quelconque.isTrueTriangleAngles()) {
            a1 = randint(a_min, a_max);
            a2 = randint(a_min, a_max, a1);
            a3 = randint(a_min, a_max, [a1, a2]);
            triangle_quelconque.a1 = a1;
            triangle_quelconque.a2 = a2;
            triangle_quelconque.a3 = a3;
          }

          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${
            triangle_quelconque.getAngles()[0]
          } $= ${triangle_quelconque.a1}\\degree$ ; `;
          texte += ` ${triangle_quelconque.getAngles()[1]} $= ${
            triangle_quelconque.a2
          }\\degree$ et  ${triangle_quelconque.getAngles()[2]} $= ${
            triangle_quelconque.a3
          }\\degree$ .`;
          texte_corr = `Les 3 angles du triangle ${triangle_quelconque.getNom()} sont diffÃ©rents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;
          break;

        case 3: // triangle isocÃ¨le sans conversion
          while (!triangle_isocele.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            triangle_isocele.l1 = l1;
            triangle_isocele.l2 = l1;
            triangle_isocele.l3 = l2;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${
            triangle_isocele.getLongueurs()[0]
          } $= ${triangle_isocele.l1}$ cm ; `;
          texte += `${triangle_isocele.getLongueurs()[1]} $= ${
            triangle_isocele.l2
          }$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${
            triangle_isocele.l3
          }$ cm.`;
          texte_corr = `Les longueurs des cÃ´tÃ©s ${
            triangle_isocele.getCotes()[0]
          } et ${
            triangle_isocele.getCotes()[1]
          } du triangle ${triangle_isocele.getNom()} valent toutes les deux $${
            triangle_isocele.l1
          }$ cm donc ${triangle_isocele.getNom()} est un triangle isocÃ¨le en ${
            triangle_isocele.getSommets()[1]
          }.`;
          break;
        case 4: // triangle isocÃ¨le avec conversion
          while (!triangle_isocele.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            triangle_isocele.l1 = l1;
            triangle_isocele.l2 = l1;
            triangle_isocele.l3 = l2;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${
            triangle_isocele.getLongueurs()[0]
          } $= ${triangle_isocele.l1 * 10}$ mm ; `;
          texte += `${triangle_isocele.getLongueurs()[1]} $= ${
            triangle_isocele.l2
          }$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${
            triangle_isocele.l3
          }$ cm.`;
          texte_corr = `${triangle_isocele.getLongueurs()[0]} $= ${
            triangle_isocele.l1 * 10
          }$ mm $= ${triangle_isocele.l1}$ cm = ${
            triangle_isocele.getLongueurs()[1]
          }, ${triangle_isocele.getNom()} a donc deux cÃ´tÃ©s Ã©gaux, c'est un triangle isocÃ¨le en ${
            triangle_isocele.getSommets()[1]
          }.`;
          break;
        case 5: // triangle Ã©quilatÃ©ral sans conversion
          while (!triangle_equilateral.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            triangle_equilateral.l1 = l1;
            triangle_equilateral.l2 = l1;
            triangle_equilateral.l3 = l1;
          }
          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${
            triangle_equilateral.getLongueurs()[0]
          } $= ${triangle_equilateral.l1}$ cm ; `;
          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${
            triangle_equilateral.l2
          }$ cm et ${triangle_equilateral.getLongueurs()[2]} $= ${
            triangle_equilateral.l3
          }$ cm.`;
          texte_corr = `Les longeurs des trois cÃ´tÃ©s du triangle ${triangle_equilateral.getNom()} sont Ã©gales donc c'est un triangle Ã©quilatÃ©ral.`;
          break;
        case 6: // triangle Ã©quilatÃ©ral avec conversion
          while (!triangle_equilateral.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            triangle_equilateral.l1 = l1;
            triangle_equilateral.l2 = l1;
            triangle_equilateral.l3 = l1;
          }
          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${
            triangle_equilateral.getLongueurs()[0]
          } $= ${triangle_equilateral.l1}$ cm ; `;
          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${
            triangle_equilateral.l2 * 10
          }$ mm et ${triangle_equilateral.getLongueurs()[2]} $= ${tex_nombre(
            triangle_equilateral.l3 / 10
          )}$ dm.`;
          texte_corr = `${triangle_equilateral.getLongueurs()[1]} $= ${
            triangle_equilateral.l2 * 10
          }$ mm $= ${triangle_equilateral.l2}$ cm.`;
          texte_corr += `<br> ${
            triangle_equilateral.getLongueurs()[2]
          } $= ${tex_nombre(triangle_equilateral.l3 / 10)}$ dm $= ${
            triangle_equilateral.l3
          }$ cm.`;
          texte_corr += `<br> ${triangle_equilateral.getLongueurs()[0]} $= ${
            triangle_equilateral.l1
          }$ cm.`;
          texte_corr += `<br> Les longeurs des trois cÃ´tÃ©s du triangle ${triangle_equilateral.getNom()} sont Ã©gales donc c'est un triangle Ã©quilatÃ©ral.`;
          break;
        case 7: // triangle rectangle pas de conversion necessaire
          triangle_rectangle.l1 = randint(l_min, l_max);
          triangle_rectangle.l2 = randint(l_min, l_max, l1);
          triangle_rectangle.a1 = 90;

          texte = `${triangle_rectangle.getNom()} est un triangle tel que ${
            triangle_rectangle.getLongueurs()[0]
          } $= ${triangle_rectangle.l1}$ cm ; `;
          texte += `${triangle_rectangle.getLongueurs()[1]} $= ${
            triangle_rectangle.l2
          }$ cm `;
          texte += `et `;
          if (this.classe == 6) {
            texte += ` qui a un angle droit en ${
              triangle_rectangle.getSommets()[1]
            }.`;
            texte_corr = `Le triangle ${triangle_rectangle.getNom()} a un angle droit en ${
              triangle_rectangle.getSommets()[1]
            } donc ${triangle_rectangle.getNom()} est rectangle en ${
              triangle_rectangle.getSommets()[1]
            }.`;
          } else {
            texte += `${triangle_rectangle.getAngles()[0]} $= ${
              triangle_rectangle.a1
            }\\degree$.`;
            texte_corr = `L'angle ${
              triangle_rectangle.getAngles()[0]
            } du triangle ${triangle_rectangle.getNom()} est un angle droit donc ${triangle_rectangle.getNom()} est rectangle en ${
              triangle_rectangle.getSommets()[1]
            }.`;
          }

          break;
        case 8: // triangle isocÃ¨le rectangle sans conversion
          triangle_isocele_rectangle.l1 = randint(l_min, l_max);
          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;
          triangle_isocele_rectangle.a1 = 90;

          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${
            triangle_isocele_rectangle.getLongueurs()[0]
          }$= ${triangle_isocele_rectangle.l1}$ cm ; `;
          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${
            triangle_isocele_rectangle.l2
          }$ cm `;
          texte += `et `;
          if (this.classe == 6) {
            texte += `qui a un angle droit en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${
              triangle_isocele_rectangle.getSommets()[1]
            } donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> ${
              triangle_isocele_rectangle.getLongueurs()[0]
            } $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${
              triangle_isocele_rectangle.l1
            }$ cm donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
          } else {
            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${
              triangle_isocele_rectangle.a1
            }\\degree$.`;
            texte_corr = `L'angle ${
              triangle_isocele_rectangle.getAngles()[0]
            } du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> ${
              triangle_isocele_rectangle.getLongueurs()[0]
            } $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${
              triangle_isocele_rectangle.l1
            }$ cm donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
          }
          break;
        case 9: // triangle isocÃ¨le rectangle avec conversion
          triangle_isocele_rectangle.l1 = randint(l_min, l_max);
          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;
          triangle_isocele_rectangle.a1 = 90;

          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${
            triangle_isocele_rectangle.getLongueurs()[0]
          } $= ${triangle_isocele_rectangle.l1 * 10}$ mm ; `;
          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${
            triangle_isocele_rectangle.l2
          }$ cm`;
          texte += ` et `;
          if (this.classe == 6) {
            texte += `qui a un angle droit en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${
              triangle_isocele_rectangle.getSommets()[1]
            } donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> ${
              triangle_isocele_rectangle.getLongueurs()[0]
            } $= ${triangle_isocele_rectangle.l1 * 10}$ mm $= ${
              triangle_isocele_rectangle.l1
            }$ cm =${
              triangle_isocele_rectangle.getLongueurs()[1]
            } donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
          } else {
            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${
              triangle_isocele_rectangle.a1
            }\\degree$.`;
            texte_corr = `L'angle ${
              triangle_isocele_rectangle.getAngles()[0]
            } du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> ${
              triangle_isocele_rectangle.getLongueurs()[0]
            } $= ${triangle_isocele_rectangle.l1 * 10}$ mm $= ${
              triangle_isocele_rectangle.l1
            }$ cm =${
              triangle_isocele_rectangle.getLongueurs()[1]
            } donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${
              triangle_isocele_rectangle.getSommets()[1]
            }.`;
          }
          break;
        case 10: // triangle isocÃ¨le par les angles
          a3 = -1;
          while (a3 < 0) {
            triangle_isocele.a1 = randint(a_min, a_max);
            triangle_isocele.a2 = triangle_isocele.a1;
            a3 = 180 - 2 * triangle_isocele.a1;
            triangle_isocele.a3 = a3;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${
            triangle_isocele.getAngles()[0]
          } $= ${triangle_isocele.a1}\\degree$ ; `;
          texte += ` ${triangle_isocele.getAngles()[1]} $= ${
            triangle_isocele.a2
          }\\degree$ et  ${triangle_isocele.getAngles()[2]} $= ${
            triangle_isocele.a3
          }\\degree$ .`;
          texte_corr = `Le triangle ${triangle_isocele.getNom()} a deux angles Ã©gaux, ${
            triangle_isocele.getAngles()[0]
          } = ${triangle_isocele.getAngles()[1]} $= ${
            triangle_isocele.a1
          }\\degree$ donc ${triangle_isocele.getNom()} est un triangle isocÃ¨le en ${
            triangle_isocele.getSommets()[0]
          }.`;
          break;
        case 11: // triangle Ã©quilatÃ©ral par les angles
          triangle_equilateral.a1 = 60;
          triangle_equilateral.a2 = 60;
          triangle_equilateral.a3 = 60;

          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${
            triangle_equilateral.getAngles()[0]
          } $= ${triangle_equilateral.a1}\\degree$ ; `;
          texte += ` ${triangle_equilateral.getAngles()[1]} $= ${
            triangle_equilateral.a2
          }\\degree$ et  ${triangle_equilateral.getAngles()[2]} $= ${
            triangle_equilateral.a3
          }\\degree$.`;
          texte_corr = `Le triangle ${triangle_equilateral.getNom()} a trois angles Ã©gaux, ${
            triangle_equilateral.getAngles()[0]
          } = ${triangle_equilateral.getAngles()[1]} = ${
            triangle_equilateral.getAngles()[2]
          } $= ${
            triangle_equilateral.a1
          }\\degree$ donc ${triangle_equilateral.getNom()} est un triangle Ã©quilateral.`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };

  if (this.classe == 6) {
    this.besoin_formulaire_numerique = [
      "Niveau de difficultÃ©",
      2,
      "1 : sans conversions de longueurs\n2 : avec conversions de longueurs",
    ];
  }
}

/**
 * @Auteur Jean-Claude Lhote
 * Placer les sommets et les Ã©galitÃ©s de longueur...
 * RÃ©fÃ©rence 6G20
 */
function Nommer_et_coder_des_polygones() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Nommer et coder des polygones";
  this.consigne =
    "Nommer les figures en fonction de l'Ã©noncÃ© puis ajouter le codage.";
  this.nb_questions = 4;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, k, carreaux
    ppc=20
      if (sortie_html) {
        sc=0.5
      } else {
        sc=0.4
      }

    let params 
    
    let liste = combinaison_listes([1, 2, 3, 4, 5, 6, 7, 8], this.nb_questions);

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pixelsParCm = 40;
      let pol, polcode, polsom, polnom
      function choisir_polygone(n) { // n compris entre 1 et 8 (1 Ã  4 pour un triangle, 5 Ã  8 pour une quadrilatÃ¨re)
        let A, B, C, D
        let nom = creerNomDePolygone(4, "PQ"), pnom, q, p, pcode, enonce
        switch (n) {
          case 1: // triangle isocÃ¨le
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, randint(25, 80), nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C),codeAngle(B,C,A,0.8,'|','blue',2,0.8,'blue',0.2),codeAngle(C,B,A,0.8,'|','blue',2,0.8,'blue',0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est isocÃ¨le en $${nom[0]}$.<br>`
            break
          case 2: // triangle Ã©quilatÃ©ral
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, 60, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C, B, C),codeAngle(B,C,A,0.8,'|','blue',2,0.8,'blue',0.2),codeAngle(C,B,A,0.8,'|','blue',2,0.8,'blue',0.2),codeAngle(C,A,B,0.8,'|','blue',2,0.8,'blue',0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est Ã©quilatÃ©ral.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 3: // triangle rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = similitude(B, A, 90, randint(30, 100) / 100, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = codageAngleDroit(B, A, C)
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle en $${nom[0]}$.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 4: // triangle rectangle isocÃ¨le
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, 90, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C), codageAngleDroit(B, A, C),codeAngle(B,C,A,0.8,'|','blue',2,0.8,'blue',0.2),codeAngle(C,B,A,0.8,'|','blue',2,0.8,'blue',0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle et isocÃ¨le en $${nom[0]}$.`
            break
          //on choisit un quadrilatÃ¨re 
          case 5: // carrÃ©
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            q = carre(A, B)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('||', 'blue', A, B, B, C, C, D, D, A), codageAngleDroit(B, A, D), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un carrÃ©.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 6: // rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            C = similitude(A, B, -90, randint(30, 80) / 100, nom[2])
            D = translation(C, vecteur(B, A), nom[3])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('||', 'blue', A, B, C, D), codeSegments('|', 'red', C, B, A, D), codageAngleDroit(B, A, C), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un rectangle et $${nom[0] + nom[1]}$ est sa longueur.`
            break
          case 7: // losange
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            C = rotation(A, B, randint(100, 150), nom[2])
            D = translation(C, vecteur(B, A), nom[3])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('O', 'blue', A, B, B, C, C, D, D, A),codeAngle(C,D,A,0.8,'||','red',2,0.8,'red',0.2),codeAngle(C,B,A,0.8,'||','red',2,0.8,'red',0.2),codeAngle(B,C,D,0.8,'|','blue',2,0.8,'blue',0.2),codeAngle(D,A,B,0.8,'|','blue',2,0.8,'blue',0.2)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un losange et [$${nom[0] + nom[2]}$] est sa plus grande diagonale.`
            break
          case 8: // trapÃ¨ze rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            D = similitude(B, A, 90, randint(30, 80) / 100, nom[3])
            C = translation(D, homothetie(vecteur(A, B), A, randint(30, 80) / 100), nom[2])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codageAngleDroit(B, A, D), codageAngleDroit(C, D, A)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un trapÃ¨ze rectangle de grande base $${nom[0] + nom[1]}$ de hauteur $${nom[0] + nom[3]}$.`
            break
        }
        return [p, nom, pcode, pnom, enonce]
      }
      [pol, polnom, polcode, polsom, texte] = choisir_polygone(liste[i]);
      if (pol.listePoints.length==4){
      Xmin=Math.floor(Math.min(pol.listePoints[0].x,pol.listePoints[1].x,pol.listePoints[2].x,pol.listePoints[3].x)-1)
      Ymin=Math.floor(Math.min(pol.listePoints[0].y,pol.listePoints[1].y,pol.listePoints[2].y,pol.listePoints[3].y)-1)
      Xmax=Math.ceil(Math.max(pol.listePoints[0].x,pol.listePoints[1].x,pol.listePoints[2].x,pol.listePoints[3].x)+1)
      Ymax=Math.ceil(Math.max(pol.listePoints[0].y,pol.listePoints[1].y,pol.listePoints[2].y,pol.listePoints[3].y)+1)
      }
      else{
        Xmin=Math.floor(Math.min(pol.listePoints[0].x,pol.listePoints[1].x,pol.listePoints[2].x)-1)
        Ymin=Math.floor(Math.min(pol.listePoints[0].y,pol.listePoints[1].y,pol.listePoints[2].y)-1)
        Xmax=Math.ceil(Math.max(pol.listePoints[0].x,pol.listePoints[1].x,pol.listePoints[2].x)+1)
        Ymax=Math.ceil(Math.max(pol.listePoints[0].y,pol.listePoints[1].y,pol.listePoints[2].y)+1)
   
      }
      params = {
        xmin: Xmin,
        ymin: Ymin,
        xmax: Xmax,
        ymax: Ymax,
        pixelsParCm: ppc,
        scale: sc,
      }
      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
    else g = ''
    if (this.sup == 2) {
      k = 0.8;
      carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
    } else {
      k = 0.5;
      carreaux = "";
    }

      pol.epaisseur=2
      texte += `<br>` + mathalea2d(params, pol, polnom,g,carreaux)
      texte_corr = mathalea2d(params, pol, polnom, polcode, polsom,g,carreaux)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
    pixelsParCm=20
  };
  this.besoin_formulaire_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/**
 * ReprÃ©senter une somme de fracions de mÃªme dÃ©nominateur sur un segment graduÃ© de faÃ§on adaptÃ©e.
 * @Auteur Jean-Claude Lhote
 * 6N14-2
 */
function Ajouter_des_fractions_d_unite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "mettre bout Ã  bout des segments";
  this.consigne = "";
  this.nb_questions = 4;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, k, carreaux,objets
    ppc=20
      if (sortie_html) {
        sc=0.5
      } else {
        sc=0.3
      }

    let params,den,num=[0,0,0,0],f=[]
    
    let liste = combinaison_listes([5,6,7,8], this.nb_questions);

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;) {
      objets=[]
      den=liste[i]
      num[0]=randint(1,den-1)
      num[1]=randint(1,den-1,num[0])
      num[2]=randint(1,den-1,num[1])
      num[3]=randint(1,den-1,[num[2],num[0]])
      for (let j=0;j<4;j++)
        f[j]=fraction(num[j],den)

           
      texte=`On place bout Ã  bout 4 segments de longueurs respectives$ ${f[0].texFraction()}$, $${f[1].texFraction()}$, $${f[2].texFraction()}$ et $${f[3].texFraction()}$.<br>`
      texte+=`Quelle est la longueur du segment obtenu ?`
      texte_corr =`Voici sur ces dessins, coloriÃ©s en rouge, les diffÃ©rents segments :<br>`
      for (let j=0;j<4;j++) 
        objets.push(f[j].representation(0,5-j*1.25,5,0,'segment','red',0,1,1))
      params = {
        xmin: -0.4,
        ymin: -1.5,
        xmax: 6,
        ymax: 6,
        pixelsParCm: ppc,
        scale: 0.5,
      }
      texte_corr += mathalea2d(params,...objets)
      texte_corr+=`<br>Ce qui donne en les mettant bout Ã  bout :<br>`
      params = {
        xmin: -0.4,
        ymin: -1.5,
        xmax: 20,
        ymax: 1,
        pixelsParCm: ppc,
        scale: sc,
      }
      texte_corr+=mathalea2d(params,fraction(num[0]+num[1]+num[2]+num[3],den).representation(0,0,5,0,'segment','red',0,1,0.6))
      texte_corr+=`<br>La longueur du segment ainsi obtenu est : $${fraction(num[0]+num[1]+num[2]+num[3],den).texFraction()}$`
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/**
 * Utiliser les notations des segments, droites et demi-droites
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G10
 */
function Notation_segment_droite_demi_droite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Notation des droites, segments et demi-droites";
  this.consigne =
    "ComplÃ©ter les programmes de constructions qui ont permis d'obtenir ces figures.";
  this.nb_questions = 3;
  this.nb_cols = 3;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pixelsParCm = 40;
      let p = creerNomDePolygone(3, "PQ");
      let A = point(0, 0, p[0], "above left");
      let B = point(1, 1.2, p[1], "above");
      let C = point(2.2, -0.3, p[2], "above right");
      let dAB, dAC, dBC, dABCorr, dACCorr, dBCCorr;
      function creerDroiteDemiSegment(A, B) {
        let trait, notation;
        switch (randint(1, 4)) {
          case 1:
            trait = droite(A, B);
            notation = `$(${A.nom}${B.nom})$`;
            break;
          case 2:
            trait = demiDroite(A, B);
            notation = `$[${A.nom}${B.nom})$`;
            break;
          case 3:
            trait = demiDroite(B, A);
            notation = `$[${A.nom}${B.nom})$`;
            break;
          case 4:
            trait = segment(A, B);
            notation = `$[${A.nom}${B.nom}]$`;
            break;
        }
        return [trait, notation];
      }
      [dAB, dABCorr] = creerDroiteDemiSegment(A, B);
      [dAC, dACCorr] = creerDroiteDemiSegment(A, C);
      [dBC, dBCCorr] = creerDroiteDemiSegment(B, C);
      let labels = labelPoint(A, B, C);

      texte = `Placer 3 points $${p[0]}$, $${p[1]}$ et $${p[2]}$ non alignÃ©s puis tracer... <br><br>`;
      texte += mathalea2d(
        { xmin: -1, ymin: -1, xmax: 3, ymax: 2.5, pixelsParCm: 40, scale: 1 },
        dAB,
        dBC,
        dAC,
        labels
      );
      texte_corr = `...tracer ${dABCorr}, ${dBCCorr}, ${dACCorr}.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Utiliser les notations des segments, droites et demi-droites
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G10-1
 */
function Description_segment_droite_demi_droite() {
  "use strict"
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Description et notation des droites, segments et demi-droites";
  this.consigne =
    "Faire une phrase pour dÃ©crire le plus prÃ©cisemment possible la figure et donner sa notation mathÃ©matique";
  this.nb_questions = 3;
  this.nb_cols = 3;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1, 4, choice([2, 3])];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pixelsParCm = 40;
      let p = creerNomDePolygone(2, "P");
      let A = point(0, calcul(randint(0, 20) / 10), p[0]);
      let B = point(4, calcul(randint(0, 20) / 10), p[1]);
      let t1 = tracePointSurDroite(A, B);
      let t2 = tracePointSurDroite(B, A);
      let dAB, dABCorr;
      function creerDroiteDemiSegment(A, B) {
        let trait, correction;
        switch (liste_type_de_questions[i]) {
          case 1:
            trait = droite(A, B);
            correction = `La droite qui passe par les points $${A.nom}$ et $${B.nom}$ notÃ©e $(${A.nom}${B.nom})$.`;
            break;
          case 2:
            trait = demiDroite(A, B);
            correction = `La demi-droite d'origine $${A.nom}$ passant par $${B.nom}$ notÃ©e $[${A.nom}${B.nom})$.`;
            break;
          case 3:
            trait = demiDroite(B, A);
            correction = `La demi-droite d'origine $${B.nom}$ passant par $${A.nom}$ notÃ©e $[${A.nom}${B.nom})$.`;
            break;
          case 4:
            trait = segment(A, B);
            correction = `Le segment d'extrÃ©mitÃ©s $${A.nom}$ et $${B.nom}$ notÃ© $[${A.nom}${B.nom}]$`;
            break;
        }
        return [trait, correction];
      }
      [dAB, dABCorr] = creerDroiteDemiSegment(A, B);
      let labels = labelPoint(A, B);
      texte = mathalea2d(
        { xmin: -2, ymin: -1, xmax: 7, ymax: 3, pixelsParCm: 40, scale: 0.6 },
        dAB,
        t1,
        t2,
        labels
      );
      texte_corr = dABCorr;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Vocabulaire des triangles
 * 6G20-2
 * @author SÃ©bastien Lozano
 */
function Vocabulaire_des_triangles_6e() {
  this.classe = 6;
  Vocabulaire_des_triangles.call(this);
}

/**
 * Vocabulaire des triangles
 * 5G20-1
 * @author SÃ©bastien Lozano
 */
function Vocabulaire_des_triangles_5e() {
  this.classe = 5;
  Vocabulaire_des_triangles.call(this);
}
// RÃ©fÃ©rence 6G21
function Construire_un_triangle_6e() {
  Construire_un_triangle.call(this)
  this.classe=6
}
/**
 * 
 * 
 * RÃ©frence 6G21 et ... (exercice en 5e ? pas encore fait)
 */
function Construire_un_triangle() {
  "use strict"
  Exercice.call(this)
  this.titre = "Construire un triangle aux instruments";
  this.nb_questions = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = false;
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []
    this.liste_corrections = []
    let type_de_questions_disponibles,A,B,C,lAB,lBC,lAC,cA,cB,T,dBC,dAB,objets_enonce,objets_correction,params_enonce,params_correction,nom,sommets
    if (this.classe == 6) type_de_questions_disponibles = [1,2]
    else type_de_questions_disponibles = [1, 2, 3, 4, 5, 6]
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      objets_enonce=[]
      objets_correction=[]
      texte =`Le triangle ci-dessous a Ã©tÃ© rÃ©alisÃ© Ã  main levÃ©e.<br>Construire ce triangle avec les instruments de gÃ©omÃ©trie en respectant les mesures indiquÃ©es.<br>`
      texte_corr=`Voici la construction que tu devais rÃ©aliser.<br>`
      nom=creerNomDePolygone(3,"PQ")
      sommets=[]
      for(let i=0;i<3;i++) sommets.push(nom[i])
      sommets=shuffle(sommets)
      A=point(0,0,sommets[0])
      switch (liste_type_de_questions[i]) {
        case 1:
          lAC=randint(35,45)
          lBC=calcul(randint(35,45,lAC)/10)
          lAB=calcul(randint(46,60)/10)
          lAC=calcul(lAC/10)
          B=pointAdistance(A,lAB,randint(-45,45),sommets[1])
          cA=cercle(A,lAC)
          cB=cercle(B,lBC)
          C=pointIntersectionCC(cA,cB,sommets[2],1)
          objets_enonce.push(afficheLongueurSegment(B,A),afficheLongueurSegment(C,B),afficheLongueurSegment(A,C))
          objets_correction.push(traceCompas(A,C,30,'gray',1,2),traceCompas(B,C,30,'gray',1,2),afficheLongueurSegment(B,A),afficheLongueurSegment(C,B),afficheLongueurSegment(A,C))
          texte_corr+=`Pour cette construction, nous avons utilisÃ© le compas et la rÃ¨gle graduÃ©e.<br>`
          break;

        case 2:
          lAC=randint(70,80)/10
          lAB=calcul(randint(46,60)/10)
          B=pointAdistance(A,lAB,randint(-45,45),sommets[1])
          cA=cercle(A,lAC)
          dAB=droite(A,B)
          dBC=droiteParPointEtPerpendiculaire(B,dAB)
          C=pointIntersectionLC(dBC,cA,sommets[2],1)
          objets_enonce.push(afficheLongueurSegment(B,A),afficheLongueurSegment(C,A),codageAngleDroit(A,B,C))
          objets_correction.push(traceCompas(A,C,30,'gray',1,2),codageAngleDroit(A,B,C),afficheLongueurSegment(B,A),afficheLongueurSegment(C,A))
          texte_corr+=`Pour cette construction, nous avons utilisÃ© la rÃ¨gle graduÃ©e, l'Ã©querre et le compas.<br>`
          break

        case 3:

          break
      }
      T=polygoneAvecNom(A,B,C)
      objets_enonce.push(T[0],T[1])
      objets_correction.push(T[0],T[1])
      params_enonce={xmin : Math.min(A.x-1,B.x-1,C.x-1),ymin : Math.min(A.y-1,B.y-1,C.y-1),xmax : Math.max(A.x+1,B.x+1,C.x+1),ymax : Math.max(A.y+1,B.y+1,C.y+1),pixelsParCm : 30, scale : 1,mainlevee : true,amplitude : 1}
      params_correction={xmin : Math.min(A.x-1,B.x-1,C.x-2),ymin : Math.min(A.y-1,B.y-1,C.y-2),xmax : Math.max(A.x+1,B.x+1,C.x+2),ymax : Math.max(A.y+1,B.y+1,C.y+2),pixelsParCm : 30, scale : 1}
      texte+=mathalea2d(params_enonce,objets_enonce)
      texte_corr+=mathalea2d(params_correction,objets_correction)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

function Test_main_levee() {
  "use strict";
  Exercice.call(this);

  this.titre = "Test de main levÃ©e";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = false;
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions=[]
    this.liste_corrections=[]
    let A=point(5,5)
    let B=point(10,5)
    let D=point(10,10)
//    let a=codeAngle(B,A,D,4)
    let C=cercleCentrePoint(A,B,'green')
    C.epaisseur=2
    C.opacite=0.5
    let E=cercleCentrePoint(B,A,'red')
    E.epaisseur=2
    E.opacite=0.5
    let s=segment(A,B,'red')
    s.epaisseur=5
    s.opacite=0.4
    pixelsParCm=20
    scale=3
    let cote=afficheCoteSegment(s)
    let crochD=crochetD(B)
    let crochG=crochetG(A)

 //   let m=mediatrice(A,B,'d','purple')
    let cons=constructionMediatrice(A,B,true,'orange','//','O','black',2)

    let texte=mathalea2d({xmin:-1,ymin:0,xmax:16,ymax:11,pixelsParCm:20,scale:3,mainlevee:this.sup,amplitude:1},[cote,crochD,crochG,codeAngle(A,B,-90,3,'||','black',2,1,'yellow',0.5),C,s,E,tracePoint(A,B,D)])
    pixelsParCm=20
    let texte_corr=""
    this.liste_questions.push(texte );
    this.liste_corrections.push(texte_corr );
   liste_de_question_to_contenu(this)  
  }

  this.besoin_formulaire_case_a_cocher = ["main levee"];	
}

/**
 * Exercice du test de positionnement 5e
 * Variantes Ã  venir...
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6G10-2
 */
function Utiliser_le_codage_pour_decrire_6e(){
  Utiliser_le_codage_pour_decrire.call(this)
  this.classe=6
}
// 5G30
function Utiliser_le_codage_pour_decrire_5e(){
  Utiliser_le_codage_pour_decrire.call(this)
  this.classe=5
}
function Utiliser_le_codage_pour_decrire(){
  "use strict"
  Exercice.call(this);
  this.titre = "Utiliser le codage pour dÃ©crire une figure";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles;
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc=20, sc,nom,sommets=[],params_enonce,params_correction,objets_enonce,objets_correction
    let A,B,C,D,E,F,s1,s2,s3,s4,s5,s6,s7,s8,medAC,medBC,dBD,dBC,dAC,dAF
    if (this.classe==6) type_de_questions_disponibles=[1,2,3]
    else type_de_questions_disponibles=[1,2,3,4]
    let liste_type_de_questions=combinaison_listes(type_de_questions_disponibles,this.nb_questions)
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      objets_enonce=[]
      objets_correction=[]
      params_enonce={}
      params_correction={}
/*      nom=creerNomDePolygone(6,"PQ")
      for (let i=0;i<6;i++) 
        sommets.push(nom[i])
      sommets=shuffle(sommets)
*/
      sommets.push('A','B','C','D','E','F')
      A=point(0,0,sommets[0],'left')
      switch (liste_type_de_questions[i]){
      case 1 :
      C=pointAdistance(A,randint(5,7),randint(-45,45),sommets[2],'right')
      s2=segment(A,C)
      B=similitude(C,A,-85,randint(5,7)/10,sommets[1],'below')
      s1=segment(A,B)
      E=pointSurSegment(A,hC,longueur(A,C)/2.2,sommets[4],'below')
      medBC=mediatrice(C,B)
      medAC=mediatrice(A,C)
      dBC=droite(C,B)
      dBD=rotation(dBC,B,randint(-40,-20))
      dAC=droite(A,C)
      dAF=rotation(dAC,A,randint(30,40))
      D=pointIntersectionDD(dBD,medBC,sommets[3],'below')
      D.x+=randint(-2,2,0)/5
      F=pointIntersectionDD(dAF,medAC,sommets[5],'above')
      F.x+=randint(-2,2,0)/5
      s5=segment(B,D)
      s6=segment(C,D)
      s3=segment(A,F)
      s7=segment(C,F)
      s8=segment(E,F)
      s4=segment(B,C)
        params_enonce={xmin:Math.min(A.x-1,B.x-1,C.x-1,D.x-1,E.x-1,F.x-1),ymin : Math.min(A.y-1,B.y-1,C.y-1,D.y-1,E.y-1,F.y-1),xmax:Math.max(A.x+1,B.x+1,C.x+1,D.x+1,E.x+1,F.x+1),ymax:Math.max(A.y+1,B.y+1,C.y+1,D.y+1,E.y+1,F.y+1),pixelsParCm:20,scale:1,mainlevee:true,amplitude:1}
        objets_enonce.push(s1,s2,s4,s8,s7,s3,s6,s5,codageAngleDroit(B,A,C),codeSegments('//','black',A,F,F,C),codeSegments('|||','black',A,E,E,C),codeSegments('O','black',B,D,D,C),labelPoint(A,B,C,D,E,F),codageAngleDroit(A,E,F))
        texte=`<br>Ã l'aide du schÃ©ma ci-dessous, dÃ©terminer :<br>`
        texte+=`- deux segments de mÃªme longueur ;<br>`
        texte+=`- le milieu d'un segment ;<br>`
        texte+=`- un triangle rectangle ;<br>`
        texte+=`- un triangle isocÃ¨le ;<br>`
        texte_corr=`- Deux segments de mÃªme mesure : [$${sommets[0]+sommets[4]}$] et $[${sommets[4]+sommets[2]}]$ ou $[${sommets[0]+sommets[5]}]$ et $[${sommets[5]+sommets[2]}]$`
        texte_corr+=` ou $[${sommets[1]+sommets[3]}]$ et $[${sommets[3]+sommets[2]}]$.<br>`
        texte_corr+=`- $E$ est le milieu du segment $[${sommets[0]+sommets[2]}]$.<br>`
        texte_corr+=`- $${sommets[0]+sommets[1]+sommets[2]}$ est un triangle rectangle en $${sommets[0]}$, $${sommets[0]+sommets[4]+sommets[5]}$ est un triangle rectangle en $${sommets[4]}$ et $${sommets[2]+sommets[4]+sommets[5]}$ est un triangle rectangle en $${sommets[4]}$.<br>`
        texte_corr+=`- $${sommets[0]+sommets[5]+sommets[2]}$ est un triangle isocÃ¨le en $${sommets[5]}$ et $${sommets[1]+sommets[3]+sommets[2]}$ est un triangle isocÃ¨le en $${sommets[3]}$.<br>`
        break
        case 2 : 
        B=pointAdistance(A,randint(5,7),randint(-45,45),sommets[1],'above')
        C=similitude(A,B,randint(85,90),0.95,sommets[2],'below')
        D=similitude(B,A,randint(-93,-87),1,sommets[3],'below')
        F=similitude(B,C,-55,0.8,sommets[5],'right')
        E=similitude(C,D,57,randint(85,115)/100,sommets[4],'right')
        s1=segment(D,E)
        s2=segment(C,E)
        s4=segment(C,F)
        s5=segment(B,F)
        s6=polygone(A,B,C,D)
        params_correction={xmin:Math.min(A.x-1,B.x-1,C.x-1,D.x-1,E.x-1,F.x-1),ymin : Math.min(A.y-1,B.y-1,C.y-1,D.y-1,E.y-1,F.y-1),xmax:Math.max(A.x+1,B.x+1,C.x+1,D.x+1,E.x+1,F.x+1),ymax:Math.max(A.y+1,B.y+1,C.y+1,D.y+1,E.y+1,F.y+1),pixelsParCm:20,scale:1,mainlevee:true,amplitude:1}
        objets_correction.push(labelPoint(A,B,C,D,E,F),s1,s2,s4,s5,s6)
        objets_correction.push(codageAngleDroit(D,A,B),codageAngleDroit(A,B,C),codageAngleDroit(B,C,D),codageAngleDroit(C,D,A))
        objets_correction.push(codeSegments('||','black',D,E,C,E),codeSegments('O','black',A,B,B,C,C,D,D,A),codeSegments('|||','black',F,C,B,F))
        texte=`$${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$ est un carrÃ© et $${sommets[3]+sommets[2]+sommets[4]}$ est un triangle Ã©quilatÃ©ral ($${sommets[4]}$ est Ã  l'intÃ©rieur du carrÃ© $${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$).<br>`
        texte+=` $${sommets[1]+sommets[2]+sommets[5]}$ est un triangle isocÃ¨le en $${sommets[5]}$ ($${sommets[5]}$ est Ã  l'extÃ©rieur du carrÃ© $${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$).<br>`
        texte+=`ReprÃ©senter cette configuration par un schÃ©ma Ã  main levÃ©e et ajouter les codages nÃ©cÃ©ssaires.`
        texte_corr=`VoilÃ  ci-dessous un schÃ©ma qui pourrait convenir Ã  la situation.<br>`
        break
        case 3:
          B=pointAdistance(A,randint(5,7),randint(-45,45),sommets[1],'above')
          C=similitude(A,B,randint(85,90),0.5,sommets[2],'below')
          D=similitude(B,A,randint(-93,-87),0.53,sommets[3],'below')
          s1=segment(D,B)
          s2=segment(A,C)
          E=pointIntersectionDD(droite(A,C),droite(D,B),sommets[4],'above')
          F=affiniteOrtho(E,droite(B,C),-1.1,sommets[5],'right')
          s3=polygone(A,B,C,D)
          s4=segment(B,F)
          s5=segment(C,F)
          params_correction={xmin:Math.min(A.x-1,B.x-1,C.x-1,D.x-1,E.x-1,F.x-1),ymin : Math.min(A.y-1,B.y-1,C.y-1,D.y-1,E.y-1,F.y-1),xmax:Math.max(A.x+1,B.x+1,C.x+1,D.x+1,E.x+1,F.x+1),ymax:Math.max(A.y+1,B.y+1,C.y+1,D.y+1,E.y+1,F.y+1),pixelsParCm:20,scale:1,mainlevee:true,amplitude:1}
          objets_correction.push(labelPoint(A,B,C,D,E,F),s1,s2,s3,s4,s5)
          objets_correction.push(codageAngleDroit(D,A,B),codageAngleDroit(A,B,C),codageAngleDroit(B,C,D),codageAngleDroit(C,D,A))
          objets_correction.push(codeSegments('||','black',D,E,E,B,A,E,E,C,F,C,B,F),codeSegments('O','black',A,B,D,C),codeSegments('/','black',A,D,B,C))
          texte=`$${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`
          texte+=`$${sommets[4]+sommets[1]+sommets[5]+sommets[2]}$ est un losange.<br>`
          texte+=`ReprÃ©senter cette configuration par un schÃ©ma Ã  main levÃ©e et ajouter les codages nÃ©cÃ©ssaires.`
          texte_corr=`VoilÃ  ci-dessous un schÃ©ma qui pourrait convenir Ã  la situation.<br>`
        break
        case 4 :
          B=pointAdistance(A,randint(6,7),randint(-30,30),sommets[1],'above right')
          F=similitude(A,B,randint(-70,-50),randint(80,90)/100,sommets[5],'left')
          D=similitude(B,A,angleOriente(A,B,F)+randint (3,5),randint(15,20)/10,sommets[3],'below')
          C=translation2Points(point(B.x+1,B.y+1),A,D,sommets[2],'below right')
          E=pointIntersectionDD(droite(A,C),droite(D,B),sommets[4],'above right')
          s3=polygone(A,B,C,D)
          s4=segment(B,F)
          s5=segment(A,F)
          s1=segment(B,D)
          s2=segment(A,C)
          params_enonce={xmin:Math.min(A.x-1,B.x-1,C.x-1,D.x-1,E.x-1,F.x-1),ymin : Math.min(A.y-1,B.y-1,C.y-1,D.y-1,E.y-1,F.y-1),xmax:Math.max(A.x+1,B.x+1,C.x+1,D.x+1,E.x+1,F.x+1),ymax:Math.max(A.y+1,B.y+1,C.y+1,D.y+1,E.y+1,F.y+1),pixelsParCm:20,scale:1,mainlevee:true,amplitude:1}
          objets_enonce.push(labelPoint(A,B,C,D,E,F),s1,s2,s3,s4,s5)
          objets_enonce.push(codeAngle(D,A,B,2,'|','red',2),codeAngle(B,C,D,2,'|','red',2),codeAngle(A,B,F,2,'|','red',2))
          objets_enonce.push(codeAngle(A,B,C,2,'||','blue',2),codeAngle(A,D,C,2,'||','blue',2))
          objets_enonce.push(codeAngle(B,A,F,2,'','green',3),codeAngle(B,F,A,2,'','green',3))
          
          objets_enonce.push(codeSegments('||','black',B,E,E,D),codeSegments('O','black',A,E,E,C))
          texte=`$${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`
          texte+=`$${sommets[4]+sommets[1]+sommets[5]+sommets[2]}$ est un losange.<br>`
          texte=`<br>Ã l'aide du schÃ©ma ci-dessous, dÃ©terminer :<br>`
        texte+=`- la nature du triangle $${sommets[0]+sommets[1]+sommets[5]}$ ;<br>`
        texte+=`- la nature du quadrilatÃ¨re $${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$ ;<br>`
        texte+=`- la nature de l'angle $\\widehat{FBC}$ ;<br>`
          texte_corr=`Le triangle $${sommets[0]+sommets[1]+sommets[5]}$ a deux angles de mÃªme mesure, c'est donc un triangle isocÃ¨le en $${sommets[1]}$.<br>`
          texte_corr+=`Le quadrilatÃ¨re  $${sommets[0]+sommets[1]+sommets[2]+sommets[3]}$ a des diagonales qui se coupent en leur milieu, c'est donc un parallÃ©logramme.<br>`
          texte_corr+=`Dans un parallÃ©logramme, les angles consÃ©cutifs sont supplÃ©mentaires (leur somme vaut 180Â°).<br`
          texte_corr+=` D'aprÃ¨s le codage, l'angle \\widehat{${sommets[2]+sommets[1]+sommets[5]}$} est la somme de deux angles supplÃ©mentaires. C'est donc un angle plat.<br>`
          
         
        break
      }
        if (objets_enonce.length>0) texte+=mathalea2d(params_enonce,objets_enonce)
        if (objets_correction.length>0) texte_corr+=mathalea2d(params_correction,objets_correction)
        if (this.liste_questions.indexOf(texte) == -1) {
          // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
          this.liste_questions.push(texte);
          this.liste_corrections.push(texte_corr);
          i++;
        }
        cpt++;
      }
      liste_de_question_to_contenu(this);
   };
}


/**
 * Fonction gÃ©nÃ©rale pour exercices de constructions de parallÃ¨les et perpendiculaires
 * rÃ©fÃ©rences 6G11, 6G12 et 6G12-1
 */
function Parallele_et_Perpendiculaires() {
  "use strict";
  Exercice.call(this);
  this.titre = "Tracer des parallÃ¨les et des perpendiculaires";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
  let type_de_questions_disponibles;
  type_de_questions_disponibles = [parseInt(this.sup)]; // Le choix 1 ou 2 ou 3 : 1=perpendiculaires, 2=parallÃ¨les, 3=des perpendiculaires et des paralÃ¨lles
  let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc=20, sc;
   
    let A,
      B,
      C,
      D,
      xE,
      E,
      F,
      CC,
      DD,
      EE,
      d,
      s1,
      s2,
      enonce,
      correction,
      dB,
      dC,
      dD,
      dE,
      g,
      lC,
      lD,
      lE,
      cB,
      cC,
      cD,
      cE,
      cF,
      cG,
      FF,
      BB,
      carreaux,
      k,
      objets_enonce = [],
      objets_correction = [],
      
      p;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      objets_enonce.splice(0)
      objets_correction.splice(0)
      if (this.sup2 == 2) 
        k = 0.8;
      else 
        k = 0.5;
      switch (liste_type_de_questions[i]) {
        case 1:
          A = point(0, 0, "A", "above left");
          B = point(10, randint(-4, 4, [-1, 0, 1]), "B", "above right");
          d = droite(A, B);
          d.isVisible = true;
          C = point(randint(2, 3), randint(3, 4), "C", "above left");
          D = point(randint(7, 8), randint(-7, -6), "D");
          dB = droiteParPointEtPerpendiculaire(B, d);
          xE = 11;
          E = pointSurDroite(dB, 11, "E", "left");
          while (!Number.isInteger(E.y)) {
            xE++;
            E = pointSurDroite(dB, xE, "E", "left");
          }
          F = point(E.x, B.y);
          s1 = segment(B, F, "red");
          s1.epaisseur = 2;
          s1.pointilles = true;
          s2 = segment(F, E, "blue");
          s2.epaisseur = 2;
          s2.pointilles = true;
          dC = droiteParPointEtPerpendiculaire(C, d);
          dD = droiteParPointEtPerpendiculaire(D, d);
          BB = rotation(A, B, 90);
          CC = pointIntersectionDD(dC, d, "M", "below right");
          DD = pointIntersectionDD(dD, d, "N", "above left");
          lC = arrondi(longueur(CC, A) * k, 1);
          lD = arrondi(longueur(DD, A) * k, 1);
          cB = codageAngleDroit(A, B, BB);
          cC = codageAngleDroit(C, CC, B);
          cD = codageAngleDroit(D, DD, B);
          objets_correction.push(s1,
            s2,
            dC,
            dD,
            dB,
            cB,
            cC,
            cD,
            d,
            tracePoint(A, B, C, D, E, CC, DD),
            labelPoint(A, B, C, D, E, CC, DD),
            afficheCoteSegment(
              segment(A, CC),
              `${tex_nombre(lC)} cm`,
              0.5,
              "red",
              1,
              0.5,
              "red"
            ),
            afficheCoteSegment(
              segment(A, DD),
              `${tex_nombre(lD)} cm`,
              -0.5,
              "red",
              1,
              -0.5,
              "red"
            )
          );
          objets_enonce.push(
            tracePoint(A, B, C, D),
            labelPoint(A, B, C, D),
            d,
          );
          if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
          else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
          enonce +=
            num_alpha(1) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $B$.<br>`;
          enonce +=
            num_alpha(2) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $C$ et nommer $M$ le point d'intersection de cette droite avec la droite $(AB)$.<br>`;
          enonce +=
            num_alpha(3) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $D$ et nommer $N$ le point d'intersection de cette droite avec la droite $(AB)$.<br>`;
          enonce +=
            num_alpha(4) +
            ` Mesurer ensuite les distances $AM$ et $AN$.<br> Pour l'auto-correction comparer ces mesures avec celles donnÃ©es dans la correction<br>`;
               correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm et $AN \\approx ${tex_nombre(lD)}$ cm.<br>`;
          correction += `Pour la perpendiculaire en $B$, contrÃ´le la position du point $E$.<br>`;
          Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,E.x,CC.x,DD.x)-1)
          Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,E.x,CC.x,DD.x)+1)
          Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,E.y,CC.y,DD.y)-1)
          Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,E.y,CC.y,DD.y)+1)
          break;
        case 2:
          A = point(2, 0, "A",'below left');
          B = point(12, randint(-4, 4, 0), "B");
          d = droite(A, B);
          d.isVisible = true;
          C = point(0, randint(3, 4), "C",'above');
          D = point(randint(7, 8), randint(-7, -6), "D",'below right');
          E = point(randint(4, 5), randint(5,6), "E",'below right');
          F = point(2, -3, "F", "left");
 
          dE = droiteParPointEtParallele(E, d);
          dC = droiteParPointEtParallele(C, d);
          dD = droiteParPointEtParallele(D, d);
          p = droite(A, F);
          p.isVisible = true;
          CC = pointIntersectionDD(dC, p,'M','above left');
          DD = pointIntersectionDD(dD, p,'N','above left');
          EE = pointIntersectionDD(dE, p,'O','above left');
          lC = arrondi(longueur(CC, A) * k, 1);
          lD = arrondi(longueur(DD, A) * k, 1);
          lE = arrondi(longueur(EE, A) * k, 1);
          objets_correction.push(dC,dD,dE,d,p,tracePoint(A, B, C, D, E,F),labelPoint(A, B, C, D, E,F,CC,DD,EE),afficheCoteSegment(segment(A,CC),`${tex_nombre(lC)} cm`,.2,'red',1,0.5,'red'),afficheCoteSegment(segment(DD,A),`${tex_nombre(lD)} cm`,-0.2,'green',1,-0.5,'green'),afficheCoteSegment(segment(A,EE),`${tex_nombre(lE)} cm`,-0.2,'blue',1,-0.5,'blue'))
          objets_enonce.push(tracePoint(A, B, C, D,E,F),labelPoint(A, B, C, D,E,F),d,p);
        
          if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
          else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
          enonce +=num_alpha(1)+` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $C$ et nomme $M$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce +=num_alpha(2)+` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $D$ et nomme $N$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce +=num_alpha(3)+` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $E$ et nomme $O$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce += num_alpha(4)+` Mesurer les distances $AM$, $AN$ et $AO$. Pour l'auto-correction, comparer ces mesures avec celles donnÃ©es par  l'ordinateur dans la correction.<br>`;
         
          correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm, $AN \\approx ${tex_nombre(
            lD
          )}$ cm et $AO \\approx${tex_nombre(
            lE
          )}$ cm.<br>`;
          Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,E.x,F.x,EE.x,CC.x,DD.x)-1)
          Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,E.x,F.x,EE.x,CC.x,DD.x)+1)
          Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,E.y,F.y,EE.y,CC.y,DD.y)-1)
          Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,E.y,F.y,EE.y,CC.y,DD.y)+1)
          break;
          case 3:
            A = point(0, 0, "A", "above left");
            B = point(10, randint(-4, 4, [-1, 0, 1]), "B", "above right");
            d = droite(A, B);
            d.isVisible = true;
            C = point(randint(2, 3), randint(3, 4), "C", "above left");
            D = point(randint(7, 8), randint(-7, -6), "D");
            dB = droiteParPointEtPerpendiculaire(B, d);
            xE = 11;
            E = pointSurDroite(dB, 11, "E", "left");
            while (!Number.isInteger(E.y)) {
              xE++;
              E = pointSurDroite(dB, xE, "E", "left");
            }
            F = point(E.x, B.y);
            dE = droiteParPointEtParallele(E, d);
            dD = droiteParPointEtParallele(D, d);
            dC = droiteParPointEtPerpendiculaire(C,d)
            BB = rotation(A, B, 90);
            CC = pointIntersectionDD(dC, d, "M", "below right");
            DD = pointIntersectionDD(dD, dB, "N", "above left");
            EE = pointIntersectionDD(dC,dE ,'O','above left');
            FF = pointIntersectionDD(dD,dC)

            lC = arrondi(longueur(CC, A) * k, 1);
            lD = arrondi(longueur(DD, A) * k, 1);
            lE = arrondi(longueur(EE, A) * k, 1);
            cB = codageAngleDroit(A, B, BB);
            cC = codageAngleDroit(C, CC, B);
            cD = codageAngleDroit(D, DD, B,'red');
            cE = codageAngleDroit(B,E,EE,'red')
            cF = codageAngleDroit(C,EE,E,'red')
            cG = codageAngleDroit(C,FF,D,'red')

            objets_correction.push(dC,dD,dB,dE,cB,cC,cD,cE,cF,cG,d,tracePoint(A, B, C, D, E, CC, DD,EE),labelPoint(A, B, C, D, E, CC, DD,EE),afficheCoteSegment(
              segment(A, CC),
              `${tex_nombre(lC)} cm`,
              0.5,
              "red",
              1,
              0.5,
              "red"
            ),
            afficheCoteSegment(
              segment(A, DD),
              `${tex_nombre(lD)} cm`,
              0,
              "blue",
              1,
              -0.5,
              "blue"
            ),
            afficheCoteSegment(
              segment(A, EE),
              `${tex_nombre(lE)} cm`,
              0,
              "green",
              1,
              -0.5,
              "green"
            ));
            objets_enonce.push(tracePoint(A, B, C, D,E),labelPoint(A, B, C, D,E),d);
            if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
            else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
             enonce +=num_alpha(1)+` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $B$.<br>`;
          enonce +=num_alpha(2)+` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $C$ et nomme $M$, le point d'intersection de cette droite avec la droite $(AB)$.<br>`
          enonce +=num_alpha(3)+` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $D$ et nomme $N$, le point d'intersection de cette droite avec la droite $(BE)$.<br>`;
          enonce += num_alpha(4)+ ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $E$ et nomme $O$, le point d'intersection de cette droite avec la droite $(CM)$.<br>`
          enonce += num_alpha(5)+` Mesurer les distances $AM$, $AN$ et $AO$. Pour l'auto-correction, comparer ces mesures avec celles donnÃ©es par  l'ordinateur dans la correction.<br>`;
         
          correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm, $AN \\approx ${tex_nombre(
            lD
          )}$ cm et $AO \\approx${tex_nombre(
            lE
          )}$ cm.<br>`;
          correction+=`Les angle droits en rouge se justifient par la propriÃ©tÃ© :<br> ${texte_en_couleur(`Si deux droites sont parallÃ¨les, toutes droite perpendiculaire Ã  l'une est aussi perpendiculaire Ã  l'autre`,'red')}.<br>`
          correction +=`VÃ©rifier les angles droits Ã  l'Ã©querre.<br>`
          Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,E.x,F.x,EE.x,CC.x,DD.x)-1)
          Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,E.x,F.x,EE.x,CC.x,DD.x)+1)
          Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,E.y,F.y,EE.y,CC.y,DD.y)-1)
          Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,E.y,F.y,EE.y,CC.y,DD.y)+1)

          break
      }
      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        sc = 0.8;
        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
      } else {
        sc = 0.5;
        carreaux = "";
      }
      objets_enonce.push(g,carreaux)
      objets_correction.push(g,carreaux)
      
      enonce += mathalea2d(
        {
          xmin: Xmin,
          ymin: Ymin,
          xmax: Xmax,
          ymax: Ymax,
          pixelsParCm: ppc,
          scale: sc,
        },
       objets_enonce
      );
      correction += mathalea2d(
        {
          xmin: Xmin,
          ymin: Ymin,
          xmax: Xmax,
          ymax: Ymax,
          pixelsParCm: ppc,
          scale: sc,
        },
        objets_correction
      );
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(enonce + "<br>");
        this.liste_corrections.push(correction + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}


/**
 * Produire une forme littÃ©rale en introduisant une lettre pour dÃ©signer une valeur inconnue
 * * 6P11-1
 * @author SÃ©bastien Lozano
 */
function Proportionnalite_par_linearite_bis(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 3;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "RÃ©soudre un problÃ¨me relevant de la proportionnalitÃ© avec les propriÃ©tÃ©s de linÃ©aritÃ©.";
  this.consigne = "";
  sortie_html ? this.spacing = 1.5 : this.spacing = 1;
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	//sortie_html? this.spacing = 3 : this.spacing = 2; 
	//sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		type_de_questions_disponibles=[1];			
		let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		//let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			
			// une fonction pour gÃ©rer le pluriel 
			function pluriel(n,obj) {
				if (n>1) {
					return obj.achat_plur
				} else {
					return obj.achat_sing
				};
			};
			
			// une fonction pour gÃ©rer la chaine de sortie et supprimer le coeff 1 !
			function sliceUn(n) {
				if (n==1) {
					return ``;
				} else {
					return `${n}`;
				};
      };
      
      //une fonction pour calculer la diffÃ©rence positive entre deux entiers
      function diffInt(n,p) {
        if (n>p) {
          return calcul(n-p);
        } else if (n<p) {
          return calcul(p-n);
        } else {
          return 0;
        }
      };

      // un compteur pour les sous-questions
      let k=0;
      let k_corr=0;
      // on crÃ©e un tableau d'objets pour les situations possibles
      let n1,n2,n3,n4,n_max;
      do {
        n1 = randint(1,9);
        n2 = randint(1,9,[n1]);
        n3 = n1+n2;
        n4 = diffInt(n1,n2);
        n_max=randint(10,19,[n3]);
      }	while (n4==1);
      //n1 sera toujours le plus grand sinon on intervertit les deux
      let temp;
      if (n1<n2) {
        temp = n1;
        n1 = n2;
        n2 = temp;
      };	
			let situations = [
        {lieu:`la boulangerie "Au bon pain"`,achat_sing:`pain au chocolat`,achat_plur:`pains au chocolat`,prenom1:prenom(),prenom2:prenom(),prenom3:prenom(),prenom4:prenom(),prenom_max:prenom(),n1:n1,n2:n2,n3:n3,n4:n4,n_max:n_max,pu:0.9}
			]
			let enonces = [];
      let situation = situations[randint(0,situations.length-1)];
      
			enonces.push({
        enonce:`
          Dans ${situation.lieu}, ${situation.prenom1} achÃ¨te $${situation.n1}$ ${pluriel(situation.n1,situation)} et paie $${tex_prix(situation.pu*situation.n1)}$ â¬.
          <br>${situation.prenom2} achÃ¨te $${situation.n2}$ ${pluriel(situation.n2,situation)} et paie $${tex_prix(situation.pu*situation.n2)}$ â¬.
          <br>
          <br>${num_alpha(k++)} Combien paiera ${situation.prenom3} pour $${situation.n3}$ ${pluriel(situation.n3,situation)} ?
          <br>${num_alpha(k++)} Combien paiera ${situation.prenom4} pour $${situation.n4}$ ${pluriel(situation.n4,situation)} ?
          <br>${num_alpha(k++)} Quel est le nombre maximum de ${situation.achat_plur} que ${situation.prenom_max} peut acheter avec $${tex_prix(situation.pu*situation.n_max)}$ â¬ ?
          `,
				question:``,
        correction:`
        C'est une situation de proportionnalitÃ©. Nous pouvons donc utiliser les propriÃ©tÃ©s de linÃ©aritÃ© de la proportionnalitÃ©.
        <br>C'est ce que nous allons faire pour les deux premiÃ¨res questions.
        <br>
        <br>${num_alpha(k_corr++)} Pour $${situation.n1}$ ${pluriel(situation.n1,situation)}, on paie $${tex_prix(situation.pu*situation.n1)}$ â¬.
        <br> Pour $${situation.n2}$ ${pluriel(situation.n2,situation)}, on paie $${tex_prix(situation.pu*situation.n2)}$ â¬.
        <br> Donc pour $${situation.n1}+${situation.n2}$ ${pluriel(situation.n3,situation)}, on paie $${tex_prix(situation.pu*situation.n1)}$ â¬ + $${tex_prix(situation.pu*situation.n2)}$ â¬.
        <br> ${texte_en_couleur(`${situation.prenom3} paiera donc $${tex_prix(situation.pu*situation.n3)}$ â¬ pour $${situation.n3}$ ${pluriel(situation.n3,situation)}.`)}
        <br>
        <br>${num_alpha(k_corr++)} Pour $${situation.n1}$ ${pluriel(situation.n1,situation)}, on paie $${tex_prix(situation.pu*situation.n1)}$ â¬.
        <br> Pour $${situation.n2}$ ${pluriel(situation.n2,situation)}, on paie $${tex_prix(situation.pu*situation.n2)}$ â¬.
        <br> Donc pour $${situation.n1}-${situation.n2}$ ${pluriel(situation.n4,situation)}, on paie $${tex_prix(situation.pu*situation.n1)}$ â¬ - $${tex_prix(situation.pu*situation.n2)}$ â¬.
        <br> ${texte_en_couleur(`${situation.prenom4} paiera donc $${tex_prix(situation.pu*situation.n4)}$ â¬ pour $${situation.n4}$ ${pluriel(situation.n4,situation)}.`)}
        <br>
        <br>${num_alpha(k_corr++)} On peut utiliser l'une ou l'autre des informations de l'Ã©noncÃ© pour rÃ©pondre en revenant Ã  l'unitÃ©.
        <br> Par exemple pour $${situation.n1}$ ${pluriel(situation.n1,situation)}, on paie $${tex_prix(situation.pu*situation.n1)}$ â¬.
        <br> Donc $1$ ${situation.achat_sing} coÃ»te $${tex_prix(situation.pu*situation.n1)}\\div ${situation.n1} = ${tex_prix(situation.pu)}$ â¬.
        <br> Pour $${tex_prix(situation.pu*situation.n_max)}$ â¬ nous aurons donc $${tex_prix(situation.pu*situation.n_max)}\\div ${tex_prix(situation.pu)}$ â¬ $= ${situation.n_max}$ ${pluriel(situation.n_max,situation)}.
        <br> ${texte_en_couleur(`Avec $${tex_prix(situation.pu*situation.n_max)}$ â¬, ${situation.prenom_max} pourra donc acheter $${situation.n_max}$ ${pluriel(situation.n_max,situation)}.`)}
        `
			})
			switch (liste_type_de_questions[i]){
				case 1 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
					break;				
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G23-2
 */
function Tracer_triangle_2_angles() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tracer un triangle dont on connait une longueur et 2 angles";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let c = calcul(randint(30, 70) / 10);
      let angle1 = randint(20, 70);
      let angle2 = randint(20, 70);
      let p = creerNomDePolygone(3);
      texte = `Tracer un triangle $${p}$ tel que $${p[0] + p[1]}=${tex_nombre(
        c
      )}$ cm, $\\widehat{${
        p[1] + p[0] + p[2]
      }}=${angle1}\\degree$ et $\\widehat{${
        p[0] + p[1] + p[2]
      }}=${angle2}\\degree$.`;
      texte += `<br> Mesurer $${p[0] + p[2]}$ et $${p[1] + p[2]}$.`;
      let A0 = point(0, 0, p[0], "left");
      let B0 = point(c, 0, p[1], "right");
      let s0 = segmentAvecExtremites(A0, B0);
      let t1 = afficheLongueurSegment(B0, A0);

      let A1 = point(B0.x + 4, 0, p[0], "left");
      let B1 = point(A1.x + c, 0, p[1], "right");
      let s1 = segment(A1, B1);
      s1.styleExtremites = "-|";
      let c1 = rotation(B1, A1, angle1);
      let C1 = pointSurSegment(c1, A1, -3);
      let s2 = segment(A1, C1);
      let t2 = afficheMesureAngle(B1, A1, C1);

      let A2 = point(B1.x + 4, 0, p[0], "left");
      let B2 = point(A2.x + c, 0, p[1], "right");
      let s3 = segment(A2, B2);
      let c2 = rotation(B2, A2, angle1);
      let C2 = pointSurSegment(c2, A2, -3);
      let s4 = segment(A2, C2);
      let c3 = rotation(A2, B2, -angle2);
      let C3 = pointSurSegment(c3, B2, -3);
      let t3 = afficheMesureAngle(A2, B2, C3);
      let s5 = segment(B2, C3);
      let d1 = droite(A2, C2);
      d1.isVisible = false;
      let d2 = droite(B2, C3);
      d2.isVisible = false;
      let C = pointIntersectionDD(d1, d2, p[2]);
      let l = labelPoint(A0, B0, A1, B1, A2, B2, C);

      if (sortie_html) {
        texte_corr = mathalea2d(
          { xmin: -1, xmax: 3 * c + 10, ymin: -1, ymax: 10 },
          s0,
          s1,
          s2,
          s3,
          s4,
          s5,
          t1,
          t2,
          t3,
          l
        );
        texte_corr += '<br><br>'
      } else {
        texte_corr = "";
      }
      texte_corr += `$${p[0] + p[2]}\\approx${tex_nombre(
        longueur(A2, C, 1)
      )}$ cm et $${p[1] + p[2]}\\approx${tex_nombre(longueur(B2, C, 1))}$ cm.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * fonction servant Ã  plusieurs exercice autour du cube et du pavÃ© droit
 * rÃ©fÃ©rences : 6G42 et 6G43
 * @Auteur Jean-Claude Lhote
 */
function Solide_6e() {
  "use strict";
  Exercice.call(this);
  this.titre = "ConnaÃ®tre les propriÃ©tÃ©s du cube et du pavÃ© droit";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
  let type_de_questions_disponibles;
  if (this.sup==3) type_de_questions_disponibles=[1,2]
 else type_de_questions_disponibles = [parseInt(this.sup)]; 
 if (this.titre=="Utiliser le vocabulaire associÃ© au pavÃ© droit") 
    for (let n=0;n<type_de_questions_disponibles.length;n++)
      type_de_questions_disponibles[n]+=2
  let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc;
 
    if (this.sup2 == 1) sc = 0.5;
    else sc = 0.8;

    let A,B,C,D,E,F,G,H,
      AB,BC,CD,DA,EF,FG,GH,HE,AE,BF,CG,DH,
      lAB,lBC,lAE,anglepersp,coeffpersp,
      codesseg=[],
      enonce,
      correction,
      carreaux,g,
      objets_enonce = [],
      objets_correction = [],
     k,
      p;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
     let nom = creerNomDePolygone(8, "PQ"),
     anglepersp=choice([30,45,-30,-45,150,135,-150,-135])
      if (anglepersp%10==0) coeffpersp=0.6
      else coeffpersp=0.4
      objets_correction=[]
      objets_enonce=[]
      switch (liste_type_de_questions[i]) {
        case 1: //cube
          enonce=`${nom} est un cube.<br>`
          if (sortie_html) enonce +=` Reproduire la figure ci-dessous sur le cahier.<br>`;
          enonce += ` Repasse tous les segments de mÃªme longueur dans une mÃªme couleur.<br>`;
          correction=`Le cube ${nom}.<br>`

          break;
        case 2:

          enonce=`${nom} est un pavÃ© droit.<br>`
          if (sortie_html) enonce += ` Reproduire la figure ci-dessous sur le cahier.<br>`;
          enonce += ` Repasse tous les segments de mÃªme longueur dans une mÃªme couleur.<br>`;
          correction=`Le pavÃ© droit ${nom}.<br>`

           break;
        case 3 :
          enonce=`${nom} est un cube.<br>`
          break;
 
        case 4 :
          enonce=`${nom} est un pavÃ© droit.<br>`
          break;
      }
      let aretes_paralleles=[[[0,1],[3,2],[4,5],[7,6]],[[0,3],[1,2],[4,7],[5,6]],[[0,4],[1,5],[2,6],[3,7]]]
      let faces_paralleles=[[[0,1,2,3],[4,5,6,7]],[[0,4,7,3],[1,5,6,2]],[[0,1,5,4],[3,2,6,7]]]
      let aretes_perp=[[[0,1],[0,4],[0,3],[1,5],[1,2]],[[0,4],[0,1],[0,3],[4,5],[4,7]],[[0,3],[0,1],[0,4],[3,2],[3,7]],[[1,2],[1,0],[1,5],[2,3],[2,6]],[[1,5],[1,0],[1,2],
      [5,4],[5,6]],[[5,4],[5,1],[5,6],[4,0],[4,7]],[[5,6],[5,1],[5,4],[6,2],[6,7]]
      ,[[6,2],[6,5],[6,7],[2,1],[2,3]],[[2,3],[2,1],[2,6],[3,0],[3,7]],[[3,7],[3,2],[3,0],[7,4],[7,6]],[[7,4],[4,0],[4,5],[7,3],[7,6]],[[7,6],[6,2],[6,5],[7,3],[7,4]]]
      let faces_perp=[[[0,1,2,3],[1,5,6,2],[2,6,7,3],[3,7,4,0],[0,1,5,4]],[[1,5,6,2],[0,1,2,3],[2,6,7,3],[5,6,7,4],[1,5,4,0]],[[0,1,5,4],[1,5,6,2],[4,5,6,7],[0,4,7,3],[0,1,2,3]],
      [[4,5,6,7],[0,1,5,4],[1,5,6,2],[2,6,7,3],[0,4,7,3]],[[0,4,7,3],[0,1,2,3],[0,1,5,4],[4,5,6,7],[3,2,6,7]],[[3,2,6,7],[0,1,2,3],[1,5,6,2],[4,5,6,7],[0,4,7,3]]]
      let k,l,s
      switch (randint(1,4)) {
        case 1 : // citer les arÃªtes parallÃ¨les Ã  une arrÃªte donnÃ©e
        [k,l,s]=[randint(0,2),randint(0,3),randint(0,1)]
          enonce+=`Citer toutes les arÃªtes parallÃ¨les Ã  [$${nom[aretes_paralleles[k][l][s]]+nom[aretes_paralleles[k][l][(s+1)%2]]}$].<br>`
        correction = `Les arÃªtes parallÃ¨les Ã  [$${nom[aretes_paralleles[k][l][s]]+nom[aretes_paralleles[k][l][(s+1)%2]]}$] sont [$${nom[aretes_paralleles[k][(l+1)%4][s]]+nom[aretes_paralleles[k][(l+1)%4][(s+1)%2]]}$], [$${nom[aretes_paralleles[k][(l+2)%4][s]]+nom[aretes_paralleles[k][(l+2)%4][(s+1)%2]]}$] et [$${nom[aretes_paralleles[k][(l+3)%4][s]]+nom[aretes_paralleles[k][(l+3)%4][(s+1)%2]]}$].<br>`
      break;
      case 2: // coter la face parallÃ¨le Ã  une face donnÃ©e
       [k,l,s]=[randint(0,2),randint(0,1),randint(0,3)]
       enonce+=`Quelle est la face parallÃ¨le Ã  $${nom[faces_paralleles[k][l][s]]+nom[faces_paralleles[k][l][(s+1)%4]]+nom[faces_paralleles[k][l][(s+2)%4]]+nom[faces_paralleles[k][l][(s+3)%4]]}$ ?<br>`
       correction = `La face parallÃ¨le Ã  $${nom[faces_paralleles[k][l][s]]+nom[faces_paralleles[k][l][(s+1)%4]]+nom[faces_paralleles[k][l][(s+2)%4]]+nom[faces_paralleles[k][l][(s+3)%4]]}$ est la face $${nom[faces_paralleles[k][(l+1)%2][s]]+nom[faces_paralleles[k][(l+1)%2][(s+1)%4]]+nom[faces_paralleles[k][(l+1)%2][(s+2)%4]]+nom[faces_paralleles[k][(l+1)%2][(s+3)%4]]}$.<br>`
      break;
      case 3: // citer les arÃªtes perpendiculaires Ã  une arÃªte donnÃ©e
        [k,l,s]=[randint(0,11),0,randint(0,1)]
        enonce+=`Quelles sont les arÃªtes peprendiculaires Ã  l'arÃªte [$${nom[aretes_perp[k][l][s]]+nom[aretes_perp[k][l][(s+1)%2]]}$] ?<br>`
        correction = `Les arÃªtes perpendiculaires Ã  l'arÃªte [$${nom[aretes_perp[k][l][s]]+nom[aretes_perp[k][l][(s+1)%2]]}$] sont [$${nom[aretes_perp[k][1][s]]+nom[aretes_perp[k][1][(s+1)%2]]}$], [$${nom[aretes_perp[k][2][s]]+nom[aretes_perp[k][2][(s+1)%2]]}$], [$${nom[aretes_perp[k][3][s]]+nom[aretes_perp[k][3][(s+1)%2]]}$] et [$${nom[aretes_perp[k][4][s]]+nom[aretes_perp[k][4][(s+1)%2]]}$].`
      break;
      case 4 : // citer les faces perpendiculaires Ã  une face donnÃ©e
        [k,l,s]=[randint(0,5),0,randint(0,3)]
        enonce+=`Quelles sont les faces perpendiculaires Ã  la face $${nom[faces_perp[k][l][s]]+nom[faces_perp[k][l][(s+1)%4]]+nom[faces_perp[k][l][(s+2)%4]]+nom[faces_perp[k][l][(s+3)%4]]}$ ?<br>` 
        correction =`Les faces perpendiculaires Ã  la face $${nom[faces_perp[k][l][s]]+nom[faces_perp[k][l][(s+1)%4]]+nom[faces_perp[k][l][(s+2)%4]]+nom[faces_perp[k][l][(s+3)%4]]}$ `
        correction +=`sont les faces $${nom[faces_perp[k][l+1][s]]+nom[faces_perp[k][l+1][(s+1)%4]]+nom[faces_perp[k][l+1][(s+2)%4]]+nom[faces_perp[k][l+1][(s+3)%4]]}$, `
        correction+=`$${nom[faces_perp[k][l+2][s]]+nom[faces_perp[k][l+2][(s+1)%4]]+nom[faces_perp[k][l+2][(s+2)%4]]+nom[faces_perp[k][l+2][(s+3)%4]]}$, `
        correction+=`$${nom[faces_perp[k][l+3][s]]+nom[faces_perp[k][l+3][(s+1)%4]]+nom[faces_perp[k][l+3][(s+2)%4]]+nom[faces_perp[k][l+3][(s+3)%4]]}$ et `
        correction+=`$${nom[faces_perp[k][l+4][s]]+nom[faces_perp[k][l+4][(s+1)%4]]+nom[faces_perp[k][l+4][(s+2)%4]]+nom[faces_perp[k][l+4][(s+3)%4]]}$.`
    
        break;
      }

        switch (liste_type_de_questions[i]%2) {
          case 1 :
      A = point(6, 0, nom[0], "left");
      B = point(11, 0, nom[1], "right");
      C = point(11,5, nom[2], "right");
      D = point(6,5, nom[3],"left");
      p=polygone(A,B,C,D)
      E = similitude(B,A,anglepersp,coeffpersp,nom[4],'left')
      E.x=Math.round(E.x)
      E.y=Math.round(E.y)
          break;
          case 0:
            A = point(5, 0, nom[0], "left");
            B = point(9+randint(1,3), 0, nom[1], "right");
            C = point(B.x,randint(3,7), nom[2], "right");
            D = point(A.x,C.y, nom[3],"left");
            p=polygone(A,B,C,D)
            E = similitude(B,A,anglepersp,coeffpersp*randint(5,12)/10,nom[4],'left')
            E.x=Math.round(E.x)
            E.y=Math.round(E.y)
            break ;
        }  
      p=polygone(A,B,C,D)
      F = translation2Points(E,A,B,nom[5],'right')
      G = translation2Points(F,B,C,nom[6],'right')
      H = translation2Points(G,C,D,nom[7],'left')
      AB=segment(A,B)
      BC=segment(B,C)
      CD=segment(C,D)
      DA=segment(D,A)
      EF=segment(E,F)
      FG=segment(F,G)
      GH=segment(G,H)
      HE=segment(H,E)
      AE=segment(A,E)
      BF=segment(B,F)
      CG=segment(C,G)
      DH=segment(D,H)
      AB.epaisseur=2
      BC.epaisseur=2
      CD.epaisseur=2
      DA.epaisseur=2
      EF.epaisseur=2
      FG.epaisseur=2
      GH.epaisseur=2
      HE.epaisseur=2
      AE.epaisseur=2
      BF.epaisseur=2
      CG.epaisseur=2
      DH.epaisseur=2
      AB.color='black'
      BC.color='black'
      CD.color='black'
      DA.color='black'
      EF.color='black'
      FG.color='black'
      GH.color='black'
      HE.color='black'
      AE.color='black'
      BF.color='black'
      CG.color='black'
      DH.color='black'
      if (G.y<C.y&&G.x<C.x) {
        CG.pointilles=true
        CG.color='gray'
        CG.opacite=0.7
        GH.pointilles=true
        GH.color='gray'
        GH.opacite=0.7
        FG.pointilles=true
        FG.color='gray'
        FG.opacite=0.7
      }
      else if (E.y>A.y&&E.x>A.x) {
        AE.pointilles=true
        EF.pointilles=true
        HE.pointilles=true
        AE.color='gray'
        EF.color='gray'
        HE.color='gray'
        AE.opacite=0.7
        EF.opacite=0.7
        HE.opacite=0.7
      }
      else if (F.x<B.x&&F.y>B.y) {
        BF.pointilles=true
        FG.pointilles=true
        EF.pointilles=true
        BF.color='gray'
        FG.color='gray'
        EF.color='gray'
        BF.opacite=0.7
        FG.opacite=0.7
        EF.opacite=0.7
      }
      else if (H.x>D.x&&H.y<D.y) {
        DH.pointilles=true
        GH.pointilles=true
        HE.pointilles=true
        DH.color='gray'
        GH.color='gray'
        HE.color='gray'
        DH.opacite=0.7
        GH.opacite=0.7
        HE.opacite=0.7
      }
      Xmin = Math.min(A.x,E.x)-1;
      Ymin = Math.min(A.y,E.y)-1;
      Xmax = Math.max(B.x,F.x)+2;
      Ymax = Math.max(D.y,H.y)+1;
      ppc = 20;

      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
        sc=0.8
      }
      else {
        carreaux = "";
        sc=0.5
      }
      objets_enonce.push(AB,BC,CD,DA,EF,FG,GH,HE,AE,BF,CG,DH,labelPoint(A,B,C,D,E,F,G,H),p,
        g,
        carreaux
      );
     
    let  params = {
      xmin: Xmin,
      ymin: Ymin,
      xmax: Xmax,
      ymax: Ymax,
      pixelsParCm: ppc,
      scale: sc,
    }
  
   
        enonce += mathalea2d(params, objets_enonce);
      if (liste_type_de_questions[i]==1) {
        codesseg=[codeSegments('||','green',[A,B,C,D,A,E,F,G,H,E]),codeSegments('||','green',B,F,C,G,D,H)]
        AB.color='green'
        BC.color='green'
        CD.color='green'
        DA.color='green'
        EF.color='green'
        FG.color='green'
        GH.color='green'
        HE.color='green'
        AE.color='green'
        BF.color='green'
        CG.color='green'
        DH.color='green'
      }
      else {
        codesseg=[codeSegments('||','green',A,B,C,D,E,F,G,H),codeSegments('O','red',A,E,B,F,C,G,D,H),codeSegments('Ã','blue',D,A,B,C,F,G,H,E)]
        AB.color='green'
        BC.color='blue'
        CD.color='green'
        DA.color='blue'
        EF.color='green'
        FG.color='blue'
        GH.color='green'
        HE.color='blue'
        AE.color='red'
        BF.color='red'
        CG.color='red'
        DH.color='red'
      }
    objets_correction.push(AB,BC,CD,DA,EF,FG,GH,HE,AE,BF,CG,DH,labelPoint(A,B,C,D,E,F,G,H),
        g,
        carreaux
      );
      if (liste_type_de_questions[i]<3) correction += mathalea2d(params, objets_correction,codesseg);
    
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(enonce + "<br>");
        this.liste_corrections.push(correction + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type de solides', 3, `1 : Cubes\n 2 : PavÃ©s droits\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/** 
 * * Calculer le produit de deux dÃ©cimaux Ã  partir d'un produit de deux entiers
 * * 6C30-2
 * @author SÃ©bastien Lozano
 */

function Produit_de_decimaux_a_partir_d_un_produit_connu(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 3;
	} else {
		this.nb_questions = 3;
	};	

	this.titre = "Calculer le produit de deux dÃ©cimaux connaissant le produit de deux entiers";	
	this.consigne = ``;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2];			
		} else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0,1,2]);			
      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {

      // pour les situations, autant de situations que de cas dans le switch !
			let situations = [
        {//case 0 --> (d1u1xp1)xd2u2
          d1:randint(1,9),
          u1:randint(1,9),
          d2:randint(1,9),
          u2:randint(1,9),
          p1:randint(-3,3,[0]),
          p2:randint(-3,3,[0]),
				},	
			];      
			let enonces = [];
			//for (let k=0;k<3;k++) {
				enonces.push({
          enonce:`
            Sachant que $${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(10**situations[0].p1)))}\\times ${calcul(situations[0].d2*10+situations[0].u2)}$
					`,
					question:``,
					correction:`
					$${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(10**situations[0].p1)))}\\times ${calcul(situations[0].d2*10+situations[0].u2)} = ${calcul(situations[0].d1*10+situations[0].u1)}\\times ${tex_nombrec(10**situations[0].p1)} \\times ${calcul(situations[0].d2*10+situations[0].u2)} = ${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)}\\times ${tex_nombrec(10**situations[0].p1)} =  ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}\\times ${tex_nombrec(10**situations[0].p1)} = ${tex_nombrec(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2))*calcul(10**situations[0].p1))}$
					`
        });
        enonces.push({
          enonce:`
            Sachant que $${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)))}\\times ${tex_nombre(calcul((situations[0].d2*10+situations[0].u2)*(10**situations[0].p2)))}$
					`,
					question:``,
					correction:`
					$${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)))}\\times ${tex_nombre(calcul((situations[0].d2*10+situations[0].u2)*(10**situations[0].p2)))} = ${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)}\\times ${tex_nombrec(10**situations[0].p2)} = ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}\\times ${tex_nombrec(10**situations[0].p2)} = ${tex_nombrec(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2))*calcul(10**situations[0].p2))}$
					`
				});
				enonces.push({
          enonce:`
            Sachant que $${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(10**situations[0].p1)))}\\times ${tex_nombre(calcul((situations[0].d2*10+situations[0].u2)*(10**situations[0].p2)))}$
					`,
					question:``,
					correction:`
					$${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(10**situations[0].p1)))}\\times ${tex_nombre(calcul((situations[0].d2*10+situations[0].u2)*(10**situations[0].p2)))} = ${calcul(situations[0].d1*10+situations[0].u1)}\\times ${tex_nombrec(10**situations[0].p1)} \\times ${calcul(situations[0].d2*10+situations[0].u2)}\\times ${tex_nombrec(10**situations[0].p2)} = ${calcul(situations[0].d1*10+situations[0].u1)}\\times ${calcul(situations[0].d2*10+situations[0].u2)}\\times ${tex_nombrec(10**situations[0].p1)}\\times ${tex_nombrec(10**situations[0].p2)} = ${tex_nombre(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2)))}\\times ${tex_nombrec(10**situations[0].p1)}\\times ${tex_nombrec(10**situations[0].p2)} = ${tex_nombrec(calcul((situations[0].d1*10+situations[0].u1)*(situations[0].d2*10+situations[0].u2))*calcul(10**situations[0].p1)*calcul(10**situations[0].p2))}$
					`
				});

			//};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
     			break;	
     		case 1 : 
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;	
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
     		case 2 : 
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;	
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;							
			};						
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
};


/** 
 * * Encadrer_un_decimal_par_deux_entiers_consecutifs
 * * 6N31-1
 * @author SÃ©bastien Lozano
 */

function Encadrer_un_decimal_par_deux_entiers_consecutifs(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 3;
	} else {
		this.nb_questions = 3;
	};	

	this.titre = "Encadrer un dÃ©cimal par deux entiers consÃ©cutifs";	
	this.consigne = `Encadrer chaque nombre proposÃ© par deux nombres entiers consÃ©cutifs.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2];			
		} else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0,1,2]);			
      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      let m=randint(1,9),
      c=randint(1,9),
      d=randint(1,9),
      u=randint(1,9),
      di=randint(1,9),
      ci=randint(1,9),
      mi=randint(1,9);

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
        {//case 0 -->
				},		
			];

			let enonces = [];
			//for (let k=0;k<3;k++) {
				enonces.push({
					enonce:`
          $\\ldots < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1 + ci*0.01 + mi*0.001))} < \\ldots$          
					`,
					question:``,
					correction:`
					$${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1))} < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1 + ci*0.01 + mi*0.001))} < ${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1 + 1))}$					`
				});
				enonces.push({
					enonce:`
          $\\ldots < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1 + ci*0.01))} < \\ldots$          
					`,
					question:``,
					correction:`
					$${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1))} < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1 + ci*0.01))} < ${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1 + 1))}$					`
				});
				enonces.push({
					enonce:`
          $\\ldots < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1))} < \\ldots$          
					`,
					question:``,
					correction:`
					$${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1))} < ${tex_nombre(m*1000 + c*100 + d*10 + u*1 + calcul(di*0.1))} < ${mise_en_evidence(tex_nombre(m*1000 + c*100 + d*10 + u*1 + 1))}$					`
				});

        //};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          break;	
        case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          break;
        case 2 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
        	break;				
			};						
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
};

/** 
 * * Ordre de grandeur d'une opÃ©ration entre dÃ©cimaux
 * * 6N31-2
 * @author SÃ©bastien Lozano
 */

function Ordre_de_grandeur_operations_decimaux(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "Ordre de grandeur et opÃ©rations sur les dÃ©cimaux";	
	this.consigne = `Pour chaque opÃ©ration proposÃ©e dans la premiÃ¨re colonne, cocher la case correspondant Ã  l'ordre de grandeur du rÃ©sultat.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0]);
      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {

      let ligne_entete = ['\\text{OpÃ©ration}',`\\phantom{000}`+tex_nombre('1')+`\\phantom{000}`,`\\phantom{00}`+tex_nombre('10')+`\\phantom{00}`,`\\phantom{00}`+tex_nombre('100')+`\\phantom{00}`,`\\phantom{0}`+tex_nombre('1000')+`\\phantom{0}`,tex_nombre('10000'),tex_nombre('100000')];
      let ligne_entete_corr = ['\\text{OpÃ©ration}',`\\phantom{000}`+tex_nombre('1')+`\\phantom{000}`,`\\phantom{00}`+tex_nombre('10')+`\\phantom{00}`,`\\phantom{00}`+tex_nombre('100')+`\\phantom{00}`,`\\phantom{0}`+tex_nombre('1000')+`\\phantom{0}`,tex_nombre('10000'),tex_nombre('100000')];

      let m=randint(1,9,[4,5,6]),
      c=randint(1,9),
      c1=randint(1,9),
      c2=randint(1,9),
      c3=randint(1,9,[4,5,6]),
      c4=randint(1,4),
      d=randint(1,9),
      d1=randint(1,9),
      d2=randint(1,9),
      d3=randint(1,9),
      u=randint(1,9),
      u1=randint(1,9),
      u2=randint(1,9),
      u3=randint(1,9);

      let cbis,d1bis;
      do {
        cbis = randint(2,9);
        d1bis = randint(2,9);
      } while (cbis*d1bis>3 && cbis*d1bis<7);

      let div_aleatoire_ope_3 = choice([10,100]);
      let div_aleatoire_ope_5 = choice([1,10,100,1000]);
      let mult_aleatoire_ope_4 = choice([0.1,0.01,0.001]);

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 1
      function myOrdreOpe1(c,d) {
        if (c*d>=60) {
          return ['','','','','',mise_en_evidence(`X`)]; 
        } else {
          return ['','','','',mise_en_evidence(`X`),'']; 
        };
      };
      
      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 2
      function myOrdreOpe2(c1,c2) {
        if (c1+c2/10>=600) {
          return ['','','',mise_en_evidence(`X`),'','']; 
        } else {
          return ['','',mise_en_evidence(`X`),'','','']; 
        };
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 3
      function myOrdreOpe3(n) {
        if (n>=7) {
          return ['','','',mise_en_evidence(`X`),'','']; 
        } else {
          return ['','',mise_en_evidence(`X`),'','','']; 
        };
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 4
      function myOrdreOpe4(d,n) {
        let sortie;
        switch (d) {
          case 0.1:
            if (n>=7) {
              sortie = ['','','',mise_en_evidence(`X`),'',''];
            } else {
              sortie = ['','',mise_en_evidence(`X`),'','',''];
            };            
            break;
          case 0.01: 
            if (n>=7) {
              sortie = ['','',mise_en_evidence(`X`),'','',''];              
            } else {
              sortie = ['',mise_en_evidence(`X`),'','','',''];
            };            
            break;
          case 0.001: 
            if (n>=7) {
              sortie = ['',mise_en_evidence(`X`),'','','',''];
            } else {
              sortie = [mise_en_evidence(`X`),'','','','',''];
            };       
            break;            
        }
        return sortie;
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 5
      function myOrdreOpe5(mult) {
        let sortie;
        switch (mult) {
          case 1:
            return sortie = ['','','',mise_en_evidence(`X`),'','']; 
            break;
          case 10:
            return sortie = ['','',mise_en_evidence(`X`),'','','']; 
            break;
          case 100:
            return sortie = ['',mise_en_evidence(`X`),'','','','']; 
            break;
          case 1000:
            return sortie = [mise_en_evidence(`X`),'','','','','']; 
            break;        
        };
        return sortie;
      };

      let situations = [
        {
          operation:`${cbis*100+d*10+u*1}\\times ${d1bis*10+u1*1}`,
          operation_corr:`${cbis*100+d*10+u*1}\\times ${d1bis*10+u1*1} \\simeq  ${(cbis*100)}\\times ${(d1bis*10)} \\text{ soit } ${tex_nombre((cbis*100)*(d1bis*10))}`,
          operation_coche:myOrdreOpe1(cbis,d1bis),
        },
        {
          operation:`${tex_nombre((c2*100+d2*10+u1*1)/10)}+${c1*100+d1*10+u1*1}`,
          operation_corr:`${tex_nombre((c2*100+d2*10+u1*1)/10)}+${c1*100+d1*10+u1*1} \\simeq ${c2*100/10}+${c1*100} \\text{ soit } ${c2*100/10 + c1*100}`,
          operation_coche:myOrdreOpe2(c1*100,c2*100),
        },
        {
          operation:`${c3*100+d3*10+u3*1}-${tex_nombre((c2*100+d2*10+u2*1)/div_aleatoire_ope_3)}`,
          operation_corr:`${c3*100+d3*10+u3*1}-${tex_nombre((c2*100+d2*10+u2*1)/div_aleatoire_ope_3)} \\simeq ${c3*100+d3*10}-${tex_nombre((c2*100)/div_aleatoire_ope_3)} \\text{ soit } ${c3*100+d3*10-(c2*100)/div_aleatoire_ope_3}`,
          operation_coche:myOrdreOpe3(c3),
        },
        {
          operation:`${tex_nombre(m*1000+c3*100+d2*10+u1*1)}\\times ${tex_nombre(mult_aleatoire_ope_4)}`,
          operation_corr:`${tex_nombre(m*1000+c3*100+d2*10+u1*1)}\\times ${tex_nombre(mult_aleatoire_ope_4)} \\simeq ${tex_nombre(m*1000)}\\times ${tex_nombre(mult_aleatoire_ope_4)} \\text{ soit } ${tex_nombre(m*1000*mult_aleatoire_ope_4)}`,
          operation_coche:myOrdreOpe4(mult_aleatoire_ope_4,m),
        },
        {
          operation:`${tex_nombre((m*1000+c4*100+d3*10+u*1)/div_aleatoire_ope_5)}\\div ${m}`,
          operation_corr:`${tex_nombre((m*1000+c4*100+d3*10+u*1)/div_aleatoire_ope_5)}\\div ${m} \\simeq ${tex_nombre((m*1000)/div_aleatoire_ope_5)}\\div ${m} \\text{ soit } ${tex_nombre((m*1000)/div_aleatoire_ope_5/m)}`,
          operation_coche:myOrdreOpe5(div_aleatoire_ope_5),
        },

      ];

      situations = shuffle(situations);
            
			let enonces = [];
			for (let k=0;k<1;k++) {
				enonces.push({
          enonce:`
          ${tab_C_L(ligne_entete,[situations[0].operation,situations[1].operation,situations[2].operation,situations[3].operation,situations[4].operation],
          [            
            '','','','','','',
            '','','','','','',
            '','','','','','',
            '','','','','','',
            '','','','','','',
          ]
          )}
          `,
          question:``,
          correction:`
          CommenÃ§ons par calculer un ordre de grandeur du rÃ©sultat de chaque opÃ©ration dans la premiÃ¨re colonne du tableau.
          <br>
          ${tab_C_L(ligne_entete_corr,[situations[0].operation_corr,situations[1].operation_corr,situations[2].operation_corr,situations[3].operation_corr,situations[4].operation_corr,],
          [            
            situations[0].operation_coche[0],situations[0].operation_coche[1],situations[0].operation_coche[2],situations[0].operation_coche[3],situations[0].operation_coche[4],situations[0].operation_coche[5],
            situations[1].operation_coche[0],situations[1].operation_coche[1],situations[1].operation_coche[2],situations[1].operation_coche[3],situations[1].operation_coche[4],situations[1].operation_coche[5],
            situations[2].operation_coche[0],situations[2].operation_coche[1],situations[2].operation_coche[2],situations[2].operation_coche[3],situations[2].operation_coche[4],situations[2].operation_coche[5],
            situations[3].operation_coche[0],situations[3].operation_coche[1],situations[3].operation_coche[2],situations[3].operation_coche[3],situations[3].operation_coche[4],situations[3].operation_coche[5],
            situations[4].operation_coche[0],situations[4].operation_coche[1],situations[4].operation_coche[2],situations[4].operation_coche[3],situations[4].operation_coche[4],situations[4].operation_coche[5],
          ]
          )}				
          `
          });
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
};

/** 
 * * Donner le chiffre des ... le nombre de ...
 * * 6N10-3
 * @author SÃ©bastien Lozano
 */

function chiffre_nombre_de(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 6;
	} else {
		this.nb_questions = 6;
	};	

	this.titre = "Chiffre des ... Nombre de ...";	
	this.consigne = ``;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2,3,4,5];			
		} else {
          //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
          type_de_questions_disponibles = shuffle([0,1,2,3,4,5]);			
      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      let u,d,c,mu,md,mc,mmu,mmd,mmc;
      mmc = randint(0,9,[0]);
      mmd = randint(0,9,[mmc]);
      mmu = randint(0,9,[mmc,mmd]);
      mc = randint(0,9,[mmu,mmd,mmc]);
      md = randint(0,9,[mmu,mmd,mmc,mc]);
      mu = randint(0,9,[mmu,mmd,mmc,mc,md]);
      c = randint(0,9,[mmu,mmd,mmc,mu,md,mc]);
      d = randint(0,9,[mmu,mmd,mmc,mu,md,mc,c]);
      u = randint(0,9,[mmu,mmd,mmc,mu,md,mc,c,d]);
      //let nb = randint(100000000,999999999);
      //let nb_str = nb.toString();
      let nb_str = mmc.toString()+mmd.toString()+mmu.toString()+mc.toString()+md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
      let nb = Number(nb_str);
      let tranches = ['unites','milliers','millions'];
      let cdu = ['unites','dizaines','centaines'];
      let chiffre_nombre = {
        chiffre:{
          unites:{
            unites:{determinant:`des`,cdu:['unitÃ©s',''],rangs:[8]},
            dizaines:{determinant:`des`,cdu:['dizaines',''],rangs:[7]},
            centaines:{determinant:`des`,cdu:['centaines',''],rangs:[6]},
          },
          milliers:{
            unites:{determinant:`des`,cdu:['unitÃ©s de milliers',''],rangs:[5]},
            dizaines:{determinant:`des`,cdu:['dizaines de milliers',''],rangs:[4]},
            centaines:{determinant:`des`,cdu:['centaines de milliers',''],rangs:[3]},
          },
          millions:{
            unites:{determinant:`des`,cdu:['unitÃ©s de millions',''],rangs:[2]},
            dizaines:{determinant:`des`,cdu:['dizaines de millions',''],rangs:[1]},
            centaines:{determinant:`des`,cdu:['centaines de millions',''],rangs:[0]},
          },  
        },
        nombre:{
          unites:{
            unites:{determinant:`d'`,cdu:['unitÃ©s',1],rangs:[0,1,2,3,4,5,6,7,8]},
            dizaines:{determinant:`de`,cdu:['dizaines',10],rangs:[0,1,2,3,4,5,6,7]},
            centaines:{determinant:`de`,cdu:['centaines',100],rangs:[0,1,2,3,4,5,6]},
          },
          milliers:{
            unites:{determinant:`d'`,cdu:['unitÃ©s de milliers',1000],rangs:[0,1,2,3,4,5]},
            dizaines:{determinant:`de`,cdu:['dizaines de milliers',10000],rangs:[0,1,2,3,4]},
            centaines:{determinant:`de`,cdu:['centaines de milliers',100000],rangs:[0,1,2,3]},
          },
          millions:{
            unites:{determinant:`d'`,cdu:['unitÃ©s de millions',1000000],rangs:[0,1,2]},
            dizaines:{determinant:`de`,cdu:['dizaines de millions',10000000],rangs:[0,1]},
            centaines:{determinant:`de`,cdu:['centaines de millions',100000000],rangs:[0]},
          },
        },
      };

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
        {//case 0 --> chiffre des
          type:'chiffre',
          tranche:'unites',
          cdu:choice(cdu),         
				},
        {//case 1 --> chiffre des
          type:'chiffre',
          tranche:'milliers',
          cdu:choice(cdu),              
				},
        {//case 2 --> chiffre des
          type:'chiffre',
          tranche:'millions',
          cdu:choice(cdu),                  
				},
        {//case 3 --> nombre de
          type:'nombre',
          tranche:'unites',
          cdu:choice(cdu),         
				},
        {//case 4 --> nombre de
          type:'nombre',
          tranche:'milliers',
          cdu:choice(cdu),         
        },
        {//case 5 --> nombre de
          type:'nombre',
          tranche:'millions',
          cdu:choice(cdu),         
        },		
      ];
      
      //une fonction pour la correction selon le type de question
      function chiffre_nombre_corr(type,str,rang) {
        let sortie;
        if (type == 'chiffre') {
          sortie = str.split('')[rang[0]];
        };
        if (type == 'nombre') {
          sortie=str.split('')[rang[0]];
          for (let k=1; k<rang.length;k++) {
            sortie+=str.split('')[rang[k]]
          };
        };
        return sortie;
      };

      // une fonction pour la justification supplÃ©mentaire dans le cas nombre de ...
      function nombre_de_justif(type,str,rang,cdu_num) {
        let sortie;
        if (type == 'chiffre') {
          sortie = '';
        };
        if (type == 'nombre') {
          let nb_de = str.split('')[rang[0]];
          for (let k=1; k<rang.length;k++) {
            nb_de+=str.split('')[rang[k]]
          };
          let j = rang[rang.length-1];
          j++;
          let nb_de_reste = '';
          while (j != 9) {            
            nb_de_reste += str.split('')[j];
            j++;
          };
          sortie = `comme $${tex_nombre(str)} = ${tex_nombre(nb_de)}\\times ${tex_nombre(cdu_num)}+${tex_nombre(nb_de_reste)}$ alors `;
        };
        return sortie;
      };

			let enonces = [];
			for (let k=0;k<situations.length;k++) {
				enonces.push({
          enonce:`
          Dans $${tex_nombre(nb)}$, quel est le ${situations[k].type} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].determinant} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[0]} ?					
					`,
					question:``,
          correction:`
          Dans $${tex_nombre(nb)}$,           
          ${nombre_de_justif(situations[k].type,nb_str,chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].rangs,chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[1])}          
          le ${situations[k].type} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].determinant}  ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[0]} est 
          $${mise_en_evidence(tex_nombre(chiffre_nombre_corr(situations[k].type,nb_str,chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].rangs)))}$					
					`
				});
			};
            
      // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	
     		case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          			break;
     		case 2 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
          			break;				
     		case 3 : 
					texte = `${enonces[3].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[3].correction}`;
					};
					break;				
     		case 4 : 
					texte = `${enonces[4].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[4].correction}`;
					};
          break;	
        case 5 : 
					texte = `${enonces[5].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[5].correction}`;
					};
					break;			
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/** 
* * Encadrer un nombre entier par deux entier consÃ©cutifs
* * 6N11-3
* @author SÃ©bastien Lozano
*/

function Encadrer_un_entier_par_deux_entiers_consecutifs(){
  'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 6;
	} else {
		this.nb_questions = 3;
	};	

  this.titre = "Encadrer un entier entre deux entiers consÃ©cutifs";	
  this.consigne = ``;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2,3,4,5];			
		} else {
      type_de_questions_disponibles = shuffle([choice([0,1]),choice([2,3]),choice([4,5])]);      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
        // on dÃ©clare des variables pour avoir des nombres entre 1000 et 9999 puis 10000 et 99999 etc ...
        let m,dm,cm,mi,dmi,cmi;
        //pour la prÃ©cision d'encadrement
        let precision;

        //selon la precision on veut certains chiffres plus souvant que d'autres ...
        function myNombres(nb_chiffres) {
          let sortie = '';
          // on fabrique le nombre Ã  partir de ses chiffres et on veut des cas limites
          let u,d,c,mu,md,mc,mmu,mmd,mmc;
          let N = choice([[randint(0,9,[0]),0,0,0,0,0,0,0,0],[randint(0,9,[0]),9,9,9,9,9,9,9,9],[randint(0,9,[0]),randint(0,9),randint(0,9),randint(0,9),randint(0,9),randint(0,9),randint(0,9),randint(0,9),randint(0,9)]]);
          mmc = N[0];
          mmd = N[1];
          mmu = N[2];
          mc = N[3];
          md = N[4];
          mu = N[5];
          c = N[6];
          d = N[7];
          u = N[8];
          switch (nb_chiffres) {
            case 4:
              mu = randint(0,9,[0]);
              sortie = mu.toString()+c.toString()+d.toString()+u.toString();
              break;
            case 5:
              md = randint(0,9,[0]);
              sortie = md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
              break;
            case 6:
              mc = randint(0,9,[0]);
              sortie = mc.toString()+md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
              break;
            case 7:
              mmu = randint(0,9,[0]);
              sortie = mmu.toString()+mc.toString()+md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
              break;
            case 8:
              mmd = randint(0,9,[0]);
              sortie = mmd.toString()+mmu.toString()+mc.toString()+md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
              break;
            case 9:
              mmc = randint(0,9,[0]);
              sortie = mmc.toString()+mmd.toString()+mmu.toString()+mc.toString()+md.toString()+mu.toString()+c.toString()+d.toString()+u.toString();
              break;
                
          };
          return sortie;
        };

        this.sup = Number(this.sup); // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !
        switch (this.sup) {
          case 1:
            this.consigne = `ComplÃ©ter avec le nombre entier qui prÃ©cÃ¨de et le nombre entier qui suit.`;
            precision=1;
            break;
          case 2:
            this.consigne = `ComplÃ©ter avec le multiple de 10 qui prÃ©cÃ¨de et le multiple de 10 qui suit.`;
            precision=10;
            break;
          case 3:
            this.consigne = `ComplÃ©ter avec le multiple de 100 qui prÃ©cÃ¨de et le multiple de 100 qui suit.`;
            precision=100;
            break;
        };

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
        {//case 0 -->
          nombre: Number(myNombres(4)),
        },
        {//case 1 -->
          nombre: Number(myNombres(5)),
        },
        {//case 2 -->
          nombre: Number(myNombres(6)),
        },
        {//case 3 -->
          nombre: Number(myNombres(7)),
        },
        {//case 4 -->
          nombre: Number(myNombres(8)),
        },
        {//case 5 -->
          nombre: Number(myNombres(9)),
        },
      ];
      
      // une fonction pour les correction Ã  la precision prÃ¨s
      function encadrement_corr(nb,precision) {
          if (precision == 1) {
            return `$${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision-precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision+precision))}$`;
          } else if(precision == 10 || precision == 100) {
            if (nb%precision == 0) {
              return `$${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision-precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision+precision))}$`;
            } else {
              return `$${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb/precision)*precision+precision))}$`;
            };
          };       
      };

      let enonces = [];
      for (let k=0;k<situations.length;k++) {
        enonces.push({
          enonce:`
          $\\ldots < ${tex_nombre(situations[k].nombre)} < \\ldots$		
          `,
          question:``,
          correction:`
          ${encadrement_corr(situations[k].nombre,precision)}
          `
        });
      };
          
      // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          break;	
        case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          break;
        case 2 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
          break;	
        case 3 : 
					texte = `${enonces[3].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[3].correction}`;
					};
          break;	
        case 4 : 
					texte = `${enonces[4].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[4].correction}`;
					};
          break;
        case 5 : 
					texte = `${enonces[5].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[5].correction}`;
					};
        	break;			
			};						
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : Encadrer entre deux entiers consÃ©cutifs\n2 : Encadrer entre deux multiples consÃ©cutifs de dix\n3 : Encadrer entre deux multiples consÃ©cutifs de cent"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	

};

/** 
* * Ranger une liste de nombres dans l'odre croissant ou dÃ©croissant
* * 6N11-4
* @author SÃ©bastien Lozano
*/

function Ranger_ordre_croissant_decroissant(){
 'use strict';
 Exercice.call(this); // HÃ©ritage de la classe Exercice()
 this.beta = false;	
 this.sup=1;
 if (this.beta) {
   this.nb_questions = 2;
 } else {
   this.nb_questions = 2;
 };	

 this.titre = "Ranger une liste de nombres entiers dans l'ordre croissant ou dÃ©croissant";	
 //this.consigne = `Classer les nombres suivants dans l'ordre indiquÃ©.`;	
 
 this.nb_cols = 1;
 this.nb_cols_corr = 1;
 //this.nb_questions_modifiable = false;
 sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
 sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

 let type_de_questions_disponibles;	

 this.nouvelle_version = function(numero_de_l_exercice){
   if (this.beta) {
     type_de_questions_disponibles = [0,1];			
   } else {
         //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
         type_de_questions_disponibles = [0,1];			
   };

   this.liste_questions = []; // Liste de questions
   this.liste_corrections = []; // Liste de questions corrigÃ©es
   
   //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
   let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
   
   for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
     // les chiffres
     let c1 = randint(1,9);
     let c2 = randint(1,9,[c1]);
     let c3 = randint(1,9,[c1,c2]);
     let c4 = randint(1,9,[c1,c2,c3]);
     let c5 = randint(1,9,[c1,c2,c3,c4]);

     // pour les situations, autant de situations que de cas dans le switch !
     let situations = [
       {//case 0 -->
        ordre:'croissant',
        symbole: `$${mise_en_evidence('<')}$`,
        n1: Number(c1.toString()+c2.toString()+c3.toString()+c4.toString()+c5.toString()),
        n2: Number(c1.toString()+c3.toString()+c2.toString()+c4.toString()+c5.toString()),
        n3: Number(c1.toString()+c2.toString()+c5.toString()+c4.toString()+c3.toString()),
        n4: Number(c1.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
        n5: Number('1'.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
        n6: Number(c1.toString()+c2.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
       },
       {//case 1 -->
        ordre:'dÃ©croissant',
        symbole: `$${mise_en_evidence('>')}$`,
        n1: Number(c1.toString()+c2.toString()+c3.toString()+c4.toString()+c5.toString()),
        n2: Number(c1.toString()+c3.toString()+c2.toString()+c4.toString()+c5.toString()),
        n3: Number(c1.toString()+c2.toString()+c5.toString()+c4.toString()+c3.toString()),
        n4: Number(c1.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
        n5: Number('1'.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
        n6: Number(c1.toString()+c2.toString()+randint(0,9).toString()+randint(0,9).toString()+randint(0,9).toString()),
       },   
     ];

     // une fonction pour gÃ©rer l'ordre
     function myOrdre(ordre,tab) {
      tab.sort((a,b) => a - b);          
      switch (ordre) {
        case 'croissant':
          return tab;
        case 'dÃ©croissant':
          return tab.reverse();          
      };
     };

     let enonces = [];
     let nombres = [];
     let nombres_ranges = [];
     for (let k=0;k<situations.length;k++) {
      nombres = shuffle([situations[k].n1,situations[k].n2,situations[k].n3,situations[k].n4,situations[k].n5,situations[k].n6]);
      nombres_ranges = [];
      nombres.forEach(element => {
        nombres_ranges.push(element);        
      });           
      myOrdre(situations[k].ordre,nombres_ranges);         
      enonces.push({
        enonce:`Classer les nombres suivants dans l'ordre ${situations[k].ordre} :<br>
        $${tex_nombre(nombres[0])}$   ;   $${tex_nombre(nombres[1])}$   ;   $${tex_nombre(nombres[2])}$   ;   $${tex_nombre(nombres[3])}$   ;   $${tex_nombre(nombres[4])}$   ;   $${tex_nombre(nombres[5])}$          
        `,
        question:``,
        correction:`Les nombres rangÃ©s dans l'ordre ${texte_en_couleur_et_gras(situations[k].ordre)} :<br>
        $${tex_nombre(nombres_ranges[0])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[1])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[2])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[3])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[4])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[5])}$
        `
      });
     };
           
           // autant de case que d'elements dans le tableau des situations
     switch (liste_type_de_questions[i]){
      case 0 : 
        texte = `${enonces[0].enonce}`;
        if (this.beta) {
          texte += `<br>`;
          texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
          texte += `             `
          texte_corr = ``;	
        } else {
          texte_corr = `${enonces[0].correction}`;
        };
        break;	
      case 1 : 
        texte = `${enonces[1].enonce}`;
        if (this.beta) {
          texte += `<br>`;
          texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
          texte_corr = ``;	
        } else {
          texte_corr = `${enonces[1].correction}`;
        };
        break;			
     };			
     
     if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
       this.liste_questions.push(texte);
       this.liste_corrections.push(texte_corr);
       i++;
     }
     cpt++;	
   }
   liste_de_question_to_contenu(this);
 }
 //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
 //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};


/** 
 * * Exo test pour quand j'en ai besoin
 * * pas de numÃ©ro
 * * Tests
 * @author SÃ©bastien Lozano
 */

function Tests_du_Seb(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = true;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 2;
	} else {
		this.nb_questions = 2;
	};	

	this.titre = "Exo test pour quand j'en ai besoin";	
	this.consigne = `Consigne `;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1];			
		} else {
          //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
          type_de_questions_disponibles = [0,1];	
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
				{//case 0 -->
				},
				{//case 1 -->
				},
			];

			let enonces = [];
			for (let k=0;k<situations.length;k++) {
				enonces.push({
					enonce:`
          Type ${k}<br>	
          ${JSON.stringify(decomp_fact_prem_array(238))}<br>			
          ${typeof decomp_fact_prem_array(238)}<br>
          ${JSON.stringify(obtenir_liste_facteurs_premiers(238))}<br>
          ${typeof obtenir_liste_facteurs_premiers(238)}<br>
					`,
					question:``,
					correction:`
					Correction type ${k}
					`
				});
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          break;	
        case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          break;
			
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/** 
 * * Exprimer un rapport de longueurs sur un segment
 * * 6N22-1
 * @author SÃ©bastien Lozano
 */

function Rapports_sur_un_segment(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = true;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 3;
	} else {
		this.nb_questions = 3;
	};	

	this.titre = "Titre dans la liste de choix des exos";	
	this.consigne = `Dans chaque cas, sachant que les graduations sont rÃ©guliÃ¨res, exprimer le rapport de longueurs $\\dfrac{AC}{AB}$.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
     		 type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      let params = {
        xmin: -0.4,
        ymin: -1.5,
        xmax: 50,
        ymax: 1,
        pixelsParCm: 20,
        scale: 1,
      }
      let fig = [];
      // mathalea2d(
      //   params,
      //   fraction(8,9).representation(0,0,15,0,'segment','red','A','B',1,'C'),
      //   fraction(1,9).representation(0,-1.5,15,0,'segment','blue','A','B',1,'C')
      // )
      let m = randint(1,5);
      let n = randint(1,5,m);
      // let coeff = (m,n) => {
      //   if (m>n) {
      //     return m/n
      //   } else {
      //     return m/n
      //   }
      // };

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
        {//case 0 -->
          fig:mathalea2d(
              params,
              fraction(m,n).representation(0,0,5,0,'segment','','A','B',1,'C'),             
            ),
          m:m,
          n:n,
          fig_corr1:mathalea2d(
            params,
            fraction(m,n).representation(0,0,5,0,'segment','red','A','B',1,'C'),             
          ),
          fig_corr2:mathalea2d(
            params,
            fraction(n,m).representation(0,0,(m/n)*5,0,'segment','blue','A','C',1,'B'),             
          )
				},
		
			];

			let enonces = [];
			for (let k=0;k<situations.length;k++) {
				enonces.push({
					enonce:`
          Type ${k}
          <br>
          ${situations[k].fig}
          			
					`,
					question:``,
					correction:`
          Correction type ${k}
          <br>
          m : ${situations[k].m}
          <br>
          n : ${situations[k].n}
          <br>
          ${situations[k].fig_corr1}
          <br>
          ${situations[k].fig_corr2}


					`
				});
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	
        		case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          			break;
        		case 2 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
          			break;				
        		case 3 : 
					texte = `${enonces[3].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[3].correction}`;
					};
					break;				
         		case 4 : 
					texte = `${enonces[4].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[4].correction}`;
					};
					break;				
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/**
 * @Auteur RÃ©mi Angot
 */
function LaTeX_static() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Fichier statique";
  this.pas_de_version_HMTL = false;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "Nom du fichier";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_texte = [
    "url du fichier",
    "nom du fichier sans l'extension",
  ]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  //this.besoin_formulaire2_texte = ['Code LaTeX correction','Par exemple : \\input{mon_fichier_corr}'];

  this.nouvelle_version = function (numero_de_l_exercice) {
    //this.contenu_correction = '%Â£tex/probleme_altitude_corrÂ£'
    //this.contenu = '%Â£tex/probleme_altitudeÂ£'
    this.contenu = "%Â£" + this.sup + "Â£";
    this.contenu_correction = "%Â£" + this.sup + "_corrÂ£";
    //liste_des_exercices_statiques.push(this.sup)
  };
}

// FIN DES EXERCICES
// Gestion des listes d'exercices

jQuery(document).ready(function () {
  // Ne se fait qu'aprÃ¨s que le DOM soit entiÃ¨rement dÃ©fini

  // Trie par ordre alphabÃ©tique les exercices disponibles
  liste_des_exercices_disponibles = tridictionnaire(
    liste_des_exercices_disponibles
  );

  // DÃ©termine le nombre d'exercices par niveaux
  let nombre_d_exercices_disponibles_c3 = 0;
  let nombre_d_exercices_disponibles_6 = 0;
  let nombre_d_exercices_disponibles_5 = 0;
  let nombre_d_exercices_disponibles_4 = 0;
  let nombre_d_exercices_disponibles_3 = 0;
  let nombre_d_exercices_disponibles_2 = 0;
  let nombre_d_exercices_disponibles_1 = 0;
  let nombre_d_exercices_disponibles_T = 0;
  let nombre_d_exercices_disponibles_CM = 0;
  let nombre_d_exercices_disponibles_prof = 0;
  let nombre_d_exercices_disponibles_PE = 0;
  let nombre_d_exercices_disponibles_beta = 0;
  for (var id in liste_des_exercices_disponibles) {
    if (id[0] == "c" && id[1] == "3") {
      nombre_d_exercices_disponibles_c3 += 1;
    }
    if (id[0] == 6) {
      nombre_d_exercices_disponibles_6 += 1;
    }
    if (id[0] == 5) {
      nombre_d_exercices_disponibles_5 += 1;
    }
    if (id[0] == 4) {
      nombre_d_exercices_disponibles_4 += 1;
    }
    if (id[0] == 3) {
      nombre_d_exercices_disponibles_3 += 1;
    }
    if (id[0] == 2) {
      nombre_d_exercices_disponibles_2 += 1;
    }
    if (id[0] == 1) {
      nombre_d_exercices_disponibles_1 += 1;
    }
    if (id[0] == "T") {
      nombre_d_exercices_disponibles_T += 1;
    }
    if (id[0] == "C") {
      nombre_d_exercices_disponibles_CM += 1;
    }
    if (id[0] == "P" && id[1] == "0") {
      nombre_d_exercices_disponibles_prof += 1;
    }
    if (id[0] == "P" && id[1] == "E") {
      nombre_d_exercices_disponibles_PE += 1;
    }
    if (id[0] == "b" && id[1] == "e") {
      nombre_d_exercices_disponibles_beta += 1;
    }
  }

  //
  let liste_html_des_exercices_c3 =[];
  let liste_html_des_exercices_6 = [];
  let liste_html_des_exercices_5 = [];
  let liste_html_des_exercices_4 = [];
  let liste_html_des_exercices_3 = [];
  let liste_html_des_exercices_2 = [];
  let liste_html_des_exercices_1 = [];
  let liste_html_des_exercices_T = [];
  let liste_html_des_exercices_CM = [];
  let liste_html_des_exercices_prof = [];
  let liste_html_des_exercices_PE = [];
  let liste_html_des_exercices_beta = [];

  // Affiche de la liste des exercices disponibles
  let liste_html_des_exercices =
    '<h3 class="ui block header">Exercices disponibles</h3>\n\n';

  function liste_html_des_exercices_d_un_theme(theme){
    let liste = '';
    let dictionnaire = filtreDictionnaire(liste_des_exercices_disponibles,theme);
    for (let id in dictionnaire) {
      let exercice_tmp = new dictionnaire[id]();
      liste +=
        `<span class="id_exercice">${id}</span> - <a class="lien_id_exercice" numero="${id}">${exercice_tmp.titre}</a></br>\n`;
    }
    return liste;
  }

  function liste_html_des_exercices_d_un_niveau(liste_de_themes){ // liste_de_themes = [['6N1','6N1 - NumÃ©rations et fractions niveau 1'] , [' ',' '] ]
    let liste = '';
    for (let theme of liste_de_themes){
      liste += `<h3>${theme[1]}</h3>`;
      liste += liste_html_des_exercices_d_un_theme(theme[0]);
    }
    return liste;
  }

  liste_html_des_exercices_c3 = liste_html_des_exercices_d_un_niveau([
    ['c3C1','c3C1 - Calculs niveau 1'],['c3N1','c3N1 - NumÃ©ration Niveau 1']])
  
  liste_html_des_exercices_6 = liste_html_des_exercices_d_un_niveau([
    ['6C1','6C1 - Calculs niveau 1'],['6C2','6C2 - Calculs niveau 2'],['6C3','6C3 - Calculs niveau 3'],
    ['6M1','6M1 - Grandeurs et mesures niveau 1'],['6M2','6M2 - Grandeurs et mesures niveau 2'],['6M3', '6M3 - Volumes'],['6P1','6P1 - ProportionnalitÃ©'],
    ['6G1','6G1 - GÃ©omÃ©trie niveau 1'],['6G2','6G2 - GÃ©omÃ©trie niveau 2'],['6G3','6G3 - GÃ©omÃ©trie niveau 3'],['6G4','6G4 - GÃ©omÃ©trie niveau 4'],
    ['6D1','6D1 - Les durÃ©es'],
    ['6N1','6N1 - NumÃ©ration et fractions niveau 1'],['6N2','6N2 - NumÃ©ration et fractions niveau 2'],['6N3','6N3 - NumÃ©ration et fractions niveau 3'],['6N4','6N4 - NumÃ©ration et fractions niveau 4']])
    liste_html_des_exercices_5 = liste_html_des_exercices_d_un_niveau([
      ['5A1','5A1 - Arithmetique'],['5C1','5C1 - Calculs'],
      ['5G1','5G1 - SymÃ©tries'],['5G2','5G2 - Triangles'],['5G3','5G3 - Angles'],['5G4','5G4 - ParallÃ©logrammes'],['5G5','5G5 - Espace'],
      ['5L1','5L1 - Calcul littÃ©ral'],
      ['5M1','5M1 - PÃ©rimÃ¨tres et aires'],['5M2','5M2 - Volumes'],['5M3','5M3 - DurÃ©es'],
      ['5N1','5N1 - NumÃ©ration et fractions niveau 1'],['5N2','5N2 - Calculs avec les fractions'],
      ['5P1','5P1 - ProportionnalitÃ©'],['5R1','5R1 - Relatifs niveau 1'],['5R2','5R2 - Relatifs niveau 2'],
      ['5S1','5S1 - Statistiques'],['5S2','5S2 - ProbabilitÃ©s']
    ])
    liste_html_des_exercices_4 = liste_html_des_exercices_d_un_niveau([
      ['4C1','4C1 - Relatifs'],['4C2','4C2 - Fractions'],['4C3','4C3 - Puissances'],
      ['4F1','4F1 - Notion de fonction'],
      ['4G1','4G1 - Translation et rotation'],['4G2','4G2 - ThÃ©orÃ¨me de Pythagore'],['4G3','4G3 - ThÃ©orÃ¨me de ThalÃ¨s'],['4G4',"4G4 - Cosinus d'un angle"],['4G5',"4G5 - Espace"],
      ['4L1','4L1 - Calcul littÃ©ral'],['4L2','4L2 - Ãquation'],['4P1','4P1 - ProportionnalitÃ©'],['4S1','4S1 - Statistiques'],['4S2','4S2 - ProbabilitÃ©s'],
      ['4Algo1','4Algo1 - Algorithmique']
    ])
    liste_html_des_exercices_3 = liste_html_des_exercices_d_un_niveau([
      ['3A1','3A1 - Arithmetique'],
      ['3F1','3F1 - GÃ©nÃ©ralitÃ©s sur les fonctions'],['3F2','3F2 - Fonctions affines et linÃ©aires'],
      ['3G1','3G1 - HomothÃ©tie et rotation'],['3G2','3G2 - ThÃ©orÃ¨me de ThalÃ¨s'],['3G3','3G3 - TrigonomÃ©trie'],['3G4',"3G4 - Espace"],
      ['3L1','3L1 - Calcul littÃ©ral'],['3P1','3P1 - ProportionnalitÃ©'],['3S1','3S1 - Statistiques'],['3S2','3S2 - ProbabilitÃ©s']
    ])

  for (var id in liste_des_exercices_disponibles) {
    let exercice_tmp = new liste_des_exercices_disponibles[id]();
    
    if (id[0] == 2) {
      liste_html_des_exercices_2 +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == 1) {
      liste_html_des_exercices_1 +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == 'T') {
      liste_html_des_exercices_T +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "P" && id[1] == "E") {
      liste_html_des_exercices_PE +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "C") {
      liste_html_des_exercices_CM +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "P" && id[1] == "0") {
      liste_html_des_exercices_prof +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "b" && id[1] == "e") {
      liste_html_des_exercices_beta +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
  }

  // Change l'ordre des exercices suivant l'URL
  if (window.location.href.indexOf("beta") > 0) {
    liste_html_des_exercices += `<div class="ui accordion"><div class="active title"><i class="dropdown icon"></i>Beta (${nombre_d_exercices_disponibles_beta})</div><div class="active content">`;
    liste_html_des_exercices += liste_html_des_exercices_beta;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `</div>`;
  } else if (window.location.href.indexOf("cm.html") > 0) {
    liste_html_des_exercices += `<div class="ui accordion"><div class="active title"><i class="dropdown icon"></i>Calcul mental (${nombre_d_exercices_disponibles_CM})</div><div class="active content">`;
    liste_html_des_exercices += liste_html_des_exercices_CM;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Cours Moyen(${nombre_d_exercices_disponibles_c3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_c3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>SixiÃ¨me (${nombre_d_exercices_disponibles_6})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_6;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CinquiÃ¨me (${nombre_d_exercices_disponibles_5})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_5;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>QuatriÃ¨me (${nombre_d_exercices_disponibles_4})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_4;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>TroisiÃ¨me (${nombre_d_exercices_disponibles_3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Seconde (${nombre_d_exercices_disponibles_2})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_2;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>PremiÃ¨re (${nombre_d_exercices_disponibles_1})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_1;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Terminale (${nombre_d_exercices_disponibles_T})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_T;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CRPE (${nombre_d_exercices_disponibles_PE})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_PE;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `</div>`;
  } else {
    liste_html_des_exercices += `<div class="ui accordion"><div class="title"><i class="dropdown icon"></i>Cours Moyen (${nombre_d_exercices_disponibles_c3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_c3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>SixiÃ¨me (${nombre_d_exercices_disponibles_6})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_6;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CinquiÃ¨me (${nombre_d_exercices_disponibles_5})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_5;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>QuatriÃ¨me (${nombre_d_exercices_disponibles_4})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_4;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>TroisiÃ¨me (${nombre_d_exercices_disponibles_3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Seconde (${nombre_d_exercices_disponibles_2})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_2;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>PremiÃ¨re (${nombre_d_exercices_disponibles_1})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_1;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Terminale (${nombre_d_exercices_disponibles_T})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_T;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CRPE (${nombre_d_exercices_disponibles_PE})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_PE;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Calcul mental (${nombre_d_exercices_disponibles_CM})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_CM;
    liste_html_des_exercices += `</div>`;
    // Ajoute les outils prof sur mathalealatex
    if (window.location.href.indexOf("mathalealatex.html") > 0) {
      liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Outils pour le professeur (${nombre_d_exercices_disponibles_prof})</div><div class="content">`;
      liste_html_des_exercices += liste_html_des_exercices_prof;
      liste_html_des_exercices += `</div>`;
    }
    liste_html_des_exercices += `</div>`;
  }

  $("#liste_des_exercices").html(liste_html_des_exercices);

  // GÃ¨re le clic sur un exercice de la liste
  $(".lien_id_exercice").click(function () {
    let numero = $(this).attr("numero");
    if ($("#choix_des_exercices").val() == "") {
      $("#choix_des_exercices").val($("#choix_des_exercices").val() + numero);
    } else {
      $("#choix_des_exercices").val(
        $("#choix_des_exercices").val() + "," + numero
      );
    }
    liste_des_exercices = $("#choix_des_exercices")
      .val()
      .replace(/\s/g, "")
      .replace(";", ",")
      .split(",");
    mise_a_jour_de_la_liste_d_exercice();

    // Actualise KaTeX pour les titres d'exercices utilisant LaTeX
    renderMathInElement(document.body, {
      delimiters: [
        { left: "\\[", right: "\\]", display: true },
        { left: "$", right: "$", display: false },
      ],
      throwOnError: true,
      errorColor: "#CC0000",
      strict: "warn",
      trust: false,
    });
  });
});

// Exercices de 6Ã¨me dÃ©clinÃ©s en cycle3
function Ecrire_entiers_cycle3(){
    Ecrire_nombres_entiers.call(this)
    this.sup=1
    this.sup2=0
}
function Division_cycle3(){
    Divisions_euclidiennes.call(this)
    this.sup=0
}
function Exercice_tables_d_additions_cycle3() {
    Exercice_tables_d_additions.call(this,10)
}
/**
* DÃ©composer en produit de facteurs premiers un nombre (la dÃ©composition aura 3, 4 ou 5 facteurs premiers)
* @Auteur RÃ©mi Angot
5A13
*/
function Exercice_decomposer_en_facteurs_premiers(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = '' ;
	this.sup2 = '' ; 
	this.titre = "DÃ©composition en facteurs premiers";
	this.consigne = "Ãcrire les nombres suivants sous la forme d'un produit de facteurs premiers.";
	this.spacing = 2;
	this.nb_questions = 6;


	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		for (let i = 0, n, facteurs=[], nb_facteurs, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			facteurs = [];
			nb_facteurs = randint(3,5);
			for (var k = 0; k < nb_facteurs; k++) {
				if (k<nb_facteurs-1) {
					if (nb_facteurs>3 && k==0){facteurs.push(2)}
					else if (nb_facteurs>4 && k==1){facteurs.push(2)}
					else{
						facteurs.push(choice([2,3,5]));
					}
					
				}
				else {facteurs.push(choice([2,5,7,11]))}
			}

			if (randint(1,4)==1) { //Une fois sur 4 on multilie le nombre par 100
				facteurs.push(2,2,5,5)
			} 
			n = 1
			for (var k = 0; k < facteurs.length; k++) {
				facteurs[k]
				n = n * facteurs[k]
			}
			texte = '$ '+ tex_nombre(n) + ' = \\dotfill $';
			texte_corr = '$ '+ tex_nombre(n) + ' = ' 
			facteurs.sort(compare_nombres); //classe les facteurs dans l'ordre croissant
			for (var k = 0; k < facteurs.length-1; k++) {
				facteurs[k]
				texte_corr += facteurs[k] + ' \\times  '
			}
			texte_corr += facteurs[facteurs.length-1] + ' $';	
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;

		}
		liste_de_question_to_contenu(this);
	}
	
}

/**
* Additionner deux relatifs infÃ©rieurs Ã  la valeur maximale en paramÃ¨tre qui est par dÃ©faut Ã  20.
*
* ParamÃ¨tre supplÃ©mentaire ; utilisation des Ã©critures simplifiÃ©es
* @Auteur RÃ©mi Angot
* 5R20
*/
function Exercice_additions_relatifs(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Addition de deux entiers relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup);
			b = randint(1,this.sup);
			k = choice([[-1,-1],[-1,1],[1,-1]]); // Les deux nombres relatifs ne peuvent pas Ãªtre tous les deux positifs
			a = a*k[0];
			b = b*k[1];
			if (this.sup2){
				texte = `$ ${tex_nombre(a)}${ecriture_algebrique(b)} = \\dotfill $`;
				texte_corr = `$ ${a}${ecriture_algebrique(b)} = ${a+b} $`;
			} else {
				texte = '$ '+ ecriture_nombre_relatif(a) + ' + ' + ecriture_nombre_relatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ ecriture_nombre_relatifc(a) + ' + ' + ecriture_nombre_relatifc(b) + ' = ' + ecriture_nombre_relatifc(a + b) +' $';	
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];	
}

/**
* ComplÃ©ter une addition Ã  trou entre 2 nombres relatifs.
*
* * On peut paramÃ©trer la distance Ã  zÃ©ro maximale des deux termes (par dÃ©faut Ã©gale Ã  20)
* * On peut choisir d'avoir une Ã©criture simplifiÃ©e  (par dÃ©faut ce n'est pas le cas)
* @Auteur RÃ©mi Angot
* 5R20-2
*/
function Exercice_additions_relatifs_a_trou(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Addition Ã  trou de deux entiers relatifs"
	this.consigne = 'ComplÃ©ter'
	this.spacing = 2;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup);
			b = randint(1,this.sup);
			k = choice([[-1,-1],[-1,1],[1,-1]]); // Les deux nombres relatifs ne peuvent pas Ãªtre tous les deux positifs
			a = a*k[0];
			b = b*k[1];
			if (this.sup2){
				texte = '$ '+ a + ' + ' + '\\ldots\\ldots\\ldots' + ' = ' + (a + b) + ' $';
				texte_corr = '$ '+ a + ecriture_algebrique(b) + ' = ' + (a + b) +' $';
			} else{
				texte = '$ '+ ecriture_nombre_relatif(a) + ' + ' + '\\ldots\\ldots\\ldots' + ' = ' + ecriture_nombre_relatif(a + b) + ' $';
				texte_corr = '$ '+ ecriture_nombre_relatifc(a) + ' + ' + ecriture_nombre_relatifc(b) + ' = ' + ecriture_nombre_relatifc(a + b) +' $';	
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];	
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];	
}

/**
* Effectuer la soustraction de  2 nombres relatifs.
*
* * On peut paramÃ©trer la distance Ã  zÃ©ro maximale des deux termes (par dÃ©faut Ã©gale Ã  20)
* * On peut choisir d'avoir une Ã©criture simplifiÃ©e  (par dÃ©faut ce n'est pas le cas)
* @Auteur RÃ©mi Angot
* 5R21
*/
function Exercice_soustractions_relatifs(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Soustraction de deux entiers relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup);
			b = randint(1,this.sup);
			k = choice([[-1,-1],[-1,1],[1,-1]]); // Les deux nombres relatifs ne peuvent pas Ãªtre tous les deux positifs
			a = a*k[0];
			b = b*k[1];
			if (this.sup2){
				texte = '$ '+ a + ' - ' + ecriture_parenthese_si_negatif(b) + ' = \\dotfill $';
				if (b>0){
					texte_corr = '$ '+ a + ' - ' + ecriture_parenthese_si_negatif(b) + ' = ' + (a - b) +' $';
				} else {
					texte_corr = '$ '+ a + ' - ' + ecriture_parenthese_si_negatif(b) + ' = ' + a + ecriture_algebrique(-1*b) + ' = ' + (a - b) +' $';
				}
			} else {
				texte = '$ '+ ecriture_nombre_relatif(a) + ' - ' + ecriture_nombre_relatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ ecriture_nombre_relatif(a) + ' - ' + ecriture_nombre_relatif(b) + ' = ' + ecriture_nombre_relatifc(a) + ' + ' + ecriture_nombre_relatifc(-1*b) + ' = ' + ecriture_nombre_relatifc(a - b) +' $';
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];			
}

/**
* Effectuer une multiplication entre 2 nombres relatifs.
*
* * On peut paramÃ©trer la distance Ã  zÃ©ro maximale des deux termes (par dÃ©faut Ã©gale Ã  20)
* * On peut choisir d'avoir une Ã©criture simplifiÃ©e  (par dÃ©faut ce n'est pas le cas)
* @Auteur RÃ©mi Angot
* 4C10-3
*/
function Exercice_multiplications_relatifs(max=10){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Multiplication de deux entiers relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup);
			b = randint(1,this.sup);
			k = choice([[-1,-1],[-1,1],[1,-1]]); // Les deux nombres relatifs ne peuvent pas Ãªtre tous les deux positifs
			a = a*k[0];
			b = b*k[1];
			if (a==1){
				a=-1
			}
			if (b==1){
				b=-1
			}
			if (this.sup2){
				texte = '$ '+ a + ' \\times  ' + ecriture_parenthese_si_negatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ a + ' \\times  ' + ecriture_parenthese_si_negatif(b) + ' = ' + (a * b) +' $';
			} else {
				texte = '$ '+ ecriture_nombre_relatif(a) + ' \\times  ' + ecriture_nombre_relatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ ecriture_nombre_relatifc(a) + ' \\times  ' + ecriture_nombre_relatifc(b) + ' = ' + ecriture_nombre_relatifc(a * b) +' $';
			}
				
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];		
}
/**
* Comparer deux fractions dont les dÃ©nominateurs sont multiples (avec un coefficient paramÃ©trable qui est par dÃ©faut infÃ©rieur Ã  11)
* @Auteur RÃ©mi Angot
* 5N14
*/
function Exercice_comparer_deux_fractions (max=11){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ; // Correspond au facteur commun
	this.titre = "Comparer des fractions (dÃ©nominateurs multiples)"
	this.consigne = 'Comparer les fractions suivantes.'
	this.spacing = 2;
	this.spacing_corr = 2;
	this.nb_questions = 5;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		liste_fractions = obtenir_liste_fractions_irreductibles();
		for (let i = 0, fraction, a, b, texte, texte_corr, signe, signe2, cpt=0; i < this.nb_questions;i++) {
			fraction = choice(liste_fractions); //
			a = fraction[0];
			b = fraction[1];
			k = randint(2,this.sup);
			ecart = choice([-4,-3,-2,-1,1,2,3,4]);
			if (k*a+ecart<=0){
				ecart=ecart*(-1)
			}
			if (ecart>0) {
				signe = `<`
				signe2 = `>`
			} else {
				signe = `>`
				signe2=`<`
			}
			enleve_element(liste_fractions,fraction); // Il n'y aura pas 2 fois la mÃªme rÃ©ponse

			ordre_des_fractions = randint(1,2)
			if (ordre_des_fractions==1) {
				texte = `$${tex_fraction(a,b)} \\quad$ et $\\quad ${tex_fraction(k*a+ecart,k*b)}$`;
			} else {
				texte = `$${tex_fraction(k*a+ecart,k*b)} \\quad$ et $\\quad ${tex_fraction(a,b)}$`;
			}
			if (!sortie_html) {
				texte=texte.replace('\\quad$ et $\\quad','\\ldots\\ldots\\ldots')
			}
			texte_corr = `$${tex_fraction(a,b)}=${tex_fraction(a+mise_en_evidence('\\times  '+k),b+mise_en_evidence('\\times  '+k))}=${tex_fraction(a*k,b*k)}\\quad$`
			if (ordre_des_fractions==1) {
				texte_corr += `  et   $\\quad${tex_fraction(a*k,b*k)} ${signe} ${tex_fraction(a*k+ecart,b*k)}\\quad$ donc $\\quad${tex_fraction(a,b)} ${signe} ${tex_fraction(a*k+ecart,b*k)}$ `;
			} else {
				texte_corr += `  et   $\\quad${tex_fraction(a*k+ecart,b*k)} ${signe2} ${tex_fraction(a*k,b*k)} \\quad$ donc $\\quad ${tex_fraction(a*k+ecart,b*k)} ${signe2} ${tex_fraction(a,b)} $ `;
			}			
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
	this.besoin_formulaire_numerique = ['Valeur maximale du coefficient multiplicateur',99999];		
}


/**
* 4 fractions aux dÃ©nominateurs multiples et un nombre entier sont donnÃ©s, il faut les classer dans l'ordre croissant ou dÃ©croissant
* 
* Pour la correction, les fractions sont toute Ã©crites avec un dÃ©nominateur commun avant d'Ãªtre classÃ©es
* @Auteur RÃ©mi Angot
* 5N14-2
*/
function Exercice_comparer_quatre_fractions (){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Comparer quatre fractions (dÃ©nominateurs multiples) et un nombre entier"
	this.consigne = "Ranger les nombres suivants dans l'ordre croissant."
	this.spacing = 2;
	sortie_html ? this.spacing_corr = 4 : this.spacing_corr = 2.5 ;
	this.nb_questions = 2;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, denominateurs, n1, d1, n2, d2, n3, d3, n4, d4, k, texte="", texte_corr="", cpt=0; i < this.nb_questions;i++) {
			liste_denominateurs = [[12,2,3,4,6],[16,2,4,8],[18,2,3,6,9],[20,2,4,5,10],[24,2,3,4,8,12],[30,2,3,5,6]]
			denominateurs = choice(liste_denominateurs);
			d1 = denominateurs[0];
			enleve_element(denominateurs,d1);
			d2 = choice(denominateurs);
			enleve_element(denominateurs,d2);
			d3 = choice(denominateurs);
			d4 = choice(denominateurs);
			k = randint(1,3);
			n1 = randint(1,10);
			n2 = randint(1,10);
			n3 = randint(1,10);
			n4 = choice([d4+randint(1,3),d4*2+randint(1,2)],randint(1,10));
			// [num,den,calcul de mise au mÃªme dÃ©nominateur, num qui correspond au denominateur commun]
			
			while (((n1/d1-n2/d2)*(n1/d1-n3/d3)*(n1/d1-n4/d4)*(n2/d2-n3/d3)*(n2/d3-n4/d4)*(n3/d3-n4/d4)<0.1) || (n1%d1==0) || (n2%d2==0) || (n3%d3==0) || (n4%d4==0) ){
				n1 = randint(1,11);
				n2 = randint(1,11);
				n3 = randint(1,11);
				n4 = randint(1,11);
			}
			let tableau_fractions=[[n1,d1,`$${tex_fraction(n1,d1)}$`,`$${tex_fraction(n1,d1)}$`]]
			tableau_fractions.push([n2,d2,`$${tex_fraction(n2,d2)}=${tex_fraction(n2+mise_en_evidence("\\times "+Algebrite.eval(d1/d2)),d2+mise_en_evidence("\\times "+Algebrite.eval(d1/d2)))}=${tex_fraction(Algebrite.eval(n2*d1/d2),d1)}$`,`$${tex_fraction(Algebrite.eval(n2*d1/d2),d1)}$`])
			tableau_fractions.push([n3,d3,`$${tex_fraction(n3,d3)}=${tex_fraction(n3+mise_en_evidence("\\times "+Algebrite.eval(d1/d3)),d3+mise_en_evidence("\\times "+Algebrite.eval(d1/d3)))}=${tex_fraction(Algebrite.eval(n3*d1/d3),d1)}$`,`$${tex_fraction(Algebrite.eval(n3*d1/d3),d1)}$`])
			tableau_fractions.push([n4,d4,`$${tex_fraction(n4,d4)}=${tex_fraction(n4+mise_en_evidence("\\times "+Algebrite.eval(d1/d4)),d4+mise_en_evidence("\\times "+Algebrite.eval(d1/d4)))}=${tex_fraction(Algebrite.eval(n4*d1/d4),d1)}$`,`$${tex_fraction(Algebrite.eval(n4*d1/d4),d1)}$`])
			tableau_fractions.push([k,1,`$${k}=${tex_fraction(d1*k,d1)}$`,`$${tex_fraction(k*d1,d1)}$`])
			tableau_fractions.sort(compare_fractions)
			let tableau_fractions_enonce=shuffle(tableau_fractions)
			texte = "";
			for (var j = 0; j < tableau_fractions_enonce.length; j++) {
				if (tableau_fractions_enonce[j][1]==1)
					texte+=`$${tableau_fractions_enonce[j][0]}\\quad\\text{;}\\quad$`
				else
					texte+=`$${tex_fraction(tableau_fractions_enonce[j][0],tableau_fractions_enonce[j][1])}\\quad\\text{;}\\quad$`
			}
			texte = texte.substring(0,texte.length-19)+"$" // EnlÃ¨ve les 21 derniers caractÃ¨res (pour le ; de la fin)
			tableau_fractions.sort(compare_fractions)
			texte_corr ="";
			for (var j = 0; j < tableau_fractions_enonce.length; j++) {
				texte_corr+=tableau_fractions_enonce[j][2]
				texte_corr+="<br>"
			}
			for (var j = 0; j < tableau_fractions.length; j++) {
				texte_corr+=tableau_fractions[j][3]
				if (j<tableau_fractions.length-1)
					texte_corr+=`$\\quad<\\quad$`
			}
			texte_corr+="<br>"
			let texte_conclusion = ""
			for (var j = 0; j < tableau_fractions.length; j++) {
				if (tableau_fractions[j][1]==1)
					texte_conclusion+=`$${tableau_fractions[j][0]}\\quad<\\quad$`
				else
					texte_conclusion+=`$${tex_fraction(tableau_fractions[j][0],tableau_fractions[j][1])}\\quad<\\quad$`
			}
			texte_corr += "Finalement : $\\quad$ "+texte_conclusion.substring(0,texte_conclusion.length-12)+"$"

			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
}

/**
* Effectuer l'addition de deux fractions dont un dÃ©nominateur est un multiple de l'autre.
*
* Le coefficient est paramÃ©trable, par dÃ©faut il est infÃ©rieur Ã  11.
* @Auteur RÃ©mi Angot
* 5N20
*/
function Exercice_additionner_des_fractions_5e(max=11){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ; // Correspond au facteur commun
	this.titre = "Additionner deux fractions (dÃ©nominateurs multiples)"
	this.consigne = "Calculer et donner le rÃ©sultat sous la forme d'une fraction simplifiÃ©e"
	this.spacing = 2;
	this.spacing_corr = 2;
	this.nb_questions = 5;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, c, d,texte, texte_corr, cpt=0; i < this.nb_questions;i++) {
			// les numÃ©rateurs
			a = randint (1,9);
			c = randint (1,9);
			// les dÃ©nominateurs
			if (this.level!=6) b = randint(2,9);
			else b = randint(2,5)
			while (b==a){
				if (this.level!=6) b = randint(2,9); // pas de fraction avec numÃ©rateur et dÃ©nominateur Ã©gaux
				else b = randint(2,5)
			}
			if (this.level!=6) k = randint(2,this.sup);
			else k=1
			d = b*k
			ordre_des_fractions = randint(1,2)
			if (ordre_des_fractions==1) {
				texte = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}=$`;
			} else {
				texte = texte = `$${tex_fraction(c,d)}+${tex_fraction(a,b)}=$`;
			}
			if (ordre_des_fractions==1) {
				if (this.level!=6) texte_corr = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}=${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}+${tex_fraction(c,d)}`
				else texte_corr =`$`
				texte_corr += `=${tex_fraction(a*k,b*k)}+${tex_fraction(c,d)}=${tex_fraction(a*k+`+`+c,d)}=${tex_fraction(a*k+c,d)}$`;
			} else {
				if (this.level!=6) texte_corr = `$${tex_fraction(c,d)}+${tex_fraction(a,b)}=${tex_fraction(c,d)}+${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}`
				else texte_corr =`$`
				texte_corr += `=${tex_fraction(c,d)}+${tex_fraction(a*k,b*k)}=${tex_fraction(c+'+'+a*k,d)}=${tex_fraction(a*k+c,d)}$`;
			}
			// Est-ce que le rÃ©sultat est simplifiable ?
			let s = pgcd(a*k+c,d);
			if ((a*k+c)%d==0) { // si le rÃ©sultat est un entier
				texte_corr +=`$=${Algebrite.eval((a*k+c)/d)}$`
			} else if (s!=1) {
				texte_corr +=`$=${tex_fraction(Algebrite.eval((a*k+c)/s)+mise_en_evidence('\\times '+s),Algebrite.eval(d/s)+mise_en_evidence('\\times '+s))}=${tex_fraction(Algebrite.eval((a*k+c)/s),Algebrite.eval(d/s))}$`
			}
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
	this.besoin_formulaire_numerique = ['Valeur maximale du coefficient multiplicateur',99999];		
}

/**
* Effectuer l'addition ou la soustraction de deux fractions dont un dÃ©nominateur est un multiple de l'autre.
*
* Le rÃ©sultat de la soustraction sera toujours positif.
*
* Le coefficient est paramÃ©trable, par dÃ©faut il est infÃ©rieur Ã  11.
*
* On peut paramÃ©trer de n'avoir que des soustractions.
* @Auteur RÃ©mi Angot
* 5N20-2
*/
function Exercice_additionner_ou_soustraire_des_fractions_5e(max=11){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ; // Correspond au facteur commun
	this.sup2 = false // Si true alors il n'y aura que des soustractions
	this.titre = "Additionner ou soustraire deux fractions (dÃ©nominateurs multiples)"
	this.consigne = "Calculer et donner le rÃ©sultat sous la forme d'une fraction simplifiÃ©e"
	this.spacing = 2;
	this.spacing_corr = 2;
	this.nb_questions = 5;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, c, d,texte, texte_corr, cpt=0; i < this.nb_questions;i++) {
			// les numÃ©rateurs
			a = randint (1,9);
			c = randint (1,9);
			// les dÃ©nominateurs
			b = randint(2,9);
			while (b==a){
				b = randint(2,9); // pas de fraction avec numÃ©rateur et dÃ©nominateur Ã©gaux
			}
			k = randint(2,this.sup);
			d = b*k
			if (randint(1,2)==1 && !this.sup2) { //une addition
				ordre_des_fractions = randint(1,2)
				if (ordre_des_fractions==1) {
					texte = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}=$`;
				} else {
					texte = texte = `$${tex_fraction(c,d)}+${tex_fraction(a,b)}=$`;
				}
				if (ordre_des_fractions==1) {
					texte_corr = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}=${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}+${tex_fraction(c,d)}`
					texte_corr += `=${tex_fraction(a*k,b*k)}+${tex_fraction(c,d)}=${tex_fraction(a*k+`+`+c,d)}=${tex_fraction(a*k+c,d)}$`;
				} else {
					texte_corr = `$${tex_fraction(c,d)}+${tex_fraction(a,b)}=${tex_fraction(c,d)}+${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}`
					texte_corr += `=${tex_fraction(c,d)}+${tex_fraction(a*k,b*k)}=${tex_fraction(c+'+'+a*k,d)}=${tex_fraction(a*k+c,d)}$`;
				}
				// Est-ce que le rÃ©sultat est simplifiable ?
				let s = pgcd(a*k+c,d);
				if (s!=1) {
					texte_corr +=`$=${tex_fraction(Algebrite.eval((a*k+c)/s)+mise_en_evidence('\\times '+s),Algebrite.eval(d/s)+mise_en_evidence('\\times '+s))}=${tex_fraction(Algebrite.eval((a*k+c)/s),Algebrite.eval(d/s))}$`
				}
			} else{ //une soustraction
				if ((a/b)>(c/d)) {
					texte = `$${tex_fraction(a,b)}-${tex_fraction(c,d)}=$`;
				} else {
					texte = texte = `$${tex_fraction(c,d)}-${tex_fraction(a,b)}=$`;
				}
				if ((a/b)>(c/d)) {
					texte_corr = `$${tex_fraction(a,b)}-${tex_fraction(c,d)}=${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}-${tex_fraction(c,d)}`
					texte_corr += `=${tex_fraction(a*k,b*k)}-${tex_fraction(c,d)}=${tex_fraction(a*k+`-`+c,d)}=${tex_fraction(a*k-c,d)}$`;
				} else {
					texte_corr = `$${tex_fraction(c,d)}-${tex_fraction(a,b)}=${tex_fraction(c,d)}-${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}`
					texte_corr += `=${tex_fraction(c,d)}-${tex_fraction(a*k,b*k)}=${tex_fraction(c+'-'+a*k,d)}=${tex_fraction(c-a*k,d)}$`;
				}
				// Est-ce que le rÃ©sultat est simplifiable ?
				let s = pgcd(a*k-c,d);
				if (abs(a*k-c)%d==0){ //si la fraction peut-Ãªtre un nombre entier
					texte_corr += `$=${Algebrite.eval((abs(a*k-c))/d)}$`
				} else if (s!=1) {
					texte_corr +=`$=${tex_fraction(Algebrite.eval((abs(a*k-c))/s)+mise_en_evidence('\\times '+s),Algebrite.eval(d/s)+mise_en_evidence('\\times '+s))}=${tex_fraction(Algebrite.eval((abs(a*k-c))/s),Algebrite.eval(d/s))}$`
				}
			}
				
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
	this.besoin_formulaire_numerique = ['Valeur maximale du coefficient multiplicateur',99999];	
	this.besoin_formulaire2_case_a_cocher = ['Uniquement des soustractions'];	
}


/**
* Effectuer la somme de deux fractions
*
* * Niveau 1 : 4 fois sur 5 un dÃ©nominateur est un multiple de l'autre et une fois sur 5 il faut additionner une fraction et un entier
* * Niveau 2 : 2 fois sur 5, il faut trouver le ppcm, 1 fois sur 5 le ppcm correspond Ã  leur produit, 1 fois sur 5 un dÃ©nominateur est multiple de l'autre, 1 fois sur 5 il faut additionner une fraction et un entier
* * ParamÃ¨tre supplÃ©mentaire : utiliser des nommbres relatifs (par dÃ©faut tous les nombres sont positifs)
* @Auteur RÃ©mi Angot
* 4C21-1
*/
function Exercice_additionner_des_fractions(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 2; // Niveau de difficultÃ©
	this.sup2 = false; // Avec ou sans relatifs
	this.titre = "Additionner deux fractions"
	this.consigne = "Calculer et donner le rÃ©sultat sous la forme d'une fraction simplifiÃ©e"
	this.spacing = 2;
	this.spacing_corr = 2;
	this.nb_questions = 5;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let type_de_questions_disponibles
		if (this.sup==1) {
			type_de_questions_disponibles = ['b_multiple_de_d','d_multiple_de_b','b_multiple_de_d','d_multiple_de_b','entier']
		}
		if (this.sup==2) {
			type_de_questions_disponibles = ['ppcm','ppcm','premiers_entre_eux',choice(['b_multiple_de_d','d_multiple_de_b']),'entier']
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, a, b, c, d, k, k1, k2, num, den, texte, texte_corr, type_de_questions, cpt=0; i < this.nb_questions;i++) {
			type_de_questions = liste_type_de_questions[i];
			switch (type_de_questions){
				case 'ppcm' :
					let liste_couples_de_denominateurs = [[6,9],[4,6],[8,12],[9,12],[10,15],[10,25],[6,21],[12,30],[6,8],[50,75],]
					let couples_de_denominateurs = choice(liste_couples_de_denominateurs)
					if (choice([true,false])) {
						b = couples_de_denominateurs[0];
						d = couples_de_denominateurs[1];
					} else {
						b = couples_de_denominateurs[1];
						d = couples_de_denominateurs[0];
					}
					k1 = ppcm(b,d)/b;
					k2 = ppcm(b,d)/d;
				break

				case 'premiers_entre_eux' :
					b = randint(2,9)
					d = randint(2,9)
					while (pgcd(b,d)!=1) {
						b = randint(2,9)
						d = randint(2,9)
					}
					k1 = ppcm(b,d)/b;
					k2 = ppcm(b,d)/d;
				break

				case 'd_multiple_de_b':
					b = randint(2,9);
					k = randint(2,11);
					d = b*k;
				break

				case 'b_multiple_de_d':
					d = randint(2,9);
					k = randint(2,11);
					b = d*k;
				break
			}

			
			a = randint (1,9,[b]);
			c = randint (1,9,[d]);
			if (this.sup2) { //si les numÃ©rateurs sont relatifs
				a = a * choice([-1,1]);
				c = c * choice([-1,1]);
			}
			texte = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}=$`;
			texte_corr = `$${tex_fraction(a,b)}+${tex_fraction(c,d)}`

			// a/b+c/d = num/den (rÃ©sultat non simplifiÃ©)

			if (type_de_questions=='ppcm' || type_de_questions=='premiers_entre_eux') {
				texte_corr += `=${tex_fraction(a+mise_en_evidence('\\times '+k1),b+mise_en_evidence('\\times '+k1))}+${tex_fraction(c+mise_en_evidence('\\times '+k2),d+mise_en_evidence('\\times '+k2))}`
				//texte_corr += `=${tex_fraction(a*k1,b*k1)}+${tex_fraction(c*k2,d*k2)}`;
				num = a*k1+c*k2;
				den = b*k1
				texte_corr += `=${tex_fraction(a*k1+`+`+ecriture_parenthese_si_negatif(c*k2),den)}`

			} 

			if (type_de_questions=='d_multiple_de_b') {
				texte_corr += `=${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}+${tex_fraction(c,d)}`
				//texte_corr += `=${tex_fraction(a*k1,b*k1)}+${tex_fraction(c*k2,d*k2)}`;
				num = a*k+c;
				den = b*k
				texte_corr += `=${tex_fraction(a*k+`+`+ecriture_parenthese_si_negatif(c),den)}`
			}

			if (type_de_questions=='b_multiple_de_d') {
				texte_corr += `=${tex_fraction(a,b)}+${tex_fraction(c+mise_en_evidence('\\times '+k),d+mise_en_evidence('\\times '+k))}`
				//texte_corr += `=${tex_fraction(a*k1,b*k1)}+${tex_fraction(c*k2,d*k2)}`;
				num = a+c*k;
				den = b
				texte_corr += `=${tex_fraction(a+`+`+ecriture_parenthese_si_negatif(c*k),den)}`
			}

			if (type_de_questions=="entier") {
				a = randint(1,9);
				b = randint(2,9,[a]);
				let n = randint(1,9);
				if (this.sup2) {
					a = a * choice([-1,1]);
					n = n * choice([-1,1]);
				}
				if (choice([true,false])) {
					texte = `$${n}+${tex_fraction(a,b)}=$`;
					texte_corr = texte ;
					texte_corr += `$${tex_fraction(n+'\\times '+b,b)}+${tex_fraction(a,b)}`;
					texte_corr += `=${tex_fraction(n*b+'+'+ecriture_parenthese_si_negatif(a),b)}`;
				} else {
					texte = `$${tex_fraction(a,b)}+${ecriture_parenthese_si_negatif(n)}=$`;
					texte_corr = texte ;
					texte_corr += `$${tex_fraction(a,b)}+${tex_fraction(n+'\\times '+b,b)}`;
					texte_corr += `=${tex_fraction(a+'+'+ecriture_parenthese_si_negatif(n*b),b)}`
				}
				num = n*b+a
				den = b 
			}
			texte_corr += `=${tex_fraction(num,den)}`;
			texte_corr += simplification_de_fraction_avec_etapes(num,den)+'$';
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Un dÃ©nominateur multiple de l'autre\n\
2 : Cas gÃ©nÃ©ral"]
	this.besoin_formulaire2_case_a_cocher = ['Avec des nombres relatifs'];

}


/**
* Effectuer la somme ou la diffÃ©rence de deux fractions
*
* * Niveau 1 : 4 fois sur 5 un dÃ©nominateur est un multiple de l'autre et une fois sur 5 il faut additionner une fraction et un entier
* * Niveau 2 : 2 fois sur 5, il faut trouver le ppcm, 1 fois sur 5 le ppcm correspond Ã  leur produit, 1 fois sur 5 un dÃ©nominateur est multiple de l'autre, 1 fois sur 5 il faut additionner une fraction et un entier
* * ParamÃ¨tre supplÃ©mentaire : utiliser des nommbres relatifs (par dÃ©faut tous les nombres sont positifs)
* * 2 fois sur 4 il faut faire une soustraction
* @Auteur RÃ©mi Angot
* 4C21
*/
function Exercice_additionner_ou_soustraire_des_fractions(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 2; // Niveau de difficultÃ©
	this.sup2 = false; // Avec ou sans relatifs
	this.titre = "Additionner ou soustraire deux fractions"
	this.consigne = "Calculer et donner le rÃ©sultat sous la forme d'une fraction simplifiÃ©e."
	this.spacing = 2;
	this.spacing_corr = 2;
	this.nb_questions = 5;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let type_de_questions_disponibles
		if (this.sup==1) {
			type_de_questions_disponibles = ['b_multiple_de_d','d_multiple_de_b','b_multiple_de_d','d_multiple_de_b','entier']
		}
		if (this.sup==2) {
			type_de_questions_disponibles = ['ppcm','ppcm','premiers_entre_eux',choice(['b_multiple_de_d','d_multiple_de_b']),'entier']
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_de_plus_ou_moins = combinaison_listes(['-','-','+','+'],this.nb_questions)
		for (let i = 0, a, b, c, d, k, k1, k2, num, den, texte, texte_corr, type_de_questions, cpt=0; i < this.nb_questions;i++) {
			let plus_ou_moins = liste_de_plus_ou_moins[i]
			type_de_questions = liste_type_de_questions[i];
			switch (type_de_questions){
				case 'ppcm' :
					let liste_couples_de_denominateurs = [[6,9],[4,6],[8,12],[9,12],[10,15],[10,25],[6,21],[12,30],[6,8],[50,75],]
					let couples_de_denominateurs = choice(liste_couples_de_denominateurs)
					if (choice([true,false])) {
						b = couples_de_denominateurs[0];
						d = couples_de_denominateurs[1];
					} else {
						b = couples_de_denominateurs[1];
						d = couples_de_denominateurs[0];
					}
					k1 = ppcm(b,d)/b;
					k2 = ppcm(b,d)/d;
				break

				case 'premiers_entre_eux' :
					b = randint(2,9)
					d = randint(2,9)
					while (pgcd(b,d)!=1) {
						b = randint(2,9)
						d = randint(2,9)
					}
					k1 = ppcm(b,d)/b;
					k2 = ppcm(b,d)/d;
				break

				case 'd_multiple_de_b':
					b = randint(2,9);
					k = randint(2,11);
					d = b*k;
				break

				case 'b_multiple_de_d':
					d = randint(2,9);
					k = randint(2,11);
					b = d*k;
				break
			}

			a = randint (1,9,[b]);
			c = randint (1,9,[d]);
			if (this.sup2) { //si les numÃ©rateurs sont relatifs
				a = a * choice([-1,1]);
				c = c * choice([-1,1]);

			}
			if (!this.sup2 && plus_ou_moins=='-' && a/b<c/d) { //s'il n'y a pas de relatifs, il faut s'assurer que la soustraction soit positive
				[a,b,c,d]=[c,d,a,b] // on Ã©change les 2 fractions
				k1 = ppcm(b,d)/b;
				k2 = ppcm(b,d)/d;
				if (type_de_questions=='d_multiple_de_b') {
					type_de_questions='b_multiple_de_d'; //comme on a Ã©changÃ© les 2 fractions, le type de la question change
					k = b/d;
				} else if (type_de_questions=='b_multiple_de_d') {
					type_de_questions='d_multiple_de_b'; //comme on a Ã©changÃ© les 2 fractions, le type de la question change
					k = d/b;
				}
				echange = true;
			}
			texte = `$${tex_fraction(a,b)}${plus_ou_moins}${tex_fraction(c,d)}=$`;
			texte_corr = `$${tex_fraction(a,b)}${plus_ou_moins}${tex_fraction(c,d)}`

			// a/b(+ou-)c/d = num/den (rÃ©sultat non simplifiÃ©)

			if (type_de_questions=='ppcm' || type_de_questions=='premiers_entre_eux') {
				texte_corr += `=${tex_fraction(a+mise_en_evidence('\\times '+k1),b+mise_en_evidence('\\times '+k1))}${plus_ou_moins}${tex_fraction(c+mise_en_evidence('\\times '+k2),d+mise_en_evidence('\\times '+k2))}`
				num = calcul(a*k1+plus_ou_moins+ecriture_nombre_relatif(c*k2));
				den = b*k1
				texte_corr += `=${tex_fraction(a*k1+plus_ou_moins+ecriture_parenthese_si_negatif(c*k2),den)}`

			} 

			if (type_de_questions=='d_multiple_de_b') {
				texte_corr += `=${tex_fraction(a+mise_en_evidence('\\times '+k),b+mise_en_evidence('\\times '+k))}${plus_ou_moins}${tex_fraction(c,d)}`
				num = calcul(a*k+plus_ou_moins+ecriture_nombre_relatif(c));
				den = b*k
				texte_corr += `=${tex_fraction(a*k+plus_ou_moins+ecriture_parenthese_si_negatif(c),den)}`
			}

			if (type_de_questions=='b_multiple_de_d') {
				texte_corr += `=${tex_fraction(a,b)}${plus_ou_moins}${tex_fraction(c+mise_en_evidence('\\times '+k),d+mise_en_evidence('\\times '+k))}`
				num = calcul(a+plus_ou_moins+ecriture_nombre_relatif(c*k));
				den = b
				texte_corr += `=${tex_fraction(a+plus_ou_moins+ecriture_parenthese_si_negatif(c*k),den)}`
			}

			if (type_de_questions=="entier") {
				a = randint(1,9);
				b = randint(2,9,[a]);
				let n = randint(1,9);
				if (this.sup2) {
					a = a * choice([-1,1]);
					n = n * choice([-1,1]);
				}
				if (choice([true,false])) {
					// n+-a/b
					if (!this.sup2 && plus_ou_moins=="-" && n<a/b) {
						n = randint(5,9) // max(a/b)=9/2
					}
					texte = `$${n}${plus_ou_moins}${tex_fraction(a,b)}=$`;
					texte_corr = texte ;
					texte_corr += `$${tex_fraction(n+mise_en_evidence('\\times '+b),mise_en_evidence(b))}${plus_ou_moins}${tex_fraction(a,b)}`;
					texte_corr += `=${tex_fraction(n*b+plus_ou_moins+ecriture_parenthese_si_negatif(a),b)}`;
				} else {
					// a/b +-n
					if (!this.sup2 && plus_ou_moins=="-" && n>a/b) {
						n = randint(1,4) // 
						a = n*b+randint(1,9) //(n*b+?)/b-n>0
					}
					texte = `$${tex_fraction(a,b)}${plus_ou_moins}${ecriture_parenthese_si_negatif(n)}=$`;
					texte_corr = texte ;
					texte_corr += `$${tex_fraction(a,b)}${plus_ou_moins}${tex_fraction(n+mise_en_evidence('\\times '+b),mise_en_evidence(b))}`;
					texte_corr += `=${tex_fraction(a+'+'+ecriture_parenthese_si_negatif(n*b),b)}`
				}
				num = calcul(n*b+plus_ou_moins+ecriture_parenthese_si_negatif(a))
				den = b 
			}
			texte_corr += `=${tex_fraction(num,den)}`
			texte_corr += simplification_de_fraction_avec_etapes(num,den)+'$';
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Un dÃ©nominateur multiple de l'autre\n\
2 : Cas gÃ©nÃ©ral"]
	this.besoin_formulaire2_case_a_cocher = ['Avec des nombres relatifs'];

}

/**
* Simplifier l'Ã©criture d'une somme de 2 relatifs et calculer
*
* On peut paramÃ©trer les distances Ã  zÃ©ro qui sont par dÃ©faut infÃ©rieures Ã  20
* @Auteur RÃ©mi Angot
* 5R22-2
*/
function Exercice_simplification_somme_algebrique(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max;
	this.titre = "Simplifier l'Ã©criture d'une somme de 2 relatifs et calculer"
	this.consigne = 'Simplifier puis calculer'
	this.spacing = 2;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, s, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup)*choice([-1,1]);
			b = randint(1,this.sup)*choice([-1,1]);
			s = choice([-1,1]) // + ou -
			
			if (s==1){
				texte = '$ '+ ecriture_nombre_relatif(a) + ' + ' + ecriture_nombre_relatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ ecriture_nombre_relatif(a) + ' + ' + ecriture_nombre_relatif(b) + ' = ' + a + ecriture_algebrique(s*b) +' = ' + (a+b) + ' $';	
			} else {
				texte = '$ '+ ecriture_nombre_relatif(a) + ' - ' + ecriture_nombre_relatif(b) + ' = \\dotfill $';
				texte_corr = '$ '+ ecriture_nombre_relatif(a) + ' - ' + ecriture_nombre_relatif(b) + ' = ' + a + ecriture_algebrique(s*b) +' = ' + (a-b) + ' $';	
			}
						
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
}

/**
* Effectuer la somme ou la diffÃ©rence de deux nombres relatifs
*
* * On peut paramÃ©trer les distances Ã  zÃ©ro qui sont par dÃ©faut infÃ©rieures Ã  20
* * On peut utiliser des Ã©critures simplifiÃ©es (ce qui n'est pas le cas par dÃ©faut)
* @Auteur RÃ©mi Angot
*/
/*function Exercice_additions_et_soustraction_de_relatifs(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Additions et soustractions de nombres relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup)*choice([-1,1]);
			b = randint(1,this.sup)*choice([-1,1]);
			if (a==1 & b==1) { // On s'assure que les 3 premiÃ¨res termes n'ont pas le mÃªme signe
				c = -1
			} else if (a==-1 & b==-1) {
				c = 1
			}
			else {
				c = randint(1,this.sup)*choice([-1,1]);	
			}
			d = randint(1,this.sup)*choice([-1,1]);
			e = randint(1,this.sup)*choice([-1,1]);
			s1 = choice([-1,1])
			s2 = choice([-1,1])
			if (s1==1 & s2==1){ // On s'assure que les 3 premiÃ¨res opÃ©rations ne sont pas identiques
				s3=-1
			} else if (s1==-1 & s2==-1){
				s3=1
			} else {
				s3 = choice([-1,1])	
			}
			s4 = choice([-1,1])
			if (this.sup2){
				texte = `$ ${lettre_depuis_chiffre(i+1)} = ${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}${ecriture_algebrique(d)}${ecriture_algebrique(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `<br>\n$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`
				}
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)} =  ${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}${ecriture_algebrique(d)}${ecriture_algebrique(e)} = ${somme_des_termes_par_signe([a,b,c,d,e])[0]}${ecriture_algebrique(somme_des_termes_par_signe([a,b,c,d,e])[1])} = ${a+b+c+d+e} $`;		
			} else {
				texte = `$ ${lettre_depuis_chiffre(i+1)} =  ${ecriture_nombre_relatif(a)}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `\\\\\n$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`	
				}
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)} =  ${ecriture_nombre_relatif(a)}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)} $`;
				texte_corr += `<br>\n$ ${lettre_depuis_chiffre(i+1)} = ${ecriture_nombre_relatif(a)}+${ecriture_nombre_relatif(s1*b)}+${ecriture_nombre_relatif(s2*c)}+${ecriture_nombre_relatif(s3*d)}+${ecriture_nombre_relatif(s4*e)} $`;
				texte_corr += `<br>\n$ ${lettre_depuis_chiffre(i+1)} = ${a+s1*b+s2*c+s3*d+s4*e} $`;
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu_sans_numero(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];	
}
*/

/**
* Effectuer la somme ou la diffÃ©rence de deux nombres relatifs
*
* * On peut paramÃ©trer les distances Ã  zÃ©ro qui sont par dÃ©faut infÃ©rieures Ã  20
* * On peut utiliser des Ã©critures simplifiÃ©es (ce qui n'est pas le cas par dÃ©faut)
* @Auteur RÃ©mi Angot modifications par Jean-Claude Lhote
* RÃ©fÃ©rence 5R22
*/
function Exercice_additions_et_soustraction_de_relatifsV2(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Additions et soustractions de nombres relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;
	this.spacing_corr = 1;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.nb_questions = 5;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let relatifs
		let sommes_signees
		for (let i = 0, a, b, c , d , e ,texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			relatifs=[]
			sommes_signees=[]
			a = -1;
			b = choice([-1,1]);
			if (a==-1 & b==-1)  c = 1;// On s'assure que les 3 premiÃ¨res termes n'ont pas le mÃªme signe
			else c=choice([-1,1]);
			a=randint(1,this.sup)*a
			b=randint(1,this.sup)*b
			c=randint(1,this.sup)*c
			d = randint(1,this.sup)*choice([-1,1]);
			e = randint(1,this.sup)*choice([-1,1]);
			s1 = choice([-1,1])
			s2 = choice([-1,1])
			if (s1==1 & s2==1){ // On s'assure que les 3 premiÃ¨res opÃ©rations ne sont pas identiques
				s3=-1
			} else if (s1==-1 & s2==-1){
				s3=1
			} else {
				s3 = choice([-1,1])	
			}
			s4 = choice([-1,1])
			if (this.sup2){		
				texte = `$ ${lettre_depuis_chiffre(i+1)} = ${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}${ecriture_algebrique(d)}${ecriture_algebrique(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `<br>$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`
				}
				relatifs=trie_positifs_negatifs([a,b,c,d,e])
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)}\\textbf{=}~${tex_nombrecoul(a)}${ecriture_algebriquec(b)}${ecriture_algebriquec(c)}${ecriture_algebriquec(d)}${ecriture_algebriquec(e)}\\\\\\phantom{A }\\textbf{=}~`;
				if (somme_des_termes_par_signe([a,b,c,d,e])[0]!=0&&somme_des_termes_par_signe([a,b,c,d,e])[1]!=0) {
					texte_corr +=`${tex_nombrecoul(relatifs[0])}${ecriture_algebriquec(relatifs[1])}${ecriture_algebriquec(relatifs[2])}${ecriture_algebriquec(relatifs[3])}${ecriture_algebriquec(relatifs[4])}\\\\\\phantom{A }\\textbf{=}~`
					texte_corr +=`${tex_nombrecoul(somme_des_termes_par_signe([a,b,c,d,e])[0])}${ecriture_algebriquec(somme_des_termes_par_signe([a,b,c,d,e])[1])}\\\\\\phantom{A }\\textbf{=}~`
					texte_corr +=`${tex_nombrecoul(a+b+c+d+e)} $`;
				}
				else
					if (somme_des_termes_par_signe([a,b,c,d,e])[0]!=0) texte_corr +=`${tex_nombrecoul(somme_des_termes_par_signe([a,b,c,d,e])[0])}$`
					else  texte_corr +=`${ecriture_algebriquec(somme_des_termes_par_signe([a,b,c,d,e])[1])}$`
			} 
			else {
				texte = `$ ${lettre_depuis_chiffre(i+1)} =  ${ecriture_nombre_relatif(a)}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `<br>$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`	
				}
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)} =  ${a}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)}$`;
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_nombre_relatifc(a)}+${ecriture_nombre_relatifc(s1*b)}+${ecriture_nombre_relatifc(s2*c)}+${ecriture_nombre_relatifc(s3*d)}+${ecriture_nombre_relatifc(s4*e)} $`;

				relatifs=trie_positifs_negatifs([a,s1*b,s2*c,s3*d,s4*e])		

				if (relatifs[0]>0&relatifs[4]<0) {
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_nombre_relatifc(relatifs[0])}+${ecriture_nombre_relatifc(relatifs[1])}+${ecriture_nombre_relatifc(relatifs[2])}+${ecriture_nombre_relatifc(relatifs[3])}+${ecriture_nombre_relatifc(relatifs[4])} $`;
				}
				sommes_signees=somme_des_termes_par_signe([relatifs[0],relatifs[1],relatifs[2],relatifs[3],relatifs[4]])
				if (sommes_signees[0]!=0&&sommes_signees[1]!=0) {					
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_nombre_relatifc(sommes_signees[0])}+${ecriture_nombre_relatifc(sommes_signees[1])} $`;
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_algebriquec(a+s1*b+s2*c+s3*d+s4*e)} $<br>`;
				}
				else
					if (sommes_signees[0]!=0) texte_corr +=`<br>$ \\phantom{A}=${ecriture_algebriquec(sommes_signees[0])}$`
					else  texte_corr +=`<br>$ \\phantom{A}=${ecriture_algebriquec(sommes_signees[1])}$<br>`
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu_sans_numero(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];	
}



/**
* Effectuer la somme de 5 nombres relatifs.
*
* Pour la correction, on commence par effectuer la somme des termes de mÃªme signe
*
* * On peut paramÃ©trer les distances Ã  zÃ©ro qui sont par dÃ©faut infÃ©rieures Ã  20
* * On peut utiliser des Ã©critures simplifiÃ©es (ce qui n'est pas le cas par dÃ©faut)
* @Auteur RÃ©mi Angot
* 5R20-3
*/
function Exercice_additions_de_5_relatifs(max=20){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = max ;
	this.sup2 = false; // Ã©criture simplifiÃ©e
	this.titre = "Additions de 5 nombres relatifs"
	this.consigne = 'Calculer'
	this.spacing = 2;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, a, b,relatifs, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(1,this.sup)*choice([-1,1]);
			b = randint(1,this.sup)*choice([-1,1]);
			if (a==1 & b==1) { // On s'assure que les 3 premiÃ¨res termes n'ont pas le mÃªme signe
				c = -1
			} else if (a==-1 & b==-1) {
				c = 1
			}
			else {
				c = randint(1,this.sup)*choice([-1,1]);	
			}
			d = randint(1,this.sup)*choice([-1,1]);
			e = randint(1,this.sup)*choice([-1,1]);
			s1 = 1; // Que des additions
			s2 = 1;
			s3 = 1;
			s4 = 1;
			if (this.sup2){
				texte = `$ ${lettre_depuis_chiffre(i+1)} = ${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}${ecriture_algebrique(d)}${ecriture_algebrique(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `<br>$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`
				}
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)} =  ${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}${ecriture_algebrique(d)}${ecriture_algebrique(e)} = ${somme_des_termes_par_signe([a,b,c,d,e])[0]}${ecriture_algebrique(somme_des_termes_par_signe([a,b,c,d,e])[1])} = ${a+b+c+d+e} $`;		
			} else {
				texte = `$ ${lettre_depuis_chiffre(i+1)} =  ${ecriture_nombre_relatif(a)}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)} = \\dotfill $`;
				if (!sortie_html){
					texte += `<br>$ ${lettre_depuis_chiffre(i+1)} = \\dotfill $`	
				}
				texte_corr = `$ ${lettre_depuis_chiffre(i+1)} =  ${ecriture_nombre_relatif(a)}${signe(s1)}${ecriture_nombre_relatif(b)}${signe(s2)}${ecriture_nombre_relatif(c)}${signe(s3)}${ecriture_nombre_relatif(d)}${signe(s4)}${ecriture_nombre_relatif(e)} $`;
				relatifs=trie_positifs_negatifs([a,s1*b,s2*c,s3*d,s4*e])		

				if (relatifs[0]>0&relatifs[4]<0) {
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_nombre_relatifc(relatifs[0])}+${ecriture_nombre_relatifc(relatifs[1])}+${ecriture_nombre_relatifc(relatifs[2])}+${ecriture_nombre_relatifc(relatifs[3])}+${ecriture_nombre_relatifc(relatifs[4])} $`;
				}
				sommes_signees=somme_des_termes_par_signe([relatifs[0],relatifs[1],relatifs[2],relatifs[3],relatifs[4]])
				if (sommes_signees[0]!=0&&sommes_signees[1]!=0) {					
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_nombre_relatifc(sommes_signees[0])}+${ecriture_nombre_relatifc(sommes_signees[1])} $`;
				texte_corr += `<br>$ \\phantom{A}= ${ecriture_algebriquec(a+s1*b+s2*c+s3*d+s4*e)}$<br>`;
				}
				else
					if (sommes_signees[0]!=0) texte_corr +=`<br>$ \\phantom{A}=${ecriture_algebriquec(sommes_signees[0])}$`
					else  texte_corr +=`<br>$ \\phantom{A}=${ecriture_algebriquec(sommes_signees[1])}$<br>`
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu_sans_numero(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des Ã©critures simplifiÃ©es'];	
}
/**
* x, y, z Ã©tant 3 entiers compris entre 2 et 9, calculer : 
* * kx
* * kx-y
* * xy
* * x+y
* * x+y+z
* * x(y+z)
* * x^2
* * x^2+ky
* * x^2+y^2
* * ax^2+y^2
* * ax^2+bx+c
* @Auteur RÃ©mi Angot
* 5L13-2
*/
function Exercice_substituer(difficulte=1){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = difficulte ;
	this.titre = "Substitution";
	this.consigne = 'Calculer';
	this.spacing = 1;
	this.consigne_modifiable = false;


	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		let type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10]
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let k = randint(2,9);
		let k2 = randint(2,9);
		let k3 = randint(2,9);
		if (this.sup>1){ // si difficultÃ© 2, k, k2 et k3 peuvent Ãªtre nÃ©gatifs !!! La correction est Ã  faire. Exercice non fini
			k = k*choice([-1,1]);
			k2 = k2*choice([-1,1]);
			k3 = k3*choice([-1,1]);
		}
		let valeurs_possibles = range(9,[0,1]) // Toutes les valeurs de 2 Ã  9
		let x = choice(valeurs_possibles);
		enleve_element(valeurs_possibles,x);
		let y = choice(valeurs_possibles);
		enleve_element(valeurs_possibles,y);
		let z = choice(valeurs_possibles);
		// x, y et z sont diffÃ©rents
		this.consigne = `Calculer pour $x=${x}$, $y=${y}$ et $z=${z}$.`
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			type_de_questions = liste_type_de_questions[i];
			switch (type_de_questions){
				case 1 :
					texte = `$${lettre_depuis_chiffre(i+1)}=${k}x$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${k}x=${k}\\times  ${x}=${k*x}$`;
					break ;
				case 2 :
					texte = `$${lettre_depuis_chiffre(i+1)}=${k}x-y$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${k}x-y=${k}\\times  ${x}-${y}=${k*x-y}$`;
					break ;
				case 3 :
					texte = `$${lettre_depuis_chiffre(i+1)}=xy$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=xy=${x}\\times  ${y}=${x*y}$`;
					break ;
				case 4 :
					texte = `$${lettre_depuis_chiffre(i+1)}=x+y$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=x+y=${x}+${y}=${x+y}$`;
					break ;
				case 5 :
					texte = `$${lettre_depuis_chiffre(i+1)}=xy+z$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=xy+z=${x}\\times  ${y}+${z}=${x*y+z}$`;
					break ;
				case 6 :
					texte = `$${lettre_depuis_chiffre(i+1)}=x(y+z)$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=x(y+z)=${x}\\times (${y}+${z})=${x*(y+z)}$`;
					break ;
				case 7 :
					texte = `$${lettre_depuis_chiffre(i+1)}=x^2+${ecriture_parenthese_si_negatif(k)}y$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=x^2+${ecriture_parenthese_si_negatif(k)}y=${x}^2+${ecriture_parenthese_si_negatif(k)}\\times  ${y}=${x*x}+${ecriture_parenthese_si_negatif(k)}\\times  ${y}=${x*x+k*y}$`;
					break ;
				case 8 :
					texte = `$${lettre_depuis_chiffre(i+1)}=x^2+y^2$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=x^2+y^2=${x}^2+${y}^2=${x*x}+${y*y}=${x*x+y*y}$`;
					break ;
				case 9 :
					texte = `$${lettre_depuis_chiffre(i+1)}=${k}x^2+y^2$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${k}x^2+y^2=${k}\\times  ${x}^2+${y}^2=${k}\\times  ${x*x}+${y*y}=${k*x*x+y*y}$`;
					break ;
				case 10 :
					texte = `$${lettre_depuis_chiffre(i+1)}=${k}x^2+${ecriture_parenthese_si_negatif(k2)}x+${ecriture_parenthese_si_negatif(k3)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${k}x^2+${ecriture_parenthese_si_negatif(k2)}x+${ecriture_parenthese_si_negatif(k3)}=${k}\\times  ${x}^2+${ecriture_parenthese_si_negatif(k2)}\\times  ${ecriture_parenthese_si_negatif(x)}+${ecriture_parenthese_si_negatif(k3)}=${k}\\times  ${x*x}+${ecriture_parenthese_si_negatif(k2)}\\times  ${x}+${ecriture_parenthese_si_negatif(k3)}=${k*x*x+k2*x+k3}$`;
					break ;
				
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,'1 : Multiplication par un facteur positif\n2: Multiplication par un facteur relatif'] 
}

/**
* DÃ©terminer la valeur d'un angle dans un triangle.
*
* Correction avec dÃ©tails ou pas. 9 cas diffÃ©rents
* * On connait 2 angles sur 3.
* * Dans un triangle rectangle, on connait un angle aigu.
* * Dans un triangle isocÃ¨le, on connait un angle Ã  la base.
* * Dans un triangle isocÃ¨le, on connait l'angle au sommet principal.
* * Quelle est la mesure d'un angle aigu dans un triangle rectangle qui a 2 angles Ã©gaux ?
* * Dans un triangle rectangle, un angle aigu mesure le double de l'autre.
* * Dans un triangle rectangle, un angle aigu mesure le quart de l'autre.
* * Dans un triangle rectangle, un angle aigu mesure 5 fois l'autre.
* * Un triangle a 3 angles Ã©gaux.
* * Dans un triangle rectangle, un angle mesure le tiers de l'autre.
* @Auteur Jean-Claude Lhote
* RÃ©fÃ©rence 5G31
*/
function Exercice_angles_triangles(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1 ;
	this.titre = "Somme des angles dans un triangle";
	this.consigne = '';
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1.5;
	sortie_html ? this.spacing = 2 : this.spacing = 1.5;
	this.nb_questions=5;
	this.consigne_modifiable = false;
	this.correction_detaillee_disponible = true;
	this.nb_cols=1;
	this.nb_cols_corr=1;

	let type_de_questions_disponibles
	let troisieme_angle = function(a1,a2) {
		if (a1+a2<=180)  return 180-(a1+a2)
		else return -1;
	}

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		if (this.sup==1) type_de_questions_disponibles = [1,2,4,5,9]
		else
			if (this.sup==2) type_de_questions_disponibles = [3,6,7,8,10,11,12]
			else type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10,11,12]
		
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		this.consigne=`Calculer l'angle demandÃ© dans les triangles suivants :`
		let lettre1,lettre2,lettre3,s1,s2,s3
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			type_de_questions = liste_type_de_questions[i];
			lettre1 = randint(1,26)	// aleatoirisation du nom des points
			lettre2 = randint(1, 26, [lettre1])
			s1 = lettre_depuis_chiffre(lettre1)
			s2 = lettre_depuis_chiffre(lettre2)
			lettre3 = randint(1, 24, [lettre1, lettre2])
			s3 = lettre_depuis_chiffre(lettre3)
			if (this.correction_detaillee) texte_corr = `Dans un triangle, la somme des angles est Ã©gale Ã  $180\\degree$.<br>`;
			else texte_corr=``;
			switch (type_de_questions){
				case 1 :  // triangle quelconque 2 angles connus
					angle1=randint(10,40);
					angle2=randint(20,100);
					texte = `$${s1+s2+s3}$ est un triangle quelconque. L'angle $\\widehat{${s1+s2+s3}}$ mesure $${angle1}\\degree$ et l'angle $\\widehat{${s2+s1+s3}}$ mesure $${angle2}\\degree$.<br>Quelle est la mesure de l'angle $\\widehat{${s2+s3+s1}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr+=`$\\widehat{${s1+s2+s3}} + \\widehat{${s2+s3+s1}} + \\widehat{${s2+s1+s3}}=180\\degree$<br>`;
						texte_corr+=`Donc $\\widehat{${s2+s3+s1}}=180- \\left(\\widehat{${s1+s2+s3}} + \\widehat{${s2+s1+s3}}\\right)$.<br>D'oÃ¹ `
					}
					texte_corr += `$\\widehat{${s2+s3+s1}}$= $180\\degree-\\left(${angle1}\\degree+${angle2}\\degree\\right)=180\\degree-${angle1+angle2}\\degree=${troisieme_angle(angle1,angle2)}\\degree$.<br>`;
					texte_corr += `L'angle $\\widehat{${s2+s3+s1}}$ mesure $${troisieme_angle(angle1,angle2)}\\degree$.`
					break ;
				case 2 : // Triangle rectangle Un angle aigu connu 
					angle1=90;
					angle2=randint(5,85);
					texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s2}$ et l'angle $\\widehat{${s2+s1+s3}}$ mesure $${angle2}\\degree$.<br>Quelle est la mesure de l'angle $\\widehat{${s2+s3+s1}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr += `Comme l'angle $\\widehat{${s1+s2+s3}}$ est droit, les angles $\\widehat{${s2+s3+s1}}$ et $\\widehat{${s2+s1+s3}}$ sont complÃ©mentaires.<br>`
						texte_corr +=`On a donc : $\\widehat{${s2+s3+s1}}+ \\widehat{${s2+s1+s3}}=90\\degree$<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s2+s3+s1}}=90\\degree-${angle2}\\degree=${90-angle2}\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s2+s3+s1}}$ mesure $${90-angle2}\\degree$.`;
					break ;
				case 3 : // triangle isocÃ¨le, angle au sommet principal connu
					angle1=randint(10,170);
					angle2=(180-angle1)/2;
					texte = `$${s1+s2+s3}$ est un triangle isocÃ¨le en $${s1}$. L'angle $\\widehat{${s2+s1+s3}}$ mesure $${angle1}\\degree$.<br>Quelle est la mesure de l'angle $\\widehat{${s2+s3+s1}}$ ?`;
					
					if (this.correction_detaillee) {
						texte_corr += `Les angles Ã  la base d'un triangle isocÃ¨le sont de mÃªme mesure.<br>`
						texte_corr +=`D'oÃ¹ $\\widehat{${s1+s2+s3}}=\\widehat{${s2+s3+s1}}$.<br>`
						texte_corr +=`On a donc : $\\widehat{${s2+s1+s3}}+2\\times  \\widehat{${s2+s3+s1}}=180\\degree$.<br>`;
						texte_corr +=`Soit  $${angle1}\\degree+2\\times  \\widehat{${s2+s3+s1}}=180\\degree$.<br>`;
						texte_corr +=`D'oÃ¹ $2\\times  \\widehat{${s2+s3+s1}}=180\\degree-${angle1}\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s2+s3+s1}}=\\left(180\\degree-${angle1}\\degree\\right)\\div  2=${180-angle1}\\degree\\div  2=${tex_nombrec((180-angle1)/2)}\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s2+s3+s1}}$ mesure $${tex_nombrec((180-angle1)/2)}\\degree$.`;
					break ;
				case 4 : // triangle isocÃ¨le, angle Ã  la base connu
					angle2=randint(10,80);
					angle1=180-angle2*2;
					texte = `$${s1+s2+s3}$ est un triangle isocÃ¨le en $${s1}$. L'angle $\\widehat{${s1+s2+s3}}$ mesure $${angle2}\\degree$.<br>Quelle est la mesure de l'angle $\\widehat{${s2+s1+s3}}$ ?`;

					if (this.correction_detaillee) {
					texte_corr+=`Les deux angles Ã  la base d'un triangle isocÃ¨le sont Ã©gaux.<br>`;
					texte_corr += `Donc $\\widehat{${s1+s2+s3}}=\\widehat{${s2+s3+s1}}=${angle2}\\degree$.<br>D'oÃ¹ `
					}
					texte_corr += `$\\widehat{${s2+s1+s3}}=180\\degree-2\\times ${angle2}\\degree=180\\degree-${2*angle2}\\degree=${180-2*angle2}\\degree$.<br>`;
					texte_corr += `L'angle $\\widehat{${s2+s1+s3}}$ mesure $${180-2*angle2}\\degree$.`;
					break ;
				case 5 :  // cas non alÃ©atoires triangle rectangle isocÃ¨le
					angle1=90;
					angle2=45;
					texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s2}$ et $\\widehat{${s2+s1+s3}}=\\widehat{${s2+s3+s1}}$.<br>Quelle est la mesure de l'angle $\\widehat{${s2+s3+s1}}$ ?`;

					if (this.correction_detaillee) {
						texte_corr += `Comme $\\widehat{${s2+s1+s3}}=\\widehat{${s2+s3+s1}}$,<br>`;
						texte_corr += `on a : $2 \\times  \\widehat{${s2+s1+s3}} + 90\\degree=180\\degree$.<br>D'oÃ¹ `;
						texte_corr += ` $2 \\times  \\widehat{${s2+s1+s3}}=180\\degree-90\\degree=90\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s2+s1+s3}}=90\\degree \\div  2=45\\degree$.<br>`;
					texte_corr += `L'angle $\\widehat{${s2+s1+s3}}$ mesure $45\\degree$.`;
				
					break ;
				case 6 : // cas non alÃ©atoires triangle rectangle 30,60,90
					texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s1}$. L'angle $\\widehat{${s1+s2+s3}}$ mesure le double de l'angle $\\widehat{${s1+s3+s2}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr += `Comme $\\widehat{${s1+s2+s3}}=2\\times \\widehat{${s1+s3+s2}}$ et comme $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ sont complÃ©mentaires,<br>`;
						texte_corr += `on a : $2 \\times  \\widehat{${s1+s3+s2}} + \\widehat{${s1+s3+s2}}=90\\degree$.<br>D'oÃ¹ `;
						texte_corr += ` $3 \\times  \\widehat{${s1+s3+s2}}=90\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s1+s3+s2}}=90\\degree \\div  3=30\\degree$.<br>`;
					texte_corr += `$\\widehat{${s1+s2+s3}}=2\\times \\widehat{${s1+s3+s2}}=2\\times  30\\degree=60\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $30\\degree$ et l'angle $\\widehat{${s1+s2+s3}}$ mesure $60\\degree$.`;
				
					break ;
				case 7 :// cas non alÃ©atoires triangle rectangle 18,72,90
				texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s1}$. L'angle $\\widehat{${s1+s3+s2}}$ mesure le quart de l'angle $\\widehat{${s1+s2+s3}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ ?`;
				if (this.correction_detaillee) {
					texte_corr += `Comme $\\widehat{${s1+s2+s3}}=\\dfrac{\\widehat{${s1+s3+s2}}}{4}$, on a $\\widehat{${s1+s3+s2}}=4\\times \\widehat{${s1+s2+s3}}$.<br>`;
					texte_corr += `De plus $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ sont complÃ©mentaires.<br>`;
					texte_corr += `D'oÃ¹ : $4 \\times  \\widehat{${s1+s2+s3}} + \\widehat{${s1+s2+s3}}=90\\degree$.<br>D'oÃ¹ `;
					texte_corr += ` $5 \\times  \\widehat{${s1+s2+s3}}=90\\degree$.<br>D'oÃ¹ `;
				}
				texte_corr += `$\\widehat{${s1+s2+s3}}=90\\degree \\div  5=18\\degree$.<br>`;
				texte_corr += `$\\widehat{${s1+s3+s2}}=4\\times \\widehat{${s1+s2+s3}}=4\\times  18\\degree=72\\degree$.<br>`;
				texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $72\\degree$ et l'angle $\\widehat{${s1+s2+s3}}$ mesure $18\\degree$.`;
					break ;
				case 8 :// cas non alÃ©atoires triangle rectangle 15,75,90
				texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s1}$. L'angle $\\widehat{${s1+s2+s3}}$ est cinq fois plus grand que l'angle $\\widehat{${s1+s3+s2}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ ?`;
				if (this.correction_detaillee) {
					texte_corr += `$\\widehat{${s1+s2+s3}}=5\\times \\widehat{${s1+s3+s2}}$ et comme $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ sont complÃ©mentaires,<br>`;
					texte_corr += ` on a : $5 \\times  \\widehat{${s1+s3+s2}} + \\widehat{${s1+s3+s2}}=90\\degree$.<br>D'oÃ¹ `;
					texte_corr += ` $6 \\times  \\widehat{${s1+s3+s2}}=90\\degree$.<br>D'oÃ¹ `;
				}
				texte_corr += `$\\widehat{${s1+s3+s2}}=90\\degree \\div  6=15\\degree$<br>`;
				texte_corr += `$\\widehat{${s1+s2+s3}}=5\\times \\widehat{${s1+s3+s2}}=5\\times  15\\degree=75\\degree$<br>`;
				texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $15\\degree$ et l'angle $\\widehat{${s1+s2+s3}}$ mesure $75\\degree$.`;
				break ;
				case 9 : //cas non alÃ©atoire triangle Ã©quilatÃ©ral
					texte = `$${s1+s2+s3}$ est un triangle dont les trois angles sont Ã©gaux. Quelles sont les mesures de ses angles ?`;
					if (this.correction_detaillee) {
						texte_corr += `De plus, $\\widehat{${s1+s2+s3}}=\\widehat{${s1+s3+s2}}=\\widehat{${s2+s1+s3}}$<br>`
						texte_corr += `D'oÃ¹ $3\\times \\widehat{${s1+s2+s3}}=180\\degree$.<br>`;
						texte_corr += `D'oÃ¹ : $\\widehat{${s1+s2+s3}}=180\\degree\\div  3=60\\degree$.<br>`;
					}	
					texte_corr += `On a donc $\\widehat{${s1+s2+s3}}=\\widehat{${s1+s3+s2}}=\\widehat{${s2+s1+s3}}=60\\degree$.<br>`;
					texte_corr += `Le triangle $${s1+s2+s3}$ est un triangle Ã©quilatÃ©ral.`
					break ;
				case 10 : //cas non alÃ©atoire triangle rectangle 22.5, 67.5,90
					texte = `$${s1+s2+s3}$ est un triangle rectangle en $${s1}$. L'angle $\\widehat{${s1+s3+s2}}$ mesure le tiers de l'angle $\\widehat{${s1+s2+s3}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr += `Comme $\\widehat{${s1+s2+s3}}=\\dfrac{\\widehat{${s1+s3+s2}}}{3}$, on a $\\widehat{${s1+s3+s2}}=3\\times \\widehat{${s1+s2+s3}}$.<br>`;
						texte_corr += `De plus $\\widehat{${s1+s2+s3}}$ et $\\widehat{${s1+s3+s2}}$ sont complÃ©mentaires.<br>`;
						texte_corr += `D'oÃ¹ : $3 \\times  \\widehat{${s1+s2+s3}} + \\widehat{${s1+s2+s3}}=90\\degree$.<br>D'oÃ¹ `;
						texte_corr += ` $4 \\times  \\widehat{${s1+s2+s3}}=90\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s1+s2+s3}}=90\\degree \\div  4=22,5\\degree$.<br>`;
					texte_corr += `$\\widehat{${s1+s3+s2}}=3\\times \\widehat{${s1+s2+s3}}=3\\times  22,5\\degree=67,5\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $67,5\\degree$ et l'angle $\\widehat{${s1+s2+s3}}$ mesure $22,5\\degree$.`;
					break ;
				case 11 : //cas non alÃ©atoire triangle 67.5 , 67.5 , 45.
					texte = `$${s1+s2+s3}$ est un triangle isocÃ¨le en $${s1}$. L'angle $\\widehat{${s2+s1+s3}}$ mesure les deux tiers de l'angle $\\widehat{${s1+s2+s3}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$, $\\widehat{${s1+s3+s2}}$ et $\\widehat{${s2+s1+s3}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr += `Comme $\\widehat{${s2+s1+s3}}=\\dfrac{2\\times  \\widehat{${s1+s3+s2}}}{3}$, on a $\\widehat{${s1+s3+s2}}=\\dfrac{3\\times \\widehat{${s2+s1+s3}}}{2}$.<br>`;
						texte_corr += `De plus $\\widehat{${s1+s3+s2}}$ et $\\widehat{${s1+s2+s3}}$ sont Ã©gaux, alors $\\widehat{${s1+s2+s3}}=\\dfrac{3\\times \\widehat{${s2+s1+s3}}}{2}$.<br>`;
						texte_corr += `D'oÃ¹ : $\\dfrac{3 \\times  \\widehat{${s2+s1+s3}}}{2}\\times  2 + \\widehat{${s2+s1+s3}}=180\\degree$.<br>`;
						texte_corr += `D'oÃ¹ : $3 \\times  \\widehat{${s2+s1+s3}} + \\widehat{${s2+s1+s3}}=180\\degree$.<br>D'oÃ¹ `;
						texte_corr += ` $4 \\times  \\widehat{${s2+s1+s3}}=180\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s2+s1+s3}}=180\\degree \\div  4=45\\degree$.<br>`;
					texte_corr += `$\\widehat{${s1+s3+s2}}=\\dfrac{3\\times \\widehat{${s2+s1+s3}}}{2}=\\dfrac{3\\times  45\\degree}{2}=\\dfrac{135\\degree}{2}=67,5\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $67,5\\degree$, l'angle $\\widehat{${s1+s2+s3}}$ mesure $67,5\\degree$ et l'angle $\\widehat{${s2+s1+s3}}$ mesure $45\\degree$`;
					break;
					case 12 : //cas non alÃ©atoire triangle 72 , 72 , 36.
					texte = `$${s1+s2+s3}$ est un triangle isocÃ¨le en $${s1}$. L'angle $\\widehat{${s1+s2+s3}}$ mesure le double de l'angle $\\widehat{${s2+s1+s3}}$.<br>Quelles sont les mesures des angles $\\widehat{${s1+s2+s3}}$, $\\widehat{${s1+s3+s2}}$ et $\\widehat{${s2+s1+s3}}$ ?`;
					if (this.correction_detaillee) {
						texte_corr += `On a $\\widehat{${s1+s2+s3}}=2\\times  \\widehat{${s2+s1+s3}}$.<br>`;
						texte_corr += `De plus $\\widehat{${s1+s3+s2}}$ et $\\widehat{${s1+s2+s3}}$ sont Ã©gaux, alors $\\widehat{${s1+s3+s2}}=2\\times \\widehat{${s2+s1+s3}}$.<br>`;
						texte_corr += `D'oÃ¹ : $2 \\times  \\widehat{${s2+s1+s3}}\\times  2 + \\widehat{${s2+s1+s3}}=180\\degree$.<br>`;
						texte_corr += `D'oÃ¹ : $4 \\times  \\widehat{${s2+s1+s3}} + \\widehat{${s2+s1+s3}}=180\\degree$.<br>D'oÃ¹ `;
						texte_corr += ` $5 \\times  \\widehat{${s2+s1+s3}}=180\\degree$.<br>D'oÃ¹ `;
					}
					texte_corr += `$\\widehat{${s2+s1+s3}}=180\\degree \\div  5=36\\degree$.<br>`;
					texte_corr += `$\\widehat{${s1+s3+s2}}=2\\times \\widehat{${s2+s1+s3}}=2\\times  36\\degree=72\\degree$<br>`;
					texte_corr += `L'angle $\\widehat{${s1+s3+s2}}$ mesure $72\\degree$, l'angle $\\widehat{${s1+s2+s3}}$ mesure $72\\degree$ et l'angle $\\widehat{${s2+s1+s3}}$ mesure $36\\degree$`;
					break;
				
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficutÃ©',3,"1 : Facile \n 2 : Difficile \n 3 : MÃ©lange des deux niveaux"]
}

/**
 * Calculs de frÃ©quences dans des sÃ©ries statistiques
* @auteur Jean-Claude Lhote
* RÃ©fÃ©rence 5S13
*/
 function Calculer_des_frequences(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer des frÃ©quences";
	this.consigne = "";
	this.nb_questions = 1;
	this.spacing = 1;
	this.spacing_corr = 1.5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;	 
	this.sup=1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
	
		for (let i = 0, nombre_des, nombre_faces, nombre_tirages,index_valeur,frequence,tirages, texte,texte_corr, cpt = 0; i < this.nb_questions && cpt<50;){
		if (this.sup==1) { // ici on lance des dÃ©s
			nombre_des=randint(1,2);
			nombre_faces=choice([4,6,8,10]);
			nombre_tirages=choice([50,100,200,500,1000]);
			tirages=tirer_les_des(nombre_tirages,nombre_faces,nombre_des); // on rÃ©cupÃ¨re une sÃ©rie rangÃ©e dans l'ordre croissant avec les effectifs correspondants
			do index_valeur=randint(0,tirages.length-1);
			while (tirages[index_valeur][1]==0) // on choisi au hasard l'index d'une valeur dont l'effectif est diffÃ©rent de 0.
			if (nombre_des>1) {
				texte=`On a rÃ©alisÃ© $${nombre_tirages}$ lancers de $${nombre_des}$ dÃ©s Ã  $${nombre_faces}$ faces.<br>`;
			}
			else {
				texte=`On a rÃ©alisÃ© $${nombre_tirages}$ lancers d'un dÃ© Ã  $${nombre_faces}$ faces.<br>`;
			}
			texte+='Les rÃ©sultats sont inscrits dans le tableau ci-dessous :<br><br>'
			if (tirages.length>12) {
				texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c';  // construction du tableau des effectifs 1/2
				for (let j=0;j<=Math.round(tirages.length/2);j++)		texte+='|c';
				texte+='}\\hline  \\text{Scores}';
				for (let j=0;j<Math.round(tirages.length/2);j++) 		texte+='&'+tirages[j][0];
				texte+='\\\\\\hline \\text{Nombre d\'apparitions}'
				for (let j=0;j<Math.round(tirages.length/2);j++) 		texte+='&'+tirages[j][1];
				texte+='\\\\\\hline\\end{array}$<br><br>'

				texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c';  // construction du tableau des effectifs 2/2
				for (let j=Math.round(tirages.length/2);j<=tirages.length;j++)		texte+='|c';
				texte+='}\\hline  \\text{Scores}';
				for (let j=Math.round(tirages.length/2);j<tirages.length;j++) 		texte+='&'+tirages[j][0];
				texte+='\\\\\\hline \\text{Nombre d\'apparitions}'
				for (let j=Math.round(tirages.length/2);j<tirages.length;j++) 		texte+='&'+tirages[j][1];
				texte+='\\\\\\hline\\end{array}$'
			}
			else {
				texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c';  // construction du tableau des effectifs en un seul morceau
				for (let j=0;j<=tirages.length;j++)		texte+='|c';
				texte+='}\\hline  \\text{Scores}';
				for (let j=0;j<tirages.length;j++) 		texte+='&'+tirages[j][0];
				texte+='\\\\\\hline \\text{Nombre d\'apparitions}'
				for (let j=0;j<tirages.length;j++) 		texte+='&'+tirages[j][1];
				texte+='\\\\\\hline\\end{array}$'
			}

			texte+='<br><br> Calculer la frÃ©quence de la valeur '+`$${calcul(nombre_des+index_valeur)}$.`
			texte_corr='La valeur '+`$${calcul(nombre_des+index_valeur)}$ apparaÃ®t `+`$${tirages[index_valeur][1]}$ fois.<br>Le nombre total de lancers est $${tex_nombre(nombre_tirages)}$.<br>`;
			texte_corr+='La frÃ©quence de la valeur '+`$${calcul(nombre_des+index_valeur)}$`+' est '+`$${tex_fraction(tirages[index_valeur][1],tex_nombre(nombre_tirages))}=${tex_nombre(calcul(tirages[index_valeur][1]/nombre_tirages))}$<br>`;
			texte_corr+='Soit '+`$${tex_nombre(calcul(tirages[index_valeur][1]*100/nombre_tirages))}\\thickspace\\%$.`
		}
		else if (this.sup==2) { // ici on trie des notes
			nombre_notes=choice([8,10,12]);
			notes=liste_de_notes(nombre_notes,randint(0,7),randint(13,20));  // on rÃ©cupÃ¨re une liste de notes (sÃ©rie brute)
			index_valeur=randint(0,notes.length-1);  // on choisi une des notes au hasard
			frequence=0;
			for(j=0;j<notes.length;j++) {   // frequence va contenir l'effectif de la note choisie
				if (notes[j]==notes[index_valeur]) frequence++;
			}
			texte=`${prenom()} a obtenu ces notes ce trimestre-ci en mathÃ©matiques :<br>`;
			texte+=`$${notes[0]}$`
			for (let j=1;j<nombre_notes-1;j++) 	texte+=`; $${notes[j]}$ `;	// On liste les notes (sÃ©rie brute)
			texte+=`et $${notes[nombre_notes-1]}$.`;

			texte+=`<br><br>Calculer la frÃ©quence de la note $${notes[index_valeur]}$.`
			texte_corr=`La note $${notes[index_valeur]}$ a Ã©tÃ© obtenue $${frequence}$ fois.<br> Il y a $${nombre_notes}$ notes<br>`;
			texte_corr+=`Donc la frÃ©quence de la note $${notes[index_valeur]}$ est : `+`$${tex_fraction(tex_nombre(frequence),tex_nombre(nombre_notes))}$`;
			if (arrondi(frequence/nombre_notes,3)==frequence/nombre_notes) {  // valeurs exactes
				texte_corr+=`$=${arrondi_virgule(frequence/nombre_notes,3)}$<br>`;	// frÃ©quence Ã  3 chiffres significatifs
				texte_corr+='Soit '+`$${tex_nombre(calcul(frequence*100/nombre_notes))}\\thickspace\\%$.` // frÃ©quence en pourcentage avec 1 dÃ©cimale
			}
			else {
				texte_corr+=`$\\approx${arrondi_virgule(frequence/nombre_notes,3)}$`  // valeurs arrondies
				texte_corr+='Soit environ '+`$${arrondi_virgule(calcul(frequence*100/nombre_notes),1)}\\thickspace\\%$.`		
			}
			
		}
		else {  // ici on relÃ¨ve des tempÃ©ratures
			let mois=randint(1,12);
			let annee=randint(1980,2019);
			let temperatures_de_base=[3,5,9,13,19,24,26,25,23,18,10,5];
			nombre_temperatures=jours_par_mois(mois);
			temperatures=un_mois_de_temperature(temperatures_de_base[mois-1],mois,annee); // on rÃ©cupÃ¨re une sÃ©rie de tempÃ©rature correspondant Ã  1 mois d'une annÃ©e (sÃ©rie brute)
			index_valeur=randint(0,temperatures.length-1);  // on choisi l'index d'une valeur au hasard
			frequence=0;
			for(j=0;j<temperatures.length;j++) {
				if (temperatures[j]==temperatures[index_valeur]) frequence++;  // frequence contient l'effectif de cette valeur
			}
			texte=`En ${nom_du_mois(mois)} ${annee}, Ã  ${choice(['Moscou','Berlin','Paris','Bruxelles','Rome','Belgrade'])}, on a relevÃ© les tempÃ©ratures suivantes<br>`;

			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // On construit le tableau des tempÃ©ratures
			texte+='|c';
			for (let j=0;j<Math.round(temperatures.length/2);j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=0;j<Math.round(temperatures.length/2);j++)  texte+='&'+tex_nombre(j+1);
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}';
			for (j=0;j<Math.round(temperatures.length/2);j++) 	texte+='&'+temperatures[j];
			texte+='\\\\\\hline\\end{array}$<br><br>';
			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // On construit le tableau des tempÃ©ratures
			texte+='|c';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++)  texte+='&'+tex_nombre(j+1);
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}';
			for (j=Math.round(temperatures.length/2);j<temperatures.length;j++) 	texte+='&'+temperatures[j];
			texte+='\\\\\\hline\\end{array}$';
			

			texte+='<br><br>Calculer la frÃ©quence de la tempÃ©rature '+`$${temperatures[index_valeur]}^\\circ\\text{C}$.`;
			texte_corr=`En ${nom_du_mois(mois)} ${annee}, Ã  ${choice(['Moscou','Berlin','Paris','Bruxelles','Rome','Belgrade'])}, la tempÃ©rature $${temperatures[index_valeur]}^\\circ\\text{C}$ a Ã©tÃ© relevÃ©e $${frequence}$ fois.<br>`;
			texte_corr+=`Il y a $${jours_par_mois(mois)}$ jours ce mois-ci.<br> La frÃ©quence de la tempÃ©rature $${temperatures[index_valeur]}^\\circ\\text{C}$ est :<br>`;
			texte_corr+=`$${tex_fraction(tex_nombre(frequence),tex_nombre(jours_par_mois(mois)))}$`;
			if (arrondi(frequence/nombre_temperatures,3)==frequence/nombre_temperatures) {	// valeurs exactes
				texte_corr+=`$=${arrondi_virgule(frequence/nombre_temperatures,3)}$<br>`;
				texte_corr+='Soit '+`$${tex_nombre(calcul(frequence*100/nombre_temperatures))}\\thickspace\\%$.`

			}
			else {
				texte_corr+=`$\\approx${arrondi_virgule(frequence/nombre_temperatures,3)}$<br>`; // valeurs arrondies
				texte_corr+='Soit environ '+`$${arrondi_virgule(calcul(frequence*100/nombre_temperatures),1)}\\thickspace\\%$.`
			}
		}			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Type de sÃ©ries',3,"1 : Lancers de dÃ©s \n 2 : Liste de notes\n 3 : Un mois de tempÃ©ratures"];
}
 /**
  * Calcul de moyennes de sÃ©rie statistiques
* @auteur Jean-Claude Lhote
* RÃ©fÃ©rence 5S14
*/
function Calculer_des_moyennes(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer des moyennes";
	this.consigne = "";
	this.nb_questions = 1;
	this.spacing = 1;
	this.spacing_corr = 1.5;
	this.nb_cols_corr = 1;	
	this.nb_cols=1;  
	this.sup = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
	
		for (let i = 0, nombre_notes,notes,somme,nombre_temperatures,temperatures, texte,texte_corr, cpt = 0; i < this.nb_questions && cpt<50;){
		if (this.sup==1) { // ici on trie des notes
			nombre_notes=choice([8,10,12]);
			notes=liste_de_notes(nombre_notes,randint(0,7),randint(13,20)); // on rÃ©cupÃ¨re une sÃ©rie de notes (sÃ©rie brute)
			for (somme=0,j=0;j<nombre_notes;j++) somme+=notes[j];
		
			texte=`${prenom()} a obtenu ces notes ce trimestre-ci en mathÃ©matiques :<br>`;
			texte+=`$${notes[0]}$`
			for (let j=1;j<nombre_notes-1;j++) 	texte+=`; $${notes[j]}$ `;	// On liste les notes
			texte+=`et $${notes[nombre_notes-1]}$.<br>`;
			texte+=`Calculer la moyenne de cet Ã©lÃ¨ve en mathÃ©matiques.`
			texte_corr=`La somme des notes est : $${somme}$.<br> Il y a $${nombre_notes}$ notes<br>`;
			texte_corr+='Donc la moyenne de cet Ã©lÃ¨ve est : '+`$${tex_fraction(tex_nombre(somme),tex_nombre(nombre_notes))}$`;
			if (arrondi(somme/nombre_notes,2)==somme/nombre_notes) texte_corr+=`$=${arrondi_virgule(somme/nombre_notes,2)}$<br>`; // moyenne exacte
			else texte_corr+=`$\\approx${arrondi_virgule(somme/nombre_notes,2)}$`	// moyenne arrondie
		}
		else {  // ici on relÃ¨ve des tempÃ©ratures
			let mois=randint(1,12);
			let annee=randint(1980,2019);
			let temperatures_de_base=[3,5,9,13,19,24,26,25,23,18,10,5];
			nombre_temperatures=jours_par_mois(mois);
			temperatures=un_mois_de_temperature(temperatures_de_base[mois-1],mois,annee); // sÃ©rie brute de un mois de tempÃ©rature
			somme=0;
			texte=`En ${nom_du_mois(mois)} ${annee}, Ã  ${choice(['Moscou','Berlin','Paris','Bruxelles','Rome','Belgrade'])}, on a relevÃ© les tempÃ©ratures suivantes<br>`;
			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // tableau des tempÃ©ratures 1/2
			texte+='|c';
			for (let j=0;j<Math.round(temperatures.length/2);j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=0;j<Math.round(temperatures.length/2);j++)  texte+='&'+tex_nombre(j+1)
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}'
			for (j=0;j<Math.round(temperatures.length/2);j++) 	{
				texte+='&'+temperatures[j];
				somme+=temperatures[j];
			}
			texte+='\\\\\\hline\\end{array}$<br><br>';
			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // tableau des tempÃ©ratures 2/2
			texte+='|c';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++)  texte+='&'+tex_nombre(j+1)
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}'
			for (j=Math.round(temperatures.length/2);j<temperatures.length;j++) 	{
				texte+='&'+temperatures[j];
				somme+=temperatures[j];
			}
			texte+='\\\\\\hline\\end{array}$<br><br>';
			

			texte+='Calculer la tempÃ©rature moyenne de ce mois.';
			texte_corr=`En ${nom_du_mois(mois)} ${annee}, la somme des tempÃ©ratures est `+`$${somme}^\\circ\\text{C}$.<br> Il y a $${temperatures.length}$ jours ce mois-ci.<br> La tempÃ©rature moyenne est :<br>`;
			texte_corr+=`$${tex_fraction(tex_nombre(somme)+`^\\circ\\text{C}`,tex_nombre(nombre_temperatures))}$`
		
			if (arrondi(somme/nombre_temperatures,2)==somme/nombre_temperatures)  
				texte_corr+=`$=${arrondi_virgule(somme/nombre_temperatures,2)}^\\circ\\text{C}$`; // moyenne exacte
			else 				texte_corr+=`$\\approx${arrondi_virgule(somme/nombre_temperatures,2)}^\\circ\\text{C}$`;  // moyenne arrondie
		}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Type de sÃ©ries',2,"1 : SÃ©rie de notes\n 2 : SÃ©rie de tempÃ©ratures"];
}

 /**
  * Calculer des Ã©tendues de sÃ©ries statistiques
* @auteur Jean-Claude Lhote
* RÃ©fÃ©rence 3S15
*/
function Calculer_des_etendues(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer des Ã©tendues";
	this.consigne = "";
	this.nb_questions = 1;
	this.spacing = 1;
	this.spacing_corr = 1;
	this.nb_cols_corr = 1;	
	this.nb_cols=1; 
	this.sup = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
	
		for (let i = 0, nombre_notes,notes,min,max,temperatures,nombre_temperatures, texte,texte_corr, cpt = 0; i < this.nb_questions && cpt<50;){
		if (this.sup==1) { // ici on trie des notes
			nombre_notes=randint(8,12);
			notes=liste_de_notes(nombre_notes,randint(0,7),randint(13,20)); // on rÃ©cupÃ¨re une sÃ©rie de notes (sÃ©rie brute)
			for (min=20,max=0,j=0;j<nombre_notes;j++) {  // On cherche la note minimum et la note maximum
				min=Math.min(notes[j],min);
				max=Math.max(notes[j],max);
			}
			texte=`${prenom()} a obtenu ces notes ce trimestre-ci en mathÃ©matiques :<br>`;
			texte+=`$${notes[0]}$`
			for (let j=1;j<nombre_notes-1;j++) 	texte+=`; $${notes[j]}$ `;	// On liste les notes
			texte+=`et $${notes[nombre_notes-1]}$.<br>`;
			texte+=`Calculer l\'Ã©tendue de cette sÃ©rie de notes.`
			texte_corr=`La note la plus basse est : $${min}$.<br>La note la plus haute est $${max}$<br>`;
			texte_corr+='Donc l\'Ã©tendue de cette sÃ©rie est : '+`$${tex_nombre(max)}-${tex_nombre(min)}=${tex_nombre(max-min)}$`;
		}
		else {  // ici on relÃ¨ve des tempÃ©ratures
			let mois=randint(1,12);
			let annee=randint(1980,2019);
			let temperatures_de_base=[3,5,9,13,19,24,26,25,23,18,10,5];
			nombre_temperatures=jours_par_mois(mois);
			temperatures=un_mois_de_temperature(temperatures_de_base[mois-1],mois,annee); // sÃ©rie brute de un mois de tempÃ©rature
			max=0;
			min=20;
			texte=`En ${nom_du_mois(mois)} ${annee}, Ã  ${choice(['Moscou','Berlin','Paris','Bruxelles','Rome','Belgrade'])}, on a relevÃ© les tempÃ©ratures suivantes<br>`;
			
			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // tableau des tempÃ©ratures 1/2
			texte+='|c';
			for (let j=0;j<Math.round(temperatures.length/2);j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=0;j<Math.round(temperatures.length/2);j++)  	texte+='&'+tex_nombre(j+1)
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}'
			for (j=0;j<Math.round(temperatures.length/2);j++) 	{  // on cherche le minimum et le maximum
				texte+='&'+temperatures[j];
				min=Math.min(temperatures[j],min);
				max=Math.max(temperatures[j],max);
			}
			texte+='\\\\\\hline\\end{array}$<br><br>';

			texte+='$\\def\\arraystretch{1.5}\\begin{array}{|c'; // tableau des tempÃ©ratures 2/2
			texte+='|c';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++) texte+='|c';
			texte+='}\\hline  \\text{Jour}';
			for (let j=Math.round(temperatures.length/2);j<temperatures.length;j++)  	texte+='&'+tex_nombre(j+1)
			texte+='\\\\\\hline \\text{TempÃ©rature\\thickspace en} \\thickspace ^\\circ\\text{C}'
			for (j=Math.round(temperatures.length/2);j<temperatures.length;j++) 	{  // on cherche le minimum et le maximum
				texte+='&'+temperatures[j];
				min=Math.min(temperatures[j],min);
				max=Math.max(temperatures[j],max);
			}
			texte+='\\\\\\hline\\end{array}$<br><br>';

			texte+='Calculer l\'amplitude thermique de ce mois (l\'Ã©tendue de la sÃ©rie).';
			texte_corr=`En ${nom_du_mois(mois)} ${annee}, la tempÃ©rature minimale est `+`$${min}^\\circ\\text{C}$.<br>La tempÃ©rature maximale est $${max}^\\circ\\text{C}$.<br> L\'amplitude thermique est :<br>`;
			texte_corr+=`$${tex_nombre(max)}-${ecriture_parenthese_si_negatif(min)}$`
			if (min<0) 	texte_corr+=`$\\thickspace~=${tex_nombre(max)}+${tex_nombre(-min)}$`;
			texte_corr+=`$\\thickspace=${tex_nombre(max-min)}^\\circ\\text{C}$`;

		}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Type de sÃ©ries',2,"1 : SÃ©rie de notes\n 2 : SÃ©rie de tempÃ©ratures"];
}

/**
* Calculer +/- 20, 30, 40 ou 60 %
* @Auteur RÃ©mi Angot
* 5N110
*/
function Variation_en_pourcentages(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Variation en pourcentages";
	this.consigne = "Calculer le nouveau prix";
	this.nb_questions = 5;
	this.spacing = 1;
	this.spacing_corr = 1.5;
	this.nb_cols_corr = 1;
	this.nb_cols = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		for (let i = 0, prix, taux, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt<50;){
			prix = choice([randint(2,9),randint(1,9)*10,randint(1,9)*100,Algebrite.eval(randint(11,99)/10)]);
			// X | X0 | X00 | X,X0
			taux = choice([20,30,40,60]);
			if (choice([true,false])) {
				if (sortie_html) {
					texte = `Un article coÃ»tait ${tex_prix(prix)} â¬ et son prix diminue de ${taux} \%.`	
				} else {
					texte = `Un article coÃ»tait ${tex_prix(prix)} â¬ et son prix diminue de ${taux}~\\%.`	
				}
				
				texte_corr = `$\\text{Diminution : }${tex_fraction(taux,100)}\\times  ${tex_prix(prix)} = ${tex_prix(Algebrite.eval(prix*taux))}\\div 100=${tex_prix(Algebrite.eval(prix*taux/100))}$ â¬`
				texte_corr += `<br>`
				texte_corr += `$\\text{Nouveau prix : }${tex_prix(prix)}-${tex_prix(Algebrite.eval(prix*taux/100))}=${tex_prix(Algebrite.eval(prix-prix*taux/100))}$ â¬`
			} else {
				if (sortie_html) {
					texte = `Un article coÃ»tait ${tex_prix(prix)} â¬ et son prix augmente de ${taux} \%.`
				} else {
					texte = `Un article coÃ»tait ${tex_prix(prix)} â¬ et son prix augmente de ${taux}~\\%.`

				}
				texte_corr = `$\\text{Augmentation : }${tex_fraction(taux,100)}\\times  ${tex_prix(prix)}= ${tex_prix(Algebrite.eval(prix*taux))}\\div 100=${tex_prix(Algebrite.eval(prix*taux/100))}$ â¬`
				texte_corr += `<br>`
				texte_corr += `$\\text{Nouveau prix : }${tex_prix(prix)}+${tex_prix(Algebrite.eval(prix*taux/100))}=${tex_prix(Algebrite.eval(prix*(1+taux/100)))}$ â¬`
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}
/**
* Ãcrire une expression littÃ©rale Ã  partir d'une phrase : 
* * Double, triple, moitiÃ©, tiers, quart
* * Successeur, prÃ©dÃ©cesseur
* * CarrÃ©, cube, opposÃ©, inverse
* * Somme, produit, quotient
* * Nombre pair, nombre impair, multiple d'un nombre donnÃ©
* @Auteur RÃ©mi Angot
* 5L10
*/
function Ecrire_une_expression_litterale(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Ãcrire une expression littÃ©rale";
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = range1(17)
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let lettres_disponibles = ['x','y','z','t','a','b','c','n','m']
			let x = choice(lettres_disponibles)
			enleve_element(lettres_disponibles,x)
			let y = choice(lettres_disponibles)
			let k = randint(2,10)
			switch (liste_type_de_questions[i]){
				case 1 : // 2x
					texte = `Exprimer le double de $${x}$ en fonction de $${x}$.`
					texte_corr = `Le double de $${x}$ se note : $2${x}$.`
					break ;
				case 2 : // 3x
					texte = `Exprimer le triple de $${x}$  en fonction de $${x}$.`
					texte_corr = `Le triple de $${x}$  se note : $3${x}$.`
					break ;
				case 3 : // x/2
					texte = `Exprimer la moitiÃ© de $${x}$ en fonction de $${x}$.`
					texte_corr = `La moitiÃ© de $${x}$  se note :  $${tex_fraction(x,2)}=${x}\\div 2=0,5${x}$.`
					break ;
				case 4 : // x/4
					texte = `Exprimer le quart de $${x}$  en fonction de $${x}$.`
					texte_corr = `Le quart de $${x}$  se note :  $${tex_fraction(x,4)}=${x}\\div 4=0,25${x}$.`
					break ;
				case 5 : // x+1
					texte = `$${x}$ Ã©tant un nombre entier, exprimer l'entier suivant en fonction de $${x}$.`
					texte_corr = `Le successeur de $${x}$ se note :  $${x}+1$.`
					break ;
				case 6 : // x-1
					texte = `$${x}$ Ã©tant un nombre entier, exprimer l'entier prÃ©cÃ©dent en fonction de $${x}$.`
					texte_corr = `Le prÃ©decesseur de $${x}$  se note :  $${x}-1$.`
					break ;
				case 6 : // x^2
					texte = `Exprimer le carrÃ© de $${x}$  en fonction de $${x}$.`
					texte_corr = `Le carrÃ© de $${x}$  se note : $${x}^2$.`
					break ;
				case 7 : // x^3
					texte = `Exprimer le cube de $${x}$  en fonction de $${x}$.`
					texte_corr = `Le cube de $${x}$  se note : $${x}^3$.`
					break ;
				case 8 : // -x
					texte = `Exprimer l'opposÃ© de $${x}$  en fonction de $${x}$.`
					texte_corr = `L'opposÃ© de $${x}$  se note : $-${x}$.`
					break ;
				case 9 : // 1/x
					texte = `Exprimer l'inverse de $${x}$  en fonction de $${x}$.`
					texte_corr = `L'inverse de $${x}$ se note : $${tex_fraction(1,x)}$.`
					break ;
				case 10 : // x+k
					texte = `Exprimer la somme de $${x}$ et ${k} en fonction de $${x}$.`
					texte_corr = `La somme de $${x}$ et ${k} se note : $${x}+${k}$.`
					break ;
				case 11 : // kx
					texte = `Exprimer le produit de $${x}$  par ${k} en fonction de $${x}$.`
					texte_corr = `Le produit de $${x}$ par ${k} se note : $${k}${x}$.`
					break ;
				case 12 : // x/k
					texte = `Exprimer le quotient de $${x}$ par ${k} en fonction de $${x}$.`
					texte_corr = `Le quotient de $${x}$ par ${k} se note : $${tex_fraction(x,k)}$.`
					break ;
				case 13 : // k/x
					texte = `Exprimer le quotient de ${k} par $${x}$ en fonction de $${x}$.`
					texte_corr = `Le quotient de ${k} par $${x}$ se note : $${tex_fraction(k,x)}$.`
					break ;
				case 14 : //xy
					texte = `Comment se note le produit de $${x}$ par $${y}$ ?`
					texte_corr = `Le produit de $${x}$ par $${y}$ se note $${x}${y}$.`
					break ;
				case 15 : //pair
					texte = `Ãcrire une expression littÃ©rale qui permet de reprÃ©senter un nombre pair.`
					texte_corr = `Un nombre pair peut s'Ã©crire sous la forme $2n$ avec $n$ un entier naturel.`
					break ; 
				case 16 : //impair
					texte = `Ãcrire une expression littÃ©rale qui permet de reprÃ©senter un nombre impair.`
					texte_corr = `Un nombre impair peut s'Ã©crire sous la forme $2n+1$ avec $n$ un entier naturel.`
					break ;
				case 17 : //multiple de k
					texte = `Ãcrire une expression littÃ©rale qui permet de reprÃ©senter un multiple de ${k}.`
					texte_corr = `Un multiple de ${k} peut s'Ã©crire sous la forme $${k}n$ avec $n$ un entier naturel.`
					break ; 

			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_case_a_cocher = ["Uniquement la lettre $n$."]

}

/**
* Traduire un programme de calcul par une expression littÃ©rale de la forme ax+b aprÃ¨s simplification
* @Auteur RÃ©mi Angot
* 5L10-2
*/
function Traduire_un_programme_de_calcul(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Traduire un programme de calcul par une expression littÃ©rale";
	this.consigne = "";
	this.nb_questions = 2;
	this.nb_cols = 2;
	this.nb_cols_corr = 1;
	this.spacing_corr = 1;
	this.spacing = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1,2,3,4,5,6]
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let a = randint(4,11)
			let b = randint(2,11)
			let c = randint(2,11)
			let d = randint(2,5)
			switch (liste_type_de_questions[i]){
				case 1 : // (x+a)*b+c
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Ajoute ${a}`,`Multiplie par ${b}`,`Ajoute ${c}`])
					texte += `Si on note $x$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$x\\xrightarrow{+${a}} x+${a}\\xrightarrow{\\times  ${b}}(x+${a})\\times  ${b}=${b}x+${a*b}\\xrightarrow{+${c}}${b}x+${a*b+c}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${b}x+${a*b+c}$.`
					break ;
				case 2 : // (ax+b)*c
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Multiplie par ${a}`,`Ajoute ${b}`,`Multiplie par ${c}`])
					texte += `Si on note $y$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$y\\xrightarrow{\\times  ${a}} ${a}y\\xrightarrow{+${b}}${a}y+${b} \\xrightarrow{\\times  ${c}}(${a}y+${b})\\times ${c}=${a*c}y+${b*c}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${a*c}y+${b*c}$.`
					break ;
				case 3 : // ax+b-2x
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Multiplie par ${a}`,`Ajoute ${b}`,`EnlÃ¨ve le double du nombre de dÃ©part`])
					texte += `Si on note $a$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$a\\xrightarrow{\\times  ${a}} ${a}a\\xrightarrow{+${b}}${a}a+${b} \\xrightarrow{-2a}${a}a+${b}-2a=${a-2}a+${b}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${a-2}a+${b}$.`
					break ;
				case 4 : // ax+b+3x
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Multiplie par ${a}`,`Ajoute ${b}`,`Ajoute le triple du nombre de dÃ©part`])
					texte += `Si on note $t$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$t\\xrightarrow{\\times  ${a}} ${a}t\\xrightarrow{+${b}}${a}t+${b} \\xrightarrow{+3t}${a}t+${b}+3t=${a+3}t+${b}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${a+3}t+${b}$.`
					break ;
				case 5 : // (ax+b)*c-d
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Multiplie par ${a}`,`Ajoute ${b}`,`Multiplie par ${c}`,`EnlÃ¨ve ${d}`])
					texte += `Si on note $x$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$x\\xrightarrow{\\times  ${a}} ${a}x\\xrightarrow{+${b}}${a}x+${b} \\xrightarrow{\\times  ${c}}(${a}x+${b})\\times  ${c}=${a*c}x+${b*c}\\xrightarrow{-${d}}${a*c}x+${b*c-d}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${a*c}x+${b*c-d}$.`
					break ;
				case 6 : // (ax+b)*c+x
					texte = `Voici un programme de calcul : \n`
					texte += itemize([`Multiplie par ${a}`,`Ajoute ${b}`, `Multiplie par ${c}`,`Ajoute le nombre de dÃ©part`])
					texte += `Si on note $y$ le nombre de dÃ©part, quel est le rÃ©sultat du programme de calcul ?`
					texte_corr = `$y\\xrightarrow{\\times  ${a}} ${a}y\\xrightarrow{+${b}}${a}y+${b} \\xrightarrow{\\times  ${c}}(${a}y+${b})\\times  ${c}=${a*c}y+${b*c}\\rightarrow ${a*c}y+${b*c}+y=${a*c+1}y+${b*c}$`
					texte_corr += '<br>'
					texte_corr += `Le rÃ©sultat du programme est donc $${a*c+1}y+${b*c}$.`
					break ;
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				if (est_diaporama) {
					texte = texte.replace(', quel est le rÃ©sultat du programme de calcul ?',',<br> quel est le rÃ©sultat de ce programme ?')
				}
				if (!sortie_html && i==0) {texte = `\\setlength\\itemsep{1em}` + texte}; // espacement entre les questions
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_case_a_cocher = true;
}


/**
* Calculer la valeur d'une expression littÃ©rale
* 
* * ax+b
* * a(x+b)
* * x^2+y^2
* * x^2-y^2
* * ax^2+b(x-1)+cy^3
* * ax^2+bx+c
* * ax^2+bx-c
* * ax^2-bx+c
* * axy+x+y
* * (ax+b)(cy-d)
* @Auteur RÃ©mi Angot
* 5L13
*/
function Calculer_la_valeur_d_une_expression_litterale(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer la valeur d'une expression littÃ©rale";
	this.consigne = "";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		//let type_de_questions_disponibles = range1(10)
		let type_de_questions_disponibles;
		
		if (this.version=="5L13-5") {
			type_de_questions_disponibles = range1(2)
		} else {
			type_de_questions_disponibles = range1(10)			
		};

		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let a, b, c, d, x, y
			switch (liste_type_de_questions[i]){
				case 1 : // ax+b
					a = randint(2,10)
					x = randint(2,10,a)
					b = randint(1,10,[a,x])
					texte = `Calculer $${a}x+${b}$ pour $x=${x}$.`
					texte_corr = `Pour $x=${x}$ : <br>`
					texte_corr += `$${a}x+${b}=${a}\\times ${x}+${b}=${a*x}+${b}=${a*x+b}$`
					break ;
				case 2 : // a(x+b)
					a = randint(2,10)
					x = randint(2,10,a)
					b = randint(1,10,[a,x])
					texte = `Calculer $${a}(x+${b})$ pour $x=${x}$.`
					texte_corr = `Pour $x=${x}$ : <br>`
					texte_corr += `$${a}(x+${b})=${a}\\times (${x}+${b})=${a}\\times ${x+b}=${a*(x+b)}$`
					break ;
				case 3 : // x^2+y^2
					x = randint(2,10)
					y = randint(2,10)
					texte = `Calculer $x^2+y^2$ pour $x=${x}$ et $y=${y}$.`
					texte_corr = `Pour $x=${x}$ et $y=${y}$ : <br>`
					texte_corr += `$x^2+y^2=${x}^2+${y}^2=${x**2}+${y**2}=${x**2+y**2}$`
					break ;
				case 4 : // x^2-y^2
					x = randint(2,10)
					y = randint(1,x-1)
					texte = `Calculer $x^2-y^2$ pour $x=${x}$ et $y=${y}$.`
					texte_corr = `Pour $x=${x}$ et $y=${y}$ : <br>`
					texte_corr += `$x^2-y^2=${x}^2-${y}^2=${x**2}-${y**2}=${x**2-y**2}$`
					break ;
				case 5 : // ax^2+b(x-1)+cy^3
					a = randint(2,5)
					b = randint(2,6)
					c = randint(2,6)
					x = randint(3,6)
					y = choice([1,2,3,5,10])
					texte = `Calculer $${a}x^2+${b}(x-1)+${c}y^3$ pour $x=${x}$ et $y=${y}$.`
					texte_corr = `Pour $x=${x}$ et $y=${y}$ : <br>`
					texte_corr += `$${a}x^2+${b}(x-1)+${c}y^3=${a}\\times ${x}^2+${b}(${x}-1)+${c}\\times ${y}^3=${a}\\times ${x**2}+${b}\\times ${x-1}+${c}\\times ${y**3}=${a*x**2+b*(x-1)+c*y**3}$.`
					break ;
				case 6 : // ax^2+bx+c
					a = randint(2,5)
					b = randint(2,6)
					c = randint(2,6)
					x = randint(3,6)
					texte = `Calculer $${a}x^2+${b}x+${c}$ pour $x=${x}$.`
					texte_corr = `Pour $x=${x}$ : <br>`
					texte_corr += `$${a}x^2+${b}x+${c}=${a}\\times ${x}^2+${b}\\times ${x}+${c}=${a}\\times ${x**2}+${b*x}+${c}=${a*x**2+b*x+c}$`
					break ;
				case 7 : // ax^2+bx-c
					a = randint(2,5)
					b = randint(2,6)
					c = randint(2,6)
					x = randint(3,6)
					texte = `Calculer $${a}x^2+${b}x-${c}$ pour $x=${x}$.`
					texte_corr = `Pour $x=${x}$ : <br>`
					texte_corr += `$${a}x^2+${b}x-${c}=${a}\\times ${x}^2+${b}\\times ${x}-${c}=${a}\\times ${x**2}+${b*x}-${c}=${a*x**2+b*x-c}$`
					break ;
				case 8 : // ax^2-bx+c
					a = randint(2,5)
					b = randint(2,a)
					c = randint(2,6)
					x = randint(3,6)
					texte = `Calculer $${a}x^2-${b}x+${c}$ pour $x=${x}$.`
					texte_corr = `Pour $x=${x}$ : <br>`
					texte_corr += `$${a}x^2-${b}x+${c}=${a}\\times ${x}^2-${b}\\times ${x}+${c}=${a}\\times ${x**2}-${b*x}+${c}=${a*x**2-b*x+c}$`
					break ;
				
				case 9 : // axy+x+y
					a = randint(2,10)
					x = randint(2,10)
					y = randint(2,10,x)
					texte = `Calculer $${a}xy+x+y$ pour $x=${x}$ et $y=${y}$.`
					texte_corr = `Pour $x=${x}$ et $y=${y}$ : <br>`
					texte_corr += `$${a}xy+x+y=${a}\\times ${x}\\times ${y}+${x}+${y}=${a*x*y}+${x}+${y}=${a*x*y+x+y}$`
					break ;
				case 10 : // (ax+b)(cy-d)
					a = randint(2,10)
					x = randint(2,10)
					b = randint(1,10)
					y = randint(2,10,x)
					c = randint(2,10)
					d = randint(1,Math.min(10,c*y))
					texte = `Calculer $(${a}x+${b})(${c}y-${d})$ pour $x=${x}$ et $y=${y}$.`
					texte_corr = `Pour $x=${x}$ et $y=${y}$ : <br>`
					texte_corr += `$(${a}x+${b})(${c}y-${d})=(${a}\\times ${x}+${b})(${c}\\times ${y}-${d})=${a*x+b}\\times ${c*y-d}=${(a*x+b)*(c*y-d)}$`
					break ;
				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_case_a_cocher = true;
}


/**
* Tester une Ã©galitÃ© pour 2 valeurs donnÃ©es (une vraie et une fausse)
*
* * 3x-a=2x+b
* * 3x+a=5x-b
* * ax+b=(a+1)x-c
* * a-2x=b+2x
* @Auteur RÃ©mi Angot
* 5L14
*/
function Tester_une_egalite(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Tester une Ã©galitÃ©";
	this.consigne = "";
	this.nb_questions = 3;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup=1;
	this.sup2=false;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles // = range1(5)
	//	let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		if (this.sup2==false) type_de_questions_disponibles=[1,2,3,4,5]
		else type_de_questions_disponibles=[6,7,3]
		let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let a, b, x1, x2
			switch (liste_type_de_questions[i]){
				case 1 : // 3x-a=2x+b   x=a+b  
					if (this.sup==1) {
					a = randint(1,6)
					b = randint(1,6,[a])
					x2 = a + b
					x1 = randint(2,10,[x2])
	
					}
					else {
						a = randint(-6,6,[0])
						b = randint(-6,6,[a,0])	
						x2 = a + b
						x1 = randint(-10,10,[0,x2])
						
					}

					texte = `Tester l'Ã©galitÃ© $3x-${ecriture_parenthese_si_negatif(a)}=2x+${ecriture_parenthese_si_negatif(b)}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$3x-${ecriture_parenthese_si_negatif(a)}=3\\times ${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(a)}=${3*x1-a}$ <br> $2x+${ecriture_parenthese_si_negatif(b)}=2\\times ${ecriture_parenthese_si_negatif(x1)}+${ecriture_parenthese_si_negatif(b)}=${2*x1+b}$<br>`
					texte_corr += `$${3*x1-a}\\not=${2*x1+b}$ donc l'Ã©galitÃ© n'est pas vraie.<br><br>`
					texte_corr += `Pour $x=${ecriture_parenthese_si_negatif(x2)}$ : <br>`
					texte_corr += `$3x-${ecriture_parenthese_si_negatif(a)}=3\\times ${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(a)}=${3*x2-a}$ <br> $2x+${ecriture_parenthese_si_negatif(b)}=2\\times ${ecriture_parenthese_si_negatif(x2)}+${ecriture_parenthese_si_negatif(b)}=${2*x2+b}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.`
					break ;
				case 2 : // 3x+a=5x-b   x=(a+b)/2 donc a et b impairs pour une solution entiÃ¨re  
					if (this.sup==1) {
					a = randint(1,9)
					b = randint(0,4)*2+a%2;
					x1 = parseInt(Algebrite.eval((a+b)/2))
					x2 = randint(1,9,x1)
					}
					else {
						a = randint(-9,9,[0])
						b = randint(-4,4,[a,0])*2+a%2
						x1 = parseInt(Algebrite.eval((a+b)/2))
						x2 = randint(-9,9,[0,x1])	
					}

					texte = `Tester l'Ã©galitÃ© $3x+${ecriture_parenthese_si_negatif(a)}=5x-${ecriture_parenthese_si_negatif(b)}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$3x+${ecriture_parenthese_si_negatif(a)}=3\\times ${ecriture_parenthese_si_negatif(x1)}+${ecriture_parenthese_si_negatif(a)}=${3*x1+a}$ <br> $5x-${ecriture_parenthese_si_negatif(b)}=5\\times ${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(b)}=${5*x1-b}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$3x+${ecriture_parenthese_si_negatif(a)}=3\\times ${ecriture_parenthese_si_negatif(x2)}+${ecriture_parenthese_si_negatif(a)}=${3*x2+a}$ <br> $5x-${ecriture_parenthese_si_negatif(b)}=5\\times ${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(b)}=${5*x2-b}$<br>`
					texte_corr += `$${3*x2+a}\\not=${5*x2-b}$ donc l'Ã©galitÃ© n'est pas vraie.`
					break ;
				case 3 : // 10(x-a)=4(2x+b) x=(10a+4b)/2
					if (this.sup==1) {
					a = randint(1,3)
					b = randint(1,3)
					x2 = parseInt(Algebrite.eval((10*a+4*b)/2))
					x1 = randint(1,9,x2)
					}
					else {
						a = randint(-3,3,[0])
						b = randint(-3,3,[0])	
						x2 = parseInt(Algebrite.eval((10*a+4*b)/2))
						x1 = randint(-9,9,[0,x2])
					}

					texte = `Tester l'Ã©galitÃ© $10(x-${ecriture_parenthese_si_negatif(a)})=4(2x+${ecriture_parenthese_si_negatif(b)})~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$10(x-${ecriture_parenthese_si_negatif(a)})=10\\times (${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(a)})=10\\times ${x1-a}=${10*(x1-a)}$ <br> $4(2x+${ecriture_parenthese_si_negatif(b)})=4\\times (2\\times ${ecriture_parenthese_si_negatif(x1)}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2*x1+b}=${4*(2*x1+b)}$<br>`
					texte_corr += `$${10*(x1-a)}\\not=${4*(2*x1+b)}$ donc l'Ã©galitÃ© n'est pas vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$10(x-${ecriture_parenthese_si_negatif(a)})=10\\times (${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(a)})=10\\times ${x2-a}=${10*(x2-a)}$ <br> $4(2x+${ecriture_parenthese_si_negatif(b)})=4\\times (2\\times ${ecriture_parenthese_si_negatif(x2)}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2*x2+b}=${4*(2*x2+b)}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.`
					break ;
				case 4 : // ax+b=(a+1)x-c x=b+c
					if (this.sup==1) {
					a = randint(2,9)
					b = randint(2,9)
					c = randint(1,3)
					x1 = b + c
					x2 = randint(2,10,x1)
					}
					else {
						a = randint(2,9)
						b = randint(2,9)*randint(-1,1,0)
						c = randint(1,3)*randint(-1,1,0)
						x1 = b + c
						x2 = randint(2,10,x1)*randint(-1,1,0)
					}

					texte = `Tester l'Ã©galitÃ© $${ecriture_parenthese_si_negatif(a)}x+${ecriture_parenthese_si_negatif(b)}=${a+1}x-${ecriture_parenthese_si_negatif(c)}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$${a}x+${ecriture_parenthese_si_negatif(b)}=${ecriture_parenthese_si_negatif(a)}\\times ${ecriture_parenthese_si_negatif(x1)}+${ecriture_parenthese_si_negatif(b)}=${a*x1+b}$ <br> $${a+1}x-${ecriture_parenthese_si_negatif(c)}=${a+1}\\times ${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(c)}=${(a+1)*x1-c}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$${a}x+${ecriture_parenthese_si_negatif(b)}=${ecriture_parenthese_si_negatif(a)}\\times ${ecriture_parenthese_si_negatif(x2)}+${ecriture_parenthese_si_negatif(b)}=${a*x2+b}$ <br> $${a+1}x-${ecriture_parenthese_si_negatif(c)}=${a+1}\\times ${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(c)}=${(a+1)*x2-c}$<br>`
					texte_corr += `$${a*x2+b}\\not=${(a+1)*x2-c}$ donc l'Ã©galitÃ© n'est pas vraie.`
					break ;
				case 5 : // a-2x=b+2x x=(a-b)/4
					if (this.sup==1) {
					x1 = randint(1,9)
					b = randint(1,9)
					a = b+4*x1
					x2 = randint(1,11,x1)
					}
					else {
						x1 = randint(-9,9)
						b = randint(-9,9,0)
						a = b+4*x1
						x2 = randint(1,11,x1)
					}

					texte = `Tester l'Ã©galitÃ© $${a}-2x=${b}+2x~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$${a}-2x=${a}-2\\times ${ecriture_parenthese_si_negatif(x1)}=${a-2*x1}$ <br> $${b}+2x=${b}+2\\times ${ecriture_parenthese_si_negatif(x1)}=${b+2*x1}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$${a}-2x=${a}-2\\times ${ecriture_parenthese_si_negatif(x2)}=${a-2*x2}$ <br> $${b}+2x=${b}+2\\times ${ecriture_parenthese_si_negatif(x2)}=${b+2*x2}$<br>`
					texte_corr += `$${a-2*x2}\\not=${b+2*x2}$ donc l'Ã©galitÃ© n'est pas vraie.`
					break ;
				case 6 : // ax-ab=xÂ²-bx (a-x)(x-b)=0 solutions a et b.
					if (this.sup==1) {
					b = randint(2,9)
					a = randint(2,9)
					x3 = b
					x1 = a
					x2 = randint(1,9,[x1,x3])
					}
					else {
						a = randint(-9,9,[0,1])
						b = randint(-9,9,[0,a])
						x1 = a
						x3 = b
						x2 = randint(-9,9,[x1,x3])
					}
					texte = `Tester l'Ã©galitÃ© $${a}x-${ecriture_parenthese_si_negatif(a*b)}=x^2-${ecriture_parenthese_si_negatif(b)}x~$ pour $~x=${x1}~$ , pour $~x=${x2}~$ puis pour $~x=${x3}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(a*b)}=${a}\\times ${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(a*b)}=${a*x1-a*b}$ <br> $x^2-${b}\\times  x=${ecriture_parenthese_si_negatif(x1)}^2-${ecriture_parenthese_si_negatif(b)}\\times ${ecriture_parenthese_si_negatif(x1)}=${x1*x1}-${ecriture_parenthese_si_negatif(b*x1)}=${x1*x1-b*x1}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(a*b)}=${a}\\times ${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(a*b)}=${a*x2-a*b}$ <br> $x^2-${b}\\times  x=${ecriture_parenthese_si_negatif(x2)}^2-${ecriture_parenthese_si_negatif(b)}\\times ${ecriture_parenthese_si_negatif(x2)}=${x2*x2}-${ecriture_parenthese_si_negatif(b*x2)}=${x2*x2-b*x2}$<br>`
					texte_corr += `$${a*x2-a*b}\\not=${x2*x2-b*x2}$ donc l'Ã©galitÃ© n'est pas vraie.<br><br>`
					texte_corr += `Pour $x=${x3}$ : <br>`
					texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(a*b)}=${a}\\times ${ecriture_parenthese_si_negatif(x3)}-${ecriture_parenthese_si_negatif(a*b)}=${a*x3-a*b}$ <br> $x^2-${b}\\times  x=${ecriture_parenthese_si_negatif(x3)}^2-${ecriture_parenthese_si_negatif(b)}\\times ${ecriture_parenthese_si_negatif(x3)}=${x3*x3}-${ecriture_parenthese_si_negatif(b*x3)}=${x3*x3-b*x3}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					break ;
				case 7 : // adx-bd=acxÂ²-bcx  --- (ax-b)(d-cx)=0 solutions b/a et d/c.
					if (this.sup==1) {
						c = randint(2,5)
						a = randint(2,5)
						x2 = randint(2,6)
						x3 = randint(2,6,x2)
						x1 = randint(1,7,[x2,x3])
						b = a*x2
						d = c*x3
					}
					else {
						c = randint(2,5)*randint(-1,1,0)
						a = randint(2,5)*randint(-1,1,0)
						x2 = randint(1,6)*randint(-1,1,0)
						x3 = randint(1,6,x2)*randint(-1,1,0)
						x1 = randint(1,7,[x2,x3])*randint(-1,1,0)
						b = a*x2
						d = c*x3
					}
					texte = `Tester l'Ã©galitÃ© $${a*d}x-${ecriture_parenthese_si_negatif(b*d)}=${a*c}x^2-${ecriture_parenthese_si_negatif(b*c)}x~$ pour $~x=${x1}~$, pour $~x=${x2}~$ puis pour $~x=${x3}$`
					texte_corr = `Pour $x=${x1}$ : <br>`
					texte_corr += `$${a*d}x-${ecriture_parenthese_si_negatif(b*d)}=${a*d}\\times ${ecriture_parenthese_si_negatif(x1)}-${ecriture_parenthese_si_negatif(b*d)}=${a*d*x1-d*b}$ <br> $${a*c}x^2-${ecriture_parenthese_si_negatif(b*c)}x=${a*c}\\times ${ecriture_parenthese_si_negatif(x1)}^2-${ecriture_parenthese_si_negatif(b*c)}\\times ${ecriture_parenthese_si_negatif(x1)}=${a*c*x1*x1}-${ecriture_parenthese_si_negatif(b*c*x1)}=${a*c*x1*x1-b*c*x1}$<br>`
					texte_corr += `$${a*d*x1-d*b}\\not=${a*c*x1*x1-b*c*x1}$ donc l'Ã©galitÃ© n'est pas vraie.<br><br>`
					texte_corr += `Pour $x=${x2}$ : <br>`
					texte_corr += `$${a*d}x-${ecriture_parenthese_si_negatif(b*d)}=${a*d}\\times ${ecriture_parenthese_si_negatif(x2)}-${ecriture_parenthese_si_negatif(b*d)}=${a*d*x2-d*b}$ <br> $${a*c}x^2-${ecriture_parenthese_si_negatif(b*c)}x=${a*c}\\times ${ecriture_parenthese_si_negatif(x2)}^2-${ecriture_parenthese_si_negatif(b*c)}\\times ${ecriture_parenthese_si_negatif(x2)}=${a*c*x2*x2}-${ecriture_parenthese_si_negatif(b*c*x2)}=${a*c*x2*x2-b*c*x2}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					texte_corr += `Pour $x=${x3}$ : <br>`
					texte_corr += `$${a*d}x-${ecriture_parenthese_si_negatif(b*d)}=${a*d}\\times ${ecriture_parenthese_si_negatif(x3)}-${ecriture_parenthese_si_negatif(b*d)}=${a*d*x3-d*b}$ <br> $${a*c}x^2-${ecriture_parenthese_si_negatif(b*c)}x=${a*c}\\times ${ecriture_parenthese_si_negatif(x3)}^2-${ecriture_parenthese_si_negatif(b*c)}\\times ${ecriture_parenthese_si_negatif(x3)}=${a*c*x3*x3}-${ecriture_parenthese_si_negatif(b*c*x3)}=${a*c*x3*x3-b*c*x3}$<br>`
					texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br><br>`
					break ;
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/**
* RÃ©duire une expression
*
* * ax+bx+c	
* * ax+b+x+c
* * ax^2+bx+c+dx^2+x
* * a+x+b+c+dx
* * ax+y+bx+c+dy
* * ax+b-cx
* @Auteur RÃ©mi Angot
* 5L12
*/
function Reduire_une_expression_litterale(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "RÃ©duire une expression littÃ©rale";
	this.consigne = "RÃ©duire les expressions suivantes";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 9; // valeur maximale des coefficients
	this.sup2 = false; // avec des nombres dÃ©cimaux

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = range1(7)
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let a, b, c, d
			if (this.sup2) {
						a = calcul(randint(2,this.sup)+randint(1,9)/10)
						b = choice([calcul(randint(2,9)+randint(1,9)/10),calcul(randint(2,9)+randint(1,9)/10+randint(1,9)/100)])
						c = calcul(randint(2,this.sup)+randint(1,9)/10)
						d = choice([calcul(randint(2,9)+randint(1,9)/10),calcul(randint(2,9)+randint(1,9)/10+randint(1,9)/100)])
					} else {
						a = randint(2,this.sup)
						b = randint(2,this.sup)
						c = randint(2,this.sup)
						d = randint(2,this.sup)
					}
			switch (liste_type_de_questions[i]){
				case 1: // ax+bx+c	
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}x+${tex_nombre(c)}$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}x+${tex_nombre(c)}=${tex_nombre(calcul(a+b))}x+${tex_nombre(c)}$`
					break;
				case 2: // ax+b+x+c
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}+x+${tex_nombre(c)}$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}+x+${tex_nombre(c)}=${tex_nombre(calcul(a+1))}x+${tex_nombre(calcul(b+c))}$`
					break;
				case 3: // ax^2+bx+c+dx^2+x
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x^2+${tex_nombre(b)}x+${tex_nombre(c)}+${tex_nombre(d)}x^2+x$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x^2+${tex_nombre(b)}x+${tex_nombre(c)}+${tex_nombre(d)}x^2+x=${tex_nombre(calcul(a+d))}x^2+${tex_nombre(calcul(b+1))}x+${tex_nombre(c)}$`
					break;
				case 4: // a+x+b+c+dx
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}+x+${tex_nombre(b)}+${tex_nombre(c)}+${tex_nombre(d)}x$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}+x+${tex_nombre(b)}+${tex_nombre(c)}+${tex_nombre(d)}x=${tex_nombrec(1+d)}x+${tex_nombrec(a+b+c)}$`
					break;
				case 5: // ax+y+bx+c+dy
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+y+${tex_nombre(b)}x+${tex_nombre(c)}+${tex_nombre(d)}y$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+y+${tex_nombre(b)}x+${tex_nombre(c)}+${tex_nombre(d)}y=${tex_nombrec(a+b)}x+${tex_nombrec(1+d)}y+${tex_nombre(c)}$`
					break;
				case 6: // ax+b-cx
					if (c > a) {
						[a, c] = [c, a] //pour s'assurer que a-c est positif
					}
					if (c==a){
						a++
					}
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}-${tex_nombre(c)}x$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x+${tex_nombre(b)}-${tex_nombre(c)}x=${tex_nombrec(a-c)}x+${tex_nombre(b)}$`
					break;
				case 7: // ax-cx
					if (c > a) {
						[a, c] = [c, a] //pour s'assurer que a-c est positif
					}
					if (c==a){
						a++
					}
					texte = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x-${tex_nombre(c)}x$`
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${tex_nombre(a)}x-${tex_nombre(c)}x=${rien_si_1(tex_nombrec(a-c))}x$`
					break;

				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Valeur maximale des coefficients',999];
	this.besoin_formulaire2_case_a_cocher = ['Avec des nombres dÃ©cimaux']
}

/**
* Lire l'abscisse dÃ©cimale d'un point
* @Auteur Jean-Claude Lhote et RÃ©mi Angot
* RÃ©fÃ©rence 5R11
*/
function Lire_abscisse_relative(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Lire l'abscisse relative d'un point";
	this.consigne = "Lire l'abscisse de chacun des points suivants.";
	this.nb_questions = 3;
	this.nb_questions_modifiable = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
    this.spacing_corr = 1;
	this.sup=4;
	this.liste_packages = 'tkz-euclide'

	this.nouvelle_version = function(numero_de_l_exercice){ // numero_de_l_exercice est 0 pour l'exercice 1
		let type_de_questions;
		this.liste_questions=[];
		this.liste_corrections=[];
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es
		if (this.sup==4) 	type_de_questions=combinaison_listes([1,2,3],this.nb_questions);
		else 				type_de_questions=combinaison_listes([parseInt(this.sup)],this.nb_questions);
		

		this.contenu = html_consigne(this.consigne)
		for (let i = 0,abs0,l1,l2,l3,x1,x2,x3,x11,x22,x33, pas1,pas2, id_unique, texte, texte_corr; i < this.nb_questions;i++) {
			l1=lettre_depuis_chiffre(i*3+1)
			l2=lettre_depuis_chiffre(i*3+2)
			l3=lettre_depuis_chiffre(i*3+3)
			switch (type_de_questions[i]) {
				case 1: // Placer des dÃ©cimaux relatifs sur un axe (1 dÃ©cimale)
					abs0 = randint(-6, -3);
					pas1 = 1;
					pas2 = 10;
					break;

				case 2: // Placer des dÃ©cimaux relatifs sur un axe (2 dÃ©cimales)
					abs0 = randint(-4, -2) / 10;
					pas1 = 10;
					pas2 = 10;
					break;

				case 3: // Placer des dÃ©cimaux relatifs sur un axe (3 dÃ©cimales)
					abs0 = randint(-6, -2) / 100;
					pas1 = 100;
					pas2 = 10;
					break;
			}
			x1 = randint(0, 2); x2 = randint(3, 4); x3 = randint(5, 6);
			x11 = randint(1, 9); x22 = randint(1, 9); x33 = randint(1, 3)
			if (sortie_html) {
				id_unique = `${i}_${Date.now()}`
				this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`
				SVG_reperage_sur_un_axe(`div_svg${numero_de_l_exercice}${id_unique}`, abs0, 6, pas1, pas2, [[l1, x1, x11], [l2, x2, x22], [l3, x3, x33]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false)
				this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`
				SVG_reperage_sur_un_axe(`div_svg_corr${numero_de_l_exercice}${id_unique}`, abs0, 6, pas1, pas2, [[l1, x1, x11, true], [l2, x2, x22, true], [l3, x3, x33, true]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false)
			}
			else { //sortie Latex 
				texte=Latex_reperage_sur_un_axe(2, abs0, pas1, pas2, [[l1, x1, x11], [l2, x2, x22], [l3, x3, x33]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false);
				texte_corr=Latex_reperage_sur_un_axe(2, abs0, pas1, pas2, [[l1, x1, x11,true], [l2, x2, x22,true], [l3, x3, x33,true]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false);
				this.liste_questions.push(texte)
				this.liste_corrections.push(texte_corr);
			}
		
		}
		if (!sortie_html) liste_de_question_to_contenu(this); 
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',4,"1 : Nombre relatif Ã  une dÃ©cimale\n2 : Nombre relatif Ã  deux dÃ©cimales\n3 : Nombre relatif Ã  trois dÃ©cimales\n4 : MÃ©lange"];
}

/**
* Placer un point d'abscisse un nombre relatif
* @Auteur Jean-Claude Lhote et RÃ©mi Angot
* RÃ©fÃ©rence 5R11-2
*/
function Placer_points_sur_axe_relatifs(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Placer un point d'abscisse un nombre relatif";
	this.consigne = " Placer trois points sur un axe graduÃ©.";
	this.nb_questions = 5;
	this.nb_questions_modifiable = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
    this.spacing_corr = 1;
	this.sup=1;
	this.type_exercice = 'SVGJS';
	
	this.liste_packages = 'tkz-euclide'


	this.nouvelle_version = function(numero_de_l_exercice){ // numero_de_l_exercice est 0 pour l'exercice 1
		let type_de_questions;
		this.liste_questions=[];
		this.liste_corrections=[];
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es
		if (this.sup==4) 	type_de_questions=combinaison_listes([1,2,3],this.nb_questions);
		else 				type_de_questions=combinaison_listes([parseInt(this.sup)],this.nb_questions);
		

		this.contenu = html_consigne(this.consigne)
		for (let i = 0,abs0,abs1,abs2,abs3,l1,l2,l3,x1,x2,x3,x11,x22,x33, pas1,pas2, id_unique, texte, texte_corr; i < this.nb_questions;i++) {
			l1=lettre_depuis_chiffre(i*3+1)
			l2=lettre_depuis_chiffre(i*3+2)
			l3=lettre_depuis_chiffre(i*3+3)

			switch (type_de_questions[i]) {
				case 1: // Placer des dÃ©cimaux relatifs sur un axe (1 dÃ©cimale)
					abs0 = randint(-7, -3);
					pas1 = 1;
					pas2 = 10;
					break;

				case 2: // Placer des dÃ©cimaux relatifs sur un axe (2 dÃ©cimales)
					abs0 = randint(-4, -2) / 10;
					pas1 = 10;
					pas2 = 10;
					break;

				case 3: // Placer des dÃ©cimaux relatifs sur un axe (3 dÃ©cimales)
					abs0 = randint(-10, -2) / 100;
					pas1 = 100;
					pas2 = 10;
					break;
			}
			x1 = randint(0, 2); x2 = randint(3, 4); x3 = randint(5, 6);
			x11 = randint(1, 9); x22 = randint(1, 9); x33 = randint(1, 3);
			abs1 = arrondi(abs0 + x1/pas1 + x11 / pas1/pas2, type_de_questions[i]);  // le type de questions est Ã©gal au nombre de dÃ©cimales.
			abs2 = arrondi(abs0 + x2/pas1 + x22 / pas1/pas2, type_de_questions[i]);
			abs3 = arrondi(abs0 + x3/pas1 + x33 / pas1/pas2, type_de_questions[i]);

			texte=`Placer les points : {\\small $${l1}$(${tex_nombrec(abs1)}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(abs3)})}<br>`
			if (sortie_html) {
				texte_corr=''
				id_unique = `${i}_${Date.now()}`
				this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 110px;  "></div>`
				this.contenu +=`Placer les points : ${l1}(${tex_nombrec(abs1)}), ${l2}(${tex_nombrec(abs2)}), ${l3}(${tex_nombrec(abs3)})`
				SVG_reperage_sur_un_axe(`div_svg${numero_de_l_exercice}${id_unique}`, abs0, 6, pas1, pas2, [], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false)
				this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`
				SVG_reperage_sur_un_axe(`div_svg_corr${numero_de_l_exercice}${id_unique}`, abs0, 6, pas1, pas2, [[l1, x1, x11, true], [l2, x2, x22, true], [l3, x3, x33, true]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false)
			}
			else { //sortie Latex 
				texte+=Latex_reperage_sur_un_axe(2, abs0, pas1, pas2, [], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false);
				texte_corr=`Les points {\\small $${l1}$(${tex_nombrec(abs1)}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(abs3)})} sont placÃ©s ci dessous<br>`;
				texte_corr+=Latex_reperage_sur_un_axe(2, abs0, pas1, pas2, [[l1, x1, x11,true], [l2, x2, x22,true], [l3, x3, x33,true]], [[calcul(abs0 + 1 / pas1,0), 1, 0], [calcul(abs0 + 2 / pas1,0), 2, 0], [calcul(abs0 + 3 / pas1,0), 3, 0], [calcul(abs0 + 4 / pas1,0), 4, 0], [calcul(abs0 + 5 / pas1,0), 5, 0], [calcul(abs0 + 6 / pas1,0), 6, 0]],false);
				this.liste_questions.push(texte)
				this.liste_corrections.push(texte_corr);
			}

		}
		if (!sortie_html) liste_de_question_to_contenu(this); 

	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',4,"1 : Nombre relatif Ã  une dÃ©cimale\n2 : Nombre relatif Ã  deux dÃ©cimales\n3 : Nombre relatif Ã  trois dÃ©cimales\n4 : MÃ©lange"];
}

/**
 * Lire les coordonnÃ©es d'un point du plan avec une prÃ©cision allant de l'unitÃ© Ã  0,25.
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rences 5R12-2 6N33
 */
function Reperage_point_du_plan(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©terminer les coordonnÃ©es (relatives) d'un point";
	this.consigne = "Donner les coordonnÃ©es des points reprÃ©sentÃ©s";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
    this.spacing_corr = 1;
	this.sup=1;
	this.sup2=true;
	this.quart_de_plan=false;
	this.liste_packages = 'tkz-euclide';

	
	this.nouvelle_version = function(numero_de_l_exercice){ // numero_de_l_exercice est 0 pour l'exercice 1
	this.liste_questions=[];
	this.liste_corrections=[];
	let texte,texte_corr;
	this.contenu = ''; // Liste de questions
	this.contenu_correction = ''; // Liste de questions corrigÃ©es
	let liste_points=[],points=[];
	let grille,w,h,k,xmin,xmax,ymin,ymax,shiftxnom,shiftynom;
	h=Math.round(window.innerHeight*0.7)
	w=h;
	k=Math.pow(2,parseInt(this.sup)-1);
	let nom=[];
	grille=this.sup2;
	if (this.quart_de_plan) {
		xmin=0;ymin=0;xmax=10;ymax=10;
	}
	else	{
		xmin=-5;ymin=-5;xmax=5;ymax=5;	
	}
	let liste_abs=[],liste_ord=[];
	for (let i=calcul(xmin+1/k);i<calcul(xmax-(parseInt(this.sup)-1)/k);i=calcul(i+1/k)) {
		liste_abs.push(i)
	}
	for (let i=calcul(ymin+1/k);i<calcul(ymax-(parseInt(this.sup)-1)/k);i=calcul(i+1/k)) {
		liste_ord.push(i)
	}
	let X0=false,Y0=false;
	liste_points=creer_couples(liste_abs,liste_ord,10*k);
	for (let j=0;j<5;j++) {
		points.push(liste_points[j]);
		if (points[j][0]==0) X0=true;
		if (points[j][1]==0) Y0=true;
	}
	if (!X0) points[0][0]=0;
	if (!Y0) points[1][1]=0;
	points=shuffle(points);

	for (let l=0,lettre=randint(1,20);l<5;l++) nom.push(lettre_depuis_chiffre(l+lettre));
	if (sortie_html) {
		let id_unique = `${Date.now()}`
		let id_du_div = `div_svg${numero_de_l_exercice}${id_unique}`;
		this.consigne = `<div id="${id_du_div}" style="height: ${h}px"></div>`;
		if (!window.SVGExist) {window.SVGExist = {}} // Si SVGExist n'existe pas on le crÃ©Ã©
		// SVGExist est un dictionnaire dans lequel on stocke les listenner sur la crÃ©ation des div
		window.SVGExist[id_du_div] = setInterval(function() {
			if ($(`#${id_du_div}`).length ) {
				$(`#${id_du_div}`).html("");//Vide le div pour Ã©viter les SVG en doublon
				const mon_svg = SVG().addTo(`#${id_du_div}`).viewbox(0, 0, 520, 520).size('100%','100%')
			let AxesXY=SVG_repere(mon_svg,xmin,xmax,ymin,ymax,k,k,500,500,grille);
			for (let i=0;i<5;i++)	{
				if (points[i][0]==0||points[i][0]==0.25) shiftxnom=20;
				else shiftxnom=0;
				shiftynom=0;
				if (points[i][1]==-0.5) shiftynom=10;	
				if (points[i][1]==-0.25) shiftynom=20;
				SVG_tracer_point(mon_svg,calcul(20+(points[i][0]-xmin)*480/(xmax-xmin)),calcul(480-(points[i][1]-ymin)*480/(ymax-ymin)),nom[i],'blue',-10+shiftxnom,10+shiftynom,[true,AxesXY[0],AxesXY[1]])
			}
			clearInterval(SVGExist[id_du_div]);//ArrÃªte le timer
			}

		}, 100); // VÃ©rifie toutes les 100ms



	}
	else { //sortie Latex 
		texte =`\\begin{tikzpicture}`;
		texte += Latex_repere(xmin,xmax,ymin,ymax,k,k,grille);
		for (let i=0;i<5;i++)	{
		texte += `\n\t \\tkzDefPoint(${points[i][0]},${points[i][1]}){A}`
		texte +=`\n\t \\tkzDrawPoint[shape=cross out,color=blue,size=6](A)`
		texte +=`\n\t \\tkzLabelPoint[above right=3pt,fill=white,fill opacity=0.7,text opacity=1,inner sep=0](A){$${nom[i]}$}`
		}
		texte +=`\n\t \\end{tikzpicture}`;
		this.liste_questions.push(texte);
		
		texte_corr =`\\begin{tikzpicture}`;
		texte_corr += Latex_repere(xmin,xmax,ymin,ymax,k,k,grille);
		for (let i=0;i<5;i++)	{
		texte_corr += `\n\t \\tkzDefPoint(${points[i][0]},${points[i][1]}){A}`
		texte_corr +=`\n\t \\tkzDrawPoint[shape=cross out,color=blue,size=6](A)`
		texte_corr +=`\n\t \\tkzLabelPoint[above right=3pt,fill=white,fill opacity=0.7,text opacity=1,inner sep=0](A){$${nom[i]}$}`
		texte_corr +=`\n\t \\tkzPointShowCoord(A)`
		}
		texte_corr +=`\n\t \\end{tikzpicture}`;
		this.liste_corrections.push(texte_corr);
	}

	texte=`DÃ©terminer les coordonnÃ©es des points`;
	texte_corr=`Les coordonnÃ©es des points sont :<br>`
	for (i=0;i<4;i++) {
	texte+=` $${nom[i]}$,`;
	texte_corr+=` $${nom[i]}(${tex_nombre(points[i][0])};${tex_nombre(points[i][1])})$, `;
	}
	texte+=` $${nom[i]}$.`
	texte_corr+=` $${nom[i]}(${tex_nombre(points[i][0])};${tex_nombre(points[i][1])})$.`;	
	this.liste_questions.push(texte)
	this.liste_corrections.push(texte_corr);
	liste_de_question_to_contenu_sans_numero(this); 
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : CoordonnÃ©es entiÃ¨res\n2 : CoordonnÃ©es 'en demis'\n3 : CoordonnÃ©es 'en quarts'"];
	this.besoin_formulaire2_case_a_cocher = ['Grille de lecture'];
}
/**
 * Calculs de probabilitÃ©s sur une expÃ©rience alÃ©atoire Ã  une Ã©preuve.
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5S21
 */
function fonctions_probabilite1(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer des probabilitÃ©s dans une expÃ©rience alÃ©atoire Ã  une Ã©preuve";
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	sortie_html? this.spacing = 2 : this.spacing = 1; 
	sortie_html? this.spacing_corr = 3 : this.spacing_corr = 1;
	this.sup=1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_index_disponibles=[0,1,2,3,4,5,6];
		let liste_index=combinaison_listes(liste_index_disponibles,this.nb_questions)
		let liste_de_lieux_choses=[['le frigo','yaourts'],['le frigo','desserts lactÃ©s'],['une urne','boules'],['une urne','jetons'],['un paquet de bonbons','nounours'],['un tiroir de la commode','t-shirts'],['un tas de jetons de poker','jetons']]
		let qualites=[[]]
		qualites[0]=['Ã  la fraise','Ã  la vanille','Ã  l\'abricot','Ã  l\'ananas','Ã  la cerise'];
		qualites[1]=['au chocolat','Ã  la vanille','au cafÃ©','Ã  la pistache','au caramel'];
		qualites[2]=['rouges','vertes','bleues','noires','blanches'];
		qualites[3]=['gris','cyans','roses','jaunes','violets'];
		qualites[4]=['rouges','verts','bleus','noirs','jaunes'];
		qualites[5]=['rouges','verts','bleus','noirs','blancs'];
		qualites[6]=['rouges','verts','bleus','noirs','jaunes'];
		for (let i = 0,p,m,q,somme,quidam,index1,lieu,objet,article,pronom,n=[], texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) {
			index1=liste_index[i];
			if (index1==2) {article=`une`;pronom=`elles`}
			else {article=`un`;pronom=`eux`;}
			quidam=prenom();
			lieu=liste_de_lieux_choses[index1][0];
			objet=liste_de_lieux_choses[index1][1];
			n[0]=randint(2,5);
			n[1]=randint(1,6)+1;
			n[2]=randint(1,3)*2;
			n[3]=randint(1,4)+2;
			n[4]=randint(2,5);

			somme=n[0]+n[1]+n[2]+n[3]+n[4];
			m=randint(0,4);
			p=randint(0,4,[m]);
			q=randint(0,4,[p,m]);
	
			texte = `Dans ${lieu} il y a ${somme} ${objet}. ${n[0]} sont ${qualites[index1][0]}, ${n[1]} sont ${qualites[index1][1]}, ${n[2]} sont ${qualites[index1][2]}, ${n[3]} sont ${qualites[index1][3]} et ${n[4]} sont ${qualites[index1][4]}.<br> `;
			texte+= `${quidam} choisit au hasard l'${article} d'entre ${pronom}.<br> `;
			texte +=num_alpha(0)+` Quelle est la probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][m]} ?<br>`;
			texte +=num_alpha(1)+` Quelle est la probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][p]} ?<br>`;			
			texte +=num_alpha(2)+` Quelle est la probabilitÃ© que son choix ne tombe pas sur l'${article} des ${objet} ${qualites[index1][q]} ?<br>`;
			texte +=num_alpha(3)+` Quelle est la probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][m]} ou ${qualites[index1][p]}?<br>`;
			texte_corr =`On est dans une situation dâÃ©quiprobabilitÃ© donc la probabilitÃ© est donnÃ©e par le quotient du nombre de cas favorables par le nombre de cas au total.<br>`
			texte_corr += num_alpha(0)+` Il y a ${n[m]} ${objet} ${qualites[index1][m]} et il y a ${somme} ${objet} possibles. La probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][m]} est :<br> $${tex_fraction(n[m],somme)}${simplification_de_fraction_avec_etapes(n[m],somme)}$.<br>`;
			texte_corr +=num_alpha(1)+` Il y a ${n[p]} ${objet} ${qualites[index1][p]} et il y a ${somme} ${objet} possibles. La probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][p]} est :<br> $${tex_fraction(n[p],somme)}${simplification_de_fraction_avec_etapes(n[p],somme)}$.<br>`;
			texte_corr +=num_alpha(2)+` Il y a ${n[q]} ${objet} ${qualites[index1][q]}, donc il y a ${somme} $-$ ${n[q]} $=$ ${somme-n[q]} autres ${objet} et il y a ${somme} ${objet} possibles. La probabilitÃ© que son choix ne tombe pas sur l'${article} des ${objet} ${qualites[index1][q]} est :<br> $${tex_fraction(somme-n[q],somme)}${simplification_de_fraction_avec_etapes(somme-n[q],somme)}$.<br>`;
			texte_corr +=num_alpha(3)+` La probabilitÃ© d'un Ã©vÃ©nement est la somme des probabilitÃ©s des issues qui le composent. Donc la probabilitÃ© que son choix tombe sur l'${article} des ${objet} ${qualites[index1][m]} ou ${qualites[index1][p]} est :<br> $${tex_fraction(n[m],somme)}+${tex_fraction(n[p],somme)}=${tex_fraction(n[p]+n[m],somme)}${simplification_de_fraction_avec_etapes(n[p]+n[m],somme)}$.<br>`;
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}	
};

/**
* Deux parallÃ©logrammes sont tracÃ©s, on connait les 2 cÃ´tÃ© et une hauteur.
*
* Il faut calculer leurs aires.
*
* Pas de version LaTeX
* @Auteur RÃ©mi Angot
* 5M10
*/
function Aire_du_parallelogramme(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.pas_de_version_LaTeX = true ;
	this.titre = "Aire du parallÃ©logramme"
	this.consigne = "Calculer l'aire des 3 parallÃ©logrammes suivants (les longueurs sont donnÃ©es en cm)."
	this.spacing = 2;
	this.spacing_corr = 2 ;
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.type_exercice = 'MG32';
	this.taille_div_MG32 = [800,600];


	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let c1 = randint(3,7)
		let h1 = randint(2,4)
		let c2 = randint(3,7)
		let h2 = randint(2,7)
		let c3 = randint(3,10)
		let h3 = randint(2,4)
		let fig1 ="TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAAC4QAAAQEAAAAAAAAAAQAAAMH#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACYzEAATcAAAABQBwAAAAAAAAAAAACAP####8AAAAAABAAAUEAwBQAAAAAAADAOAAAAAAAAAUAAUA5gAAAAAAAQEO4UeuFHrgAAAADAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAgA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAoAAAAL#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAMAAAADQD#####AAAAAAAQAAFCAMAYAAAAAAAAwDgAAAAAAAAFAAEAAAAMAAAACQD#####AAJoMQABNAAAAAFAEAAAAAAAAP####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAAKAAAACgD#####AQAAAAABAAAACf####8AAAABAApDT3BlcmF0aW9uAwAAAAsAAAAIAAAAAUAIAAAAAAAAAAAAAAwA#####wAAAAoAAAARAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABIAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAEgAAAA4A#####wEAAAAAEAAAAQABAAAAFAAAAAoAAAAKAP####8BAAAAAAEAAAAUAAAACwAAAA8AAAAADAD#####AAAAFQAAABYAAAANAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAFwAAAA0A#####wAAAAAAEAABRADAFAAAAAAAAEAAAAAAAAAABQABAAAAF#####8AAAABABBDRHJvaXRlUGFyYWxsZWxlAP####8BAAAAABAAAAEAAQAAABkAAAAKAAAACgD#####AQAAAAABAAAAGQAAAAsAAAAIAAAAAAwA#####wAAABoAAAAbAAAADQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABwAAAANAP####8AAAAAABAAAUMAwBAAAAAAAABAAAAAAAAAAAUAAQAAABwAAAAGAP####8BAAAAARAAAVoAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAA4AAAAFAP####8AAAAAABAAAAEAAQAAAAkAAAAOAAAABQD#####AAAAAAAQAAABAAEAAAAOAAAAHgAAAAUA#####wAAAAAAEAAAAQABAAAAHgAAABkAAAAFAP####8AAAAAABAAAAEAAQAAABkAAAAJAAAADgD#####AQAAAAAQAAABAAEAAAAfAAAAIP####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8BAAAAARAAAloyAAAAAAAAAAAAQAgAAAAAAAAFAAAAACQAAAAiAAAABQD#####AAAAAAAQAAABAQEAAAAfAAAAJf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAAAfAAAAJQAAAAMAAAAAJwAAAAAAEAAAAQABAAAAHwE#8AAAAAAAAAAAAAQAAAAAJwAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAKP####8AAAACABNDTWVzdXJlQW5nbGVPcmllbnRlAAAAACcAAmFuAAAAKQAAAB8AAAAlAAAACAEAAAAnAAAAHwAAACUAAAAGAAAAACcAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAfAAAAJf####8AAAABAA1DUG9pbnRQcm9qZXRlAAAAACcAAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAACUAAAAoAAAAEwAAAAAnAAJtYQAAACkAAAAfAAAALf####8AAAABAA5DVGVzdEV4aXN0ZW5jZQAAAAAnAAN0bWEAAAAu#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQEAAAAnAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAALBAAAAAAAAEAAAAC#####wAAAAEADUNGb25jdGlvbjNWYXIAAAAACwAAAC8AAAAPAAAAAAsAAAAqAAAACwAAAC4AAAALAAAAKgAAAAABAAAAKwAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAACQAAAA4AAAADAAAAADEAAAAAABAAAAEAAQAAAAkBP#AAAAAAAAAAAAAEAAAAADEAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAADIAAAATAAAAADEAAmFuAAAAMwAAAAkAAAAOAAAACAEAAAAxAAAACQAAAA4AAAAGAAAAADEAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAADgAAABQAAAAAMQAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAADIAAAATAAAAADEAAm1hAAAAMwAAAAkAAAA3AAAAFQAAAAAxAAN0bWEAAAA4AAAAFgEAAAAxAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAANhAAAAAAAAEAAAACAAAAFwAAAAALAAAAOQAAAA8AAAAACwAAADQAAAALAAAAOAAAAAsAAAA0AAAAAAEAAAA1AAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAAAOAAAAHgAAAAMAAAAAOwAAAAAAEAAAAQABAAAADgE#8AAAAAAAAAAAAAQAAAAAOwAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAPAAAABMAAAAAOwACYW4AAAA9AAAADgAAAB4AAAAIAQAAADsAAAAOAAAAHgAAAAYAAAAAOwAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAAeAAAAFAAAAAA7AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAPAAAABMAAAAAOwACbWEAAAA9AAAADgAAAEEAAAAVAAAAADsAA3RtYQAAAEIAAAAWAQAAADsAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAABAEAAAAAAAAQAAAAIAAAAXAAAAAAsAAABDAAAADwAAAAALAAAAPgAAAAsAAABCAAAACwAAAD4AAAAAAQAAAD8AAAACAP####8AAAAAABAAAUUAwBQAAAAAAADANgAAAAAAAAUAAUA#gAAAAAAAQHH3Cj1wo9cAAAAJAP####8AAmMyAAE3AAAAAUAcAAAAAAAAAAAACQD#####AAJoMgABNwAAAAFAHAAAAAAAAAAAAAoA#####wEAAAAAAQAAAEUAAAALAAAARgD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAUYAwBAAAAAAAADAOgAAAAAAAAUAAT#PhK2tCtK0AAAASAAAAAUA#####wAAAAAAEAAAAQABAAAARQAAAEkAAAAGAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAEkAAAAOAP####8BAAAAABAAAAEAAQAAAEsAAABKAAAACgD#####AQAAAAABAAAASwAAAAsAAABHAAAAAAwA#####wAAAEwAAABNAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAE4AAAANAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAQAAAE4AAAAKAP####8BAAAAAAEAAABFAAAADwIAAAABP9mZmZmZmZoAAAALAAAARgAAAAAMAP####8AAABKAAAAUQAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABSAAAADQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAFIAAAAOAP####8BAAAAABAAAAEAAQAAAFMAAABKAAAACgD#####AQAAAAABAAAAUwAAAAsAAABHAAAAAAwA#####wAAAFUAAABWAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAFcAAAANAP####8AAAAAABAAAUgAwCQAAAAAAABAAAAAAAAAAAUAAQAAAFcAAAAQAP####8BAAAAABAAAAEAAQAAAFkAAABKAAAABQD#####AAAAAAAQAAABAAEAAABFAAAAWQAAABAA#####wEAAAAAEAAAAQABAAAASQAAAFsAAAARAP####8AAAAAABAAAUcAwCAAAAAAAABAAAAAAAAAAAUAAAAAWgAAAFwAAAAFAP####8AAAAAABAAAAEAAQAAAFkAAABdAAAABQD#####AAAAAAAQAAABAAEAAABdAAAASQAAAAUA#####wAAAAAAEAAAAQEBAAAASwAAAFAAAAASAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAACAAAAAgAAAFkAAABFAAAAAwAAAABhAAAAAAAQAAABAAEAAABZAT#wAAAAAAAAAAAABAAAAABhAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAABiAAAAEwAAAABhAAJhbgAAAGMAAABZAAAARQAAAAgBAAAAYQAAAFkAAABFAAAABgAAAABhAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAWQAAAEUAAAAUAAAAAGEAAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAABiAAAAEwAAAABhAAJtYQAAAGMAAABZAAAAZwAAABUAAAAAYQADdG1hAAAAaAAAABYBAAAAYQAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAGYQAAAAAAABAAAAAgAAABcAAAAACwAAAGkAAAAPAAAAAAsAAABkAAAACwAAAGgAAAALAAAAZAAAAAABAAAAZQAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAUAAAAEsAAAADAAAAAGsAAAAAABAAAAEAAQAAAFABP#AAAAAAAAAAAAAEAAAAAGsAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAGwAAAATAAAAAGsAAmFuAAAAbQAAAFAAAABLAAAACAEAAABrAAAAUAAAAEsAAAAGAAAAAGsAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAASwAAABQAAAAAawAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAASwAAAGwAAAATAAAAAGsAAm1hAAAAbQAAAFAAAABxAAAAFQAAAABrAAN0bWEAAAByAAAAFgEAAABrAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAcBAAAAAAAAEAAAACAAAAFwAAAAALAAAAcwAAAA8AAAAACwAAAG4AAAALAAAAcgAAAAsAAABuAAAAAAEAAABvAAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABZAAAAXQAAAAMAAAAAdQAAAAAAEAAAAQABAAAAWQE#8AAAAAAAAAAAAAQAAAAAdQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAdgAAABMAAAAAdQACYW4AAAB3AAAAWQAAAF0AAAAIAQAAAHUAAABZAAAAXQAAAAYAAAAAdQAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFkAAABdAAAAFAAAAAB1AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABdAAAAdgAAABMAAAAAdQACbWEAAAB3AAAAWQAAAHsAAAAVAAAAAHUAA3RtYQAAAHwAAAAWAQAAAHUAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAB6EAAAAAAAAQAAAAIAAAAXAAAAAAsAAAB9AAAADwAAAAALAAAAeAAAAAsAAAB8AAAACwAAAHgAAAAAAQAAAHn#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAAAAAQAAAAFAI7YIdN7bnAAAACUAAAAfAAAADgAAABkA#####wAAAAAAAQAAAAFAJLeGyzdqwwAAAB8AAAAlAAAAHgAAABkA#####wAAAAAAAQAAAAFAJ52vyk47vQAAAFAAAABLAAAASQAAABkA#####wAAAAAAAQAAAAFAJtJ6XCnohwAAAEsAAABQAAAAXQAAAAkA#####wACYzMAATcAAAABQBwAAAAAAAAAAAAJAP####8AAmgzAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAAAAAAQAAFNAMA1AAAAAAAAwCoAAAAAAAAFAAFAf3gAAAAAAEBnLhR64UeuAAAAAwD#####AQAAAAEQAAABAAEAAACFAD#wAAAAAAAAAAAACgD#####AQAAAAABAAAAhQAAAAsAAACDAAAAAAwA#####wAAAIYAAACHAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAIgAAAANAP####8AAAAAABAAAU4AwDEAAAAAAADAJAAAAAAAAAUAAQAAAIgAAAAKAP####8BAAAAAAEAAACKAAAADwMAAAALAAAAgwAAAAFACAAAAAAAAAAAAAAMAP####8AAACGAAAAiwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAACMAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAIwAAAAOAP####8BAAAAABAAAAEAAQAAAI4AAACGAAAACgD#####AQAAAAABAAAAjgAAAAsAAACEAAAAAAwA#####wAAAI8AAACQAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAJEAAAANAP####8AAAAAABAAAU8AQBgAAAAAAADAKAAAAAAAAAUAAgAAAJEAAAAFAP####8AAAAAABAAAAEAAQAAAIoAAACTAAAABQD#####AAAAAAAQAAABAAEAAACFAAAAigAAAAoA#####wEAAAAAAQAAAJMAAAALAAAAgwAAAAADAP####8BAAAAARAAAAEAAQAAAJMAP#AAAAAAAAAAAAAMAP####8AAACXAAAAlgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAACYAAAADQD#####AAAAAAAQAAFQAEAUAAAAAAAAwCgAAAAAAAAFAAIAAACYAAAABQD#####AAAAAAAQAAABAAEAAACTAAAAmgAAAAUA#####wAAAAAAEAAAAQABAAAAmgAAAIUAAAAGAP####8BAAAAARAAAUsAAAAAAAAAAABACAAAAAAAAAUAAAAAigAAAIUAAAADAP####8BAAAAARAAAAEAAQAAAJ0BP#AAAAAAAAAAAAARAP####8BAAAAARAAAUwAAAAAAAAAAABACAAAAAAAAAUAAAAAngAAAJsAAAAFAP####8AAAAAABAAAAEBAQAAAJ0AAACfAAAAGQD#####AAAAAAABAAAAAUAlhyjGBrH8AAAAhQAAAJ0AAACfAAAAGQD#####AAAAAAABAAAAAUAiIExpX47ZAAAAnQAAAJ8AAACaAAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAACKAAAAkwAAAAMAAAAAowAAAAAAEAAAAQABAAAAigE#8AAAAAAAAAAAAAQAAAAAowAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAApAAAABMAAAAAowACYW4AAAClAAAAigAAAJMAAAAIAQAAAKMAAACKAAAAkwAAAAYAAAAAowAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAIoAAACTAAAAFAAAAACjAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAACTAAAApAAAABMAAAAAowACbWEAAAClAAAAigAAAKkAAAAVAAAAAKMAA3RtYQAAAKoAAAAWAQAAAKMAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACoEAAAAAAAAQAAAAIAAAAXAAAAAAsAAACrAAAADwAAAAALAAAApgAAAAsAAACqAAAACwAAAKYAAAAAAQAAAKcAAAASAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAACAAAAAgAAAJ0AAACfAAAAAwAAAACtAAAAAAAQAAABAAEAAACdAT#wAAAAAAAAAAAABAAAAACtAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAACuAAAAEwAAAACtAAJhbgAAAK8AAACdAAAAnwAAAAgBAAAArQAAAJ0AAACfAAAABgAAAACtAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAnQAAAJ8AAAAUAAAAAK0AAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAAJ8AAACuAAAAEwAAAACtAAJtYQAAAK8AAACdAAAAswAAABUAAAAArQADdG1hAAAAtAAAABYBAAAArQAAAAAAQAAAAAAAAADAAAAAAAAAAAAAALIQAAAAAAABAAAAAgAAABcAAAAACwAAALUAAAAPAAAAAAsAAACwAAAACwAAALQAAAALAAAAsAAAAAABAAAAsQAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAigAAAIUAAAADAAAAALcAAAAAABAAAAEAAQAAAIoBP#AAAAAAAAAAAAAEAAAAALcAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAALgAAAATAAAAALcAAmFuAAAAuQAAAIoAAACFAAAACAEAAAC3AAAAigAAAIUAAAAGAAAAALcAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACKAAAAhQAAABQAAAAAtwAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAhQAAALgAAAATAAAAALcAAm1hAAAAuQAAAIoAAAC9AAAAFQAAAAC3AAN0bWEAAAC+AAAAFgEAAAC3AAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAvBAAAAAAAAEAAAACAAAAFwAAAAALAAAAvwAAAA8AAAAACwAAALoAAAALAAAAvgAAAAsAAAC6AAAAAAEAAAC7AAAAB###########"
		let fig2 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAAC4QAAAQEAAAAAAAAAAQAAAL7#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACYzEAATcAAAABQBwAAAAAAAAAAAACAP####8AAAAAABAAAUEAwBQAAAAAAADAOAAAAAAAAAUAAUA5gAAAAAAAQEO4UeuFHrgAAAADAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAgA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAoAAAAL#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAMAAAADQD#####AAAAAAAQAAFCAMAYAAAAAAAAwDgAAAAAAAAFAAEAAAAMAAAACQD#####AAJoMQABNAAAAAFAEAAAAAAAAP####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAAKAAAACgD#####AQAAAAABAAAACf####8AAAABAApDT3BlcmF0aW9uAwAAAAsAAAAIAAAAAUAIAAAAAAAAAAAAAAwA#####wAAAAoAAAARAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABIAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAEgAAAA4A#####wEAAAAAEAAAAQABAAAAFAAAAAoAAAAKAP####8BAAAAAAEAAAAUAAAACwAAAA8AAAAADAD#####AAAAFQAAABYAAAANAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAFwAAAA0A#####wAAAAAAEAABRADAFAAAAAAAAEAAAAAAAAAABQABAAAAF#####8AAAABABBDRHJvaXRlUGFyYWxsZWxlAP####8BAAAAABAAAAEAAQAAABkAAAAKAAAACgD#####AQAAAAABAAAAGQAAAAsAAAAIAAAAAAwA#####wAAABoAAAAbAAAADQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABwAAAANAP####8AAAAAABAAAUMAwBAAAAAAAABAAAAAAAAAAAUAAQAAABwAAAAGAP####8BAAAAARAAAVoAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAA4AAAAFAP####8AAAAAABAAAAEAAQAAAAkAAAAOAAAABQD#####AAAAAAAQAAABAAEAAAAOAAAAHgAAAAUA#####wAAAAAAEAAAAQABAAAAHgAAABkAAAAFAP####8AAAAAABAAAAEAAQAAABkAAAAJAAAADgD#####AQAAAAAQAAABAAEAAAAfAAAAIP####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8BAAAAARAAAloyAAAAAAAAAAAAQAgAAAAAAAAFAAAAACQAAAAiAAAABQD#####AAAAAAAQAAABAQEAAAAfAAAAJf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAAAfAAAAJQAAAAMAAAAAJwAAAAAAEAAAAQABAAAAHwE#8AAAAAAAAAAAAAQAAAAAJwAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAKP####8AAAACABNDTWVzdXJlQW5nbGVPcmllbnRlAAAAACcAAmFuAAAAKQAAAB8AAAAlAAAACAEAAAAnAAAAHwAAACUAAAAGAAAAACcAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAfAAAAJf####8AAAABAA1DUG9pbnRQcm9qZXRlAAAAACcAAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAACUAAAAoAAAAEwAAAAAnAAJtYQAAACkAAAAfAAAALf####8AAAABAA5DVGVzdEV4aXN0ZW5jZQAAAAAnAAN0bWEAAAAu#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQEAAAAnAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAALBAAAAAAAAEAAAAC#####wAAAAEADUNGb25jdGlvbjNWYXIAAAAACwAAAC8AAAAPAAAAAAsAAAAqAAAACwAAAC4AAAALAAAAKgAAAAABAAAAKwAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAACQAAAA4AAAADAAAAADEAAAAAABAAAAEAAQAAAAkBP#AAAAAAAAAAAAAEAAAAADEAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAADIAAAATAAAAADEAAmFuAAAAMwAAAAkAAAAOAAAACAEAAAAxAAAACQAAAA4AAAAGAAAAADEAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAADgAAABQAAAAAMQAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAADIAAAATAAAAADEAAm1hAAAAMwAAAAkAAAA3AAAAFQAAAAAxAAN0bWEAAAA4AAAAFgEAAAAxAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAANhAAAAAAAAEAAAACAAAAFwAAAAALAAAAOQAAAA8AAAAACwAAADQAAAALAAAAOAAAAAsAAAA0AAAAAAEAAAA1AAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAAAOAAAAHgAAAAMAAAAAOwAAAAAAEAAAAQABAAAADgE#8AAAAAAAAAAAAAQAAAAAOwAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAPAAAABMAAAAAOwACYW4AAAA9AAAADgAAAB4AAAAIAQAAADsAAAAOAAAAHgAAAAYAAAAAOwAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAAeAAAAFAAAAAA7AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAPAAAABMAAAAAOwACbWEAAAA9AAAADgAAAEEAAAAVAAAAADsAA3RtYQAAAEIAAAAWAQAAADsAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAABAEAAAAAAAAQAAAAIAAAAXAAAAAAsAAABDAAAADwAAAAALAAAAPgAAAAsAAABCAAAACwAAAD4AAAAAAQAAAD8AAAACAP####8AAAAAABAAAUUAwBQAAAAAAADANgAAAAAAAAUAAUCHhAAAAAAAQGGuFHrhR64AAAAJAP####8AAmMyAAE3AAAAAUAcAAAAAAAAAAAACQD#####AAJoMgABNwAAAAFAHAAAAAAAAAAAAAoA#####wEAAAAAAQAAAEUAAAALAAAARgD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAUYAwBAAAAAAAABAEAAAAAAAAAUAAUAQpTrvfJtJAAAASAAAAAUA#####wAAAAAAEAAAAQABAAAARQAAAEkAAAAGAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAEkAAAAOAP####8BAAAAABAAAAEAAQAAAEsAAABKAAAACgD#####AQAAAAABAAAASwAAAAsAAABHAAAAAAwA#####wAAAEwAAABNAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAE4AAAANAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAQAAAE4AAAAKAP####8BAAAAAAEAAABFAAAADwIAAAABP9mZmZmZmZoAAAALAAAARgAAAAAMAP####8AAABKAAAAUQAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABSAAAADQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAFIAAAAOAP####8BAAAAABAAAAEAAQAAAFMAAABKAAAACgD#####AQAAAAABAAAAUwAAAAsAAABHAAAAAAwA#####wAAAFUAAABWAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAFcAAAANAP####8AAAAAABAAAUgAwBQAAAAAAADAOQAAAAAAAAUAAQAAAFcAAAAQAP####8BAAAAABAAAAEAAQAAAFkAAABKAAAABQD#####AAAAAAAQAAABAAEAAABFAAAAWQAAABAA#####wEAAAAAEAAAAQABAAAASQAAAFsAAAARAP####8AAAAAABAAAUcAwCAAAAAAAABAAAAAAAAAAAUAAAAAWgAAAFwAAAAFAP####8AAAAAABAAAAEAAQAAAFkAAABdAAAABQD#####AAAAAAAQAAABAAEAAABdAAAASQAAAAUA#####wAAAAAAEAAAAQEBAAAASwAAAFAAAAASAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAACAAAAAgAAAFkAAABFAAAAAwAAAABhAAAAAAAQAAABAAEAAABZAT#wAAAAAAAAAAAABAAAAABhAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAABiAAAAEwAAAABhAAJhbgAAAGMAAABZAAAARQAAAAgBAAAAYQAAAFkAAABFAAAABgAAAABhAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAWQAAAEUAAAAUAAAAAGEAAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAABiAAAAEwAAAABhAAJtYQAAAGMAAABZAAAAZwAAABUAAAAAYQADdG1hAAAAaAAAABYBAAAAYQAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAGYQAAAAAAABAAAAAgAAABcAAAAACwAAAGkAAAAPAAAAAAsAAABkAAAACwAAAGgAAAALAAAAZAAAAAABAAAAZQAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAUAAAAEsAAAADAAAAAGsAAAAAABAAAAEAAQAAAFABP#AAAAAAAAAAAAAEAAAAAGsAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAGwAAAATAAAAAGsAAmFuAAAAbQAAAFAAAABLAAAACAEAAABrAAAAUAAAAEsAAAAGAAAAAGsAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAASwAAABQAAAAAawAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAASwAAAGwAAAATAAAAAGsAAm1hAAAAbQAAAFAAAABxAAAAFQAAAABrAAN0bWEAAAByAAAAFgEAAABrAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAcBAAAAAAAAEAAAACAAAAFwAAAAALAAAAcwAAAA8AAAAACwAAAG4AAAALAAAAcgAAAAsAAABuAAAAAAEAAABvAAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABZAAAAXQAAAAMAAAAAdQAAAAAAEAAAAQABAAAAWQE#8AAAAAAAAAAAAAQAAAAAdQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAdgAAABMAAAAAdQACYW4AAAB3AAAAWQAAAF0AAAAIAQAAAHUAAABZAAAAXQAAAAYAAAAAdQAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFkAAABdAAAAFAAAAAB1AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABdAAAAdgAAABMAAAAAdQACbWEAAAB3AAAAWQAAAHsAAAAVAAAAAHUAA3RtYQAAAHwAAAAWAQAAAHUAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAB6EAAAAAAAAQAAAAIAAAAXAAAAAAsAAAB9AAAADwAAAAALAAAAeAAAAAsAAAB8AAAACwAAAHgAAAAAAQAAAHn#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAAAAAQAAAAFAH79o6Vd44QAAAFAAAABLAAAARQAAABkA#####wAAAAAAAQAAAAFAHogkhw7PmgAAAEsAAABQAAAAWQAAABkA#####wAAAAAAAQAAAAFAIGGDLk4E3QAAACUAAAAfAAAADgAAABkA#####wAAAAAAAQAAAAFAIG#NSbOaeQAAAB8AAAAlAAAAHgAAAAkA#####wACYzMAAjEwAAAAAUAkAAAAAAAAAAAACQD#####AAJoMwABNQAAAAFAFAAAAAAAAAAAAAIA#####wAAAAAAEAABTQDAMgAAAAAAAMAuAAAAAAAABQABQFAgAAAAAABAdRcKPXCj1wAAAAoA#####wEAAAAAAQAAAIUAAAALAAAAgwAAAAAYAP####8AAAAAABAAAU4AQBAAAAAAAADAKAAAAAAAAAUAAUAYdXZyBbfYAAAAhgAAAAUA#####wAAAAAAEAAAAQABAAAAhQAAAIcAAAAKAP####8BAAAAAAEAAACFAAAADwMAAAALAAAAgwAAAAFAFAAAAAAAAAAAAAAMAP####8AAACIAAAAiQAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAACKAAAADQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAIoAAAAOAP####8BAAAAABAAAAEAAQAAAIsAAACIAAAACgD#####AQAAAAABAAAAiwAAAAsAAACEAAAAAAwA#####wAAAI0AAACOAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAI8AAAANAP####8AAAAAABAAAVAAwDAAAAAAAADAGAAAAAAAAAUAAQAAAI8AAAAFAP####8AAAAAABAAAAEAAQAAAIUAAACRAAAACgD#####AQAAAAABAAAAkQAAAAsAAACDAAAAABAA#####wEAAAAAEAAAAQABAAAAkQAAAIgAAAAMAP####8AAACUAAAAkwAAAA0A#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAACVAAAADQD#####AAAAAAAQAAFPAEAUAAAAAAAAwCIAAAAAAAAFAAEAAACVAAAABQD#####AAAAAAAQAAABAAEAAACRAAAAlwAAAAUA#####wAAAAAAEAAAAQABAAAAlwAAAIcAAAAGAP####8BAAAAABAAAUsAAAAAAAAAAABACAAAAAAAAAUAAAAAhQAAAIcAAAAOAP####8BAAAAABAAAAEAAQAAAJoAAACIAAAAEQD#####AQAAAAAQAAFMAAAAAAAAAAAAQAgAAAAAAAAFAAAAAJsAAACUAAAAGQD#####AAAAAAABAAAAAUAkP+hrfTwUAAAAnAAAAJoAAACHAAAAGQD#####AAAAAAABAAAAAUAk8wqocINWAAAAmgAAAJwAAACXAAAABQD#####AAAAAAAQAAABAQEAAACcAAAAmgAAABIA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAhQAAAIcAAAADAAAAAKAAAAAAABAAAAEAAQAAAIUBP#AAAAAAAAAAAAAEAAAAAKAAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAKEAAAATAAAAAKAAAmFuAAAAogAAAIUAAACHAAAACAEAAACgAAAAhQAAAIcAAAAGAAAAAKAAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACFAAAAhwAAABQAAAAAoAAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAhwAAAKEAAAATAAAAAKAAAm1hAAAAogAAAIUAAACmAAAAFQAAAACgAAN0bWEAAACnAAAAFgEAAACgAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAApRAAAAAAAAEAAAACAAAAFwAAAAALAAAAqAAAAA8AAAAACwAAAKMAAAALAAAApwAAAAsAAACjAAAAAAEAAACkAAAAEgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAACFAAAAkQAAAAMAAAAAqgAAAAAAEAAAAQABAAAAhQE#8AAAAAAAAAAAAAQAAAAAqgAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAqwAAABMAAAAAqgACYW4AAACsAAAAhQAAAJEAAAAIAQAAAKoAAACFAAAAkQAAAAYAAAAAqgAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAIUAAACRAAAAFAAAAACqAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAACRAAAAqwAAABMAAAAAqgACbWEAAACsAAAAhQAAALAAAAAVAAAAAKoAA3RtYQAAALEAAAAWAQAAAKoAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACvEAAAAAAAAQAAAAIAAAAXAAAAAAsAAACyAAAADwAAAAALAAAArQAAAAsAAACxAAAACwAAAK0AAAAAAQAAAK4AAAASAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAACAAAAAgAAAJoAAACcAAAAAwAAAAC0AAAAAAAQAAABAAEAAACaAT#wAAAAAAAAAAAABAAAAAC0AAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAAC1AAAAEwAAAAC0AAJhbgAAALYAAACaAAAAnAAAAAgBAAAAtAAAAJoAAACcAAAABgAAAAC0AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAmgAAAJwAAAAUAAAAALQAAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAAJwAAAC1AAAAEwAAAAC0AAJtYQAAALYAAACaAAAAugAAABUAAAAAtAADdG1hAAAAuwAAABYBAAAAtAAAAAAAQAAAAAAAAADAAAAAAAAAAAAAALkQAAAAAAABAAAAAgAAABcAAAAACwAAALwAAAAPAAAAAAsAAAC3AAAACwAAALsAAAALAAAAtwAAAAABAAAAuAAAAAf##########w=="
		let codeBase64 = choice([fig1,fig2])

		texte_corr = `Dans chaque parallÃ©logramme, le segment en pointillÃ©s est ${texte_en_couleur_et_gras("perpendiculaire")} Ã  deux cÃ´tÃ©s opposÃ©s, c'est donc une ${texte_en_couleur_et_gras("hauteur")}.<br>`
		texte_corr += `Pour obtenir l'aire, il faut multiplier cette ${texte_en_couleur_et_gras("hauteur")} par la longueur de la ${texte_en_couleur_et_gras("base")} correspondante.`
		texte_corr += "<br><br>"
		texte_corr += `$\\mathcal{A}_{ABCD}=${c1}~\\text{cm}\\times  ${h1}~\\text{cm}=${c1*h1}~\\text{cm}^2$`
		texte_corr += `<br>$\\mathcal{A}_{EFGH}=${c2}~\\text{cm}\\times  ${h2}~\\text{cm}=${c2*h2}~\\text{cm}^2$`
		texte_corr += `<br>$\\mathcal{A}_{MNOP}=${c3}~\\text{cm}\\times  ${h3}~\\text{cm}=${c3*h3}~\\text{cm}^2$`
		

		this.MG32codeBase64 = codeBase64
		this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c1", "${c1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c2", "${c2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c3", "${c3}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h3", "${h3}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      ` 	
		
			
		this.liste_corrections.push(texte_corr);
		liste_de_question_to_contenu_sans_numero(this);		
	}

// 	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : PÃ©rimÃ¨tres\n\
// 2 : Aires\n3 : PÃ©rimÃ¨tres et aires"];

};

/**
 * 5A10 - Division Euclidienne; diviseurs, multiples, critÃ¨res de divisibilitÃ©
 * Exercice bilan
 * @author SÃ©bastien Lozano
 */
 
function Liste_des_diviseurs_5e(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1 ; 
	this.titre = "Ãcrire la liste de tous les diviseurs d'un entier."; 
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	//this.consigne =`Ãcrire la liste de tous les diviseurs d'un entier.`;
	this.consigne =``;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 2 : this.spacing = 1;
	sortie_html ? this.spacing_corr = 2: this.spacing_corr = 1;
	this.nb_questions = 3;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			//this.bouton_aide = modal_pdf(numero_de_l_exercice,"pdf/FicheArithmetique-3A10.pdf","Aide mÃ©moire sur la division euclidienne (SÃ©bastien Lozano)","Aide mÃ©moire")		
			//this.bouton_aide += modal_video('conteMathsNombresPremiers','videos/LesNombresPremiers.mp4','Petit conte mathÃ©matique','Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1,1,2];
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions);

			for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions&&cpt<50;) {
				type_de_questions = liste_type_de_questions[i];

				switch (type_de_questions) {
					case 1 : // ComplÃ©ter un tableau pour trouver la liste de tous les diviseurs d'un entier
						// on choisit un entier non premier infÃ©rieur Ã  99
						let M = randint(2,99,crible_eratosthene_n(99));
						// on calcule le nombre de diviseur de M pour prÃ©voir le nombre de lignes du tableau
						let nbre_diviseurs_M = liste_diviseurs(M).length;
						
						texte = `ComplÃ©ter le tableau suivant et faire la liste de tous les diviseurs de ${M}`;										
						if (!sortie_html) {
							texte += `$\\medskip$`;
						};
						texte += `<br>`;						
						if (sortie_html) {
							texte += `$\\def\\arraystretch{2.5}\\begin{array}{|c|c|c|}\n`
						} else {
							
							texte += `$\\begin{array}{|c|c|c|}\n`
						};						
						texte += `\\hline\n`
						texte += `\\text{Facteur nÂ°1} & \\text{Facteur nÂ°2} & \\text{Produit donnant } ${M} \\\\\n`
						texte += `\\hline\n`

						if (nbre_diviseurs_M%2==0) {//si il y a un nombre pair de diviseurs
							for (let m = 0; m<(liste_diviseurs(M).length/2); m++){
								texte += texte_ou_pas(liste_diviseurs(M)[m])+` & `+texte_ou_pas(liste_diviseurs(M)[(liste_diviseurs(M).length-m-1)])+`& ${texte_ou_pas(M)} \\\\\n`;
								texte += `\\hline\n`;
							};
						} else { // sinon il est impair, cela n'arrive qu'avvec les carrÃ©s parfaits
							for (let m = 0; m<((liste_diviseurs(M).length-1)/2); m++){
								texte += texte_ou_pas(liste_diviseurs(M)[m])+` & `+texte_ou_pas(liste_diviseurs(M)[(liste_diviseurs(M).length-m-1)])+`& ${texte_ou_pas(M)} \\\\\n`;
							};
							texte += texte_ou_pas(liste_diviseurs(M)[(nbre_diviseurs_M-1)/2])+` & `+texte_ou_pas(liste_diviseurs(M)[(nbre_diviseurs_M-1)/2])+`& ${texte_ou_pas(M)} \\\\\n`;							
							texte += `\\hline\n`;
						};			
						texte += `\\end{array}\n$`

						// correction

						texte_corr = `Le tableau suivant contient tous les couples de facteurs dont le produit vaut ${M}`;
						if (!sortie_html) {
							texte_corr += `$\\medskip$`;
						};
						texte_corr += `<br>`;						
						if (sortie_html) {
							texte_corr += `$\\def\\arraystretch{2.5}\\begin{array}{|c|c|c|}\n`
						} else {
							texte_corr += `$\\begin{array}{|c|c|c|}\n`
						};						
						texte_corr += `\\hline\n`
						texte_corr += `\\text{Facteur nÂ°1} & \\text{Facteur nÂ°2} & \\text{Produit donnant } ${M} \\\\\n`
						texte_corr += `\\hline\n`

						if (nbre_diviseurs_M%2==0) {//si il y a un nombre pair de diviseurs
							for (let m = 0; m<(liste_diviseurs(M).length/2); m++){
								texte_corr += liste_diviseurs(M)[m]+` & `+liste_diviseurs(M)[(liste_diviseurs(M).length-m-1)]+`& ${M} \\\\\n`;
								texte_corr += `\\hline\n`;
							};
						} else { // sinon il est impair, cela n'arrive qu'avvec les carrÃ©s parfaits
							for (let m = 0; m<((liste_diviseurs(M).length-1)/2); m++){
								texte_corr += liste_diviseurs(M)[m]+` & `+liste_diviseurs(M)[(liste_diviseurs(M).length-m-1)]+`& ${M} \\\\\n`;
							};
							texte_corr += liste_diviseurs(M)[(nbre_diviseurs_M-1)/2]+` & `+liste_diviseurs(M)[(nbre_diviseurs_M-1)/2]+`& ${M} \\\\\n`;							
							texte_corr += `\\hline\n`;
						};		
						texte_corr += `\\end{array}\n$`
						if (!sortie_html) {
							texte_corr += `$\\medskip$`;
						};
						texte_corr += `<br>`;
						texte_corr += `${M} a donc ${nbre_diviseurs_M} diviseurs qui sont : `;
						texte_corr += `1`;
						for (let w = 1; w<liste_diviseurs(M).length; w++) {
							texte_corr += ` ; `+liste_diviseurs(M)[w];
						};
						texte_corr += `.`;					
						break;
					case 2 : // liste des diviseurs
						// on dÃ©finit un tableau pour les choix du nombre dont on veut les diviseurs
						// 3 parmis 2,99 y compris les premiers et 1 parmis les entiers Ã  3 chiffres ayant au moins 8 diviseurs, il y en a 223 !
						let tableau_de_choix = [];
						tableau_de_choix =[randint(2,99),randint(2,99,[tableau_de_choix[0]]),randint(2,99,[tableau_de_choix[0],tableau_de_choix[1]]),randint(2,99,[tableau_de_choix[0],tableau_de_choix[1],tableau_de_choix[2]])];
						let tableau_de_choix_3chiffres =[];
						for (let m=101; m<999; m++) {
							if (liste_diviseurs(m).length>8) {
								tableau_de_choix_3chiffres.push(m);
							};
						};
						// on ajoute un nombre Ã  trois chiffre avec au moins 8 diviseurs dans les choix possibles
						let rg_Nb_3chiffres = randint(0,(tableau_de_choix_3chiffres.length-1));
						tableau_de_choix.push(tableau_de_choix_3chiffres[rg_Nb_3chiffres]);
										
						let N; // on dÃ©clare le nombre dont on va chercher les diviseurs
						let rg_N; // pour tirer le rang du nombre dans le tableau des choix
						rg_N = randint(0,(tableau_de_choix.length-1));
						N = tableau_de_choix[rg_N];
						texte = `Ãcrire la liste de tous les diviseurs de ${N}.`;
						texte_corr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En Ã©crivant toujours le plus petit facteur en premier.<br>`;
						texte_corr += `Il est suffisant de chercher des diviseurs infÃ©rieurs au plus grand nombre dont le carrÃ© vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\times $${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N))*Math.trunc(Math.sqrt(N))}<${N}`;
						texte_corr += ` et ${Math.trunc(Math.sqrt(N))+1}$\\times $${Math.trunc(Math.sqrt(N))+1} = ${(Math.trunc(Math.sqrt(N))+1)*(Math.trunc(Math.sqrt(N))+1)}>${N} donc il suffit d'arrÃªter la recherche de facteur Ã  ${Math.trunc(Math.sqrt(N))}.`;
						texte_corr += ` En effet, si ${N} est le produit de deux entiers p$\\times $q avec p < q alors si p$\\times $p > ${N} c'est que q$\\times $q < ${N} mais dans ce cas p serait supÃ©rieur Ã  q sinon p$\\times $q serait infÃ©rieur Ã  ${N} ce qui ne doit pas Ãªtre le cas.<br>`
						if (liste_diviseurs(N).length%2==0) {//si il y a un nombre pair de diviseurs
							for (let m = 0; m<(liste_diviseurs(N).length/2); m++){
								texte_corr += ``+liste_diviseurs(N)[m]+`$\\times $`+liste_diviseurs(N)[(liste_diviseurs(N).length-m-1)]+` = ${N}<br>`;
							};
						} else {
							for (let m = 0; m<((liste_diviseurs(N).length-1)/2); m++){
								texte_corr += ``+liste_diviseurs(N)[m]+`$\\times $`+liste_diviseurs(N)[(liste_diviseurs(N).length-m-1)]+`<br>`;
							};
							texte_corr += ``+liste_diviseurs(N)[(liste_diviseurs(N).length-1)/2]+`$\\times $`+liste_diviseurs(N)[(liste_diviseurs(N).length-1)/2]+` = ${N}<br>`;
						};
						texte_corr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`;
						texte_corr += `La liste des diviseurs de ${N} est donc `;
						texte_corr += `1`;
						for (let w = 1; w<liste_diviseurs(N).length; w++) {
							texte_corr += ` ; `+liste_diviseurs(N)[w];
						};
						texte_corr += `.`;
						break;							
				};
			
				if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
					this.liste_questions.push(texte);
					this.liste_corrections.push(texte_corr);
					i++;
				}
				cpt++
			}	
	
		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};


/**
 * 5A11 justifier la non primalitÃ© rÃ©investissement des critÃ¨res de divisibilitÃ©
 * Nombres Ã  3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 9, de 10, sous forme d'un produit de deux nombres premiers infÃ©rieurs Ã  30
 * et un nombre premier inferieur Ã  529 
 * @author SÃ©bastien Lozano
 */
function Premier_ou_pas_5e(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "PrimalitÃ© ou pas"; 
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne =`Justifier que les nombres suivants sont premiers ou pas.`;
	//this.consigne += `<br>`;	
	sortie_html ? this.spacing = 3 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 2: this.spacing_corr = 1;
	this.nb_questions = 7;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 2;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	this.nouvelle_version = function(numero_de_l_exercice){
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice,"pdf/FicheArithmetique-5A11.pdf","Aide mÃ©moire sur les nombres premiers (SÃ©bastien Lozano)","Aide mÃ©moire")		
			this.bouton_aide += modal_video('conteMathsNombresPremiers','videos/LesNombresPremiers.mp4','Petit conte mathÃ©matique - Les Nombres Premiers','Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1,2,3,4,5,6,7];
		type_de_questions_disponibles=shuffle(type_de_questions_disponibles); // on mÃ©lange l'ordre des questions
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions);
		
		let string_rappel = `Cette liste des nombres premiers infÃ©rieurs Ã  30 pourra Ãªtre utile : <br>`+crible_eratosthene_n(100)[0];
		for (let k=1;k<crible_eratosthene_n(30).length;k++) {
			string_rappel +=`, `+crible_eratosthene_n(30)[k];
		};
		string_rappel +=`.`;
		this.introduction = warn_message(string_rappel,`nombres`,`Coup de pouce`);

			for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions&&cpt<50;) {

				type_de_questions = liste_type_de_questions[i];
				
				var N; // le nombre de la question
	
				switch (type_de_questions) {
					case 1 : // nombre pair
						N=2*randint(51,4999);
						texte = nombre_avec_espace(N);						
						texte_corr = `Comme ${nombre_avec_espace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-mÃªme, `;
						texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N)+` n'est donc pas premier.`);
						break;		
					case 2 : // Multiple de 3
						let sum3=0; // pour la valeur de la somme;
						N=3*randint(34,3333);// on initialise avant la boucle car on a peut Ãªtre de la chance
						while ( (N % 2 == 0) || (N % 5 == 0)) {
							N = 3 * randint(34, 3333);
						};
						texte = nombre_avec_espace(N);
						texte_corr = `Comme `+ N.toString().charAt(0);
						sum3 = Number(N.toString().charAt(0));
						for (let k=1; k<N.toString().length; k++) {
							texte_corr += ` + `+N.toString().charAt(k);
							sum3 +=Number(N.toString().charAt(k));
						};					
						texte_corr += ` = ${sum3} est un multiple de 3 donc ${nombre_avec_espace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-mÃªme, `;
						texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N)+` n'est donc pas premier.`);
						break;	
					case 3 : // Multiple de 5
						N=5*randint(20,1999);
						texte = nombre_avec_espace(N);
						texte_corr = `Comme le dernier chiffre de ${nombre_avec_espace(N)} est un ${N.toString().charAt(N.toString().length-1)} alors ${nombre_avec_espace(N)} est divisible par 5, `;
						texte_corr += `il admet donc au moins trois diviseurs qui sont 1, 5 et lui-mÃªme, `;
						texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N)+` n'est donc pas premier.`);
						break;	
					case 4 : // Multiple de 9
						let sum9=0; // pour la valeur de la somme;
						N=9*randint(12,1111);// on initialise avant la boucle car on a peut Ãªtre de la chance
						while ( (N % 2 == 0) || (N % 5 == 0)) {
							N = 9 * randint(34, 3333);
						};
						texte = nombre_avec_espace(N);
						texte_corr = `Comme `+ N.toString().charAt(0);
						sum9 = Number(N.toString().charAt(0));
						for (let k=1; k<N.toString().length; k++) {
							texte_corr += ` + `+N.toString().charAt(k);
							sum9 +=Number(N.toString().charAt(k));
						};					
						texte_corr += ` = ${sum9} est un multiple de 9 donc ${nombre_avec_espace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 9 et lui-mÃªme, `;
						texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N)+` n'est donc pas premier.`);
						break;	
					case 5 : // multiple de 10
						N=10*randint(10,999);
						texte = nombre_avec_espace(N);
						texte_corr = `Comme le nombre ${nombre_avec_espace(N)} se termine par un ${N.toString().charAt(N.toString().length-1)} alors ${nombre_avec_espace(N)} est un multiple de 10, `;
						texte_corr += `il admet donc au moins trois diviseurs qui sont 1, 10 et lui-mÃªme, `;
						texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N)+` n'est donc pas premier.`);
						break;	
					case 6 : // produit de deux nombres premiers infÃ©rieurs Ã  30
						// rang du premier facteur premier
						let r1 = randint(0,crible_eratosthene_n(30).length-1);
						// rang du second facteur premier
						let r2 = randint(0,crible_eratosthene_n(30).length-1);
						let prime1 = crible_eratosthene_n(100)[r1]; // on tire un nombre premier infÃ©rieur Ã  100, il n'y en a que 25!
						let prime2 = crible_eratosthene_n(100)[r2]; // on tire un autre nombre premier infÃ©rieur Ã  100, Ã§a peut Ãªtre le mÃªme qu'avant!
						N=prime1+`$\\times $`+prime2;
						texte = N;
						texte_corr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `;
						if (prime1==prime2) {
							texte_corr += `trois divisieurs qui sont 1, ${prime1} et lui-mÃªme ${N}=${nombre_avec_espace(prime1*prime2)} `;
						} else {
							texte_corr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-mÃªme ${N}=${nombre_avec_espace(prime1*prime2)}, `;
						};						
						texte_corr += texte_en_couleur_et_gras(`${N} = `+nombre_avec_espace(prime1*prime2)+` n'est donc pas premier.`);
						break;
					case 7 : // nombre premier infÃ©rieur Ã  29
						// rang du nombre premier choisi
						let r = randint(0,crible_eratosthene_n(29).length-1);
						N=crible_eratosthene_n(29)[r]; //on choisit un nombre premier infÃ©rieur Ã  529
						texte = N+``;
						let tab_premiers_a_tester = crible_eratosthene_n(N);
						//texte_corr = `Testons la divisibilitÃ© de ${N} par tous les nombres premiers infÃ©rieurs Ã  $\\sqrt{${N}}$, c'est Ã  dire par les nombres `;
						texte_corr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers infÃ©rieurs Ã  $\\sqrt{${N}}$, c'est Ã  dire par les nombres `;						
						texte_corr += tab_premiers_a_tester[0];
						for (let k=1;k<tab_premiers_a_tester.length;k++) {
							texte_corr += `, `+tab_premiers_a_tester[k];
						};
						//texte_corr += `.`;
						// texte_corr += `<br> Aucun de ces nombres premiers ne divise ${N}, `;
						texte_corr += `, le reste n'est jamais nul.`;
						// texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` est donc un nombre premier.`);
						texte_corr += `<br>`+texte_en_couleur_et_gras(nombre_avec_espace(N) + ` est donc un nombre premier.`);
						break;								
				};
			
				if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
					this.liste_questions.push(texte);
					this.liste_corrections.push(texte_corr);
					i++;
				}
				cpt++
			}	
	
		liste_de_question_to_contenu(this);
	}
	
};

/**
 * Trouver l'image d'une figure par une symÃ©trie centrale dans un pavage (7 motifs diffÃ©rents)
 * @Auteur Jean-Claude Lhote
 * fonction servant Ã  tous les niveaux
 * RÃ©fÃ©rences 5G12, 6G25-2, 4G11, 3G12
 */
function Pavages_et_transformations() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
//	this.titre = "Trouver l'image d'une figure par une symÃ©trie centrale";
	this.pas_de_version_LaTeX=true;
	this.consigne = "";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
//	this.sup = 1; // 1 pour symÃ©trie axiale, 2 pour symÃ©trie centrale, 3 pour translations, et 4 pour rotations ; paramÃ¨tre fixÃ© par les variantes respectives.
	sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;
	this.liste_packages = 'tkz-euclide';
	this.nouvelle_version = function (numero_de_l_exercice) {
	this.type_exercice = 'MG32';
	this.MG32editable=false;
	this.taille_div_MG32 = [700, 700];
	this.liste_questions = [];
	this.liste_corrections = []; // Liste de questions corrigÃ©es
	//listes de pavages [nx,ny,xB,yB,xC,yC,xD,yD,zoom,anngle]  : 0=carrÃ©s, 1=cerf-volant 2=quadri concave 3=quadri quelconque 4=parallÃ©logrammes 5=triangles rectangles isocÃ¨les 6=triangles Ã©quilatÃ©raux 7=losanges
	let paves=[[5,5,4,0,4,4,0,4,22,0],[5,5,6,0,8,8,0,6,40,-9],[5,5,8,0,4,4,2,8,30,-10],[5,5,4,0,6,4,0,6,28,-15],[4,6,8,0,7,4,-1,4,32,0],[5,5,8,0,4,4,0,8,40,0],[5,5,4,0,3,2*Math.sin(Math.PI/3),2,4*Math.sin(Math.PI/3),15,0],[4,4,3,1,4,4,1,3,20,0]]

	let texte,texte_corr
	let tabfigA=[], tabfigB=[],tabfigC=[],tabfigD=[]
	let pave=[]
	switch (parseInt(this.sup)) {
		case 1:
			pave=paves[0] // pavages adaptÃ©s Ã  symÃ©trie axiale (carrÃ©s)
			break
		case 2:
			pave=paves[randint(0,7)] // pavages adaptÃ©s Ã  symÃ©trie centrale (tous)
			break
		case 3:
			pave=paves[randint(0,7)] //pavages adaptÃ©s Ã  translation (tous)
			break
		case 4:
			pave=paves[0] // pavages adaptÃ©s Ã  rotation (carrÃ©s  )
	}
	let nx=pave[0],ny=pave[1],xB=pave[2],yB=pave[3],xC=pave[4],yC=pave[5],xD=pave[6],yD=pave[7],Zoom=pave[8],Angle=pave[9]
	let xAI=xB+xC-xD
	let yAI=yB+yC-yD
	let xAJ=xC+xD-xB
	let yAJ=yC+yD-yB
	let xAxy,yAxy,numAxy
	let point=[0,0,0]
	let trouver=false,indexA,numA,indexcentre1,numcentre1,xmil1=0,ymil1=0,indexD,numD,indexcentre2,numcentre2,xmil2=0,ymil2=0,indexC,numC,indexcentre3,numcentre3,xmil3=0,ymil3=0,num1,num2,num3
	let xc=0,yc=0,xb=0,yb=0,xa=0,ya=0,xV1=0,yV1=0,xV2=0,yV2=0,xV3=0,yV3=0
	let s0 = choice([`S`,`T`,`L`,`W`,`R`,`G`,`E`,`F`,`G`,`K`])
	let s1 = choice([`S`,`T`,`L`,`W`,`R`,`G`,`E`,`F`,`G`,`K`],[s0])
	let s2 = choice([`S`,`T`,`L`,`W`,`R`,`G`,`E`,`F`,`G`,`K`],[s0,s1])


	for (let y=0;y<ny;y++) {  // On initialise les tableaux avec les coordonnÃ©es des points de rÃ©fÃ©rence (A,B,C et D) de chaque translatÃ© et son numÃ©ro dans le pavage.
		for (let x=0;x<nx;x++) {
			xAxy=x*xAI+y*xAJ
			yAxy=x*yAI+y*yAJ
			numAxy=2*x+4*y*nx
			tabfigA.push([xAxy,yAxy,numAxy]) 
			tabfigB.push([xAxy+xB,yAxy+yB,numAxy+1])
			tabfigD.push([xAxy+xD,yAxy+yD,numAxy+2*nx])
			tabfigC.push([xAxy+xC,yAxy+yC,numAxy+2*nx+1])
		}
	}
	
	texte = `Le point O peut Ãªtre dÃ©placÃ© pour recadrer Ã©ventuellement le pavage.<br>` // La figure Ã©noncÃ© a la mÃªme base pour toutes les transformations.
	
	switch (parseInt(this.sup)) {
		case 1 : //symÃ©trie axiale
			this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAQL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQEXAAAAAAABASkKPXCj1w#####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ5YQABOAAAAAFAIAAAAAAAAAAAAAIA#####wAEbnVtYQABMAAAAAEAAAAAAAAAAAAAAAIA#####wACeGMAAjE4AAAAAUAyAAAAAAAAAAAAAgD#####AAJ5YwACMTIAAAABQCgAAAAAAAAAAAAYAP####8BAAAAABAAAWEAQBAAAAAAAADAMwAAAAAAAAUAAAAAHAAAAAgAAAAjAAAACAAAACQAAAAYAP####8BAAAAABAAAWMAQAgAAAAAAADAMQAAAAAAAAUAAAAAHAAAAAgAAAAmAAAACAAAACcAAAAOAP####8AAAANAAAABwMAAAABP#AAAAAAAAAAAAAKAAAABgAAAAgAAAAlAAAAEAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAACoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAKgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAAAqAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAACr#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAANAAAAKAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACsAAAAvAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALAAAAC8AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAtAAAALwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC4AAAAvAAAAAgD#####AAJueQABNQAAAAFAFAAAAAAAAAAAAAMA#####wACcjMAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTEpLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAwD#####AAJyMgAlc2koKG1vZHVsb3goeCk9MCkqKG1vZHVsb3koeCk9MSksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABAAAAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAADAP####8AAnIxACVzaSgobW9kdWxveCh4KT0xKSoobW9kdWxveSh4KT0wKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAIA#####wAFbWluaTEAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AAVtYXhpMQACNDAAAAABQEQAAAAAAAAAAAACAP####8ABHBhczEAATEAAAABP#AAAAAAAAD#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8BAAAAAMAxAAAAAAAAwC4AAAAAAAAAAAANEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAUEAAAACAP####8ABW1pbmkyAAMtMzD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUA+AAAAAAAAAAAAAgD#####AAVtYXhpMgACMzAAAAABQD4AAAAAAAAAAAACAP####8ABHBhczIAATEAAAABP#AAAAAAAAD#####AAAAAQAHQ01pbGlldQD#####AQAAAAEQAAJKMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAIv####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAAPwAAABAA#####wEAAAABEAABSgAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAQAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABAAAAAHAD#####AQAAAAEQAAJJMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAHgAAAB0A#####wAAAEMAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARAAAABAA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAARAAAABkA#####wAAAA0AAAAiAAAAEAD#####AQAAAAEQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABHAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAEcAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAARwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABH#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAACAAAABBAAAAQgAAACIAAAAgAAAAHgD#####AAAAAAABAAAABQAAAB4AAAAiAAAARQAAAEYAAAAeAAAAHgD#####AAAAAAABAAAABQAAAEgAAABLAAAASQAAAEoAAABIAAAAHgD#####AAAAAAABAAAABQAAAA0AAAAgAAAAIgAAAB4AAAANAAAAFgD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABgAAAAXAP####8A5ubmAAEAAAANAAAARgAAAEEAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAQARQ1BvaW50UGFyQWJzY2lzc2UA#####wEAAAAAEAABVQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARgAAAAcBAAAACAAAAAMAAAABP#AAAAAAAAAAAAAfAP####8BAAAAABAAAVYAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEEAAAAHAQAAAAgAAAA0AAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAA0AAABSAAAAIAD#####AQAAAAAQAAABAAEAAAANAAAAUwAAAA8A#####wEAAAAAEAACVTEAAAAAAAAAAABACAAAAAAAAAUAAT#TA9Z22dUpAAAAVAAAABkA#####wAAAA0AAABTAAAAEAD#####AQAAAAAQAAJWMQAAAAAAAAAAAEAIAAAAAAAABQAAAABWAAAAVwAAACAA#####wEAAAAAEAAAAQABAAAAVgAAAFgAAAAPAP####8BAAAAABAAAlUyAAAAAAAAAAAAQAgAAAAAAAAFAAE#1tGzvqNnfgAAAFkAAAAZAP####8AAAANAAAAWgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB4AAABbAAAAHgD#####AQAAAAABAAAABQAAAFwAAABdAAAAXgAAAF8AAABcAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABGAAAAWwAAAB4A#####wEAAAAAAQAAAAUAAABfAAAAXgAAAGEAAABiAAAAXwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEEAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAQgAAAFsAAAAeAP####8BAAAAAAEAAAAFAAAAXQAAAGQAAABlAAAAXgAAAF0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEsAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABKAAAAWwAAAB4A#####wEAAAAAAQAAAAUAAABnAAAAaAAAAGkAAABqAAAAZ#####8AAAACAAhDTWVzdXJlWAD#####AAF4AAAAUQAAAFr#####AAAAAgAIQ01lc3VyZVkA#####wABeQAAAFEAAABaAAAAAgD#####AAJ4MQAMaW50KHgrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABsAAAAAT9QYk3S8an8AAAAAgD#####AAJ5MQAMaW50KHkrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABtAAAAAT9QYk3S8an8AAAAAgD#####AANudW0ADHgxKjIrbngqNCp5MQAAAAcAAAAABwIAAAAIAAAAbgAAAAFAAAAAAAAAAAAAAAcCAAAABwIAAAAIAAAAAwAAAAFAEAAAAAAAAAAAAAgAAABvAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAWgAAAF7#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAP####8BAAAAAMAmAAAAAAAAwCP#######AAAABxEgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHAAAAACAP####8ABG51bTEABW51bSsxAAAABwAAAAAIAAAAcAAAAAE#8AAAAAAAAAAAAAIA#####wAEbnVtJwAIbnVtK254KjIAAAAHAAAAAAgAAABwAAAABwIAAAAIAAAAAwAAAAFAAAAAAAAAAAAAAAIA#####wAFbnVtJzEABm51bScrMQAAAAcAAAAACAAAAHQAAAABP#AAAAAAAAAAAAAcAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABdAAAAZQAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAF4AAABpAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAXwAAAGEAAAAjAP####8BAAAAAMAmAAAAAAAAwCQAAAAAAAAAAAB4EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHMAAAAjAP####8BAAAAAMAkAAAAAAAAwCQAAAAAAAAAAAB2EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHQAAAAjAP####8BAAAAAMAiAAAAAAAAwCAAAAAAAAAAAAB3EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHX#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8BAAAAAAAAYAAAAAgAAAA0AAAAWgAAAAcAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAJAD#####AQAAAAAAAGYAAAAIAAAANAAAAFoAAAAHAAAAWgAAAFsAAABdAAAAXgAAAGQAAABlAAAAZgAAACQA#####wEAAAAAAABrAAAACAAAADQAAABaAAAABwAAAFoAAABbAAAAZwAAAGgAAABpAAAAagAAAGsAAAAkAP####8BAAAAAAAAYwAAAAgAAAA0AAAAWgAAAAcAAABaAAAAWwAAAF4AAABfAAAAYQAAAGIAAABjAAAAJAD#####AAAAAAAAAHwAAAAIAAAAAwAAAFYAAAALAAAAVgAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAHwAAAAkAP####8AAAAAAAAAfwAAAAgAAAADAAAAVgAAAAsAAABWAAAAWAAAAFkAAABaAAAAWwAAAF4AAABfAAAAYQAAAGIAAABjAAAAfwAAACQA#####wAAAAAAAAB+AAAACAAAAAMAAABWAAAACwAAAFYAAABYAAAAWQAAAFoAAABbAAAAZwAAAGgAAABpAAAAagAAAGsAAAB+AAAAJAD#####AAAAAAAAAH0AAAAIAAAAAwAAAFYAAAALAAAAVgAAAFgAAABZAAAAWgAAAFsAAABdAAAAXgAAAGQAAABlAAAAZgAAAH0AAAAkAP####8BAAAAAAAAcgAAAAgAAAA0AAAAWgAAAAoAAABaAAAAWwAAAF4AAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAJAD#####AAAAAAAAAIQAAAAIAAAAAwAAAFYAAAAOAAAAVgAAAFgAAABZAAAAWgAAAFsAAABeAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAIQAAAAkAP####8BAAAAAAAAeQAAAAgAAAA0AAAAWgAAAAwAAABaAAAAWwAAAF8AAABhAAAAbAAAAG0AAABuAAAAbwAAAHAAAABzAAAAeAAAAHkAAAAkAP####8AAAAAAAAAhgAAAAgAAAADAAAAVgAAABAAAABWAAAAWAAAAFkAAABaAAAAWwAAAF8AAABhAAAAbAAAAG0AAABuAAAAbwAAAHAAAABzAAAAeAAAAHkAAACGAAAAJAD#####AQAAAAAAAHsAAAAIAAAANAAAAFoAAAANAAAAWgAAAFsAAABeAAAAaQAAAGwAAABtAAAAbgAAAG8AAABwAAAAdAAAAHUAAAB3AAAAewAAACQA#####wAAAAAAAACIAAAACAAAAAMAAABWAAAAEQAAAFYAAABYAAAAWQAAAFoAAABbAAAAXgAAAGkAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB1AAAAdwAAAHsAAACIAAAAJAD#####AQAAAAAAAHoAAAAIAAAANAAAAFoAAAAMAAAAWgAAAFsAAABdAAAAZQAAAGwAAABtAAAAbgAAAG8AAABwAAAAdAAAAHYAAAB6AAAAJAD#####AAAAAAAAAIoAAAAIAAAAAwAAAFYAAAAQAAAAVgAAAFgAAABZAAAAWgAAAFsAAABdAAAAZQAAAGwAAABtAAAAbgAAAG8AAABwAAAAdAAAAHYAAAB6AAAAiv####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAABGAAAAIQAAAACMAAJ4MgAAABwAAABGAAAAIgAAAACMAAJ5MgAAABwAAABGAAAAGgEAAACMAf8AAABAHAAAAAAAAAAAAAAAAAAAAAAARhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAQQAAACEAAAAAkAACeDIAAAAcAAAAQQAAACIAAAAAkAACeTIAAAAcAAAAQQAAABoBAAAAkAH#AAAAQBwAAAAAAADANQAAAAAAAAAAAEEQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAACAAAAAhAAAAAJQAAngyAAAAHAAAACAAAAAiAAAAAJQAAnkyAAAAHAAAACAAAAAaAQAAAJQB#wAAAL#wAAAAAAAAQAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAAAeAAAAIQAAAACYAAJ4MgAAABwAAAAeAAAAIgAAAACYAAJ5MgAAABwAAAAeAAAAGgEAAACYAf8AAAC#8AAAAAAAAD#########gAAAAHhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAIgAAACEAAAAAnAACeDIAAAAcAAAAIgAAACIAAAAAnAACeTIAAAAcAAAAIgAAABoBAAAAnAH#AAAAQBgAAAAAAADANQAAAAAAAAAAACIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAQAP####8B#wAAARAAAkExAMA3AAAAAAAAv#AAAAAAAAAFAAAAACIAAABHAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAACgAAAAIQAAAAChAAJ4MgAAABwAAACgAAAAIgAAAAChAAJ5MgAAABwAAACgAAAAGgEAAAChAf8AAABAEAAAAAAAAMAzAAAAAAAAAAAAoBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAAAIA#####wACeGIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnliAAIxNgAAAAFAMAAAAAAAAAAAAAIA#####wAEbnVtYgACMTAAAAABQCQAAAAAAAAAAAACAP####8ABG51bWMAAjMzAAAAAUBAgAAAAAAAAAAAGAD#####AQAAAAAQAAFiAEAIAAAAAAAAwDL#######gFAAAAABwAAAAIAAAApQAAAAgAAACmAAAAHgD#####AAAAAAABAAAABQAAACsAAAAsAAAALQAAAC4AAAArAAAAHgD#####ACy4LAABAAAABQAAADAAAAAxAAAAMgAAADMAAAAw#####wAAAAEAEENTdXJmYWNlUG9seWdvbmUA#####wAAfwAAAAAFAAAAqwAAAA4A#####wAAAA0AAAAHAwAAAAE#8AAAAAAAAAAAAAoAAAA2AAAACAAAAKcAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAAgAAAArQAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAEEAAACtAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAQgAAAK0AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAAiAAAArQAAAB4A#####wAAAAAAAQAAAAUAAACuAAAArwAAALAAAACxAAAArgAAABkA#####wAAAA0AAACpAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAArgAAALMAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACvAAAAswAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAALAAAACzAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAsQAAALMAAAAeAP####8A#wAAAAEAAAAFAAAAtAAAALUAAAC2AAAAtwAAALQAAAAmAP####8A#wAAAAAABQAAALgAAAAZAP####8AAAANAAAAKf####8AAAABAAtDTWFjcm9QYXVzZQD#####AAAAAAH#####EECO9AAAAAAAQEHCj1wo9cMCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAgAAAA4A#####wAAAA0AAAAHAwAAAAE#8AAAAAAAAAAAAAoAAAA1AAAACAAAAKgAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAvAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEsAAAC8AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAALwAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABKAAAAvAAAAB4A#####wH#AAAAAQAAAAUAAAC9AAAAvgAAAL8AAADAAAAAvQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAL0AAAC6AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAvgAAALoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC#AAAAugAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAMAAAAC6AAAAHgD#####AAAAfwABAAAABQAAAMIAAADDAAAAxAAAAMUAAADCAAAAJgD#####AAAA#wAAAAUAAADGAAAAAgD#####AAN4YzEAAjMyAAAAAUBAAAAAAAAAAAAAAgD#####AAN5YzEAAjIwAAAAAUA0AAAAAAAAAAAAGAD#####AQB#AAAQAAJjMQBAAAAAAAAAAMA5AAAAAAAABQAAAAAcAAAACAAAAMgAAAAIAAAAyf####8AAAABAAlDRHJvaXRlT20A#####wAAfwAAEAAAAQACAAAAHAAAAMoAAAAbAAAAAT#wAAAAAAAA#####wAAAAEAD0NTeW1ldHJpZUF4aWFsZQD#####AAAAywAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADAAAADMAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAAMwAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAyAAAAzAAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAADMAAAAHgD#####AQB#AAABAAAABQAAAM0AAADOAAAAzwAAANAAAADNAAAAJgD#####AQB#AAAAAAUAAADRAAAADwD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAcAnnHHHHHHHAAAADgAAABkA#####wAAAA0AAABGAAAAGQD#####AAAADQAAAFIAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADTAAAA1QAAACAA#####wH#AAAAEAAAAQACAAAA0wAAANYAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADTAAAA1AAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAANYAAADUAAAAIAD#####AQB#AAAQAAABAAIAAADYAAAA2f####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADLAAAA2gAAABoA#####wAAfwAAwDoAAAAAAADAPgAAAAAAAAAAANsQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAACAP####8AA3hjMgABNAAAAAFAEAAAAAAAAAAAAAIA#####wADeWMyAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAN4YzMAATgAAAABQCAAAAAAAAAAAAACAP####8AA3ljMwABNAAAAAFAEAAAAAAAAAAAABgA#####wH#AAAAEAACYzIAAAAAAAAAAABACAAAAAAAAAUAAAAAHAAAAAgAAADdAAAACAAAAN4AAAAYAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAAN0AAAAIAAAA3gAAABgA#####wH#AAAAEAACYzMAAAAAAAAAAABACAAAAAAAAAUAAAAAHAAAAAgAAADfAAAACAAAAOAAAAACAP####8AAnhWAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAJ5VgABMAAAAAEAAAAAAAAAAAAAAAIA#####wADeFYyAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAN5VjIAATAAAAABAAAAAAAAAAAAAAACAP####8AA3hWMwABMAAAAAEAAAAAAAAAAAAAAAIA#####wADeVYzAAEwAAAAAQAAAAAAAAAAAAAAKAD#####AP8AAAAQAAABAAIAAAAcAAAA4QAAAAE#8AAAAAAAAAAAACkA#####wAAAOoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC0AAAA6wAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAALUAAADrAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAtgAAAOsAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC3AAAA6wAAAB4A#####wH#AAAAAQAAAAUAAADsAAAA7QAAAO4AAADvAAAA7AAAACYA#####wH#AAAAAAAFAAAA8P####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8AAAD#ABAAAAEAAgAAAOMAAAAOAAAAGQD#####AAAA0wAAANkAAAAqAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADqAAAA1wAAABoA#####wD#AAAAwEYAAAAAAADAPAAAAAAAAAAAAPQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAAqAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAOAAAA8gAAABoA#####wAAAP8AwD0AAAAAAADACAAAAAAAAAAAAPYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgzKSkAAAAfAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAHwAAAAcAAAAABwIAAAAIAAAANAAAAAFAAAAAAAAAAAAAAAE#8AAAAAAAAAAAABEA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPgAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAD5AAAA1AAAABAA#####wEAAP8AEAABWQAAAAAAAAAAAEAIAAAAAAAABQAAAAD6AAAA8wAAACAA#####wH#AAAAEAAAAQABAAAA+gAAAPsAAAAqAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADqAAAA#AAAABoA#####wD#AAAAwDUAAAAAAADAAAAAAAAAAAAAAP0QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAAgAP####8BAH8AABAAAAEAAQAAAPgAAAD7AAAAKgD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAywAAAP8AAAAaAP####8AAH8AAL#wAAAAAAAAP#AAAAAAAAAAAAEAEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMSkp################"
			this.MG32codeBase64corr = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAT7#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAAAAAAAgD#####AAJ5RAABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQEbAAAAAAABAU2FHrhR64v####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAAKAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAACgAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAACv####8AAAABAApDT3BlcmF0aW9uAwAAAAE#8AAAAAAAAP####8AAAABAA9DUmVzdWx0YXRWYWxldXIAAAAC#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAUBngAAAAAAAAAAACwAAAAUA#####wAAAAoAAAAIAAAAAf####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAAA######AAAAAQAOQ1BvaW50TGllUG9pbnQA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABD#####AAAAAQAJQ0NlcmNsZU9BAP####8B#wAAAAIAAAAKAAAAEf####8AAAABAA1DRGVtaURyb2l0ZU9BAP####8B#wAAAA0AAAEAAgAAAAoAAAAR#####wAAAAEAEENEZW1pRHJvaXRlSW1hZ2UA#####wH#AAAADQAAAQACAAAAEwAAAAz#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAAFAAAABL#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAABUAAAAKAP####8B#wAAABAAAkonAAAAAAAAAAAAQAgAAAAAAAAFAAAAABEAAAANAAAACgD#####Af8AAAAQAAJJJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAWAAAADf####8AAAACAAdDUmVwZXJlAP####8A5ubmAQEAAAAKAAAAGAAAABcAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####Af8AAAEQAAJCJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAACAAAAAkAAAAIAAAACAAAAAsA#####wEAAAAAEAABQgBAAAAAAAAAAMA3AAAAAAAABQAAAAAaAAAAEgD#####Af8AAAEQAAJEJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAACAAAAAUAAAAIAAAABAAAAAsA#####wEAAAAAEAABRADAMQAAAAAAAMAqAAAAAAAABQAAAAAcAAAAEgD#####Af8AAAEQAAJDJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAACAAAAAcAAAAIAAAABgAAAAsA#####wEAAAAAEAABQwBACAAAAAAAAL#wAAAAAAAABQAAAAAeAAAAAgD#####AAJueQABNQAAAAFAFAAAAAAAAP####8AAAABAAdDTWlsaWV1AP####8BAAAAARAAAkkxAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB8AAAAb#####wAAAAEAEUNTeW1ldHJpZUNlbnRyYWxlAP####8AAAAhAAAACgD#####AQAAAAEQAAFJAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB0AAAAi#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAVUAAAAAAAAAAABACAAAAAAAAAUAAAAACgAAACMAAAAHAQAAAAgAAAADAAAAAT#wAAAAAAAAAAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAcAnnHHHHHHHAAAAC#####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAAAoAAAAjAAAAFgD#####AAAACgAAACQAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAlAAAAJwAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACgAAAAmAAAAFgD#####AAAAJQAAACkAAAAVAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAKAAAAHAAAAAcAAAAABwIAAAAIAAAAIAAAAAFAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAsA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACsAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAsAAAAJgAAAAoA#####wEAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC0AAAAqAAAAAgD#####AAN4YzIAATAAAAABAAAAAAAAAAAAAAACAP####8AA3ljMgABMAAAAAEAAAAAAAAAAAAAABIA#####wH#AAAAEAACYzIAAAAAAAAAAABACAAAAAAAAAUAAAAAGQAAAAgAAAAvAAAACAAAADD#####AAAAAQAJQ0Ryb2l0ZU9tAP####8B#wAAABAAAAEAAgAAABkAAAAxAAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8B#wAAABAAAAEAAQAAAC0AAAAu#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADIAAAAz#####wAAAAIADENDb21tZW50YWlyZQD#####Af8AAADANQAAAAAAAMAAAAAAAAAAAAAANBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDIpKQAAAAIA#####wADeGMxAAIyNgAAAAFAOgAAAAAAAAAAAAIA#####wADeWMxAAIyNgAAAAFAOgAAAAAAAAAAABIA#####wEAfwAAEAACYzEAQAAAAAAAAADAOQAAAAAAAAUAAAAAGQAAAAgAAAA2AAAACAAAADcAAAAXAP####8BAH8AABAAAAEAAgAAABkAAAA4#####wAAAAEADENNb2luc1VuYWlyZQAAAAE#8AAAAAAAAAAAABgA#####wEAAP8AEAAAAQABAAAALAAAAC4AAAAZAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA5AAAAOgAAABoA#####wEAfwABAAAAOxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKf####8AAAABAAVDRm9uYwD#####AAdtb2R1bG94AAhtb2QoeCwyKf####8AAAABAA1DRm9uY3Rpb24yVmFyBv####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAABQAAAAAAAAAAAAXgAAAAcAP####8AB21vZHVsb3kAEm1vZChpbnQoeS9ueC8yKSwyKQAAAB0G#####wAAAAIACUNGb25jdGlvbgIAAAAHAwAAAAcDAAAAHgAAAAAAAAAIAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAABwA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAAPQAAAB4AAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAhAAAAPgAAAB4AAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ4YQACMjAAAAABQDQAAAAAAAAAAAACAP####8AAnlhAAIyNAAAAAFAOAAAAAAAAAAAAAIA#####wAEbnVtYQABMAAAAAEAAAAAAAAAAAAAAAIA#####wACeGMAAjE4AAAAAUAyAAAAAAAAAAAAAgD#####AAJ5YwACMTIAAAABQCgAAAAAAAAAAAASAP####8BAAAAABAAAWEAQBAAAAAAAADAMwAAAAAAAAUAAAAAGQAAAAgAAABAAAAACAAAAEEAAAASAP####8BAAAAABAAAWMAQAgAAAAAAADAMQAAAAAAAAUAAAAAGQAAAAgAAABDAAAACAAAAEQAAAAGAP####8AAAAKAAAABwMAAAABP#AAAAAAAAAAAAAhAAAAPwAAAAgAAABCAAAACgD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAACgAAAEcAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAdAAAARwAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB8AAABHAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGwAAAEcAAAAWAP####8AAAAKAAAARQAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEgAAABMAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAEwAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABKAAAATAAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEsAAABMAAAAHAD#####AAJyMwAlc2koKG1vZHVsb3goeCk9MSkqKG1vZHVsb3koeCk9MSksMSwwKQAAACAAAAAABwIAAAAHCAAAACEAAAA9AAAAHgAAAAAAAAABP#AAAAAAAAAAAAAHCAAAACEAAAA+AAAAHgAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAAcAP####8AAnIyACVzaSgobW9kdWxveCh4KT0wKSoobW9kdWxveSh4KT0xKSwxLDApAAAAIAAAAAAHAgAAAAcIAAAAIQAAAD0AAAAeAAAAAAAAAAEAAAAAAAAAAAAAAAcIAAAAIQAAAD4AAAAeAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAABwA#####wACcjEAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTApLDEsMCkAAAAgAAAAAAcCAAAABwgAAAAhAAAAPQAAAB4AAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAhAAAAPgAAAB4AAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAVtaW5pMQACMTAAAAABQCQAAAAAAAAAAAACAP####8ABW1heGkxAAI0MAAAAAFARAAAAAAAAAAAAAIA#####wAEcGFzMQABMQAAAAE#8AAAAAAAAAAAABoA#####wEAAAAAwDEAAAAAAADALgAAAAAAAAAAAAoQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABQQAAAAIA#####wAFbWluaTIAAy0zMAAAABsAAAABQD4AAAAAAAAAAAACAP####8ABW1heGkyAAIzMAAAAAFAPgAAAAAAAAAAAAIA#####wAEcGFzMgABMQAAAAE#8AAAAAAAAAAAABMA#####wEAAAABEAACSjEAAAAAAAAAAABACAAAAAAAAAUAAAAAHQAAAB8AAAAUAP####8AAABbAAAACgD#####AQAAAAEQAAFKAAAAAAAAAAAAQAgAAAAAAAAFAAAAABsAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAACgAAAFwAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAKAAAAIgAAABYA#####wAAAAoAAAAfAAAACgD#####AQAAAAEQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAoAAABgAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHwAAAGAAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAbAAAAYAAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB0AAABg#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAAB0AAABdAAAAXgAAAB8AAAAdAAAAIgD#####AAAAAAABAAAABQAAABsAAAAfAAAAXwAAACMAAAAbAAAAIgD#####AAAAAAABAAAABQAAAGEAAABkAAAAYgAAAGMAAABhAAAAIgD#####AAAAAAABAAAABQAAAAoAAAAdAAAAHwAAABsAAAAKAAAAEAD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABUAAAARAP####8A5ubmAAEAAAAKAAAAIwAAAF0AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAAVAP####8BAAAAABAAAVYAAAAAAAAAAABACAAAAAAAAAUAAAAACgAAAF0AAAAHAQAAAAgAAAAgAAAAAT#wAAAAAAAAAAAAGAD#####AQAAAAAQAAABAAEAAAAKAAAAJAAAABgA#####wEAAAAAEAAAAQABAAAACgAAAGsAAAAJAP####8BAAAAABAAAlUxAAAAAAAAAAAAQAgAAAAAAAAFAAE#0wPWdtnVKQAAAGwAAAAWAP####8AAAAKAAAAawAAAAoA#####wEAAAAAEAACVjEAAAAAAAAAAABACAAAAAAAAAUAAAAAbgAAAG8AAAAYAP####8BAAAAABAAAAEAAQAAAG4AAABwAAAACQD#####AQAAAAAQAAJVMgAAAAAAAAAAAEAIAAAAAAAABQABP9bRs76jZ34AAABxAAAAFgD#####AAAACgAAAHIAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAKAAAAcwAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB0AAABzAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHwAAAHMAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAbAAAAcwAAACIA#####wEAAAAAAQAAAAUAAAB0AAAAdQAAAHYAAAB3AAAAdAAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAF8AAABzAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIwAAAHMAAAAiAP####8BAAAAAAEAAAAFAAAAdwAAAHYAAAB5AAAAegAAAHcAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABdAAAAcwAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAF4AAABzAAAAIgD#####AQAAAAABAAAABQAAAHUAAAB8AAAAfQAAAHYAAAB1AAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYQAAAHMAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABkAAAAcwAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGIAAABzAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYwAAAHMAAAAiAP####8BAAAAAAEAAAAFAAAAfwAAAIAAAACBAAAAggAAAH######AAAAAgAIQ01lc3VyZVgA#####wABeAAAAGoAAABy#####wAAAAIACENNZXN1cmVZAP####8AAXkAAABqAAAAcgAAAAIA#####wACeDEADGludCh4KzAuMDAxKQAAAB8CAAAABwAAAAAIAAAAhAAAAAE#UGJN0vGp#AAAAAIA#####wACeTEADGludCh5KzAuMDAxKQAAAB8CAAAABwAAAAAIAAAAhQAAAAE#UGJN0vGp#AAAAAIA#####wADbnVtAAx4MSoyK254KjQqeTEAAAAHAAAAAAcCAAAACAAAAIYAAAABQAAAAAAAAAAAAAAHAgAAAAcCAAAACAAAAAMAAAABQBAAAAAAAAAAAAAIAAAAhwAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHIAAAB2#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAJgAAAAAAAMAj#######wAAAAiRIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAACIAAAAAgD#####AARudW0xAAVudW0rMQAAAAcAAAAACAAAAIgAAAABP#AAAAAAAAAAAAACAP####8ABG51bScACG51bStueCoyAAAABwAAAAAIAAAAiAAAAAcCAAAACAAAAAMAAAABQAAAAAAAAAAAAAACAP####8ABW51bScxAAZudW0nKzEAAAAHAAAAAAgAAACMAAAAAT#wAAAAAAAAAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAdQAAAH0AAAATAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB2AAAAgQAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHcAAAB5AAAAJQD#####AQAAAADAJgAAAAAAAMAkAAAAAAAAAAAAkBIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAACLAAAAJQD#####AQAAAADAJAAAAAAAAMAkAAAAAAAAAAAAjhIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAACMAAAAJQD#####AQAAAADAIgAAAAAAAMAgAAAAAAAAAAAAjxIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAACN#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAHgAAAAIAAAAIAAAAHIAAAAHAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAACYA#####wEAAAAAAAB+AAAACAAAACAAAAByAAAABwAAAHIAAABzAAAAdQAAAHYAAAB8AAAAfQAAAH4AAAAmAP####8BAAAAAAAAgwAAAAgAAAAgAAAAcgAAAAcAAAByAAAAcwAAAH8AAACAAAAAgQAAAIIAAACDAAAAJgD#####AQAAAAAAAHsAAAAIAAAAIAAAAHIAAAAHAAAAcgAAAHMAAAB2AAAAdwAAAHkAAAB6AAAAewAAACYA#####wAAAAAAAACUAAAACAAAAAMAAABuAAAACwAAAG4AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAACUAAAAJgD#####AAAAAAAAAJcAAAAIAAAAAwAAAG4AAAALAAAAbgAAAHAAAABxAAAAcgAAAHMAAAB2AAAAdwAAAHkAAAB6AAAAewAAAJcAAAAmAP####8AAAAAAAAAlgAAAAgAAAADAAAAbgAAAAsAAABuAAAAcAAAAHEAAAByAAAAcwAAAH8AAACAAAAAgQAAAIIAAACDAAAAlgAAACYA#####wAAAAAAAACVAAAACAAAAAMAAABuAAAACwAAAG4AAABwAAAAcQAAAHIAAABzAAAAdQAAAHYAAAB8AAAAfQAAAH4AAACVAAAAJgD#####AQAAAAAAAIoAAAAIAAAAIAAAAHIAAAAKAAAAcgAAAHMAAAB2AAAAhAAAAIUAAACGAAAAhwAAAIgAAACJAAAAigAAACYA#####wAAAAAAAACcAAAACAAAAAMAAABuAAAADgAAAG4AAABwAAAAcQAAAHIAAABzAAAAdgAAAIQAAACFAAAAhgAAAIcAAACIAAAAiQAAAIoAAACcAAAAJgD#####AQAAAAAAAJEAAAAIAAAAIAAAAHIAAAAMAAAAcgAAAHMAAAB3AAAAeQAAAIQAAACFAAAAhgAAAIcAAACIAAAAiwAAAJAAAACRAAAAJgD#####AAAAAAAAAJ4AAAAIAAAAAwAAAG4AAAAQAAAAbgAAAHAAAABxAAAAcgAAAHMAAAB3AAAAeQAAAIQAAACFAAAAhgAAAIcAAACIAAAAiwAAAJAAAACRAAAAngAAACYA#####wEAAAAAAACTAAAACAAAACAAAAByAAAADQAAAHIAAABzAAAAdgAAAIEAAACEAAAAhQAAAIYAAACHAAAAiAAAAIwAAACNAAAAjwAAAJMAAAAmAP####8AAAAAAAAAoAAAAAgAAAADAAAAbgAAABEAAABuAAAAcAAAAHEAAAByAAAAcwAAAHYAAACBAAAAhAAAAIUAAACGAAAAhwAAAIgAAACMAAAAjQAAAI8AAACTAAAAoAAAACYA#####wEAAAAAAACSAAAACAAAACAAAAByAAAADAAAAHIAAABzAAAAdQAAAH0AAACEAAAAhQAAAIYAAACHAAAAiAAAAIwAAACOAAAAkgAAACYA#####wAAAAAAAACiAAAACAAAAAMAAABuAAAAEAAAAG4AAABwAAAAcQAAAHIAAABzAAAAdQAAAH0AAACEAAAAhQAAAIYAAACHAAAAiAAAAIwAAACOAAAAkgAAAKL#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAZAAAAIwAAACMAAAAApAACeDIAAAAZAAAAIwAAACQAAAAApAACeTIAAAAZAAAAIwAAABoBAAAApAH#AAAAQBwAAAAAAAAAAAAAAAAAAAAAACMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAnAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAGQAAAF0AAAAjAAAAAKgAAngyAAAAGQAAAF0AAAAkAAAAAKgAAnkyAAAAGQAAAF0AAAAaAQAAAKgB#wAAAEAcAAAAAAAAwDUAAAAAAAAAAABdEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJwD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABkAAAAdAAAAIwAAAACsAAJ4MgAAABkAAAAdAAAAJAAAAACsAAJ5MgAAABkAAAAdAAAAGgEAAACsAf8AAAC#8AAAAAAAAEAAAAAAAAAAAAAAHRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACcA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAZAAAAGwAAACMAAAAAsAACeDIAAAAZAAAAGwAAACQAAAAAsAACeTIAAAAZAAAAGwAAABoBAAAAsAH#AAAAv#AAAAAAAAA#########4AAAABsQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAnAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAGQAAAB8AAAAjAAAAALQAAngyAAAAGQAAAB8AAAAkAAAAALQAAnkyAAAAGQAAAB8AAAAaAQAAALQB#wAAAEAYAAAAAAAAwDUAAAAAAAAAAAAfEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAACgD#####Af8AAAEQAAJBMQDANwAAAAAAAL#wAAAAAAAABQAAAAAfAAAAYAAAACcA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAZAAAAuAAAACMAAAAAuQACeDIAAAAZAAAAuAAAACQAAAAAuQACeTIAAAAZAAAAuAAAABoBAAAAuQH#AAAAQBAAAAAAAADAMwAAAAAAAAAAALgQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAACAP####8AAnhiAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAJ5YgACMTYAAAABQDAAAAAAAAAAAAACAP####8ABG51bWIAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AARudW1jAAIzMwAAAAFAQIAAAAAAAAAAABIA#####wEAAAAAEAABYgBACAAAAAAAAMAy#######4BQAAAAAZAAAACAAAAL0AAAAIAAAAvgAAACIA#####wAAAAAAAQAAAAUAAABIAAAASQAAAEoAAABLAAAASAAAACIA#####wEsuCwAAQAAAAUAAABNAAAATgAAAE8AAABQAAAATf####8AAAABABBDU3VyZmFjZVBvbHlnb25lAP####8BAH8AAAAABQAAAMMAAAAGAP####8AAAAKAAAABwMAAAABP#AAAAAAAAAAAAAhAAAAUgAAAAgAAAC#AAAACgD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAHQAAAMUAAAAKAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAABdAAAAxQAAAAoA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAF4AAADFAAAACgD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAHwAAAMUAAAAiAP####8AAAAAAAEAAAAFAAAAxgAAAMcAAADIAAAAyQAAAMYAAAAWAP####8AAAAKAAAAwQAAAAoA#####wEA#wAAEAABSAAAAAAAAAAAAEAIAAAAAAAACQAAAADGAAAAywAAAAoA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMcAAADLAAAACgD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAyAAAAMsAAAAKAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADJAAAAywAAACIA#####wH#AAAAAQAAAAUAAADMAAAAzQAAAM4AAADPAAAAzAAAACgA#####wH#AAAAAAAFAAAA0AAAABYA#####wAAAAoAAABG#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI7sAAAAAABAIwo9cKPXDAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAACAAAABgD#####AAAACgAAAAcDAAAAAT#wAAAAAAAAAAAAIQAAAFEAAAAIAAAAwAAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGEAAADUAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAZAAAANQAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABiAAAA1AAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGMAAADUAAAAIgD#####Af8AAAABAAAABQAAANUAAADWAAAA1wAAANgAAADVAAAACgD#####Af8AAAAQAAFNAAAAAAAAAAAAQAgAAAAAAAAFAAAAANUAAADSAAAACgD#####Af8AAAAQAAFOAAAAAAAAAAAAQAgAAAAAAAAFAAAAANYAAADSAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA1wAAANIAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADYAAAA0gAAACIA#####wEAAH8AAQAAAAUAAADaAAAA2wAAANwAAADdAAAA2gAAACgA#####wEAAP8AAAAFAAAA3v####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAADkAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABNAAAA4AAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE4AAADgAAAACgD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAATwAAAOAAAAAKAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAA4AAAACIA#####wEAfwAAAQAAAAUAAADhAAAA4gAAAOMAAADkAAAA4QAAACgA#####wEAfwAAAAAFAAAA5QAAABgA#####wH#AAAAEAAAAQACAAAAJQAAACgAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAlAAAAJgAAABgA#####wEAfwAAEAAAAQACAAAA6AAAACkAAAAZAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA5AAAA6QAAABoA#####wEAfwAAwDoAAAAAAADAPgAAAAAAAAAAAOoQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAACAP####8AA3hjMwABOAAAAAFAIAAAAAAAAAAAAAIA#####wADeWMzAAE0AAAAAUAQAAAAAAAAAAAAEgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGQAAAAgAAAAvAAAACAAAADAAAAASAP####8B#wAAABAAAmMzAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAIAAAA7AAAAAgAAADtAAAAAgD#####AAJ4VgABMAAAAAEAAAAAAAAAAAAAAAIA#####wACeVYAATAAAAABAAAAAAAAAAAAAAACAP####8AA3hWMgABMAAAAAEAAAAAAAAAAAAAAAIA#####wADeVYyAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAN4VjMAATAAAAABAAAAAAAAAAAAAAACAP####8AA3lWMwABMAAAAAEAAAAAAAAAAAAAACoA#####wAAADIAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADMAAAA9gAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM0AAAD2AAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAzgAAAPYAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADPAAAA9gAAACIA#####wH#AAAAAQAAAAUAAAD3AAAA+AAAAPkAAAD6AAAA9wAAACgA#####wH#AAAAAAAFAAAA+#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAD#ABAAAAEAAgAAAO8AAAALAAAAGQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMgAAAOcAAAAaAP####8B#wAAAMBGAAAAAAAAwDwAAAAAAAAAAAD+EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMikpAAAAGQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAACwAAAP0AAAAaAP####8BAAD#AMA9AAAAAAAAwAgAAAAAAAAAAAEAEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMykp#####wAAAAEADUNQb2ludFByb2pldGUA#####wEAfwAAEAABRQAAAAAAAAAAAEAIAAAAAAAABQAAAABFAAAAOQAAABgA#####wEAfwAAEAAAAQABAAAA4QAAAEUAAAAJAP####8BAH8AABAAAUYAAAAAAAAAAABACAAAAAAAAAUAAT#wAAAAAAAAAAABA#####8AAAACAA9DTWVzdXJlQWJzY2lzc2UA#####wACazEAAAECAAAARQAAAQQAAAAsAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAAOQAAACwA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE4AAAA5AAAABgD#####AAABBgAAAAgAAAEFAAAACgD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAUAAAAQgAAAAGAP####8AAAEHAAAACAAAAQUAAAAKAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABOAAABCgAAAAYA#####wAAAQIAAAAIAAABBQAAAAoA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE8AAAEMAAAAIgD#####AQB#AAABAAAABQAAAQsAAAEEAAABCQAAAQ0AAAELAAAAKAD#####AQB#AAAAAAUAAAEO#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8AAH8AAf####8KQI0UAAAAAABAScKPXCj1xAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTEAAAAAAAkAAADDAAAAxAAAAQ4AAAEPAAAA5QAAAOYAAAA8AAAAOQAAAOv#####AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AAB#AAH#####CkCNDAAAAAAAQFLhR64UeuICAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAlhcHBhcmFpdDEAAAAAAAkAAADDAAAAxAAAAQ4AAAEPAAAA5QAAAOYAAAA8AAAAOQAAAOsA#####wAAAAIAF0NNYWNyb0FuaW1hdGlvblBvaW50TGllAP####8AAH8AAf####8KQI0MAAAAAABAWeFHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAABWFuaW0xAAAAAAAAFAAAAGQAAAA8AAABBAABAP####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AAB#AAH#####CkA0gAAAAAAAQBYUeuFHrhgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGEAAAAAAAQAAAERAAABEgAAARAAAADTAAAALAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAOAAAADIAAAAsAP####8BAH8AABAAAUcAAAAAAAAAAABACAAAAAAAAAUAAAAAzAAAADIAAAAYAP####8BAH8AABAAAAEAAQAAAMwAAAD3AAAACQD#####AQB#AAAQAAFLAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAAAAAAAAAAARYAAAAtAP####8AAmsyAAABFQAAAMwAAAEXAAAALAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAzwAAADIAAAAsAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADOAAAAMgAAAAYA#####wAAARoAAAAIAAABGAAAAAoA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM4AAAEbAAAABgD#####AAABGQAAAAgAAAEYAAAACgD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAzwAAAR0AAAAKAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADNAAABHQAAACIA#####wH#AAAAAQAAAAUAAAEXAAABHgAAARwAAAEfAAABFwAAACgA#####wH#AAAAAAAFAAABIAAAAC4A#####wD#AAAB#####wpAjUwAAAAAAEBhcKPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHbWFzcXVlMgAAAAAACQAAANAAAADRAAAA+wAAASAAAAEhAAAA#AAAAP8AAAAyAAAANQAAAC8A#####wD#AAAB#####wpAjUwAAAAAAEBlcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJYXBwYXJhaXQyAAAAAAAJAAAA0AAAANEAAAD7AAABIAAAASEAAAD8AAAA#wAAADIAAAA1AAAAADAA#####wD#AAAB#####wpAjWQAAAAAAEBpcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFYW5pbTIAAAAAAAAUAAAAZAAAADwAAAEXAAEAAAAAMQD#####AP8AAAH#####CkBYIAAAAAAAQBYUeuFHrhgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGIAAAAAAAQAAAEjAAABJAAAASIAAADTAAAAKgD#####AAAA#QAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAANoAAAEmAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA2wAAASYAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADcAAABJgAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAN0AAAEmAAAAIgD#####AQAA#wABAAAABQAAAScAAAEoAAABKQAAASoAAAEnAAAAKAD#####AQAA#wAAAAUAAAErAAAALAD#####AQAA#wAQAAFMAAAAAAAAAAAAQAgAAAAAAAAFAAAAANoAAAD9AAAALAD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA3QAAAP0AAAAYAP####8B#wAAABAAAAEAAQAAANsAAAEoAAAACQD#####Af8AAAAQAAFQAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAAAAAAAAAAAS8AAAAtAP####8AAmszAAABLQAAANsAAAEwAAAABgD#####AAABLQAAAAgAAAExAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA2gAAATIAAAAGAP####8AAAEuAAAACAAAATEAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADdAAABNAAAAAoA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAANwAAAE0AAAAIgD#####AQAA#wABAAAABQAAATMAAAEwAAABNgAAATUAAAEzAAAAKAD#####AQAA#wAAAAUAAAE3AAAALgD#####AAAA#wH#####CkCNZAAAAAAAQG2Qo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAdtYXNxdWUzAAAAAAAIAAAA3gAAAN8AAAE3AAABOAAAAQEAAAD9AAABKwAAASwAAAAvAP####8AAAD#Af####8QQI2MAAAAAABAcJhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MwAAAAAACAAAAN4AAADfAAABNwAAATgAAAEBAAAA#QAAASsAAAEsAAAAADAA#####wAAAP8B#####wpAjcwAAAAAAEBy2FHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFYW5pbTMAAAAAAAAUAAAAZAAAADwAAAEwAAEAAAAAMQD#####AAAA#wH#####CkBlUAAAAAAAQBYUeuFHrhgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGMAAAAAAAMAAAE6AAABOwAAATkAAAAxAP####8AAAD#Af####8QQI28AAAAAABAdNhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACkNvcnJlY3Rpb24AAAAAAAQAAADTAAABEwAAASUAAAE8################"
		// PremiÃ¨re question : une figure type A par symÃ©trie d'axe // Ã  [BD] est une figure type A. le symÃ©trique du sommet A est le sommet C
			indexA = randint(0, nx * ny - 1)
			numA = tabfigA[indexA][2]
			let indexsym1 = randint(0, nx * ny - 1, [indexA]) // sert Ã  choisir un axe [BD]. 
			xmil1=tabfigD[indexsym1][0] // sert pour faire passer l'axe de symÃ©trie.
			ymil1=tabfigD[indexsym1][1]
			point = image_point_par_transformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigC[j][0] && point[1] == tabfigC[j][1]) {
						trouver = true
						num1=tabfigA[j][2]
						xa=tabfigA[indexA][0]
						ya=tabfigA[indexA][1]
						break
					}
				}
				if (trouver == false) {
					indexA = randint(0, nx * ny - 1)
					numA = tabfigA[indexA][2]
					indexsym1 = randint(0, nx * ny - 1, [indexA]) 
					xmil1=tabfigD[indexsym1][0] 
					ymil1=tabfigD[indexsym1][1]
					point = image_point_par_transformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])
				}
			}
			texte += num_alpha(0) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numA} dans la symÃ©trie par rapport Ã  $(d_1)$ ?<br>`, `green`)
			texte_corr = num_alpha(0) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numA} dans la symÃ©trie par rapport Ã  $(d_1)$ porte le numÃ©ro ${num1}.<br>`, `green`)
			// DeuxiÃ¨me question : une figure type D par symÃ©trie d'axe // Ã  [AC] est une figure type B. le symÃ©trique du sommet B est le sommet D
			indexD = randint(0, nx * ny - 1)
			numD = tabfigD[indexD][2]
			let indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert Ã  choisir un axe [AC]. 
			xmil2=tabfigA[indexsym2][0] // sert pour faire passer l'axe de symÃ©trie.
			ymil2=tabfigA[indexsym2][1]
			point = image_point_par_transformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigB[j][0] && point[1] == tabfigB[j][1]) {
						trouver = true
						num2=tabfigB[j][2]
						xb=tabfigD[indexD][0]
						yb=tabfigD[indexD][1]-4
						break
					}
				}
				if (trouver == false) {
					indexD = randint(0, nx * ny - 1)
					numD = tabfigD[indexD][2]
					indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert Ã  choisir un axe [AC]. 
					xmil2=tabfigA[indexsym2][0] // sert pour faire passer l'axe de symÃ©trie.
					ymil2=tabfigA[indexsym2][1]
					point = image_point_par_transformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])
				}
			}
			texte += num_alpha(1) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numD} dans la symÃ©trie par rapport Ã  $(d_2)$ ?<br>`, `red`)
			texte_corr += num_alpha(1) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numD} dans la symÃ©trie par rapport Ã  $(d_2)$ porte le numÃ©ro ${num2}.<br>`, `red`)
			// troisiÃ¨me question : une figure type C par symÃ©trie d'axe // Ã  [DC] est une figure type B. le symÃ©trique du sommet C est le sommet C'
			indexC = randint(0, nx * ny - 1)
			numC = tabfigC[indexC][2]
			let indexsym3 = randint(0, nx * ny - 1, [indexC]) // sert Ã  choisir un axe [AC]. 
			xmil3=tabfigC[indexsym3][0] // sert pour faire passer l'axe de symÃ©trie.
			ymil3=tabfigC[indexsym3][1]
			point = image_point_par_transformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigC[j][0] && point[1] == tabfigC[j][1]) {
						trouver = true
						num3=tabfigC[j][2]
						xc=tabfigC[indexC][0]-4
						yc=tabfigC[indexC][1]-4
						break
					}
				}
				if (trouver == false) {
					indexC = randint(0, nx * ny - 1)
					numC = tabfigC[indexC][2]
					let indexsym3 = randint(0, nx * ny - 1, [indexC]) // sert Ã  choisir un axe [AC]. 
					xmil3=tabfigC[indexsym3][0] // sert pour faire passer l'axe de symÃ©trie.
					ymil3=tabfigC[indexsym3][1]
					point = image_point_par_transformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])
				}
			}
			texte += num_alpha(2) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numC} dans la symÃ©trie par rapport Ã  $(d_3)$ ?<br>`, `blue`)
			texte_corr += num_alpha(2) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numC} dans la symÃ©trie par rapport Ã  $(d_3)$ porte le numÃ©ro ${num3}.<br>`, `blue`)

			break
		case 2 : // symÃ©trie centrale
			this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAST#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQFKgAAAAAABAYLCj1wo9cf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAIxOAAAAAFAMgAAAAAAAAAAAAIA#####wACeWMAAjEyAAAAAUAoAAAAAAAAAAAAAgD#####AAN4YzEAATUAAAABQBQAAAAAAAAAAAACAP####8AA3ljMQABMgAAAAFAAAAAAAAAAAAAABgA#####wEAAAAAEAABYQAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAACMAAAAIAAAAJAAAABgA#####wEAAAAAEAABYwAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAACYAAAAIAAAAJwAAABgA#####wAJzAkAEAACYzEAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAAAoAAAACAAAACkAAAAOAP####8AAAANAAAABwMAAAABP#AAAAAAAAAAAAAKAAAABgAAAAgAAAAlAAAAEAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAC0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAALQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAAAtAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAC3#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAANAAAAKgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC4AAAAyAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALwAAADIAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAwAAAAMgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADEAAAAyAAAAAgD#####AAJueQABNQAAAAFAFAAAAAAAAAAAAAMA#####wACcjMAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTEpLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAwD#####AAJyMgAlc2koKG1vZHVsb3goeCk9MCkqKG1vZHVsb3koeCk9MSksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABAAAAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAADAP####8AAnIxACVzaSgobW9kdWxveCh4KT0xKSoobW9kdWxveSh4KT0wKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAIA#####wAFbWluaTEAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AAVtYXhpMQACNDAAAAABQEQAAAAAAAAAAAACAP####8ABHBhczEAATEAAAABP#AAAAAAAAD#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8BAAAAAMAxAAAAAAAAwC4AAAAAAAAAAAANEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAUEAAAACAP####8ABW1pbmkyAAMtMzD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUA+AAAAAAAAAAAAAgD#####AAVtYXhpMgACMzAAAAABQD4AAAAAAAAAAAACAP####8ABHBhczIAATEAAAABP#AAAAAAAAD#####AAAAAQAHQ01pbGlldQD#####AQAAAAEQAAJKMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAIv####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAAQgAAABAA#####wEAAAABEAABSgAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAQwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABDAAAAHAD#####AQAAAAEQAAJJMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAHgAAAB0A#####wAAAEYAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARwAAABAA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAARwAAABkA#####wAAAA0AAAAiAAAAEAD#####AQAAAAEQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABKAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAEoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAASgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABK#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAACAAAABEAAAARQAAACIAAAAgAAAAHgD#####AAAAAAABAAAABQAAAB4AAAAiAAAASAAAAEkAAAAeAAAAHgD#####AAAAAAABAAAABQAAAEsAAABOAAAATAAAAE0AAABLAAAAHgD#####AAAAAAABAAAABQAAAA0AAAAgAAAAIgAAAB4AAAANAAAAFgD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABgAAAAXAP####8A5ubmAAEAAAANAAAASQAAAEQAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAQARQ1BvaW50UGFyQWJzY2lzc2UA#####wEAAAAAEAABVQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAASQAAAAcBAAAACAAAAAMAAAABP#AAAAAAAAAAAAAfAP####8BAAAAABAAAVYAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEQAAAAHAQAAAAgAAAA3AAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAA0AAABVAAAAIAD#####AQAAAAAQAAABAAEAAAANAAAAVgAAAA8A#####wEAAAAAEAACVTEAAAAAAAAAAABACAAAAAAAAAUAAT#TA9Z22dUpAAAAVwAAABkA#####wAAAA0AAABWAAAAEAD#####AQAAAAAQAAJWMQAAAAAAAAAAAEAIAAAAAAAABQAAAABZAAAAWgAAACAA#####wEAAAAAEAAAAQABAAAAWQAAAFsAAAAPAP####8BAAAAABAAAlUyAAAAAAAAAAAAQAgAAAAAAAAFAAE#1tGzvqNnfgAAAFwAAAAZAP####8AAAANAAAAXQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAXgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB4AAABeAAAAHgD#####AQAAAAABAAAABQAAAF8AAABgAAAAYQAAAGIAAABfAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAXgAAAB4A#####wEAAAAAAQAAAAUAAABiAAAAYQAAAGQAAABlAAAAYgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEQAAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAF4AAAAeAP####8BAAAAAAEAAAAFAAAAYAAAAGcAAABoAAAAYQAAAGAAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABLAAAAXgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE4AAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAATAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABNAAAAXgAAAB4A#####wEAAAAAAQAAAAUAAABqAAAAawAAAGwAAABtAAAAav####8AAAACAAhDTWVzdXJlWAD#####AAF4AAAAVAAAAF3#####AAAAAgAIQ01lc3VyZVkA#####wABeQAAAFQAAABdAAAAAgD#####AAJ4MQAMaW50KHgrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABvAAAAAT9QYk3S8an8AAAAAgD#####AAJ5MQAMaW50KHkrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABwAAAAAT9QYk3S8an8AAAAAgD#####AANudW0ADHgxKjIrbngqNCp5MQAAAAcAAAAABwIAAAAIAAAAcQAAAAFAAAAAAAAAAAAAAAcCAAAABwIAAAAIAAAAAwAAAAFAEAAAAAAAAAAAAAgAAAByAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAXQAAAGH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAP####8BAAAAAMAmAAAAAAAAwCP#######AAAAB0EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHMAAAACAP####8ABG51bTEABW51bSsxAAAABwAAAAAIAAAAcwAAAAE#8AAAAAAAAAAAAAIA#####wAEbnVtJwAIbnVtK254KjIAAAAHAAAAAAgAAABzAAAABwIAAAAIAAAAAwAAAAFAAAAAAAAAAAAAAAIA#####wAFbnVtJzEABm51bScrMQAAAAcAAAAACAAAAHcAAAABP#AAAAAAAAAAAAAcAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABgAAAAaAAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGEAAABsAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYgAAAGQAAAAjAP####8BAAAAAMAmAAAAAAAAwCQAAAAAAAAAAAB7EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHYAAAAjAP####8BAAAAAMAkAAAAAAAAwCQAAAAAAAAAAAB5EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHcAAAAjAP####8BAAAAAMAiAAAAAAAAwCAAAAAAAAAAAAB6EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHj#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8BAAAAAAAAYwAAAAgAAAA3AAAAXQAAAAcAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAJAD#####AQAAAAAAAGkAAAAIAAAANwAAAF0AAAAHAAAAXQAAAF4AAABgAAAAYQAAAGcAAABoAAAAaQAAACQA#####wEAAAAAAABuAAAACAAAADcAAABdAAAABwAAAF0AAABeAAAAagAAAGsAAABsAAAAbQAAAG4AAAAkAP####8BAAAAAAAAZgAAAAgAAAA3AAAAXQAAAAcAAABdAAAAXgAAAGEAAABiAAAAZAAAAGUAAABmAAAAJAD#####AAAAAAAAAH8AAAAIAAAAAwAAAFkAAAALAAAAWQAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAGEAAABiAAAAYwAAAH8AAAAkAP####8AAAAAAAAAggAAAAgAAAADAAAAWQAAAAsAAABZAAAAWwAAAFwAAABdAAAAXgAAAGEAAABiAAAAZAAAAGUAAABmAAAAggAAACQA#####wAAAAAAAACBAAAACAAAAAMAAABZAAAACwAAAFkAAABbAAAAXAAAAF0AAABeAAAAagAAAGsAAABsAAAAbQAAAG4AAACBAAAAJAD#####AAAAAAAAAIAAAAAIAAAAAwAAAFkAAAALAAAAWQAAAFsAAABcAAAAXQAAAF4AAABgAAAAYQAAAGcAAABoAAAAaQAAAIAAAAAkAP####8BAAAAAAAAdQAAAAgAAAA3AAAAXQAAAAoAAABdAAAAXgAAAGEAAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAJAD#####AAAAAAAAAIcAAAAIAAAAAwAAAFkAAAAOAAAAWQAAAFsAAABcAAAAXQAAAF4AAABhAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAIcAAAAkAP####8BAAAAAAAAfAAAAAgAAAA3AAAAXQAAAAwAAABdAAAAXgAAAGIAAABkAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB2AAAAewAAAHwAAAAkAP####8AAAAAAAAAiQAAAAgAAAADAAAAWQAAABAAAABZAAAAWwAAAFwAAABdAAAAXgAAAGIAAABkAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB2AAAAewAAAHwAAACJAAAAJAD#####AQAAAAAAAH4AAAAIAAAANwAAAF0AAAANAAAAXQAAAF4AAABhAAAAbAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHgAAAB6AAAAfgAAACQA#####wAAAAAAAACLAAAACAAAAAMAAABZAAAAEQAAAFkAAABbAAAAXAAAAF0AAABeAAAAYQAAAGwAAABvAAAAcAAAAHEAAAByAAAAcwAAAHcAAAB4AAAAegAAAH4AAACLAAAAJAD#####AQAAAAAAAH0AAAAIAAAANwAAAF0AAAAMAAAAXQAAAF4AAABgAAAAaAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHkAAAB9AAAAJAD#####AAAAAAAAAI0AAAAIAAAAAwAAAFkAAAAQAAAAWQAAAFsAAABcAAAAXQAAAF4AAABgAAAAaAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHkAAAB9AAAAjf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAABJAAAAIQAAAACPAAJ4MgAAABwAAABJAAAAIgAAAACPAAJ5MgAAABwAAABJAAAAGgEAAACPAf8AAABAHAAAAAAAAAAAAAAAAAAAAAAASRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAARAAAACEAAAAAkwACeDIAAAAcAAAARAAAACIAAAAAkwACeTIAAAAcAAAARAAAABoBAAAAkwH#AAAAQBwAAAAAAADANQAAAAAAAAAAAEQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAACAAAAAhAAAAAJcAAngyAAAAHAAAACAAAAAiAAAAAJcAAnkyAAAAHAAAACAAAAAaAQAAAJcB#wAAAL#wAAAAAAAAQAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAAAeAAAAIQAAAACbAAJ4MgAAABwAAAAeAAAAIgAAAACbAAJ5MgAAABwAAAAeAAAAGgEAAACbAf8AAAC#8AAAAAAAAD#########gAAAAHhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAIgAAACEAAAAAnwACeDIAAAAcAAAAIgAAACIAAAAAnwACeTIAAAAcAAAAIgAAABoBAAAAnwH#AAAAQBgAAAAAAADANQAAAAAAAAAAACIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAQAP####8B#wAAARAAAkExAMA3AAAAAAAAv#AAAAAAAAAFAAAAACIAAABKAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAACjAAAAIQAAAACkAAJ4MgAAABwAAACjAAAAIgAAAACkAAJ5MgAAABwAAACjAAAAGgEAAACkAf8AAABAEAAAAAAAAMAzAAAAAAAAAAAAoxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAAAIA#####wACeGIAAjI0AAAAAUA4AAAAAAAAAAAAAgD#####AAJ5YgACMTYAAAABQDAAAAAAAAAAAAACAP####8ABG51bWIAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AARudW1jAAIzMwAAAAFAQIAAAAAAAAAAAAIA#####wADeGMyAAEzAAAAAUAIAAAAAAAAAAAAAgD#####AAN5YzIAATUAAAABQBQAAAAAAAAAAAACAP####8AA3hjMwABNgAAAAFAGAAAAAAAAAAAAAIA#####wADeWMzAAE3AAAAAUAcAAAAAAAAAAAAGAD#####AQAAAAAQAAFiAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAqAAAAAgAAACpAAAAGAD#####AH8AAAAQAAJjMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAAKwAAAAIAAAArQAAABgA#####wAAAH8AEAACYzMAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAACuAAAACAAAAK8AAAAeAP####8AAAAAAAEAAAAFAAAALgAAAC8AAAAwAAAAMQAAAC4AAAAeAP####8ALLgsAAEAAAAFAAAAMwAAADQAAAA1AAAANgAAADP#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AAB#AAAAAAUAAAC0AAAAHQD#####AAAALAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAAC2AAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAALYAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAAtgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADYAAAC2AAAAHgD#####ASy4LAABAAAABQAAALcAAAC4AAAAuQAAALoAAAC3AAAAJgD#####AQB#AAAAAAUAAAC7AAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADkAAAAIAAAAqgAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAAC9AAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAARAAAAL0AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAABFAAAAvQAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAAC9AAAAHgD#####AAAAAAABAAAABQAAAL4AAAC#AAAAwAAAAMEAAAC+AAAAGQD#####AAAADQAAALAAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAC+AAAAwwAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAL8AAADDAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAwAAAAMMAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADBAAAAwwAAAB4A#####wD#AAAAAQAAAAUAAADEAAAAxQAAAMYAAADHAAAAxAAAACYA#####wD#AAAAAAAFAAAAyAAAAB0A#####wAAALEAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADEAAAAygAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMUAAADKAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAxgAAAMoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADHAAAAygAAAB4A#####wH#AAAAAQAAAAUAAADLAAAAzAAAAM0AAADOAAAAywAAACYA#####wH#AAAAAAAFAAAAzwAAABkA#####wAAAA0AAAArAAAAHQD#####AAAAsv####8AAAABABJDTWFjcm9DbGlnbm90ZW1lbnQA#####wAA#wAB#####wpAi8QAAAAAAEBSoUeuFHriAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQ2xpZ25vdGUxAAAAAAACAAAAuwAAALwAAAAU#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAAC#####wAAAAEAEkNBcmNEZUNlcmNsZURpcmVjdAD#####AQD#AAABAAAALAAAACv#####AAAAAUBmgAAAAAAAAAAAKQD#####AQAAAAABAAAAsQAAAMX#####AAAAAUBmgAAAAAAA#####wAAAAEAD0NQb2ludExpZUNlcmNsZQD#####Af8AAAEQAAAAAAAAAAAAAABACAAAAAAAAAUAAT9Q#XA667psAAAA1gAAACUA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAADFAAAAsQAAANf#####AAAAAQAMQ0Jpc3NlY3RyaWNlAAAAANgBAAAAABAAAAEAAQAAANcAAACxAAAAxQAAAA8AAAAA2AEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAANn#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQEAAADYAAZhbmdsZTIAAADFAAAAsQAAANcAAAAjAQAAANgBAAAAAEAIAAAAAAAAP#AAAAAAAAAAAADaDwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAA2#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAQAAANgBAAAAAAEAAAABQEJbiQkrj78AAADFAAAAsQAAANcAAAAADQD#####AAAAsQAAAAgAAADbAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxAAAAN4AAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADFAAAA3gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAMYAAADeAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxwAAAN4AAAAeAP####8B#wAAAAEAAAAFAAAA3wAAAOAAAADhAAAA4gAAAN8AAAAmAP####8B#wAAAAAABQAAAOP#####AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AP8AAAH#####CkCMxAAAAAAAQHsoUeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAtBcHBhcml0aW9uMgAAAAAABgAAAM8AAADQAAAA4wAAAOQAAADXAAAA4AD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wD#AAAB#####wpAjPQAAAAAAEB9aFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHbWFzcXVlMgAAAAAABgAAAM8AAADQAAAA4wAAAOQAAADXAAAA4AAAACcA#####wD#AAAB#####wpAjQwAAAAAAEB#eFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQ2xpZ25vdGUyAAAAAAACAAAAzwAAANAAAAAU#####wAAAAIAGENNYWNyb0FuaW1hdGlvbkF2ZWNUcmFjZQD#####AP8AAAH#####CkCNXAAAAAAAQIC8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAd0b3VybmUyAAAAAAABAAAA1wABAAAAAAoAAAAyAAAAAAAAANcBAP####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AP8AAAH#####CkCQTgAAAAAAQHs4UeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVDb3JyMgAAAAAABQAAAOcAAADUAAAA5QAAAOgAAADmAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADgAAAAIAAAAqwAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEsAAADqAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAATgAAAOoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABMAAAA6gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE0AAADqAAAAHgD#####Af8AAAABAAAABQAAAOsAAADsAAAA7QAAAO4AAADrAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA6wAAANEAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADsAAAA0QAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAO0AAADRAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA7gAAANEAAAAeAP####8AAAB#AAEAAAAFAAAA8AAAAPEAAADyAAAA8wAAAPAAAAAmAP####8AAAB#AAAABQAAAPQAAAApAP####8B##8AAAEAAACyAAAA8P####8AAAABQGaAAAAAAAAAAAAqAP####8BAAB#ARAAAAAAAAAAAAAAAEAIAAAAAAAABQABPyl3lSGrWUIAAAD2AAAAJQD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAADAAAAAwAAAPAAAACyAAAA9wAAACsAAAAA+AEAAAAAEAAAAQABAAAA9wAAALIAAADwAAAADwAAAAD4AQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAA+QAAACwBAAAA+AAGYW5nbGUzAAAA8AAAALIAAAD3AAAAIwEAAAD4Af##AABACAAAAAAAAD#wAAAAAAAAAAAA+g8AAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAsKwAAAAAPsAAAAtAQAAAPgB##8AAAEAAAABQEJbiQkrj78AAADwAAAAsgAAAPcAAAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8AAAANIAAAAQAP####8B##8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADxAAAA0gAAABAA#####wH##wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPIAAADSAAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8wAAANIAAAAeAP####8BAAB#AAEAAAAFAAAA#gAAAP8AAAEAAAABAQAAAP4AAAAmAP####8BAAB#AAAABQAAAQIAAAANAP####8AAACyAAAACAAAAPsAAAAQAP####8B##8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADwAAABBAAAABAA#####wH##wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPEAAAEEAAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8gAAAQQAAAAQAP####8B##8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADzAAABBAAAAB4A#####wEAAH8AAQAAAAUAAAEFAAABBgAAAQcAAAEIAAABBQAAACYA#####wEAAH8AAAAFAAABCQAAAC4A#####wAAAH8B#####wpAjLQAAAAAAEBkMKPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALQXBwYXJpdGlvbjMAAAAAAAUAAAECAAABAwAAAQkAAAEKAAAA9wAAAAAvAP####8AAAB#Af####8KQIzUAAAAAABAaFCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTMAAAAAAAUAAAECAAABAwAAAQkAAAEKAAAA9wAAACcA#####wAAAH8B#####wpAjOwAAAAAAEBr0KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQ2xpZ25vdGUzAAAAAAACAAABAgAAAQMAAAAUAAAAMAD#####AAAAfwH#####CkCNLAAAAAAAQG+wo9cKPXECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAd0b3VybmUzAAAAAAABAAAA9wABAAAAAAoAAAAyAAAAAAAAAPcBAAAAADEA#####wAAAH8B#####xBAkB4AAAAAAEBkkKPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFQ29ycjMAAAAAAAUAAAENAAAA1AAAAQsAAAEOAAABDAAAACkA#####wEAAH8AAQAAACwAAAAq#####wAAAAFAZoAAAAAAAAAAACoA#####wEAfwABEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAE#bzDaInuZNgAAARAAAAAlAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAMAAAADAAAAKgAAACwAAAERAAAAKwAAAAESAQAAAAAQAAABAAEAAAERAAAALAAAACoAAAAPAAAAARIBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAAETAAAALAEAAAESAAZhbmdsZTEAAAAqAAAALAAAAREAAAAjAQAAARIBAAB#AEAIAAAAAAAAP#AAAAAAAAAAAAEUDwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAABFQAAAC0BAAABEgEAAH8AAQAAAAFAQluJCSuPvwAAACoAAAAsAAABEQAAAAANAP####8AAAAsAAAACAAAARUAAAAQAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAzAAABGAAAABAA#####wEAAH8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADQAAAEYAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANQAAARgAAAAQAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA2AAABGAAAAB4A#####wEAfwAAAQAAAAUAAAEZAAABGgAAARsAAAEcAAABGQAAACYA#####wEAfwAAAAAFAAABHQAAAC4A#####wAAfwAB#####xBAihQAAAAAAEBBQo9cKPXDAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALQXBwYXJpdGlvbjEAAAAAAAUAAAC7AAAAvAAAAR0AAAEeAAABEQAAAAAvAP####8AAH8AAf####8KQIpMAAAAAABAWeFHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTEAAAAAAAUAAAC7AAAAvAAAAR0AAAEeAAABEQAAADAA#####wAAfwAB#####wpAinQAAAAAAEBf4UeuFHriAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMQAAAAAAAQAAAREAAQAAAAAKAAAAMgAAAAAAAAERAQAAAAAxAP####8AAH8AAf####8KQI6cAAAAAABAV+FHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAABUNvcnIxAAAAAAAFAAAA0wAAANQAAAEfAAABIQAAASAAAAAxAP####8AAH8AAf####8KQIyEAAAAAABAcfhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACkNvcnJlY3Rpb24AAAAAAAMAAAEiAAAA6QAAAQ################8="
			this.MG32codeBase64corr =  "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAST#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQFKgAAAAAABAYLCj1wo9cf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAIxOAAAAAFAMgAAAAAAAAAAAAIA#####wACeWMAAjEyAAAAAUAoAAAAAAAAAAAAAgD#####AAN4YzEAATUAAAABQBQAAAAAAAAAAAACAP####8AA3ljMQABMgAAAAFAAAAAAAAAAAAAABgA#####wEAAAAAEAABYQAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAACMAAAAIAAAAJAAAABgA#####wEAAAAAEAABYwAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAACYAAAAIAAAAJwAAABgA#####wAJzAkAEAACYzEAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAAAoAAAACAAAACkAAAAOAP####8AAAANAAAABwMAAAABP#AAAAAAAAAAAAAKAAAABgAAAAgAAAAlAAAAEAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAC0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAALQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAAAtAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAC3#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAANAAAAKgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC4AAAAyAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALwAAADIAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAwAAAAMgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADEAAAAyAAAAAgD#####AAJueQABNQAAAAFAFAAAAAAAAAAAAAMA#####wACcjMAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTEpLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAwD#####AAJyMgAlc2koKG1vZHVsb3goeCk9MCkqKG1vZHVsb3koeCk9MSksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABAAAAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAADAP####8AAnIxACVzaSgobW9kdWxveCh4KT0xKSoobW9kdWxveSh4KT0wKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAIA#####wAFbWluaTEAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AAVtYXhpMQACNDAAAAABQEQAAAAAAAAAAAACAP####8ABHBhczEAATEAAAABP#AAAAAAAAD#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8BAAAAAMAxAAAAAAAAwC4AAAAAAAAAAAANEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAUEAAAACAP####8ABW1pbmkyAAMtMzD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUA+AAAAAAAAAAAAAgD#####AAVtYXhpMgACMzAAAAABQD4AAAAAAAAAAAACAP####8ABHBhczIAATEAAAABP#AAAAAAAAD#####AAAAAQAHQ01pbGlldQD#####AQAAAAEQAAJKMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAIv####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAAQgAAABAA#####wEAAAABEAABSgAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAQwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABDAAAAHAD#####AQAAAAEQAAJJMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAHgAAAB0A#####wAAAEYAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARwAAABAA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAARwAAABkA#####wAAAA0AAAAiAAAAEAD#####AQAAAAEQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABKAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAEoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAASgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABK#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAACAAAABEAAAARQAAACIAAAAgAAAAHgD#####AAAAAAABAAAABQAAAB4AAAAiAAAASAAAAEkAAAAeAAAAHgD#####AAAAAAABAAAABQAAAEsAAABOAAAATAAAAE0AAABLAAAAHgD#####AAAAAAABAAAABQAAAA0AAAAgAAAAIgAAAB4AAAANAAAAFgD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAABgAAAAXAP####8A5ubmAAEAAAANAAAASQAAAEQAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAQARQ1BvaW50UGFyQWJzY2lzc2UA#####wEAAAAAEAABVQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAASQAAAAcBAAAACAAAAAMAAAABP#AAAAAAAAAAAAAfAP####8BAAAAABAAAVYAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEQAAAAHAQAAAAgAAAA3AAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAA0AAABVAAAAIAD#####AQAAAAAQAAABAAEAAAANAAAAVgAAAA8A#####wEAAAAAEAACVTEAAAAAAAAAAABACAAAAAAAAAUAAT#TA9Z22dUpAAAAVwAAABkA#####wAAAA0AAABWAAAAEAD#####AQAAAAAQAAJWMQAAAAAAAAAAAEAIAAAAAAAABQAAAABZAAAAWgAAACAA#####wEAAAAAEAAAAQABAAAAWQAAAFsAAAAPAP####8BAAAAABAAAlUyAAAAAAAAAAAAQAgAAAAAAAAFAAE#1tGzvqNnfgAAAFwAAAAZAP####8AAAANAAAAXQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAXgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB4AAABeAAAAHgD#####AQAAAAABAAAABQAAAF8AAABgAAAAYQAAAGIAAABfAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAXgAAAB4A#####wEAAAAAAQAAAAUAAABiAAAAYQAAAGQAAABlAAAAYgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEQAAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAF4AAAAeAP####8BAAAAAAEAAAAFAAAAYAAAAGcAAABoAAAAYQAAAGAAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABLAAAAXgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE4AAABeAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAATAAAAF4AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABNAAAAXgAAAB4A#####wEAAAAAAQAAAAUAAABqAAAAawAAAGwAAABtAAAAav####8AAAACAAhDTWVzdXJlWAD#####AAF4AAAAVAAAAF3#####AAAAAgAIQ01lc3VyZVkA#####wABeQAAAFQAAABdAAAAAgD#####AAJ4MQAMaW50KHgrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABvAAAAAT9QYk3S8an8AAAAAgD#####AAJ5MQAMaW50KHkrMC4wMDEpAAAABgIAAAAHAAAAAAgAAABwAAAAAT9QYk3S8an8AAAAAgD#####AANudW0ADHgxKjIrbngqNCp5MQAAAAcAAAAABwIAAAAIAAAAcQAAAAFAAAAAAAAAAAAAAAcCAAAABwIAAAAIAAAAAwAAAAFAEAAAAAAAAAAAAAgAAAByAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAXQAAAGH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAP####8BAAAAAMAmAAAAAAAAwCP#######AAAAB0EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHMAAAACAP####8ABG51bTEABW51bSsxAAAABwAAAAAIAAAAcwAAAAE#8AAAAAAAAAAAAAIA#####wAEbnVtJwAIbnVtK254KjIAAAAHAAAAAAgAAABzAAAABwIAAAAIAAAAAwAAAAFAAAAAAAAAAAAAAAIA#####wAFbnVtJzEABm51bScrMQAAAAcAAAAACAAAAHcAAAABP#AAAAAAAAAAAAAcAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABgAAAAaAAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGEAAABsAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYgAAAGQAAAAjAP####8BAAAAAMAmAAAAAAAAwCQAAAAAAAAAAAB7EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHYAAAAjAP####8BAAAAAMAkAAAAAAAAwCQAAAAAAAAAAAB5EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHcAAAAjAP####8BAAAAAMAiAAAAAAAAwCAAAAAAAAAAAAB6EgAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAHj#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8BAAAAAAAAYwAAAAgAAAA3AAAAXQAAAAcAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAJAD#####AQAAAAAAAGkAAAAIAAAANwAAAF0AAAAHAAAAXQAAAF4AAABgAAAAYQAAAGcAAABoAAAAaQAAACQA#####wEAAAAAAABuAAAACAAAADcAAABdAAAABwAAAF0AAABeAAAAagAAAGsAAABsAAAAbQAAAG4AAAAkAP####8BAAAAAAAAZgAAAAgAAAA3AAAAXQAAAAcAAABdAAAAXgAAAGEAAABiAAAAZAAAAGUAAABmAAAAJAD#####AAAAAAAAAH8AAAAIAAAAAwAAAFkAAAALAAAAWQAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAGEAAABiAAAAYwAAAH8AAAAkAP####8AAAAAAAAAggAAAAgAAAADAAAAWQAAAAsAAABZAAAAWwAAAFwAAABdAAAAXgAAAGEAAABiAAAAZAAAAGUAAABmAAAAggAAACQA#####wAAAAAAAACBAAAACAAAAAMAAABZAAAACwAAAFkAAABbAAAAXAAAAF0AAABeAAAAagAAAGsAAABsAAAAbQAAAG4AAACBAAAAJAD#####AAAAAAAAAIAAAAAIAAAAAwAAAFkAAAALAAAAWQAAAFsAAABcAAAAXQAAAF4AAABgAAAAYQAAAGcAAABoAAAAaQAAAIAAAAAkAP####8BAAAAAAAAdQAAAAgAAAA3AAAAXQAAAAoAAABdAAAAXgAAAGEAAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAJAD#####AAAAAAAAAIcAAAAIAAAAAwAAAFkAAAAOAAAAWQAAAFsAAABcAAAAXQAAAF4AAABhAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAIcAAAAkAP####8BAAAAAAAAfAAAAAgAAAA3AAAAXQAAAAwAAABdAAAAXgAAAGIAAABkAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB2AAAAewAAAHwAAAAkAP####8AAAAAAAAAiQAAAAgAAAADAAAAWQAAABAAAABZAAAAWwAAAFwAAABdAAAAXgAAAGIAAABkAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB2AAAAewAAAHwAAACJAAAAJAD#####AQAAAAAAAH4AAAAIAAAANwAAAF0AAAANAAAAXQAAAF4AAABhAAAAbAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHgAAAB6AAAAfgAAACQA#####wAAAAAAAACLAAAACAAAAAMAAABZAAAAEQAAAFkAAABbAAAAXAAAAF0AAABeAAAAYQAAAGwAAABvAAAAcAAAAHEAAAByAAAAcwAAAHcAAAB4AAAAegAAAH4AAACLAAAAJAD#####AQAAAAAAAH0AAAAIAAAANwAAAF0AAAAMAAAAXQAAAF4AAABgAAAAaAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHkAAAB9AAAAJAD#####AAAAAAAAAI0AAAAIAAAAAwAAAFkAAAAQAAAAWQAAAFsAAABcAAAAXQAAAF4AAABgAAAAaAAAAG8AAABwAAAAcQAAAHIAAABzAAAAdwAAAHkAAAB9AAAAjf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAABJAAAAIQAAAACPAAJ4MgAAABwAAABJAAAAIgAAAACPAAJ5MgAAABwAAABJAAAAGgEAAACPAf8AAABAHAAAAAAAAAAAAAAAAAAAAAAASRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAARAAAACEAAAAAkwACeDIAAAAcAAAARAAAACIAAAAAkwACeTIAAAAcAAAARAAAABoBAAAAkwH#AAAAQBwAAAAAAADANQAAAAAAAAAAAEQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAACAAAAAhAAAAAJcAAngyAAAAHAAAACAAAAAiAAAAAJcAAnkyAAAAHAAAACAAAAAaAQAAAJcB#wAAAL#wAAAAAAAAQAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAAAeAAAAIQAAAACbAAJ4MgAAABwAAAAeAAAAIgAAAACbAAJ5MgAAABwAAAAeAAAAGgEAAACbAf8AAAC#8AAAAAAAAD#########gAAAAHhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAIgAAACEAAAAAnwACeDIAAAAcAAAAIgAAACIAAAAAnwACeTIAAAAcAAAAIgAAABoBAAAAnwH#AAAAQBgAAAAAAADANQAAAAAAAAAAACIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAQAP####8B#wAAARAAAkExAMA3AAAAAAAAv#AAAAAAAAAFAAAAACIAAABKAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAACjAAAAIQAAAACkAAJ4MgAAABwAAACjAAAAIgAAAACkAAJ5MgAAABwAAACjAAAAGgEAAACkAf8AAABAEAAAAAAAAMAzAAAAAAAAAAAAoxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAAAIA#####wACeGIAAjI0AAAAAUA4AAAAAAAAAAAAAgD#####AAJ5YgACMTYAAAABQDAAAAAAAAAAAAACAP####8ABG51bWIAAjEwAAAAAUAkAAAAAAAAAAAAAgD#####AARudW1jAAIzMwAAAAFAQIAAAAAAAAAAAAIA#####wADeGMyAAEzAAAAAUAIAAAAAAAAAAAAAgD#####AAN5YzIAATUAAAABQBQAAAAAAAAAAAACAP####8AA3hjMwABNgAAAAFAGAAAAAAAAAAAAAIA#####wADeWMzAAE3AAAAAUAcAAAAAAAAAAAAGAD#####AQAAAAAQAAFiAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAqAAAAAgAAACpAAAAGAD#####AH8AAAAQAAJjMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAAKwAAAAIAAAArQAAABgA#####wAAAH8AEAACYzMAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAACuAAAACAAAAK8AAAAeAP####8AAAAAAAEAAAAFAAAALgAAAC8AAAAwAAAAMQAAAC4AAAAeAP####8ALLgsAAEAAAAFAAAAMwAAADQAAAA1AAAANgAAADP#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AAB#AAAAAAUAAAC0AAAAHQD#####AAAALAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAAC2AAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAALYAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAAtgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADYAAAC2AAAAHgD#####ASy4LAABAAAABQAAALcAAAC4AAAAuQAAALoAAAC3AAAAJgD#####AQB#AAAAAAUAAAC7AAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADkAAAAIAAAAqgAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAAC9AAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAARAAAAL0AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAABFAAAAvQAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAAC9AAAAHgD#####AAAAAAABAAAABQAAAL4AAAC#AAAAwAAAAMEAAAC+AAAAGQD#####AAAADQAAALAAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAC+AAAAwwAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAL8AAADDAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAwAAAAMMAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADBAAAAwwAAAB4A#####wD#AAAAAQAAAAUAAADEAAAAxQAAAMYAAADHAAAAxAAAACYA#####wD#AAAAAAAFAAAAyAAAAB0A#####wAAALEAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADEAAAAygAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMUAAADKAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAxgAAAMoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADHAAAAygAAAB4A#####wH#AAAAAQAAAAUAAADLAAAAzAAAAM0AAADOAAAAywAAACYA#####wH#AAAAAAAFAAAAzwAAABkA#####wAAAA0AAAArAAAAHQD#####AAAAsv####8AAAABABJDTWFjcm9DbGlnbm90ZW1lbnQA#####wAA#wAB#####wpAi8QAAAAAAEBSoUeuFHriAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQ2xpZ25vdGUxAAAAAAACAAAAuwAAALwAAAAU#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAAC#####wAAAAEAEkNBcmNEZUNlcmNsZURpcmVjdAD#####AQD#AAABAAAALAAAACv#####AAAAAUBmgAAAAAAAAAAAKQD#####AQAAAAABAAAAsQAAAMX#####AAAAAUBmgAAAAAAA#####wAAAAEAD0NQb2ludExpZUNlcmNsZQD#####Af8AAAEQAAAAAAAAAAAAAABACAAAAAAAAAUAAT9Q#XA667psAAAA1gAAACUA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAADFAAAAsQAAANf#####AAAAAQAMQ0Jpc3NlY3RyaWNlAAAAANgBAAAAABAAAAEAAQAAANcAAACxAAAAxQAAAA8AAAAA2AEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAANn#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQEAAADYAAZhbmdsZTIAAADFAAAAsQAAANcAAAAjAQAAANgBAAAAAEAIAAAAAAAAP#AAAAAAAAAAAADaDwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAA2#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAQAAANgBAAAAAAEAAAABQEJbiQkrj78AAADFAAAAsQAAANcAAAAADQD#####AAAAsQAAAAgAAADbAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxAAAAN4AAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADFAAAA3gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAMYAAADeAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxwAAAN4AAAAeAP####8B#wAAAAEAAAAFAAAA3wAAAOAAAADhAAAA4gAAAN8AAAAmAP####8B#wAAAAAABQAAAOP#####AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AP8AAAH#####CkCMxAAAAAAAQHsoUeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAtBcHBhcml0aW9uMgAAAAAABgAAAM8AAADQAAAA4wAAAOQAAADXAAAA4AD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wD#AAAB#####wpAjPQAAAAAAEB9aFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHbWFzcXVlMgAAAAAABgAAAM8AAADQAAAA4wAAAOQAAADXAAAA4AAAACcA#####wD#AAAB#####wpAjQwAAAAAAEB#eFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQ2xpZ25vdGUyAAAAAAACAAAAzwAAANAAAAAU#####wAAAAIAGENNYWNyb0FuaW1hdGlvbkF2ZWNUcmFjZQD#####AP8AAAH#####CkCNXAAAAAAAQIC8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAd0b3VybmUyAAAAAAABAAAA1wABAAAAABQAAABkAAAAUAAAANcBAP####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AP8AAAH#####CkBbIAAAAAAAQDOFHrhR64ACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGIAAAAAAAUAAADnAAAA1AAAAOUAAADoAAAA5gAAAA4A#####wAAAA0AAAAHAwAAAAE#8AAAAAAAAAAAAAoAAAA4AAAACAAAAKsAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABLAAAA6gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE4AAADqAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAATAAAAOoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABNAAAA6gAAAB4A#####wH#AAAAAQAAAAUAAADrAAAA7AAAAO0AAADuAAAA6wAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAOsAAADRAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA7AAAANEAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADtAAAA0QAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAO4AAADRAAAAHgD#####AAAAfwABAAAABQAAAPAAAADxAAAA8gAAAPMAAADwAAAAJgD#####AAAAfwAAAAUAAAD0AAAAKQD#####Af##AAABAAAAsgAAAPD#####AAAAAUBmgAAAAAAAAAAAKgD#####AQAAfwEQAAAAAAAAAAAAAABACAAAAAAAAAUAAT8pd5Uhq1lCAAAA9gAAACUA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAADwAAAAsgAAAPcAAAArAAAAAPgBAAAAABAAAAEAAQAAAPcAAACyAAAA8AAAAA8AAAAA+AEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAPkAAAAsAQAAAPgABmFuZ2xlMwAAAPAAAACyAAAA9wAAACMBAAAA+AH##wAAQAgAAAAAAAA#8AAAAAAAAAAAAPoPAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAALCsAAAAAD7AAAALQEAAAD4Af##AAABAAAAAUBCW4kJK4+#AAAA8AAAALIAAAD3AAAAABAA#####wH##wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPAAAADSAAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8QAAANIAAAAQAP####8B##8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADyAAAA0gAAABAA#####wH##wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPMAAADSAAAAHgD#####AQAAfwABAAAABQAAAP4AAAD#AAABAAAAAQEAAAD+AAAAJgD#####AQAAfwAAAAUAAAECAAAADQD#####AAAAsgAAAAgAAAD7AAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8AAAAQQAAAAQAP####8B##8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADxAAABBAAAABAA#####wH##wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAPIAAAEEAAAAEAD#####Af##AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8wAAAQQAAAAeAP####8BAAB#AAEAAAAFAAABBQAAAQYAAAEHAAABCAAAAQUAAAAmAP####8BAAB#AAAABQAAAQkAAAAuAP####8AAAB#Af####8KQIy0AAAAAABAZDCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAC0FwcGFyaXRpb24zAAAAAAAFAAABAgAAAQMAAAEJAAABCgAAAPcAAAAALwD#####AAAAfwH#####CkCM1AAAAAAAQGhQo9cKPXECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAdtYXNxdWUzAAAAAAAFAAABAgAAAQMAAAEJAAABCgAAAPcAAAAnAP####8AAAB#Af####8KQIzsAAAAAABAa9Cj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAACUNsaWdub3RlMwAAAAAAAgAAAQIAAAEDAAAAFAAAADAA#####wAAAH8B#####wpAjSwAAAAAAEBvsKPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMwAAAAAAAQAAAPcAAQAAAAAUAAAAZAAAAFAAAAD3AQAAAAAxAP####8AAAB#Af####8KQGbwAAAAAABAM4UeuFHriAIAAAAAAAAAAAAAAAABAAAAAAAAAAAADENvcnJlY3Rpb24gYwAAAAAABQAAAQ0AAADUAAABCwAAAQ4AAAEMAAAAKQD#####AQAAfwABAAAALAAAACr#####AAAAAUBmgAAAAAAAAAAAKgD#####AQB#AAEQAAAAAAAAAAAAAABACAAAAAAAAAUAAT9vMNoie5k2AAABEAAAACUA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAAAqAAAALAAAAREAAAArAAAAARIBAAAAABAAAAEAAQAAAREAAAAsAAAAKgAAAA8AAAABEgEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAARMAAAAsAQAAARIABmFuZ2xlMQAAACoAAAAsAAABEQAAACMBAAABEgEAAH8AQAgAAAAAAAA#8AAAAAAAAAAAARQPAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAALCsAAAAAEVAAAALQEAAAESAQAAfwABAAAAAUBCW4kJK4+#AAAAKgAAACwAAAERAAAAAA0A#####wAAACwAAAAIAAABFQAAABAA#####wEAAH8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAAEYAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAARgAAAAQAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAABGAAAABAA#####wEAAH8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADYAAAEYAAAAHgD#####AQB#AAABAAAABQAAARkAAAEaAAABGwAAARwAAAEZAAAAJgD#####AQB#AAAAAAUAAAEdAAAALgD#####AAB#AAH#####EECKFAAAAAAAQEFCj1wo9cMCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAtBcHBhcml0aW9uMQAAAAAABQAAALsAAAC8AAABHQAAAR4AAAERAAAAAC8A#####wAAfwAB#####wpAikwAAAAAAEBZ4UeuFHriAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHbWFzcXVlMQAAAAAABQAAALsAAAC8AAABHQAAAR4AAAERAAAAMAD#####AAB#AAH#####CkCKdAAAAAAAQF#hR64UeuICAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAd0b3VybmUxAAAAAAABAAABEQABAAAAABQAAABkAAAAUAAAAREBAAAAADEA#####wAAfwAB#####wpAQEAAAAAAAEAzhR64UeuIAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMQ29ycmVjdGlvbiBhAAAAAAAFAAAA0wAAANQAAAEfAAABIQAAASAAAAAxAP####8AAH8AAf####8KQI9MAAAAAABAcFhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACkNvcnJlY3Rpb24AAAAAAAMAAAEiAAAA6QAAAQ################8="
			// PremiÃ¨re question : une figure dans tabfigA, une symÃ©trie par rapport au milieu d'un [B'C'], logiquement : l'image est dans tabfigB et B' est l'image de C !
			indexA = randint(0, nx * ny - 1)
			numA = tabfigA[indexA][2]
			indexcentre1 = randint(0, nx * ny - 1, [indexA]) // indexcentre1 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.
			numcentre1 = tabfigA[indexcentre1][2] // [B'C'] est le segment commun Ã  une figA et Ã  une FigB. ici on prend le NÂ° de la figure A, la figure B est la suivante.
			//on calcule les coordonnÃ©es du milieu de [BC] on ajoute aux coordonnÃ©es du milieu de [BC] celles du vecteur BB'. (j'aurais pu rÃ©duire mais cela aurait rendu le calcul plus opaque)
			xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB
			ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB
			point = image_point_par_transformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigB[j][0] && point[1] == tabfigB[j][1]) {
						trouver = true
						num1=tabfigB[j][2]
						xa=tabfigA[indexA][0]
						ya=tabfigA[indexA][1]
						break
					}
				}
				if (trouver == false) {
					indexA = randint(0, nx * ny - 1)
					numA = tabfigA[indexA][2]
					indexcentre1 = randint(0, nx * ny - 1)
					numcentre1 = tabfigA[indexcentre1][2]
					xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB
					ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB
					point = image_point_par_transformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])
				}
			}
			texte += num_alpha(0) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numA} dans la symÃ©trie par rapport Ã  ${s0} ?<br>`, `green`)
			texte_corr = num_alpha(0) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numA} dans la symÃ©trie par rapport Ã  ${s0} porte le numÃ©ro ${num1}.<br>`, `green`)
			// DeuxiÃ¨me question : une figure dans tabfigD, une symÃ©trie par rapport au milieu d'un [C'D'], le rÃ©sultat est une figure dans tabfigA et C' est l'image de D !
			indexD = randint(0, nx * ny - 1)
			numD = tabfigD[indexD][2]
			indexcentre2 = randint(0, nx * ny - 1, [indexD]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.
			numcentre2 = tabfigA[indexcentre2][2] // [D'C'] est le segment commun Ã  une figA et Ã  une FigD. ici on prend le NÂ° de la figure A, la figure D est 2*nx+NÂ°figA.
			//on calcule les coordonnÃ©es du milieu de [DC] on ajoute aux coordonnÃ©es du milieu de [DC] celles du vecteur DD'.
			xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD
			ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD
			point = image_point_par_transformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigC[j][0] && point[1] == tabfigC[j][1]) {
						trouver = true
						num2=tabfigC[j][2]
						xb=tabfigA[indexD][0]
						yb=tabfigA[indexD][1]
						break
					}
				}
				if (trouver == false) {
					indexD = randint(0, nx * ny - 1)
					numD = tabfigD[indexD][2]
					indexcentre2 = randint(0, nx * ny - 1, [indexD])
					numcentre2 = tabfigA[indexcentre2][2]
					xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD
					ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD
					point = image_point_par_transformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])
				}
			}

			texte += num_alpha(1) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numD} dans la symÃ©trie par rapport Ã  ${s1} ?<br>`, `red`)
			texte_corr += num_alpha(1) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numD} dans la symÃ©trie par rapport Ã  ${s1} porte le numÃ©ro ${num2}.<br>`, `red`)
			// troisiÃ¨me question : une figure dans tabfigC, une symÃ©trie par rapport au symÃ©trique du milieu de [A'D'] par rapport au milieu de [C'D']... pas trÃ¨s clair
			// le rÃ©sultat est une figure dans tabfigD et le point (C'+ vecteur AC) a pour image D' !
			indexC = randint(0, nx * ny - 1)
			numC = tabfigC[indexC][2]
			indexcentre3 = randint(0, nx * ny - 1, [indexC]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.
			numcentre3 = tabfigD[indexcentre3][2] // le centre de symÃ©trie est le milieu du segment commun Ã  une figC et Ã  une FigD. ici on prend le NÂ° de la figure D, la figure C est la suivante.
			//on calcule les coordonnÃ©es du milieu du centre de symÃ©trie : (C' + D + AC)/2=AC+AD/2 que l'on translate de CC' donc Ã§a fait AC' + AD/2
			xmil3 = xD / 2 + tabfigC[indexcentre3][0]
			ymil3 = yD / 2 + tabfigC[indexcentre3][1]
			point = image_point_par_transformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3]) // c'est le sommet C + AC qui a pour image D.
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigD[j][0] && point[1] == tabfigD[j][1]) {
						trouver = true
						num3=tabfigD[j][2]
						xc=tabfigA[indexC][0]
						yc=tabfigA[indexC][1]
						break
					}
				}
				if (trouver == false) {
					indexC = randint(0, nx * ny - 1)
					numC = tabfigC[indexC][2]
					indexcentre3 = randint(0, nx * ny - 1, [indexC])
					numcentre3 = tabfigD[indexcentre3][2]
					xmil3 = xD / 2 + tabfigC[indexcentre3][0]
					ymil3 = yD / 2 + tabfigC[indexcentre3][1]
					point = image_point_par_transformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3])
				}
			}
			texte += num_alpha(2) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numC} dans la symÃ©trie par rapport Ã  ${s2} ?<br>`, `blue`)
			texte_corr += num_alpha(2) + texte_en_couleur_et_gras(` La figure symÃ©trique de la figure ${numC} dans la symÃ©trie par rapport Ã  ${s2} porte le numÃ©ro ${num3}.<br>`, `blue`)
			break

		case 3 : //translations
			let iB1,iB2,iB3,iC1,iA1,iD1
			this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAMj#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQFKgAAAAAABAYLCj1wo9cf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAIxOAAAAAFAMgAAAAAAAAAAAAIA#####wACeWMAAjEyAAAAAUAoAAAAAAAAAAAAGAD#####AQAAAAAQAAFhAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAIwAAAAgAAAAkAAAAGAD#####AQAAAAAQAAFjAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAJgAAAAgAAAAnAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAAAYAAAAIAAAAJQAAABAA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAAAqAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAKgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB4AAAAq#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAADQAAACgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAArAAAALwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACwAAAAvAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAAC8AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAuAAAALwAAAAIA#####wACbnkAATUAAAABQBQAAAAAAAAAAAADAP####8AAnIzACVzaSgobW9kdWxveCh4KT0xKSoobW9kdWxveSh4KT0xKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAMA#####wACcjIAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTEpLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAwD#####AAJyMQAlc2koKG1vZHVsb3goeCk9MSkqKG1vZHVsb3koeCk9MCksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABP#AAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAACAP####8ABW1pbmkxAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wAFbWF4aTEAAjQwAAAAAUBEAAAAAAAAAAAAAgD#####AARwYXMxAAExAAAAAT#wAAAAAAAA#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAADAMQAAAAAAAMAuAAAAAAAAAAAADRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAFBAAAAAgD#####AAVtaW5pMgADLTMw#####wAAAAEADENNb2luc1VuYWlyZQAAAAFAPgAAAAAAAAAAAAIA#####wAFbWF4aTIAAjMwAAAAAUA+AAAAAAAAAAAAAgD#####AARwYXMyAAExAAAAAT#wAAAAAAAA#####wAAAAEAB0NNaWxpZXUA#####wEAAAABEAACSjEAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACL#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAAD8AAAAQAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEAAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAQAAAABwA#####wEAAAABEAACSTEAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAB4AAAAdAP####8AAABDAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEQAAAAQAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAEQAAAAZAP####8AAAANAAAAIgAAABAA#####wEAAAABEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAABHAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEcAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAR#####8AAAABAAlDUG9seWdvbmUA#####wAAAAAAAQAAAAUAAAAgAAAAQQAAAEIAAAAiAAAAIAAAAB4A#####wAAAAAAAQAAAAUAAAAeAAAAIgAAAEUAAABGAAAAHgAAAB4A#####wAAAAAAAQAAAAUAAABIAAAASwAAAEkAAABKAAAASAAAAB4A#####wAAAAAAAQAAAAUAAAANAAAAIAAAACIAAAAeAAAADQAAABYA#####wD#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAYAAAAFwD#####AObm5gABAAAADQAAAEYAAABBAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAVUAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEYAAAAHAQAAAAgAAAADAAAAAT#wAAAAAAAAAAAAHwD#####AQAAAAAQAAFWAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABBAAAABwEAAAAIAAAANAAAAAE#8AAAAAAAAP####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAANAAAAUgAAACAA#####wEAAAAAEAAAAQABAAAADQAAAFMAAAAPAP####8BAAAAABAAAlUxAAAAAAAAAAAAQAgAAAAAAAAFAAE#0wPWdtnVKQAAAFQAAAAZAP####8AAAANAAAAUwAAABAA#####wEAAAAAEAACVjEAAAAAAAAAAABACAAAAAAAAAUAAAAAVgAAAFcAAAAgAP####8BAAAAABAAAAEAAQAAAFYAAABYAAAADwD#####AQAAAAAQAAJVMgAAAAAAAAAAAEAIAAAAAAAABQABP9bRs76jZ34AAABZAAAAGQD#####AAAADQAAAFoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAWwAAAB4A#####wEAAAAAAQAAAAUAAABcAAAAXQAAAF4AAABfAAAAXAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARgAAAFsAAAAeAP####8BAAAAAAEAAAAFAAAAXwAAAF4AAABhAAAAYgAAAF8AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABBAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEIAAABbAAAAHgD#####AQAAAAABAAAABQAAAF0AAABkAAAAZQAAAF4AAABdAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABLAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEkAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASgAAAFsAAAAeAP####8BAAAAAAEAAAAFAAAAZwAAAGgAAABpAAAAagAAAGf#####AAAAAgAIQ01lc3VyZVgA#####wABeAAAAFEAAABa#####wAAAAIACENNZXN1cmVZAP####8AAXkAAABRAAAAWgAAAAIA#####wACeDEADGludCh4KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAbAAAAAE#UGJN0vGp#AAAAAIA#####wACeTEADGludCh5KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAbQAAAAE#UGJN0vGp#AAAAAIA#####wADbnVtAAx4MSoyK254KjQqeTEAAAAHAAAAAAcCAAAACAAAAG4AAAABQAAAAAAAAAAAAAAHAgAAAAcCAAAACAAAAAMAAAABQBAAAAAAAAAAAAAIAAAAbwAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFoAAABe#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAJgAAAAAAAMAj#######wAAAAcRIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABwAAAAAgD#####AARudW0xAAVudW0rMQAAAAcAAAAACAAAAHAAAAABP#AAAAAAAAAAAAACAP####8ABG51bScACG51bStueCoyAAAABwAAAAAIAAAAcAAAAAcCAAAACAAAAAMAAAABQAAAAAAAAAAAAAACAP####8ABW51bScxAAZudW0nKzEAAAAHAAAAAAgAAAB0AAAAAT#wAAAAAAAAAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAXQAAAGUAAAAcAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABeAAAAaQAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAF8AAABhAAAAIwD#####AQAAAADAJgAAAAAAAMAkAAAAAAAAAAAAeBIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABzAAAAIwD#####AQAAAADAJAAAAAAAAMAkAAAAAAAAAAAAdhIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAB0AAAAIwD#####AQAAAADAIgAAAAAAAMAgAAAAAAAAAAAAdxIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAB1#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAGAAAAAIAAAANAAAAFoAAAAHAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAACQA#####wEAAAAAAABmAAAACAAAADQAAABaAAAABwAAAFoAAABbAAAAXQAAAF4AAABkAAAAZQAAAGYAAAAkAP####8BAAAAAAAAawAAAAgAAAA0AAAAWgAAAAcAAABaAAAAWwAAAGcAAABoAAAAaQAAAGoAAABrAAAAJAD#####AQAAAAAAAGMAAAAIAAAANAAAAFoAAAAHAAAAWgAAAFsAAABeAAAAXwAAAGEAAABiAAAAYwAAACQA#####wAAAAAAAAB8AAAACAAAAAMAAABWAAAACwAAAFYAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAAB8AAAAJAD#####AAAAAAAAAH8AAAAIAAAAAwAAAFYAAAALAAAAVgAAAFgAAABZAAAAWgAAAFsAAABeAAAAXwAAAGEAAABiAAAAYwAAAH8AAAAkAP####8AAAAAAAAAfgAAAAgAAAADAAAAVgAAAAsAAABWAAAAWAAAAFkAAABaAAAAWwAAAGcAAABoAAAAaQAAAGoAAABrAAAAfgAAACQA#####wAAAAAAAAB9AAAACAAAAAMAAABWAAAACwAAAFYAAABYAAAAWQAAAFoAAABbAAAAXQAAAF4AAABkAAAAZQAAAGYAAAB9AAAAJAD#####AQAAAAAAAHIAAAAIAAAANAAAAFoAAAAKAAAAWgAAAFsAAABeAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAACQA#####wAAAAAAAACEAAAACAAAAAMAAABWAAAADgAAAFYAAABYAAAAWQAAAFoAAABbAAAAXgAAAGwAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAACEAAAAJAD#####AQAAAAAAAHkAAAAIAAAANAAAAFoAAAAMAAAAWgAAAFsAAABfAAAAYQAAAGwAAABtAAAAbgAAAG8AAABwAAAAcwAAAHgAAAB5AAAAJAD#####AAAAAAAAAIYAAAAIAAAAAwAAAFYAAAAQAAAAVgAAAFgAAABZAAAAWgAAAFsAAABfAAAAYQAAAGwAAABtAAAAbgAAAG8AAABwAAAAcwAAAHgAAAB5AAAAhgAAACQA#####wEAAAAAAAB7AAAACAAAADQAAABaAAAADQAAAFoAAABbAAAAXgAAAGkAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB1AAAAdwAAAHsAAAAkAP####8AAAAAAAAAiAAAAAgAAAADAAAAVgAAABEAAABWAAAAWAAAAFkAAABaAAAAWwAAAF4AAABpAAAAbAAAAG0AAABuAAAAbwAAAHAAAAB0AAAAdQAAAHcAAAB7AAAAiAAAACQA#####wEAAAAAAAB6AAAACAAAADQAAABaAAAADAAAAFoAAABbAAAAXQAAAGUAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB2AAAAegAAACQA#####wAAAAAAAACKAAAACAAAAAMAAABWAAAAEAAAAFYAAABYAAAAWQAAAFoAAABbAAAAXQAAAGUAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB2AAAAegAAAIr#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAARgAAACEAAAAAjAACeDIAAAAcAAAARgAAACIAAAAAjAACeTIAAAAcAAAARgAAABoBAAAAjAH#AAAAQBwAAAAAAAAAAAAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAAEEAAAAhAAAAAJAAAngyAAAAHAAAAEEAAAAiAAAAAJAAAnkyAAAAHAAAAEEAAAAaAQAAAJAB#wAAAEAcAAAAAAAAwDUAAAAAAAAAAABBEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAAAgAAAAIQAAAACUAAJ4MgAAABwAAAAgAAAAIgAAAACUAAJ5MgAAABwAAAAgAAAAGgEAAACUAf8AAAC#8AAAAAAAAEAAAAAAAAAAAAAAIBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAHgAAACEAAAAAmAACeDIAAAAcAAAAHgAAACIAAAAAmAACeTIAAAAcAAAAHgAAABoBAAAAmAH#AAAAv#AAAAAAAAA#########4AAAAB4QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAACIAAAAhAAAAAJwAAngyAAAAHAAAACIAAAAiAAAAAJwAAnkyAAAAHAAAACIAAAAaAQAAAJwB#wAAAEAYAAAAAAAAwDUAAAAAAAAAAAAiEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAEAD#####Af8AAAEQAAJBMQDANwAAAAAAAL#wAAAAAAAABQAAAAAiAAAARwAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAoAAAACEAAAAAoQACeDIAAAAcAAAAoAAAACIAAAAAoQACeTIAAAAcAAAAoAAAABoBAAAAoQH#AAAAQBAAAAAAAADAMwAAAAAAAAAAAKAQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAACAP####8AAnhiAAIyNAAAAAFAOAAAAAAAAAAAAAIA#####wACeWIAAjE2AAAAAUAwAAAAAAAAAAAAAgD#####AARudW1iAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wAEbnVtYwACMzMAAAABQECAAAAAAAAAAAAYAP####8BAAAAABAAAWIAAAAAAAAAAABACAAAAAAAAAUAAAAAHAAAAAgAAAClAAAACAAAAKYAAAAeAP####8AAAAAAAEAAAAFAAAAKwAAACwAAAAtAAAALgAAACsAAAAeAP####8ALLgsAAEAAAAFAAAAMAAAADEAAAAyAAAAMwAAADD#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AAB#AAAAAAUAAACrAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADYAAAAIAAAApwAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAACtAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAQQAAAK0AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAABCAAAArQAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAACtAAAAHgD#####AAAAAAABAAAABQAAAK4AAACvAAAAsAAAALEAAACuAAAAGQD#####AAAADQAAAKkAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACuAAAAswAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAK8AAACzAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAsAAAALMAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACxAAAAswAAAB4A#####wD#AAAAAQAAAAUAAAC0AAAAtQAAALYAAAC3AAAAtAAAACYA#####wD#AAAAAAAFAAAAuAAAABkA#####wAAAA0AAAAp#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAACAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADUAAAAIAAAAqAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEgAAAC8AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASwAAALwAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAvAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEoAAAC8AAAAHgD#####Af8AAAABAAAABQAAAL0AAAC+AAAAvwAAAMAAAAC9AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAvQAAALoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC+AAAAugAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAL8AAAC6AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAwAAAALoAAAAeAP####8AAAB#AAEAAAAFAAAAwgAAAMMAAADEAAAAxQAAAMIAAAAmAP####8AAAB#AAAABQAAAMb###############8="
			this.MG32codeBase64corr = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAART#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNgAAAAFAGAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQFKgAAAAAABAYLCj1wo9cf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAIxOAAAAAFAMgAAAAAAAAAAAAIA#####wACeWMAAjEyAAAAAUAoAAAAAAAAAAAAGAD#####AQAAAAAQAAFhAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAIwAAAAgAAAAkAAAAGAD#####AQAAAAAQAAFjAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAJgAAAAgAAAAnAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAAAYAAAAIAAAAJQAAABAA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAAAqAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAiAAAAKgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAB4AAAAq#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAADQAAACgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAArAAAALwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACwAAAAvAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAAC8AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAuAAAALwAAAAIA#####wACbnkAATUAAAABQBQAAAAAAAAAAAADAP####8AAnIzACVzaSgobW9kdWxveCh4KT0xKSoobW9kdWxveSh4KT0xKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAMA#####wACcjIAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTEpLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAwD#####AAJyMQAlc2koKG1vZHVsb3goeCk9MSkqKG1vZHVsb3koeCk9MCksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABP#AAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAACAP####8ABW1pbmkxAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wAFbWF4aTEAAjQwAAAAAUBEAAAAAAAAAAAAAgD#####AARwYXMxAAExAAAAAT#wAAAAAAAA#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAADAMQAAAAAAAMAuAAAAAAAAAAAADRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAFBAAAAAgD#####AAVtaW5pMgADLTMw#####wAAAAEADENNb2luc1VuYWlyZQAAAAFAPgAAAAAAAAAAAAIA#####wAFbWF4aTIAAjMwAAAAAUA+AAAAAAAAAAAAAgD#####AARwYXMyAAExAAAAAT#wAAAAAAAA#####wAAAAEAB0NNaWxpZXUA#####wEAAAABEAACSjEAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACL#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAAD8AAAAQAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEAAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAQAAAABwA#####wEAAAABEAACSTEAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAB4AAAAdAP####8AAABDAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEQAAAAQAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAEQAAAAZAP####8AAAANAAAAIgAAABAA#####wEAAAABEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAABHAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEcAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAAR#####8AAAABAAlDUG9seWdvbmUA#####wAAAAAAAQAAAAUAAAAgAAAAQQAAAEIAAAAiAAAAIAAAAB4A#####wAAAAAAAQAAAAUAAAAeAAAAIgAAAEUAAABGAAAAHgAAAB4A#####wAAAAAAAQAAAAUAAABIAAAASwAAAEkAAABKAAAASAAAAB4A#####wAAAAAAAQAAAAUAAAANAAAAIAAAACIAAAAeAAAADQAAABYA#####wD#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAYAAAAFwD#####AObm5gABAAAADQAAAEYAAABBAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAVUAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEYAAAAHAQAAAAgAAAADAAAAAT#wAAAAAAAAAAAAHwD#####AQAAAAAQAAFWAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAABBAAAABwEAAAAIAAAANAAAAAE#8AAAAAAAAP####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAANAAAAUgAAACAA#####wEAAAAAEAAAAQABAAAADQAAAFMAAAAPAP####8BAAAAABAAAlUxAAAAAAAAAAAAQAgAAAAAAAAFAAE#0wPWdtnVKQAAAFQAAAAZAP####8AAAANAAAAUwAAABAA#####wEAAAAAEAACVjEAAAAAAAAAAABACAAAAAAAAAUAAAAAVgAAAFcAAAAgAP####8BAAAAABAAAAEAAQAAAFYAAABYAAAADwD#####AQAAAAAQAAJVMgAAAAAAAAAAAEAIAAAAAAAABQABP9bRs76jZ34AAABZAAAAGQD#####AAAADQAAAFoAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAWwAAAB4A#####wEAAAAAAQAAAAUAAABcAAAAXQAAAF4AAABfAAAAXAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARgAAAFsAAAAeAP####8BAAAAAAEAAAAFAAAAXwAAAF4AAABhAAAAYgAAAF8AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABBAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEIAAABbAAAAHgD#####AQAAAAABAAAABQAAAF0AAABkAAAAZQAAAF4AAABdAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAFsAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABLAAAAWwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEkAAABbAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASgAAAFsAAAAeAP####8BAAAAAAEAAAAFAAAAZwAAAGgAAABpAAAAagAAAGf#####AAAAAgAIQ01lc3VyZVgA#####wABeAAAAFEAAABa#####wAAAAIACENNZXN1cmVZAP####8AAXkAAABRAAAAWgAAAAIA#####wACeDEADGludCh4KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAbAAAAAE#UGJN0vGp#AAAAAIA#####wACeTEADGludCh5KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAbQAAAAE#UGJN0vGp#AAAAAIA#####wADbnVtAAx4MSoyK254KjQqeTEAAAAHAAAAAAcCAAAACAAAAG4AAAABQAAAAAAAAAAAAAAHAgAAAAcCAAAACAAAAAMAAAABQBAAAAAAAAAAAAAIAAAAbwAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFoAAABe#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAJgAAAAAAAMAj#######wAAAAcRIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABwAAAAAgD#####AARudW0xAAVudW0rMQAAAAcAAAAACAAAAHAAAAABP#AAAAAAAAAAAAACAP####8ABG51bScACG51bStueCoyAAAABwAAAAAIAAAAcAAAAAcCAAAACAAAAAMAAAABQAAAAAAAAAAAAAACAP####8ABW51bScxAAZudW0nKzEAAAAHAAAAAAgAAAB0AAAAAT#wAAAAAAAAAAAAHAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAXQAAAGUAAAAcAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABeAAAAaQAAABwA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAF8AAABhAAAAIwD#####AQAAAADAJgAAAAAAAMAkAAAAAAAAAAAAeBIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABzAAAAIwD#####AQAAAADAJAAAAAAAAMAkAAAAAAAAAAAAdhIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAB0AAAAIwD#####AQAAAADAIgAAAAAAAMAgAAAAAAAAAAAAdxIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAB1#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAGAAAAAIAAAANAAAAFoAAAAHAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAACQA#####wEAAAAAAABmAAAACAAAADQAAABaAAAABwAAAFoAAABbAAAAXQAAAF4AAABkAAAAZQAAAGYAAAAkAP####8BAAAAAAAAawAAAAgAAAA0AAAAWgAAAAcAAABaAAAAWwAAAGcAAABoAAAAaQAAAGoAAABrAAAAJAD#####AQAAAAAAAGMAAAAIAAAANAAAAFoAAAAHAAAAWgAAAFsAAABeAAAAXwAAAGEAAABiAAAAYwAAACQA#####wAAAAAAAAB8AAAACAAAAAMAAABWAAAACwAAAFYAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAAB8AAAAJAD#####AAAAAAAAAH8AAAAIAAAAAwAAAFYAAAALAAAAVgAAAFgAAABZAAAAWgAAAFsAAABeAAAAXwAAAGEAAABiAAAAYwAAAH8AAAAkAP####8AAAAAAAAAfgAAAAgAAAADAAAAVgAAAAsAAABWAAAAWAAAAFkAAABaAAAAWwAAAGcAAABoAAAAaQAAAGoAAABrAAAAfgAAACQA#####wAAAAAAAAB9AAAACAAAAAMAAABWAAAACwAAAFYAAABYAAAAWQAAAFoAAABbAAAAXQAAAF4AAABkAAAAZQAAAGYAAAB9AAAAJAD#####AQAAAAAAAHIAAAAIAAAANAAAAFoAAAAKAAAAWgAAAFsAAABeAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAACQA#####wAAAAAAAACEAAAACAAAAAMAAABWAAAADgAAAFYAAABYAAAAWQAAAFoAAABbAAAAXgAAAGwAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAACEAAAAJAD#####AQAAAAAAAHkAAAAIAAAANAAAAFoAAAAMAAAAWgAAAFsAAABfAAAAYQAAAGwAAABtAAAAbgAAAG8AAABwAAAAcwAAAHgAAAB5AAAAJAD#####AAAAAAAAAIYAAAAIAAAAAwAAAFYAAAAQAAAAVgAAAFgAAABZAAAAWgAAAFsAAABfAAAAYQAAAGwAAABtAAAAbgAAAG8AAABwAAAAcwAAAHgAAAB5AAAAhgAAACQA#####wEAAAAAAAB7AAAACAAAADQAAABaAAAADQAAAFoAAABbAAAAXgAAAGkAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB1AAAAdwAAAHsAAAAkAP####8AAAAAAAAAiAAAAAgAAAADAAAAVgAAABEAAABWAAAAWAAAAFkAAABaAAAAWwAAAF4AAABpAAAAbAAAAG0AAABuAAAAbwAAAHAAAAB0AAAAdQAAAHcAAAB7AAAAiAAAACQA#####wEAAAAAAAB6AAAACAAAADQAAABaAAAADAAAAFoAAABbAAAAXQAAAGUAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB2AAAAegAAACQA#####wAAAAAAAACKAAAACAAAAAMAAABWAAAAEAAAAFYAAABYAAAAWQAAAFoAAABbAAAAXQAAAGUAAABsAAAAbQAAAG4AAABvAAAAcAAAAHQAAAB2AAAAegAAAIr#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAARgAAACEAAAAAjAACeDIAAAAcAAAARgAAACIAAAAAjAACeTIAAAAcAAAARgAAABoBAAAAjAH#AAAAQBwAAAAAAAAAAAAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAAEEAAAAhAAAAAJAAAngyAAAAHAAAAEEAAAAiAAAAAJAAAnkyAAAAHAAAAEEAAAAaAQAAAJAB#wAAAEAcAAAAAAAAwDUAAAAAAAAAAABBEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAJQD#####AClBZmZpY2hhZ2UgZCfDqXF1YXRpb24gZGUgZHJvaXRlIG91IGNlcmNsZQAAAAIAAAABAAAAAgAAABwAAAAgAAAAIQAAAACUAAJ4MgAAABwAAAAgAAAAIgAAAACUAAJ5MgAAABwAAAAgAAAAGgEAAACUAf8AAAC#8AAAAAAAAEAAAAAAAAAAAAAAIBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABcoI1ZhbCh4MiwxKSwjVmFsKHkyLDIpKQAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAHgAAACEAAAAAmAACeDIAAAAcAAAAHgAAACIAAAAAmAACeTIAAAAcAAAAHgAAABoBAAAAmAH#AAAAv#AAAAAAAAA#########4AAAAB4QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAAlAP####8AKUFmZmljaGFnZSBkJ8OpcXVhdGlvbiBkZSBkcm9pdGUgb3UgY2VyY2xlAAAAAgAAAAEAAAACAAAAHAAAACIAAAAhAAAAAJwAAngyAAAAHAAAACIAAAAiAAAAAJwAAnkyAAAAHAAAACIAAAAaAQAAAJwB#wAAAEAYAAAAAAAAwDUAAAAAAAAAAAAiEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAFygjVmFsKHgyLDEpLCNWYWwoeTIsMikpAAAAEAD#####Af8AAAEQAAJBMQDANwAAAAAAAL#wAAAAAAAABQAAAAAiAAAARwAAACUA#####wApQWZmaWNoYWdlIGQnw6lxdWF0aW9uIGRlIGRyb2l0ZSBvdSBjZXJjbGUAAAACAAAAAQAAAAIAAAAcAAAAoAAAACEAAAAAoQACeDIAAAAcAAAAoAAAACIAAAAAoQACeTIAAAAcAAAAoAAAABoBAAAAoQH#AAAAQBAAAAAAAADAMwAAAAAAAAAAAKAQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAXKCNWYWwoeDIsMSksI1ZhbCh5MiwyKSkAAAACAP####8AAnhiAAIyNAAAAAFAOAAAAAAAAAAAAAIA#####wACeWIAAjE2AAAAAUAwAAAAAAAAAAAAAgD#####AARudW1iAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wAEbnVtYwACMzMAAAABQECAAAAAAAAAAAAYAP####8BAAAAABAAAWIAAAAAAAAAAABACAAAAAAAAAUAAAAAHAAAAAgAAAClAAAACAAAAKYAAAAeAP####8AAAAAAAEAAAAFAAAAKwAAACwAAAAtAAAALgAAACsAAAAeAP####8BLLgsAAEAAAAFAAAAMAAAADEAAAAyAAAAMwAAADD#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQB#AAAAAAUAAACrAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADYAAAAIAAAApwAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAACtAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAQQAAAK0AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAABCAAAArQAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAACtAAAAHgD#####AAAAAAABAAAABQAAAK4AAACvAAAAsAAAALEAAACuAAAAGQD#####AAAADQAAAKkAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACuAAAAswAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAK8AAACzAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAsAAAALMAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACxAAAAswAAAB4A#####wH#AAAAAQAAAAUAAAC0AAAAtQAAALYAAAC3AAAAtAAAACYA#####wH#AAAAAAAFAAAAuAAAABkA#####wAAAA0AAAAp#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAACAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADUAAAAIAAAAqAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEgAAAC8AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASwAAALwAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAvAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEoAAAC8AAAAHgD#####Af8AAAABAAAABQAAAL0AAAC+AAAAvwAAAMAAAAC9AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAvQAAALoAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC+AAAAugAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAL8AAAC6AAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAwAAAALoAAAAeAP####8BAAB#AAEAAAAFAAAAwgAAAMMAAADEAAAAxQAAAMIAAAAmAP####8BAAB#AAAABQAAAMYAAAACAP####8AAnhWAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ5VgABNAAAAAFAEAAAAAAAAAAAABgA#####wEAAAAAEAABdgAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAAMgAAAAIAAAAyQAAABkA#####wAAAA0AAADKAAAAEAD#####AQAAAAAQAAJhJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAoAAAAywAAACAA#####wEAAAAAEAAAAQABAAAAKAAAAMwAAAAPAP####8BAAAAABAAAm0xAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAAAAAAAAAAAM0AAAAZAP####8AAAAoAAAAzAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADAAAADPAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAAM8AAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAyAAAAzwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAADPAAAAHgD#####AQB#AAABAAAABQAAANAAAADRAAAA0gAAANMAAADQAAAAJgD#####AQB#AAAAAAUAAADUAAAAGQD#####AAAAKAAAAM4AAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAwAAAA1gAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADEAAADWAAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMgAAANYAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAzAAAA1gAAAB4A#####wEAfwAAAQAAAAUAAADXAAAA2AAAANkAAADaAAAA1wAAACYA#####wEAfwAAAAAFAAAA2#####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AAB#AAH#####CkCHFAAAAAAAQEjCj1wo9cMCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAdtYXNxdWUxAAAAAAAGAAAA1AAAANUAAADcAAAA2wAAAKsAAACs#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wAAfwAB#####wpAhyQAAAAAAEBU4UeuFHriAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJYXBwYXJhaXQxAAAAAAAGAAAA1AAAANUAAADcAAAA2wAAAKsAAACsAP####8AAAACABdDTWFjcm9BbmltYXRpb25Qb2ludExpZQD#####AAB#AAH#####CkCHVAAAAAAAQF3hR64UeuICAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVhbmltMQAAAQAAABQAAABkAAAAPAAAAM4AAQD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAfwAB#####wpATMAAAAAAAEA#hR64UeuGAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMY29ycmVjdGlvbiBhAAAAAAAEAAAA3gAAAN8AAADdAAAAuwAAAAIA#####wADeFYyAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wADeVYyAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAN4VjMAATQAAAABQBAAAAAAAAAAAAACAP####8AA3lWMwACMTAAAAABQCQAAAAAAAAAAAAYAP####8BAH8AABAAAnYyAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAA4QAAAAgAAADiAAAAGAD#####AQB#AAAQAAJ2MwAAAAAAAAAAAEAIAAAAAAAABQAAAAAcAAAACAAAAOMAAAAIAAAA5AAAABkA#####wAAAA0AAADlAAAAEAD#####AQB#AAAQAAJiJwAAAAAAAAAAAEAIAAAAAAAABQAAAACpAAAA5wAAABkA#####wAAAA0AAADmAAAAEAD#####AQB#AAAQAAJjJwAAAAAAAAAAAEAIAAAAAAAABQAAAAApAAAA6QAAACAA#####wEAfwAAEAAAAQABAAAAKQAAAOoAAAAgAP####8BAH8AABAAAAEAAQAAAKkAAADoAAAADwD#####AQB#AAAQAAJtMwAAAAAAAAAAAEAIAAAAAAAABQABP5EDcYGouj8AAADrAAAADwD#####AQB#AAAQAAJtMgAAAAAAAAAAAEAIAAAAAAAABQABAAAAAAAAAAAAAADsAAAAGQD#####AAAAKQAAAOoAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADCAAAA7wAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAMMAAADvAAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxAAAAO8AAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADFAAAA7wAAAB4A#####wEAAP8AAQAAAAUAAADwAAAA8QAAAPIAAADzAAAA8AAAACYA#####wEAAP8AAAAFAAAA9AAAABkA#####wAAACkAAADtAAAAEAD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAwgAAAPYAAAAQAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADDAAAA9gAAABAA#####wEAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAMQAAAD2AAAAEAD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAxQAAAPYAAAAeAP####8BAAD#AAEAAAAFAAAA9wAAAPgAAAD5AAAA+gAAAPcAAAAmAP####8BAAD#AAAABQAAAPsAAAAoAP####8AAAD#Af####8KQIekAAAAAABAYzCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTMAAAAAAAYAAAD0AAAA9QAAAPwAAAD7AAAAxwAAAMYAAAApAP####8AAAD#Af####8KQIe8AAAAAABAZ1Cj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MwAAAAAABgAAAPQAAAD1AAAA#AAAAPsAAADHAAAAxgAAAAAqAP####8AAAD#Af####8KQIfUAAAAAABAa1Cj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAABWFuaW0zAAABAAAAFAAAAGQAAAA8AAAA7QABAAAAACsA#####wAAAP8B#####wpAbLAAAAAAAEBAQo9cKPXDAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMY29ycmVjdGlvbiBjAAAAAAADAAAA#gAAAP8AAAD9AAAAGQD#####AAAAqQAAAOgAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC0AAABAQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAALUAAAEBAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAtgAAAQEAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC3AAABAQAAAB4A#####wH#AAAAAQAAAAUAAAECAAABAwAAAQQAAAEFAAABAgAAACYA#####wH#AAAAAAAFAAABBgAAABkA#####wAAAKkAAADuAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAtAAAAQgAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAC1AAABCAAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAALYAAAEIAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAtwAAAQgAAAAeAP####8B#wAAAAEAAAAFAAABCQAAAQoAAAELAAABDAAAAQkAAAAmAP####8B#wAAAAAABQAAAQ0AAAAoAP####8A#wAAAf####8KQIgkAAAAAABAb3Cj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTIAAAAAAAYAAAEGAAABBwAAAQ0AAAEOAAAAuAAAALkAAAApAP####8A#wAAAf####8KQIgsAAAAAABAcfhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MgAAAAAABgAAAQYAAAEHAAABDQAAAQ4AAAC4AAAAuQAAAAAqAP####8A#wAAAf####8KQIg8AAAAAABAc9hR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABWFuaW0yAAABAAAAFAAAAGQAAAA8AAAA7gABAAAAACsA#####wD#AAAB#####wpAYdAAAAAAAEBAQo9cKPXAAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMY29ycmVjdGlvbiBiAAAAAAAEAAABEAAAAREAAAEPAAAAuwAAACsA#####wD#AAAB#####xBAiFQAAAAAAEB2eFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKQ29ycmVjdGlvbgAAAAAABAAAALsAAADgAAABEgAAAQD###############8="
		
			// PremiÃ¨re question : une figure dans tabfigA, l'image dans tabfigA... 
			// On choisit deux figures de type B pour dÃ©finir le vecteur de translation.
			
			indexA = randint(0, nx * ny - 1)
			numA = tabfigA[indexA][2]
			iB1=randint(0,nx*ny-1)
			iB2=randint(0,nx*ny-1,[iB1])
			xV1=tabfigB[iB2][0]-tabfigB[iB1][0]
			yV1=tabfigB[iB2][1]-tabfigB[iB1][1]
			point = image_point_par_transformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0,0],[xV1,yV1])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
						trouver = true
						num1=tabfigA[j][2]
						xa=tabfigA[indexA][0]
						ya=tabfigA[indexA][1]
						break
					}
				}
				if (trouver == false) {
					indexA = randint(0, nx * ny - 1)
					numA = tabfigA[indexA][2]
					iB1=randint(0,nx*ny-1)
					iB2=randint(0,nx*ny-1,[iB1])
					xV1=tabfigB[iB2][0]-tabfigB[iB1][0]
					yV1=tabfigB[iB2][1]-tabfigB[iB1][1]
					point = image_point_par_transformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0,0],[xV1,yV1])
				}
			}
			texte += num_alpha(0) + texte_en_couleur_et_gras(` Dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} quelle est le numÃ©ro de l'image de la figure ${numA} ?<br>`, `green`)
			texte_corr = num_alpha(0) + texte_en_couleur_et_gras(` La figure image de la figure ${numA}  dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} porte le numÃ©ro ${num1}.<br>`, `green`)
			// DeuxiÃ¨me question : une figure dans tabfigD, l'image dans tabfigB... 
			// On choisit une figure C et une figure A pour dÃ©finir le vecteur de translation.
			indexD = randint(0, nx * ny - 1)
			numD = tabfigD[indexD][2]
			iC1=randint(0,nx*ny-1)
			iA1=randint(0,nx*ny-1,[iC1])
			xV2=tabfigA[iA1][0]-tabfigC[iC1][0]
			yV2=tabfigA[iA1][1]-tabfigC[iC1][1]
			point = image_point_par_transformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0,0],[xV2,yV2])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigB[j][0] && point[1] == tabfigB[j][1]) {
						trouver = true
						num2=tabfigB[j][2]
						xb=tabfigA[indexD][0]
						yb=tabfigA[indexD][1]
						break
					}
				}
				if (trouver == false) {
					indexD = randint(0, nx * ny - 1)
					numD = tabfigD[indexD][2]
					iC1=randint(0,nx*ny-1)
					iA1=randint(0,nx*ny-1,[iC1])
					xV2=tabfigA[iA1][0]-tabfigC[iC1][0]
					yV2=tabfigA[iA1][1]-tabfigC[iC1][1]
					point = image_point_par_transformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0,0],[xV2,yV2])
				}
			}
			texte += num_alpha(1) + texte_en_couleur_et_gras(` Dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} quelle est le numÃ©ro de l'image de la figure ${numD} ?<br>`, `red`)
			texte_corr += num_alpha(1) + texte_en_couleur_et_gras(` La figure image de la figure ${numD}  dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} porte le numÃ©ro ${num2}.<br>`, `red`)

		
			// troisiÃ¨me question : une figure dans tabfigC, l'image dans tabfigA... 
			// On choisit une figure D et une figure B pour dÃ©finir le vecteur de translation.
			indexC = randint(0, nx * ny - 1)
			numC = tabfigC[indexC][2]
			iD1=randint(0,nx*ny-1)
			iB3=randint(0,nx*ny-1,[iD1])
			xV3=tabfigA[iB3][0]-tabfigC[iD1][0]
			yV3=tabfigA[iB3][1]-tabfigC[iD1][1]
			point = image_point_par_transformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0,0],[xV3,yV3])
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
						trouver = true
						num3=tabfigA[j][2]
						xc=tabfigA[indexC][0]
						yc=tabfigA[indexC][1]
						break
					}
				}
				if (trouver == false) {
					indexC = randint(0, nx * ny - 1)
					numC = tabfigC[indexC][2]
					iD1=randint(0,nx*ny-1)
					iB3=randint(0,nx*ny-1,[iD1])
					xV3=tabfigA[iB3][0]-tabfigC[iD1][0]
					yV3=tabfigA[iB3][1]-tabfigC[iD1][1]
					point = image_point_par_transformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0,0],[xV3,yV3])
				}
			}
			texte += num_alpha(2) + texte_en_couleur_et_gras(` Dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} quelle est le numÃ©ro de l'image de la figure ${numC} ?<br>`, `blue`)
			texte_corr += num_alpha(2) + texte_en_couleur_et_gras(` La figure image de la figure ${numC}  dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} porte le numÃ©ro ${num3}.<br>`, `blue`)
	

			break

		case 4 : //rotations
			
			this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAPj#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQEdAAAAAAABAO4UeuFHrhv####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAE4AAAAAUAgAAAAAAAAAAAAAgD#####AAJ5YwABOAAAAAFAIAAAAAAAAAAAAAIA#####wADeGMxAAE4AAAAAUAgAAAAAAAAAAAAAgD#####AAN5YzEAAjE2AAAAAUAwAAAAAAAAAAAAGAD#####AQAAAAAQAAFhAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAIwAAAAgAAAAkAAAAGAD#####AQAAAAAQAAFjAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAJgAAAAgAAAAnAAAAGAD#####AAnMCQAQAAJjMQAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAACgAAAAIAAAAKQAAAA4A#####wAAAA0AAAAHAwAAAAE#8AAAAAAAAAAAAAoAAAAGAAAACAAAACUAAAAQAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAALQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAAAtAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAC0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAALf####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAAA0AAAAqAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALgAAADIAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAvAAAAMgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADAAAAAyAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAADIAAAACAP####8AAm55AAE1AAAAAUAUAAAAAAAAAAAAAwD#####AAJyMwAlc2koKG1vZHVsb3goeCk9MSkqKG1vZHVsb3koeCk9MSksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABP#AAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAADAP####8AAnIyACVzaSgobW9kdWxveCh4KT0wKSoobW9kdWxveSh4KT0xKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAEAAAAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAMA#####wACcjEAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTApLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAADAMQAAAAAAAMAuAAAAAAAAAAAADRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAFB#####wAAAAEAB0NNaWxpZXUA#####wEAAAABEAACSjEAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACL#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAADwAAAAQAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAD0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAPQAAABsA#####wEAAAABEAACSTEAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAB4AAAAcAP####8AAABAAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEEAAAAQAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAEEAAAAZAP####8AAAANAAAAIgAAABAA#####wEAAAABEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAABEAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEQAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAARP####8AAAABAAlDUG9seWdvbmUA#####wAAAAAAAQAAAAUAAAAgAAAAPgAAAD8AAAAiAAAAIAAAAB0A#####wAAAAAAAQAAAAUAAAAeAAAAIgAAAEIAAABDAAAAHgAAAB0A#####wAAAAAAAQAAAAUAAABFAAAASAAAAEYAAABHAAAARQAAAB0A#####wAAAAAAAQAAAAUAAAANAAAAIAAAACIAAAAeAAAADQAAABYA#####wD#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAYAAAAFwD#####AObm5gABAAAADQAAAEMAAAA+AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAVUAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEMAAAAHAQAAAAgAAAADAAAAAT#wAAAAAAAAAAAAHgD#####AQAAAAAQAAFWAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAAA+AAAABwEAAAAIAAAANwAAAAE#8AAAAAAAAP####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAANAAAATwAAAB8A#####wEAAAAAEAAAAQABAAAADQAAAFAAAAAPAP####8BAAAAABAAAlUxAAAAAAAAAAAAQAgAAAAAAAAFAAE#0wPWdtnVKQAAAFEAAAAZAP####8AAAANAAAAUAAAABAA#####wEAAAAAEAACVjEAAAAAAAAAAABACAAAAAAAAAUAAAAAUwAAAFQAAAAfAP####8BAAAAABAAAAEAAQAAAFMAAABVAAAADwD#####AQAAAAAQAAJVMgAAAAAAAAAAAEAIAAAAAAAABQABP9bRs76jZ34AAABWAAAAGQD#####AAAADQAAAFcAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAFgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAWAAAAB0A#####wEAAAAAAQAAAAUAAABZAAAAWgAAAFsAAABcAAAAWQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEIAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAQwAAAFgAAAAdAP####8BAAAAAAEAAAAFAAAAXAAAAFsAAABeAAAAXwAAAFwAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA+AAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAD8AAABYAAAAHQD#####AQAAAAABAAAABQAAAFoAAABhAAAAYgAAAFsAAABaAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAFgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEYAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAFgAAAAdAP####8BAAAAAAEAAAAFAAAAZAAAAGUAAABmAAAAZwAAAGT#####AAAAAgAIQ01lc3VyZVgA#####wABeAAAAE4AAABX#####wAAAAIACENNZXN1cmVZAP####8AAXkAAABOAAAAVwAAAAIA#####wACeDEADGludCh4KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAaQAAAAE#UGJN0vGp#AAAAAIA#####wACeTEADGludCh5KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAagAAAAE#UGJN0vGp#AAAAAIA#####wADbnVtAAx4MSoyK254KjQqeTEAAAAHAAAAAAcCAAAACAAAAGsAAAABQAAAAAAAAAAAAAAHAgAAAAcCAAAACAAAAAMAAAABQBAAAAAAAAAAAAAIAAAAbAAAABsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFcAAABb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAJgAAAAAAAMAj#######wAAAAbhIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABtAAAAAgD#####AARudW0xAAVudW0rMQAAAAcAAAAACAAAAG0AAAABP#AAAAAAAAAAAAACAP####8ABG51bScACG51bStueCoyAAAABwAAAAAIAAAAbQAAAAcCAAAACAAAAAMAAAABQAAAAAAAAAAAAAACAP####8ABW51bScxAAZudW0nKzEAAAAHAAAAAAgAAABxAAAAAT#wAAAAAAAAAAAAGwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAWgAAAGIAAAAbAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABbAAAAZgAAABsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFwAAABeAAAAIgD#####AQAAAADAJgAAAAAAAMAkAAAAAAAAAAAAdRIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABwAAAAIgD#####AQAAAADAJAAAAAAAAMAkAAAAAAAAAAAAcxIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABxAAAAIgD#####AQAAAADAIgAAAAAAAMAgAAAAAAAAAAAAdBIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABy#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAF0AAAAIAAAANwAAAFcAAAAHAAAAVwAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAACMA#####wEAAAAAAABjAAAACAAAADcAAABXAAAABwAAAFcAAABYAAAAWgAAAFsAAABhAAAAYgAAAGMAAAAjAP####8BAAAAAAAAaAAAAAgAAAA3AAAAVwAAAAcAAABXAAAAWAAAAGQAAABlAAAAZgAAAGcAAABoAAAAIwD#####AQAAAAAAAGAAAAAIAAAANwAAAFcAAAAHAAAAVwAAAFgAAABbAAAAXAAAAF4AAABfAAAAYAAAACMA#####wAAAAAAAAB5AAAACAAAAAMAAABTAAAACwAAAFMAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAAB5AAAAIwD#####AAAAAAAAAHwAAAAIAAAAAwAAAFMAAAALAAAAUwAAAFUAAABWAAAAVwAAAFgAAABbAAAAXAAAAF4AAABfAAAAYAAAAHwAAAAjAP####8AAAAAAAAAewAAAAgAAAADAAAAUwAAAAsAAABTAAAAVQAAAFYAAABXAAAAWAAAAGQAAABlAAAAZgAAAGcAAABoAAAAewAAACMA#####wAAAAAAAAB6AAAACAAAAAMAAABTAAAACwAAAFMAAABVAAAAVgAAAFcAAABYAAAAWgAAAFsAAABhAAAAYgAAAGMAAAB6AAAAIwD#####AQAAAAAAAG8AAAAIAAAANwAAAFcAAAAKAAAAVwAAAFgAAABbAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAACMA#####wAAAAAAAACBAAAACAAAAAMAAABTAAAADgAAAFMAAABVAAAAVgAAAFcAAABYAAAAWwAAAGkAAABqAAAAawAAAGwAAABtAAAAbgAAAG8AAACBAAAAIwD#####AQAAAAAAAHYAAAAIAAAANwAAAFcAAAAMAAAAVwAAAFgAAABcAAAAXgAAAGkAAABqAAAAawAAAGwAAABtAAAAcAAAAHUAAAB2AAAAIwD#####AAAAAAAAAIMAAAAIAAAAAwAAAFMAAAAQAAAAUwAAAFUAAABWAAAAVwAAAFgAAABcAAAAXgAAAGkAAABqAAAAawAAAGwAAABtAAAAcAAAAHUAAAB2AAAAgwAAACMA#####wEAAAAAAAB4AAAACAAAADcAAABXAAAADQAAAFcAAABYAAAAWwAAAGYAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAAByAAAAdAAAAHgAAAAjAP####8AAAAAAAAAhQAAAAgAAAADAAAAUwAAABEAAABTAAAAVQAAAFYAAABXAAAAWAAAAFsAAABmAAAAaQAAAGoAAABrAAAAbAAAAG0AAABxAAAAcgAAAHQAAAB4AAAAhQAAACMA#####wEAAAAAAAB3AAAACAAAADcAAABXAAAADAAAAFcAAABYAAAAWgAAAGIAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAABzAAAAdwAAACMA#####wAAAAAAAACHAAAACAAAAAMAAABTAAAAEAAAAFMAAABVAAAAVgAAAFcAAABYAAAAWgAAAGIAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAABzAAAAdwAAAIcAAAAQAP####8B#wAAARAAAkExAMA3AAAAAAAAv#AAAAAAAAAFAAAAACIAAABEAAAAAgD#####AAJ4YgACMjQAAAABQDgAAAAAAAAAAAACAP####8AAnliAAIxNgAAAAFAMAAAAAAAAAAAAAIA#####wAEbnVtYgACNTYAAAABQEwAAAAAAAAAAAACAP####8ABG51bWMAAjMzAAAAAUBAgAAAAAAAAAAAAgD#####AAN4YzIAAjE2AAAAAUAwAAAAAAAAAAAAAgD#####AAN5YzIAAjIwAAAAAUA0AAAAAAAAAAAAAgD#####AAN4YzMAAjEyAAAAAUAoAAAAAAAAAAAAAgD#####AAN5YzMAAjI0AAAAAUA4AAAAAAAAAAAAGAD#####AQAAAAAQAAFiAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAigAAAAgAAACLAAAAGAD#####AH8AAAAQAAJjMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAAI4AAAAIAAAAjwAAABgA#####wAAAH8AEAACYzMAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAACQAAAACAAAAJEAAAAdAP####8AAAAAAAEAAAAFAAAALgAAAC8AAAAwAAAAMQAAAC4AAAAdAP####8ALLgsAAEAAAAFAAAAMwAAADQAAAA1AAAANgAAADP#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AAB#AAAAAAUAAACWAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADkAAAAIAAAAjAAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAACYAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAPgAAAJgAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA#AAAAmAAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAACYAAAAHQD#####AAAAAAABAAAABQAAAJkAAACaAAAAmwAAAJwAAACZAAAAGQD#####AAAADQAAAJIAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACZAAAAngAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAJoAAACeAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAmwAAAJ4AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACcAAAAngAAAB0A#####wD#AAAAAQAAAAUAAACfAAAAoAAAAKEAAACiAAAAnwAAACQA#####wD#AAAAAAAFAAAAowAAABkA#####wAAAA0AAAAr#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAACAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADgAAAAIAAAAjQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAACnAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAKcAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABGAAAApwAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEcAAACnAAAAHQD#####Af8AAAABAAAABQAAAKgAAACpAAAAqgAAAKsAAACoAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAqAAAAKUAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACpAAAApQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKoAAAClAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAqwAAAKUAAAAdAP####8AAAB#AAEAAAAFAAAArQAAAK4AAACvAAAAsAAAAK0AAAAkAP####8AAAB#AAAABQAAALH#####AAAAAQASQ0FyY0RlQ2VyY2xlRGlyZWN0AP####8B##8AAAEAAACUAAAArf####8AAAABQFaAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8BAAB#ARAAAAAAAAAAAAAAAEAIAAAAAAAABQABP10AlhldV+MAAACzAAAADQD#####AAAALAAAAAFAVoAAAAAAAAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAAC1AAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAALUAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAAtQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADYAAAC1AAAAHQD#####AQB#AAABAAAABQAAALYAAAC3AAAAuAAAALkAAAC2AAAAJAD#####AQB#AAAAAAUAAAC6AAAADQD#####AAAAlAAAAAFAVoAAAAAAAAAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAK0AAAC8AAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAArgAAALwAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACvAAAAvAAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAALAAAAC8AAAAHQD#####AQAAfwABAAAABQAAAL0AAAC+AAAAvwAAAMAAAAC9AAAAJAD#####AQAAfwAAAAUAAADBAAAADQD#####AAAAk#####8AAAABAAxDTW9pbnNVbmFpcmUAAAABQFaAAAAAAAAAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACfAAAAwwAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKAAAADDAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAoQAAAMMAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACiAAAAwwAAAB0A#####wH#AAAAAQAAAAUAAADEAAAAxQAAAMYAAADHAAAAxAAAACQA#####wH#AAAAAAAFAAAAyAAAACYA#####wH#AAAAAQAAACwAAAAq#####wAAAAFAVoAAAAAAAAAAACcA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAE#Zs#fPkSCoAAAAMr#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAAAqAAAALAAAAMv#####AAAAAQAMQ0Jpc3NlY3RyaWNlAAAAAMwBAAAAABAAAAEAAQAAAMsAAAAsAAAAKgAAAA8AAAAAzAEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAM3#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQEAAADMAAZhbmdsZTEAAAAqAAAALAAAAMsAAAAiAQAAAMwB#wAAAEAIAAAAAAAAP#AAAAAAAAAAAADODwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAAz#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAQAAAMwB#wAAAAEAAAABQEJbiQkrj78AAAAqAAAALAAAAMsAAAAADQD#####AAAALAAAAAgAAADPAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMwAAANIAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA0AAAA0gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADUAAADSAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANgAAANIAAAAdAP####8BAH8AAAEAAAAFAAAA0wAAANQAAADVAAAA1gAAANMAAAAkAP####8BAH8AAAAABQAAANf#####AAAAAgAXQ01hY3JvQW5pbWF0aW9uUG9pbnRMaWUA#####wAAfwAB#####xBAjwQAAAAAAEBi8KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMQAAAAAAABQAAABkAAAAAAAAAMsAAQAAAAApAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAMAAAADAAAArQAAAJQAAAC0AAAAKgAAAADaAQAAAAAQAAABAAEAAAC0AAAAlAAAAK0AAAAPAAAAANoBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAADbAAAAKwEAAADaAAZhbmdsZTMAAACtAAAAlAAAALQAAAAiAQAAANoBAH8AAEAIAAAAAAAAP#AAAAAAAAAAAADcDwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAA3QAAACwBAAAA2gEAfwAAAQAAAAFAQluJCSuPvwAAAK0AAACUAAAAtAAAAAANAP####8AAACUAAAACAAAAN0AAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACtAAAA4AAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAK4AAADgAAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAArwAAAOAAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACwAAAA4AAAAB0A#####wEAAH8AAQAAAAUAAADhAAAA4gAAAOMAAADkAAAA4QAAACQA#####wEAAH8AAAAFAAAA5QAAAC0A#####wAAAH8B#####wpAj1wAAAAAAEBo8KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMwAAAAAAABQAAABkAAAAPAAAALQAAQD#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wEAAH8AAQAAAJMAAACf#####wAAACgAAAABQFaAAAAAAAAAAAAnAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQABP+#fkVF76cAAAADoAAAAKQD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAADAAAAAwAAAJ8AAACTAAAA6QAAACoAAAAA6gEAAAAAEAAAAQABAAAA6QAAAJMAAACfAAAADwAAAADqAQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAA6wAAACsBAAAA6gAGYW5nbGUyAAAAnwAAAJMAAADpAAAAIgEAAADqAQAAfwBACAAAAAAAAD#wAAAAAAAAAAAA7A8AAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAsKwAAAAAO0AAAAsAQAAAOoBAAB#AAEAAAABQEJbiQkrj78AAACfAAAAkwAAAOkAAAAADQD#####AAAAkwAAAAgAAADtAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAnwAAAPAAAAAQAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACgAAAA8AAAABAA#####wEAAH8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKEAAADwAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAogAAAPAAAAAdAP####8B#wAAAAEAAAAFAAAA8QAAAPIAAADzAAAA9AAAAPEAAAAkAP####8B#wAAAAAABQAAAPUAAAAtAP####8A#wAAAf####8KQI7sAAAAAABAXGFHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB3RvdXJuZTIAAAAAAAAUAAAAZAAAADwAAADpAAEA################"
			this.MG32codeBase64corr = "TWF0aEdyYXBoSmF2YTEuMAAAABI+0euFAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAQL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAVBbmdsZQABMAAAAAEAAAAAAAAAAAAAAAIA#####wAEWm9vbQACMzAAAAABQD4AAAAAAAAAAAACAP####8AAm54AAE1AAAAAUAUAAAAAAAA#####wAAAAEABUNGb25jAP####8AB21vZHVsb3gACG1vZCh4LDIp#####wAAAAEADUNGb25jdGlvbjJWYXIG#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAFAAAAAAAAAAAABeAAAAAMA#####wAHbW9kdWxveQASbW9kKGludCh5L254LzIpLDIpAAAABAb#####AAAAAgAJQ0ZvbmN0aW9uAv####8AAAABAApDT3BlcmF0aW9uAwAAAAcDAAAABQAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAAwAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAAABeQAAAAMA#####wACcjAAJXNpKChtb2R1bG94KHgpPTApKihtb2R1bG95KHgpPTApLDEsMCn#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAHAgAAAAcI#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAABAAAAAUAAAAAAAAAAQAAAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4AAAAAgD#####AAJ5RAABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeEQAATAAAAABAAAAAAAAAAAAAAACAP####8AAnlDAAE0AAAAAUAQAAAAAAAAAAAAAgD#####AAJ4QwABNAAAAAFAEAAAAAAAAAAAAAIA#####wACeUIAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhCAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAABTwDAMgAAAAAAAMAzAAAAAAAABQABQEtAAAAAAABAUSFHrhR64v####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####Af8AAAEQAAABAAIAAAANAD#3Cj1wo9cK#####wAAAAEACUNSb3RhdGlvbgD#####AAAADQAAAAFAVoAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACAAAAAL#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQGeAAAAAAAAAAAAOAAAADQD#####AAAADQAAAAgAAAAB#####wAAAAEAC0NQb2ludEltYWdlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAARAAAAEv####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAE#####8AAAABAAlDQ2VyY2xlT0EA#####wH#AAAAAgAAAA0AAAAU#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQACAAAADQAAABT#####AAAAAQAQQ0RlbWlEcm9pdGVJbWFnZQD#####Af8AAAANAAABAAIAAAAWAAAAD#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAXAAAAFf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAGAAAABAA#####wH#AAAAEAACSicAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAABAAAAAQAP####8B#wAAABAAAkknAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAAQ#####wAAAAIAB0NSZXBlcmUA#####wDm5uYBAQAAAA0AAAAbAAAAGgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8B#wAAARAAAkInAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAADAAAAAgAAAALAAAAEQD#####AQAAAAAQAAFCAEAAAAAAAAAAwDcAAAAAAAAFAAAAAB0AAAAYAP####8B#wAAARAAAkQnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACAAAAAgAAAAHAAAAEQD#####AQAAAAAQAAFEAMAxAAAAAAAAwCoAAAAAAAAFAAAAAB8AAAAYAP####8B#wAAARAAAkMnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAACgAAAAgAAAAJAAAAEQD#####AQAAAAAQAAFDAEAIAAAAAAAAv#AAAAAAAAAFAAAAACEAAAACAP####8AAnhhAAIxMgAAAAFAKAAAAAAAAAAAAAIA#####wACeWEAATgAAAABQCAAAAAAAAAAAAACAP####8ABG51bWEAATAAAAABAAAAAAAAAAAAAAACAP####8AAnhjAAE4AAAAAUAgAAAAAAAAAAAAAgD#####AAJ5YwABOAAAAAFAIAAAAAAAAAAAAAIA#####wADeGMxAAE4AAAAAUAgAAAAAAAAAAAAAgD#####AAN5YzEAAjE2AAAAAUAwAAAAAAAAAAAAGAD#####AQAAAAAQAAFhAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAIwAAAAgAAAAkAAAAGAD#####AQAAAAAQAAFjAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAJgAAAAgAAAAnAAAAGAD#####AQnMCQAQAAJjMQAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAACgAAAAIAAAAKQAAAA4A#####wAAAA0AAAAHAwAAAAE#8AAAAAAAAAAAAAoAAAAGAAAACAAAACUAAAAQAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAALQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAAAtAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAC0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAALf####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAAA0AAAAqAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALgAAADIAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAvAAAAMgAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADAAAAAyAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAADIAAAACAP####8AAm55AAE1AAAAAUAUAAAAAAAAAAAAAwD#####AAJyMwAlc2koKG1vZHVsb3goeCk9MSkqKG1vZHVsb3koeCk9MSksMSwwKQAAAAkAAAAABwIAAAAHCAAAAAoAAAAEAAAABQAAAAAAAAABP#AAAAAAAAAAAAAHCAAAAAoAAAAFAAAABQAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAXgAAAADAP####8AAnIyACVzaSgobW9kdWxveCh4KT0wKSoobW9kdWxveSh4KT0xKSwxLDApAAAACQAAAAAHAgAAAAcIAAAACgAAAAQAAAAFAAAAAAAAAAEAAAAAAAAAAAAAAAcIAAAACgAAAAUAAAAFAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAEAAAAAAAAAAAABeAAAAAMA#####wACcjEAJXNpKChtb2R1bG94KHgpPTEpKihtb2R1bG95KHgpPTApLDEsMCkAAAAJAAAAAAcCAAAABwgAAAAKAAAABAAAAAUAAAAAAAAAAT#wAAAAAAAAAAAABwgAAAAKAAAABQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAQAAAAAAAAAAAAF4#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAADAMQAAAAAAAMAuAAAAAAAAAAAADRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAFB#####wAAAAEAB0NNaWxpZXUA#####wEAAAABEAACSjEAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAACL#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAADwAAAAQAP####8BAAAAARAAAUoAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAD0AAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAPQAAABsA#####wEAAAABEAACSTEAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAB4AAAAcAP####8AAABAAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEEAAAAQAP####8BAAAAARAAAUkAAAAAAAAAAABACAAAAAAAAAUAAAAAIAAAAEEAAAAZAP####8AAAANAAAAIgAAABAA#####wEAAAABEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAARAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACIAAABEAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAEQAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAgAAAARP####8AAAABAAlDUG9seWdvbmUA#####wEAAAAAAQAAAAUAAAAgAAAAPgAAAD8AAAAiAAAAIAAAAB0A#####wAAAAAAAQAAAAUAAAAeAAAAIgAAAEIAAABDAAAAHgAAAB0A#####wAAAAAAAQAAAAUAAABFAAAASAAAAEYAAABHAAAARQAAAB0A#####wAAAAAAAQAAAAUAAAANAAAAIAAAACIAAAAeAAAADQAAABYA#####wD#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAYAAAAFwD#####AObm5gABAAAADQAAAEMAAAA+AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAVUAAAAAAAAAAABACAAAAAAAAAUAAAAADQAAAEMAAAAHAQAAAAgAAAADAAAAAT#wAAAAAAAAAAAAHgD#####AQAAAAAQAAFWAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA0AAAA+AAAABwEAAAAIAAAANwAAAAE#8AAAAAAAAP####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAANAAAATwAAAB8A#####wEAAAAAEAAAAQABAAAADQAAAFAAAAAPAP####8BAAAAABAAAlUxAAAAAAAAAAAAQAgAAAAAAAAFAAE#0wPWdtnVKQAAAFEAAAAZAP####8AAAANAAAAUAAAABAA#####wEAAAAAEAACVjEAAAAAAAAAAABACAAAAAAAAAUAAAAAUwAAAFQAAAAfAP####8BAAAAABAAAAEAAQAAAFMAAABVAAAADwD#####AQAAAAAQAAJVMgAAAAAAAAAAAEAIAAAAAAAABQABP9bRs76jZ34AAABWAAAAGQD#####AAAADQAAAFcAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAANAAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACAAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAIgAAAFgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAAWAAAAB0A#####wEAAAAAAQAAAAUAAABZAAAAWgAAAFsAAABcAAAAWQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEIAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAQwAAAFgAAAAdAP####8BAAAAAAEAAAAFAAAAXAAAAFsAAABeAAAAXwAAAFwAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA+AAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAD8AAABYAAAAHQD#####AQAAAAABAAAABQAAAFoAAABhAAAAYgAAAFsAAABaAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARQAAAFgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAWAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEYAAABYAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAFgAAAAdAP####8BAAAAAAEAAAAFAAAAZAAAAGUAAABmAAAAZwAAAGT#####AAAAAgAIQ01lc3VyZVgA#####wABeAAAAE4AAABX#####wAAAAIACENNZXN1cmVZAP####8AAXkAAABOAAAAVwAAAAIA#####wACeDEADGludCh4KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAaQAAAAE#UGJN0vGp#AAAAAIA#####wACeTEADGludCh5KzAuMDAxKQAAAAYCAAAABwAAAAAIAAAAagAAAAE#UGJN0vGp#AAAAAIA#####wADbnVtAAx4MSoyK254KjQqeTEAAAAHAAAAAAcCAAAACAAAAGsAAAABQAAAAAAAAAAAAAAHAgAAAAcCAAAACAAAAAMAAAABQBAAAAAAAAAAAAAIAAAAbAAAABsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFcAAABb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAJgAAAAAAAMAj#######wAAAAbhIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABtAAAAAgD#####AARudW0xAAVudW0rMQAAAAcAAAAACAAAAG0AAAABP#AAAAAAAAAAAAACAP####8ABG51bScACG51bStueCoyAAAABwAAAAAIAAAAbQAAAAcCAAAACAAAAAMAAAABQAAAAAAAAAAAAAACAP####8ABW51bScxAAZudW0nKzEAAAAHAAAAAAgAAABxAAAAAT#wAAAAAAAAAAAAGwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAWgAAAGIAAAAbAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABbAAAAZgAAABsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFwAAABeAAAAIgD#####AQAAAADAJgAAAAAAAMAkAAAAAAAAAAAAdRIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABwAAAAIgD#####AQAAAADAJAAAAAAAAMAkAAAAAAAAAAAAcxIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABxAAAAIgD#####AQAAAADAIgAAAAAAAMAgAAAAAAAAAAAAdBIAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABy#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAF0AAAAIAAAANwAAAFcAAAAHAAAAVwAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAACMA#####wEAAAAAAABjAAAACAAAADcAAABXAAAABwAAAFcAAABYAAAAWgAAAFsAAABhAAAAYgAAAGMAAAAjAP####8BAAAAAAAAaAAAAAgAAAA3AAAAVwAAAAcAAABXAAAAWAAAAGQAAABlAAAAZgAAAGcAAABoAAAAIwD#####AQAAAAAAAGAAAAAIAAAANwAAAFcAAAAHAAAAVwAAAFgAAABbAAAAXAAAAF4AAABfAAAAYAAAACMA#####wAAAAAAAAB5AAAACAAAAAMAAABTAAAACwAAAFMAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAAB5AAAAIwD#####AAAAAAAAAHwAAAAIAAAAAwAAAFMAAAALAAAAUwAAAFUAAABWAAAAVwAAAFgAAABbAAAAXAAAAF4AAABfAAAAYAAAAHwAAAAjAP####8AAAAAAAAAewAAAAgAAAADAAAAUwAAAAsAAABTAAAAVQAAAFYAAABXAAAAWAAAAGQAAABlAAAAZgAAAGcAAABoAAAAewAAACMA#####wAAAAAAAAB6AAAACAAAAAMAAABTAAAACwAAAFMAAABVAAAAVgAAAFcAAABYAAAAWgAAAFsAAABhAAAAYgAAAGMAAAB6AAAAIwD#####AQAAAAAAAG8AAAAIAAAANwAAAFcAAAAKAAAAVwAAAFgAAABbAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAACMA#####wAAAAAAAACBAAAACAAAAAMAAABTAAAADgAAAFMAAABVAAAAVgAAAFcAAABYAAAAWwAAAGkAAABqAAAAawAAAGwAAABtAAAAbgAAAG8AAACBAAAAIwD#####AQAAAAAAAHYAAAAIAAAANwAAAFcAAAAMAAAAVwAAAFgAAABcAAAAXgAAAGkAAABqAAAAawAAAGwAAABtAAAAcAAAAHUAAAB2AAAAIwD#####AAAAAAAAAIMAAAAIAAAAAwAAAFMAAAAQAAAAUwAAAFUAAABWAAAAVwAAAFgAAABcAAAAXgAAAGkAAABqAAAAawAAAGwAAABtAAAAcAAAAHUAAAB2AAAAgwAAACMA#####wEAAAAAAAB4AAAACAAAADcAAABXAAAADQAAAFcAAABYAAAAWwAAAGYAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAAByAAAAdAAAAHgAAAAjAP####8AAAAAAAAAhQAAAAgAAAADAAAAUwAAABEAAABTAAAAVQAAAFYAAABXAAAAWAAAAFsAAABmAAAAaQAAAGoAAABrAAAAbAAAAG0AAABxAAAAcgAAAHQAAAB4AAAAhQAAACMA#####wEAAAAAAAB3AAAACAAAADcAAABXAAAADAAAAFcAAABYAAAAWgAAAGIAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAABzAAAAdwAAACMA#####wAAAAAAAACHAAAACAAAAAMAAABTAAAAEAAAAFMAAABVAAAAVgAAAFcAAABYAAAAWgAAAGIAAABpAAAAagAAAGsAAABsAAAAbQAAAHEAAABzAAAAdwAAAIcAAAAQAP####8B#wAAARAAAkExAMA3AAAAAAAAv#AAAAAAAAAFAAAAACIAAABEAAAAAgD#####AAJ4YgACMjQAAAABQDgAAAAAAAAAAAACAP####8AAnliAAIxNgAAAAFAMAAAAAAAAAAAAAIA#####wAEbnVtYgACNTYAAAABQEwAAAAAAAAAAAACAP####8ABG51bWMAAjMzAAAAAUBAgAAAAAAAAAAAAgD#####AAN4YzIAAjE2AAAAAUAwAAAAAAAAAAAAAgD#####AAN5YzIAAjIwAAAAAUA0AAAAAAAAAAAAAgD#####AAN4YzMAAjEyAAAAAUAoAAAAAAAAAAAAAgD#####AAN5YzMAAjI0AAAAAUA4AAAAAAAAAAAAGAD#####AQAAAAAQAAFiAAAAAAAAAAAAQAgAAAAAAAAFAAAAABwAAAAIAAAAigAAAAgAAACLAAAAGAD#####AX8AAAAQAAJjMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAcAAAACAAAAI4AAAAIAAAAjwAAABgA#####wEAAH8AEAACYzMAAAAAAAAAAABACAAAAAAAAAkAAAAAHAAAAAgAAACQAAAACAAAAJEAAAAdAP####8AAAAAAAEAAAAFAAAALgAAAC8AAAAwAAAAMQAAAC4AAAAdAP####8BLLgsAAEAAAAFAAAAMwAAADQAAAA1AAAANgAAADP#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQB#AAAAAAUAAACWAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADkAAAAIAAAAjAAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACAAAACYAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAPgAAAJgAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA#AAAAmAAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAACIAAACYAAAAHQD#####AAAAAAABAAAABQAAAJkAAACaAAAAmwAAAJwAAACZAAAAGQD#####AAAADQAAAJIAAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACZAAAAngAAABAA#####wEA#wAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAJoAAACeAAAAEAD#####AQD#AAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAmwAAAJ4AAAAQAP####8BAP8AABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACcAAAAngAAAB0A#####wH#AAAAAQAAAAUAAACfAAAAoAAAAKEAAACiAAAAnwAAACQA#####wH#AAAAAAAFAAAAowAAABkA#####wAAAA0AAAAr#####wAAAAEAC0NNYWNyb1BhdXNlAP####8AAAAAAf####8QQI70AAAAAABAQcKPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAACAAAADgD#####AAAADQAAAAcDAAAAAT#wAAAAAAAAAAAACgAAADgAAAAIAAAAjQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEUAAACnAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAKcAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABGAAAApwAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEcAAACnAAAAHQD#####Af8AAAABAAAABQAAAKgAAACpAAAAqgAAAKsAAACoAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAqAAAAKUAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACpAAAApQAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKoAAAClAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAqwAAAKUAAAAdAP####8BAAB#AAEAAAAFAAAArQAAAK4AAACvAAAAsAAAAK0AAAAkAP####8BAAB#AAAABQAAALH#####AAAAAQASQ0FyY0RlQ2VyY2xlRGlyZWN0AP####8B##8AAAEAAACUAAAArf####8AAAABQFaAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8BAAB#ARAAAAAAAAAAAAAAAEAIAAAAAAAABQABP10AlhldV+MAAACzAAAADQD#####AAAALAAAAAFAVoAAAAAAAAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADMAAAC1AAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAALUAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAAtQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADYAAAC1AAAAHQD#####AAB#AAABAAAABQAAALYAAAC3AAAAuAAAALkAAAC2AAAAJAD#####AQB#AAAAAAUAAAC6AAAADQD#####AAAAlAAAAAFAVoAAAAAAAAAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAK0AAAC8AAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAArgAAALwAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACvAAAAvAAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAALAAAAC8AAAAHQD#####AQAAfwABAAAABQAAAL0AAAC+AAAAvwAAAMAAAAC9AAAAJAD#####AQAAfwAAAAUAAADBAAAADQD#####AAAAk#####8AAAABAAxDTW9pbnNVbmFpcmUAAAABQFaAAAAAAAAAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACfAAAAwwAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKAAAADDAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAoQAAAMMAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACiAAAAwwAAAB0A#####wH#AAAAAQAAAAUAAADEAAAAxQAAAMYAAADHAAAAxAAAACQA#####wH#AAAAAAAFAAAAyAAAACYA#####wH#AAAAAQAAACwAAAAq#####wAAAAFAVoAAAAAAAAAAACcA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAE#Zs#fPkSCoAAAAMr#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAwAAAAMAAAAqAAAALAAAAMv#####AAAAAQAMQ0Jpc3NlY3RyaWNlAAAAAMwBAAAAABAAAAEAAQAAAMsAAAAsAAAAKgAAAA8AAAAAzAEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAM3#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQEAAADMAAZhbmdsZTEAAAAqAAAALAAAAMsAAAAiAQAAAMwB#wAAAEAIAAAAAAAAP#AAAAAAAAAAAADODwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAAz#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAQAAAMwB#wAAAAEAAAABQEJbiQkrj78AAAAqAAAALAAAAMsAAAAADQD#####AAAALAAAAAgAAADPAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMwAAANIAAAAQAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA0AAAA0gAAABAA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADUAAADSAAAAEAD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANgAAANIAAAAdAP####8BAH8AAAEAAAAFAAAA0wAAANQAAADVAAAA1gAAANMAAAAkAP####8BAH8AAAAABQAAANf#####AAAAAgAXQ01hY3JvQW5pbWF0aW9uUG9pbnRMaWUA#####wAAfwAB#####xBAjwQAAAAAAEBi8KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMQAAAQAAAB4AAABkAAAAPAAAAMsAAQAAAAApAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAMAAAADAAAArQAAAJQAAAC0AAAAKgAAAADaAQAAAAAQAAABAAEAAAC0AAAAlAAAAK0AAAAPAAAAANoBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAADbAAAAKwEAAADaAAZhbmdsZTMAAACtAAAAlAAAALQAAAAiAQAAANoBAH8AAEAIAAAAAAAAP#AAAAAAAAAAAADcDwAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAACwrAAAAAA3QAAACwBAAAA2gEAfwAAAQAAAAFAQluJCSuPvwAAAK0AAACUAAAAtAAAAAANAP####8AAACUAAAACAAAAN0AAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACtAAAA4AAAABAA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAK4AAADgAAAAEAD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAArwAAAOAAAAAQAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACwAAAA4AAAAB0A#####wEAAH8AAQAAAAUAAADhAAAA4gAAAOMAAADkAAAA4QAAACQA#####wEAAH8AAAAFAAAA5QAAAC0A#####wAAAH8B#####wpAj1wAAAAAAEBo8KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHdG91cm5lMwAAAQAAAB4AAABkAAAAPAAAALQAAQD#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wEAAH8AAQAAAJMAAACf#####wAAACgAAAABQFaAAAAAAAAAAAAnAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQABP+#fkVF76cAAAADoAAAAKQD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAADAAAAAwAAAJ8AAACTAAAA6QAAACoAAAAA6gEAAAAAEAAAAQABAAAA6QAAAJMAAACfAAAADwAAAADqAQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAA6wAAACsBAAAA6gAGYW5nbGUyAAAAnwAAAJMAAADpAAAAIgEAAADqAQAAfwBACAAAAAAAAD#wAAAAAAAAAAAA7A8AAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAsKwAAAAAO0AAAAsAQAAAOoBAAB#AAEAAAABQEJbiQkrj78AAACfAAAAkwAAAOkAAAAADQD#####AAAAkwAAAAgAAADtAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAnwAAAPAAAAAQAP####8BAAB#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACgAAAA8AAAABAA#####wEAAH8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAKEAAADwAAAAEAD#####AQAAfwAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAogAAAPAAAAAdAP####8B#wAAAAEAAAAFAAAA8QAAAPIAAADzAAAA9AAAAPEAAAAkAP####8B#wAAAAAABQAAAPUAAAAtAP####8A#wAAAf####8KQI7sAAAAAABAXGFHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB3RvdXJuZTIAAAEAAAAeAAAAZAAAADwAAADpAAEA#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8AAH8AAf####8KQIe0AAAAAABAcLhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTEAAAAAAAcAAACWAAAAlwAAAEkAAAC7AAAALAAAANcAAADY#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wAAfwAB#####wpAiCQAAAAAAEByuFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJYXBwYXJhaXQxAAAAAAAHAAAAlgAAAJcAAABJAAAAuwAAACwAAADXAAAA2AD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAfwAB#####wpAQ8AAAAAAAEApCj1wo9cMAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMQ29ycmVjdGlvbiBhAAAAAAAEAAAA+QAAANkAAAD4AAAApgAAAC8A#####wAAAH8B#####xBAj5QAAAAAAEBs8KPXCj1xAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHbWFzcXVlMwAAAAAABwAAAMEAAADCAAAAsQAAAOUAAACyAAAA5gAAAJQAAAAwAP####8AAAB#Af####8KQI+0AAAAAABAcLhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MwAAAAAABwAAAMEAAADCAAAAsQAAAOUAAACyAAAA5gAAAJQAAAAAMQD#####AAAAfwH#####CkBo8AAAAAAAQCkKPXCj1wwCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGMAAAAAAAMAAAD8AAAA5wAAAPsAAAAvAP####8A#wAAAf####8QQI+8AAAAAABAczhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTIAAAAAAAcAAADIAAAAyQAAAKMAAAD1AAAApAAAAPYAAACTAAAAMAD#####AAAAAAH#####CkCPxAAAAAAAQHZ4UeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAlhcHBhcmFpdDIAAAAAAAcAAADIAAAAyQAAAKMAAAD1AAAApAAAAPYAAACTAAAAADEA#####wD#AAAB#####wpAXaAAAAAAAEApCj1wo9cMAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAMQ29ycmVjdGlvbiBiAAAAAAAEAAAA#wAAAPcAAAD+AAAApgAAADEA#####wAAAAAB#####xBAcigAAAAAAEAeFHrhR634AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKQ29ycmVjdGlvbgAAAAAABAAAAKYAAAD6AAABAAAAAP3###############8="
			//premiÃ¨re question : centre A, rotation de 90Â° sens anti-horaire, une figure de tabfigA donne une figure de tabfigD, le point B donne le point D.
			indexA = randint(0, nx * ny - 1)
			numA = tabfigA[indexA][2]
			indexcentre1 = randint(0, nx * ny - 1, [indexA])
			xmil1 = tabfigA[indexcentre1][0]
			ymil1 = tabfigA[indexcentre1][1]
			point = image_point_par_transformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigD[j][0] && point[1] == tabfigD[j][1]) {
						trouver = true
						num1=tabfigD[j][2]
						xa=tabfigA[indexA][0]
						ya=tabfigA[indexA][1]
						break
					}
				}
				if (trouver == false) {
					indexA = randint(0, nx * ny - 1)
					numA = tabfigA[indexA][2]
					indexcentre1 = randint(0, nx * ny - 1, [indexA])
					xmil1 = tabfigA[indexcentre1][0]
					ymil1 = tabfigA[indexcentre1][1]
					point = image_point_par_transformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
				}
			}
			texte += num_alpha(0) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90Â° dans le sens inverse des aiguilles d'une montre ?<br>`, `green`)
			texte_corr = num_alpha(0) + texte_en_couleur_et_gras(` La figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90Â° dans le sens inverse des aiguilles d'une montre porte le numÃ©ro ${num1}.<br>`, `green`)

			//deuxiÃ¨me question : centre B, rotation 90Â° sens horaire, une figure de tabfigD donne une figure de tabfigC
			indexD = randint(0, nx * ny - 1)
			numD = tabfigD[indexD][2]
			indexcentre2 = randint(0, nx * ny - 1, [indexD])
			xmil2 = tabfigB[indexcentre2][0]
			ymil2 = tabfigB[indexcentre2][1]
			point = image_point_par_transformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == 4+tabfigC[j][0] && point[1] == tabfigC[j][1]) {
						trouver = true
						num2=tabfigC[j][2]
						xb=tabfigA[indexD][0]
						yb=tabfigA[indexD][1]
						break
					}
				}
				if (trouver == false) {
					indexD = randint(0, nx * ny - 1)
					numD = tabfigD[indexD][2]
					indexcentre2 = randint(0, nx * ny - 1, [indexD])
					xmil2 = tabfigB[indexcentre2][0]
					ymil2 = tabfigB[indexcentre2][1]
					point = image_point_par_transformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
				}
			}
			texte += num_alpha(1) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90Â° dans le sens des aiguilles d'une montre ?<br>`, `red`)
			texte_corr += num_alpha(1) + texte_en_couleur_et_gras(` La figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90Â° dans le sens des aiguilles d'une montre porte le numÃ©ro ${num2}.<br>`, `red`)

			//troisiÃ¨me question : centre B, rotation 90Â° sens anti-horaire, une figure de tabfigC donne une figure de tabfigD
			indexC = randint(0, nx * ny - 1)
			numC = tabfigC[indexC][2]
			indexcentre3 = randint(0, nx * ny - 1, [indexC])
			xmil3 = tabfigB[indexcentre3][0]
			ymil3 = tabfigB[indexcentre3][1]
			point = image_point_par_transformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
			trouver = false
			while (trouver == false) {
				for (let j = 0; j < nx * ny; j++) {
					if (point[0] == tabfigD[j][0] && point[1] == 4+tabfigD[j][1]) {
						trouver = true
						num3=tabfigD[j][2]
						xc=tabfigA[indexC][0]
						yc=tabfigA[indexC][1]
						break
					}
				}
				if (trouver == false) {
					indexC = randint(0, nx * ny - 1)
					numC = tabfigC[indexC][2]
					indexcentre3 = randint(0, nx * ny - 1, [indexC])
					xmil3 = tabfigB[indexcentre3][0]
					ymil3 = tabfigB[indexcentre3][1]
					point = image_point_par_transformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repÃ¨re est direct, donc le sens de rotation est inversÃ©...
				}
			}
			texte += num_alpha(2) + texte_en_couleur_et_gras(` Quel est le numÃ©ro de la figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90Â° dans le sens inverse des aiguilles d'une montre ?<br>`, `blue`)
			texte_corr += num_alpha(2) + texte_en_couleur_et_gras(` La figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90Â° dans le sens inverse des aiguilles d'une montre porte le numÃ©ro ${num3}.<br>`, `blue`)


			break

	}
	if (sortie_html) {

			this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xD", "${xD}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yD", "${yD}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "numa", "${numA}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "numb", "${numD}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "numc", "${numC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xc3", "${xmil3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yc3", "${ymil3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xc", "${xc}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yc", "${yc}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xc2", "${xmil2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yc2", "${ymil2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xb", "${xb}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yb", "${yb}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xc1", "${xmil1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yc1", "${ymil1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xa", "${xa}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "ya", "${ya}");	
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "Zoom", "${Zoom}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "Angle", "${Angle}");	
			mtg32App.rename("MG32svg${numero_de_l_exercice}", "c1", "${s0}");
			mtg32App.rename("MG32svg${numero_de_l_exercice}", "c2", "${s1}");
			mtg32App.rename("MG32svg${numero_de_l_exercice}", "c3", "${s2}");

			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xV", "${xV1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yV", "${yV1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xV2", "${xV2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yV2", "${yV2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xV3", "${xV3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yV3", "${yV3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xD", "${xD}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yD", "${yD}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "numa", "${numA}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "numb", "${numD}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "numc", "${numC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xc3", "${xmil3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yc3", "${ymil3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xc", "${xc}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yc", "${yc}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xc2", "${xmil2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yc2", "${ymil2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xb", "${xb}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yb", "${yb}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xc1", "${xmil1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yc1", "${ymil1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xa", "${xa}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ya", "${ya}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "Zoom", "${Zoom}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "Angle", "${Angle}");	
			mtg32App.rename("MG32svgcorr${numero_de_l_exercice}", "c1", "${s0}");
			mtg32App.rename("MG32svgcorr${numero_de_l_exercice}", "c2", "${s1}");
			mtg32App.rename("MG32svgcorr${numero_de_l_exercice}", "c3", "${s2}");

			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.executeMacro("MG32svgcorr${numero_de_l_exercice}","Correction")
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`
		
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			liste_de_question_to_contenu_sans_numero(this)

		}
		else {
			texte = ``
			texte_cor=``
			this.liste_questions.push(texte) // on envoie la question
			this.liste_corrections.push(texte_corr)
			liste_de_question_to_contenu_sans_numero(this);
		}
		


	}
	this.besoin_formulaire_numerique = ['Transformations',4, '1 : SymÃ©tries axiales\n 2 : SymÃ©tries centrales\n 3 : Translations\n 4 : Translations\n 5 : HomothÃ©ties\n'];
}
/**
 * Transformer un programme de calcul avec les 4 opÃ©rations dans un ordre alÃ©atoire en un seul calcul.
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5C11-2
 */
function Ecrire_une_expression_mathador(){
	'use strict'
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Traduire une succession d\'opÃ©rations par une expression"
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let expression,calculs_successifs,tirage,cible,solution_mathador,quidam
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
 			// traduire un calcul mathador
			solution_mathador=Trouver_solution_mathador(30,90)
			tirage=solution_mathador[0]
			cible=solution_mathador[1]
			calculs_successifs=solution_mathador[2]
			expression=solution_mathador[3]
			quidam=prenom()
			texte = `${quidam} a trouvÃ© une solution mathador pour le tirage suivant $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ et pour la cible $${cible}$, voici ses calculs :<br>`
			for (let j=0;j<4;j++) {
				texte+=`$${calculs_successifs[j]}$<br>`
			}
			texte+=`Ãcris cette succession d'opÃ©rations en une seule expression.`
			texte_corr = `L'expression correspondante au calcul de ${quidam} est<br>$${expression}$ ou $${solution_mathador[4]}$.`
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
}

/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5C11
 */
function Traduire_une_phrase_par_une_expression() {
	Ecrire_une_expression_numerique.call(this)
	this.version=1
	this.titre="Traduire une phrase par une expression"
	this.sup=false
	this.sup2=false
}
/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5L10-1
 */
function Traduire_une_phrase_par_une_expression_litterale() {
	Ecrire_une_expression_numerique.call(this)
	this.version=1
	this.titre="Traduire une phrase par une expression"
	this.sup=false
	this.sup2=false
	this.litteral=true
}
/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5C11-1
 */
function Traduire_une_expression_par_une_phrase() {
	Ecrire_une_expression_numerique.call(this)
	this.version=2
	this.titre="Traduire une expression par une phrase"
}
/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5L10-3
 */
function Traduire_une_expression_litterale_par_une_phrase() {
	Ecrire_une_expression_numerique.call(this)
	this.version=2
	this.titre="Traduire une expression par une phrase"
	this.litteral=true
}

/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5C12-1
 */
function Traduire_une_phrase_par_une_expression_et_calculer() {
	Ecrire_une_expression_numerique.call(this)
	this.version=3
	this.titre="Traduire une phrase par une expression et la calculer"
}
/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5L13-3
 */
function Traduire_une_phrase_par_une_expression_litterale_et_calculer() {
	Ecrire_une_expression_numerique.call(this)
	this.version=3
	this.titre="Traduire une phrase par une expression et la calculer"
	this.litteral=true
}
/**
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 5C12
 */
function Calculer_une_expression_numerique() {
	Ecrire_une_expression_numerique.call(this)
	this.version=4
	this.titre="Calculer une expression numÃ©rique en dÃ©taillant les calculs"
}
/**
 * @Auteur Jean-Claude Lhote
  * RÃ©fÃ©rence 5L13-1
*/
function Calculer_une_expression_litterale() {
	Ecrire_une_expression_numerique.call(this)
	this.version=4
	this.titre="Calculer une expression littÃ©rale pour les valeurs donnÃ©es en dÃ©taillant les calculs"
	this.litteral=true
}



/**
 * 5L12-1
 * Distinction entre la rÃ©duction d'un produit et la rÃ©duction d'une somme, on garde les mÃªme coeffs
 * @author SÃ©bastien Lozano 
 */
function Reduire_dinstinction_somme_produit() {
	'use strict'
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;
	if (this.beta) {
		this.nb_questions = 4;
	} else {
		this.nb_questions = 2;
	};	
	this.consigne = "";
	//this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.sup2=false; // si false alors utilisation de nombres entiers, si true alors utilisation de nombres Ã  un chiffre aprÃ¨s la virgule.
	this.titre = `RÃ©duire un produit et une somme Ã  partir des mÃªmes Ã©lÃ©ments algÃ©briques pour distinguer la diffÃ©rence`;	
	let type_de_questions_disponibles
	this.nouvelle_version = function(numero_de_l_exercice){
		//let type_de_questions_disponibles
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2,3]; 
		} else {
			type_de_questions_disponibles = [choice([0,2]),choice([1,3])];
		}
		
		//let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) 
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) 
		
		//if (this.sup2) decimal=10;
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			// deux fonctions pour gÃ©rer la chaine de sortie et supprimer le coeff 1 !
			function isUn(n) {
				if (n==1) {
					return true;
				} else {
					return false;
				};
			};
			function sliceUn(n) {
				if (n==1) {
					return ``;
				} else {
					return `${n}`;
				};
			};
			let variables = ['x','y','z','t'];
			let enonces = [];
			let n = randint(1,6);
			let p = randint(1,6);
			let inc = variables[randint(0,variables.length-1)];
			//===== 0 le produit puis la somme
			enonces.push({
				enonce:`Simplifier le plus possible le produit puis la somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$`,
				questtion:``,
				correction_produit:`Le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc} = ${n}\\times ${inc}\\times ${p}\\times ${inc} = ${n}\\times ${p}\\times ${inc}\\times ${inc}=$ `,
				correction_somme:`La somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\times ${inc}+${p}\\times ${inc} = (${n}+${p})\\times ${inc}=$ `
			});
			if (isUn(n*p)) {
				enonces[0].correction_produit += `${texte_en_couleur(`$${n*p}${inc}^2=${inc}^2$`)}`;
			} else {
				enonces[0].correction_produit += `${texte_en_couleur(` $${n*p}${inc}^2$`)}`;
			};
			if (isUn(n*p)) {
				enonces[0].correction_somme += `${texte_en_couleur(` $${n+p}${inc}=${inc}$`)}`;
			} else {
				enonces[0].correction_somme += `${texte_en_couleur(` $${n+p}${inc}$`)}`;
			};
			if(isUn(n) && isUn(p)) {
				enonces[0].correction_produit = `$${inc}\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;
			}
			//===== 1 le produit puis la somme
			enonces.push({
				enonce:`Simplifier le plus possible l'expression $${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc}$ puis l'expression $${sliceUn(n)}${inc}+${sliceUn(p)}${inc}$`,
				questtion:``,
				correction_produit:`$${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc} = ${n}\\times ${inc}\\times ${p}\\times ${inc} = ${n}\\times ${p}\\times ${inc}\\times ${inc}=$ `,
				correction_somme:`$${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\times ${inc}+${p}\\times ${inc} = (${n}+${p})\\times ${inc}=$ `
			});

			if (isUn(n*p)) {
				enonces[1].correction_produit += `${texte_en_couleur(`$${n*p}${inc}^2=${inc}^2$`)}`;
			} else {
				enonces[1].correction_produit += `${texte_en_couleur(` $${n*p}${inc}^2$`)}`;
			};
			if (isUn(n*p)) {
				enonces[1].correction_somme += `${texte_en_couleur(` $${n+p}${inc}=${inc}$`)}`;
			} else {
				enonces[1].correction_somme += `${texte_en_couleur(` $${n+p}${inc}$`)}`;
			};
			if(isUn(n) && isUn(p)) {
				enonces[1].correction_produit = `$${inc}\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;
			}
			//===== 2 la somme puis le produit 
			enonces.push({
				enonce:`Simplifier le plus possible la somme puis le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$`,
				questtion:``,
				correction_produit:`Le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc} = ${n}\\times ${inc}\\times ${p}\\times ${inc} = ${n}\\times ${p}\\times ${inc}\\times ${inc}=$ `,
				correction_somme:`La somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\times ${inc}+${p}\\times ${inc} = (${n}+${p})\\times ${inc}=$ `
			});
			if (isUn(n*p)) {
				enonces[2].correction_produit += `${texte_en_couleur(`$${n*p}${inc}^2=${inc}^2$`)}`;
			} else {
				enonces[2].correction_produit += `${texte_en_couleur(` $${n*p}${inc}^2$`)}`;
			};
			if (isUn(n*p)) {
				enonces[2].correction_somme += `${texte_en_couleur(` $${inc}$`)}`;
			} else {
				enonces[2].correction_somme += `${texte_en_couleur(` $${n+p}${inc}$`)}`;
			};
			if(isUn(n) && isUn(p)) {
				enonces[2].correction_produit = `$${inc}\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;
			}
			//===== 3 la somme puis le produit 
			enonces.push({
				enonce:`Simplifier le plus possible l'expression $${sliceUn(n)}${inc}+${sliceUn(p)}${inc}$ puis l'expression $${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc}$`,
				questtion:``,
				correction_produit:`$${sliceUn(n)}${inc}\\times ${sliceUn(p)}${inc} = ${n}\\times ${inc}\\times ${p}\\times ${inc} = ${n}\\times ${p}\\times ${inc}\\times ${inc}=$ `,
				correction_somme:`$${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\times ${inc}+${p}\\times ${inc} = (${n}+${p})\\times ${inc}=$ `
			});
			if (isUn(n*p)) {
				enonces[3].correction_produit += `${texte_en_couleur(`$${inc}^2$`)}`;
			} else {
				enonces[3].correction_produit += `${texte_en_couleur(` $${n*p}${inc}^2$`)}`;
			};
			if (isUn(n*p)) {
				enonces[3].correction_somme += `${texte_en_couleur(` $${inc}$`)}`;
			} else {
				enonces[3].correction_somme += `${texte_en_couleur(` $${n+p}${inc}$`)}`;
			};
			if(isUn(n) && isUn(p)) {
				enonces[3].correction_produit = `$${inc}\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;
			};

			switch (liste_type_de_questions[i]) {
				case 0:	// produit puis somme 				
					texte =`${enonces[0].enonce}.`;
					if (this.beta) {
						texte += `<br><br>=====CORRECTION======<br>`;
						texte += enonces[0].correction_produit;
						texte += `<br>`;
						texte += enonces[0].correction_somme;
						texte_corr = ``;	
					} else {
						texte_corr = enonces[0].correction_produit;
						texte_corr += `<br>`;
						texte_corr += enonces[0].correction_somme;
					};
					break;
				case 1:	// x puis +				
					texte =`${enonces[1].enonce}.`;
					if (this.beta) {
						texte += `<br><br>=====CORRECTION======<br>`;
						texte += enonces[1].correction_produit;
						texte += `<br>`;
						texte += enonces[1].correction_somme;
						texte_corr = ``;	
					} else {
						texte_corr = enonces[1].correction_produit;
						texte_corr += `<br>`;
						texte_corr += enonces[1].correction_somme;
					};
					break;
				case 2:	// somme puis produit				
					texte =`${enonces[2].enonce}.`;
					if (this.beta) {
						texte += `<br><br>=====CORRECTION======<br>`;
						texte += enonces[2].correction_somme;
						texte += `<br>`;
						texte += enonces[2].correction_produit;
						texte_corr = ``;	
					} else {
						texte_corr = enonces[2].correction_somme;
						texte_corr += `<br>`;
						texte_corr += enonces[2].correction_produit;
					};
					break;
				case 3:	// + puis x				
					texte =`${enonces[3].enonce}.`;
					if (this.beta) {
						texte += `<br><br>=====CORRECTION======<br>`;
						texte += enonces[3].correction_somme;
						texte += `<br>`;
						texte += enonces[3].correction_produit;
						texte_corr = ``;	
					} else {
						texte_corr = enonces[3].correction_somme;
						texte_corr += `<br>`;
						texte_corr += enonces[3].correction_produit;
					};
					break;

 		
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}	
	//this.besoin_formulaire2_case_a_cocher = ["Avec dÃ©cimaux.",false]

}


/**
 * RÃ©fÃ©rence 5L13-4
 * DÃ©terminer la derniÃ¨re opÃ©ration Ã  effectuer dans une expression littÃ©ral
 * @author SÃ©bastien Lozano fork Jean-Claude Lhote
 */
function Calculer_une_expression_litteraleBis() {
	'use strict'
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup2=false; // si false alors utilisation de nombres entiers, si true alors utilisation de nombres Ã  un chiffre aprÃ¨s la virgule.
	this.titre = `DÃ©terminer la derniÃ¨re opÃ©ration Ã  effectuer dans une expression littÃ©rale`;

	this.nouvelle_version = function(numero_de_l_exercice){
		let type_de_questions_disponibles
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		type_de_questions_disponibles = [5] //expressions complexes
		let expf,expn,expc,decimal=1,nbval,nb_operations,resultats,last_op
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) 
		if (this.sup2) decimal=10;
		for (let i = 0, texte, texte_corr,val1,val2, cpt=0; i < this.nb_questions && cpt<50; ) {
			nb_operations=parseInt(liste_type_de_questions[i])
			val1=randint(2,5)
			val2=randint(6,9)
			//resultats=Choisir_expression_litteraleBis(nb_operations,decimal,val1,val2)
			resultats=Choisir_expression_litterale(nb_operations,decimal,val1,val2)
			expf=resultats[0]
			expn=resultats[1]
			expc=resultats[2]
			nbval=resultats[3]
			last_op=resultats[4];

			switch (liste_type_de_questions[i]) {
				case 5:
					if (expn.indexOf('ou')>0) expn=expn.substring(0,expn.indexOf('ou')) // on supprime la deuxiÃ¨me expression fractionnaire
					this.consigne=`DÃ©terminer la derniÃ¨re opÃ©ration Ã  effectuer s'il fallait faire le calcul pour des valeurs donnÃ©es de $x$ et de $y$.`
					texte =`${expn}.`
					if (this.beta) {
						texte += `<br><br>=====CORRECTION======<br>`;
						texte += `Pour fixer les idÃ©es, choissions des valeurs pour $x$ et $y$, par exemple $x=${val1}$ et $y=${val2}$.`
						texte += `<br>Le calcul serait le suivant :<br> ${expc}.`;
						texte += `<br>Pour n'importe quelles valeurs de $x$ et de $y$ choisies, les Ã©tapes sont les mÃªmes, elles respectent les prioritÃ©s opÃ©ratoires.`
						texte += texte_en_couleur(`<br>La derniÃ¨re opÃ©ration dans ${expn} est donc une ${last_op}.`);
						texte_corr = ``;	
					} else {
						texte_corr = `Pour fixer les idÃ©es, choissions des valeurs pour $x$ et $y$, par exemple $x=${val1}$ et $y=${val2}$.`
						texte_corr += `<br>Le calcul serait le suivant : ${expc}.`;
						texte_corr += `<br>Pour n'importe quelles valeurs de $x$ et de $y$ choisies, les Ã©tapes sont les mÃªmes, elles respectent les prioritÃ©s opÃ©ratoires.`
						texte_corr += texte_en_couleur(`<br>La derniÃ¨re opÃ©ration dans ${expn} est donc une ${last_op}.`);
					};

					break;
 		
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}	
	this.besoin_formulaire2_case_a_cocher = ["Avec dÃ©cimaux.",false]

}

/**
 * Fork de la fonction de JC avec ajout de la derniÃ¨re opÃ©ration dans le tableau de sortie
 * @param {number} nb_operations 
 * @param {number} decimal 
 * @param {number} val1 
 * @param {number} val2 
 * @returns [expf,expl,expc,nbval,last_op]
 * @author Jean Claude Lhote forked by SÃ©bastien LOZANO
 * RÃ©fÃ©rence 5C11,5C11-1, 5C11-2, 5L13, 5L13-1, 5L13-2, 5L13-3
 */
//function Choisir_expression_litteraleBis(nb_operations,decimal,val1=1,val2=2) {
function Choisir_expression_litterale(nb_operations,decimal,val1=1,val2=2) {
	let expf,expl,expc,arrondir=Math.log10(decimal)
	let a=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)
	let b=arrondi(randint(2*decimal,10*decimal,[a*decimal])/decimal,arrondir)
	let c=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)
	let d=arrondi(randint(2*decimal,10*decimal,[c*decimal])/decimal,arrondir)
	let e=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)  
	let f=arrondi(randint(2*decimal,10*decimal,[e*decimal])/decimal,arrondir)
    let souscas
    let l1 = 'x'
	let l2 = 'y'
	let nbval
	switch (nb_operations){
		case 1 : // expressions de base (1 opÃ©ration)
			nbval=1
			souscas=randint(0,3)
			switch (souscas) {
				case 0 : //somme de deux nombres
					expf=`La somme de ${nombre_avec_espace(a)} et ${l1}`
					expl=`$${tex_nombre(a)}+${l1}$`
					expc=`$${tex_nombre(a)}+${l1}=${tex_nombre(a)}+${tex_nombre(val1)}=${tex_nombre(a+val1)}$`
					last_op = 'addition';
					break
				case 1 : // diffÃ©rence de deux nombres
					if (val1>b) {
					expf=`La diffÃ©rence de ${l1} et ${nombre_avec_espace(b)}`
					expl=`$${l1}-${tex_nombre(b)}$`
					expc=`$${l1}-${tex_nombre(b)}=${tex_nombre(val1)}-${tex_nombre(b)}=${tex_nombre(val1-b)}$`
					}
					else {
					expf=`La diffÃ©rence de ${nombre_avec_espace(b)} et ${l1}`
					expl=`$${tex_nombre(b)}-${l1}$`
					expc=`$${tex_nombre(b)}-${l1}=${tex_nombre(b)}-${tex_nombre(val1)}=${tex_nombre(b-val1)}$`
					}
					last_op = 'soustraction';
					break
				case 2 : // produit de deux nombres
					expf=`Le produit de ${l1} par ${nombre_avec_espace(b)}`
					expl=`$${l1}\\times ${tex_nombre(b)} = ${tex_nombrec(b)}${l1}$`
					expc=`$${tex_nombrec(b)}${l1} = ${tex_nombrec(b)}\\times ${val1}=${tex_nombre(b*val1)}$`
					last_op = 'multiplication';
					break
				case 3 : // quotient de deux nombres

					expf=`Le quotient de ${l1} par ${nombre_avec_espace(b)}`
					expl=`$${l1}\\div ${tex_nombre(b)}$`
					if (estentier(val1/b*1000))	expc=`$${l1}\\div ${tex_nombre(b)} = ${val1}\\div ${tex_nombre(b)} = ${tex_nombrec(val1/b)}$`
					else expc=`$${l1}\\div ${tex_nombre(b)} = ${val1}\\div ${tex_nombre(b)}=${tex_fraction(val1,tex_nombre(b))}${simplification_de_fraction_avec_etapes(val1,tex_nombre(b))}$`
					last_op = 'division';
					break
			}
			break
		case 2 : // expressions de niveau 1 (2 opÃ©rations)
			souscas=randint(0,5)
			nbval=1
			switch (souscas) {
				case 0 : //a(b+c)
					expf=`Le produit de ${nombre_avec_espace(a)} par la somme de ${nombre_avec_espace(b)} et ${l1}`
					expl=`$${tex_nombre(a)}(${tex_nombre(b)}+${l1})$`
					expc=`$${tex_nombre(a)}(${tex_nombre(b)}+${l1})=${tex_nombre(a)}(${tex_nombre(b)}+${val1})=${tex_nombre(a)}\\times ${tex_nombre(b+val1)} = ${tex_nombre(a*(b+val1))}$`
					last_op = 'multiplication';
					break
				case 1 : // a(b-c)
					if (b<=c) b=calcul(b+c) // b-c positif
					expf=`Le produit de ${l1} par la diffÃ©rence de ${b} et ${nombre_avec_espace(c)}`
					expl=`$${l1}(${tex_nombre(b)}-${tex_nombre(c)})=${l1}\\times ${tex_nombrec(b-c)}=${tex_nombrec(b-c)}${l1}$`
					expc=`$${l1}(${tex_nombre(b)}-${tex_nombre(c)}) = ${tex_nombre(val1)}(${tex_nombre(b)}-${tex_nombre(c)})=${tex_nombre(val1)}\\times ${tex_nombrec(b-c)}=${tex_nombrec(val1*(b-c))}$`
					last_op = 'multiplication';
					break
				case 2 : // a/(b+c)
					a=calcul(a*(val1+c)) // on s'assure que le quotient tombe juste...
					expf=`Le quotient de ${nombre_avec_espace(a)} par la somme de ${l1} et ${nombre_avec_espace(c)}`
					expl=`$${tex_nombre(a)}\\div (${l1}+${tex_nombre(c)})$ ou $\\dfrac{${tex_nombre(a)}}{${l1}+${tex_nombre(c)}}$`
					expc=`$${tex_nombre(a)}\\div (${l1}+${tex_nombre(c)})=${tex_nombre(a)}\\div (${tex_nombre(val1)}+${tex_nombre(c)}) = ${tex_nombre(a)}\\div ${tex_nombrec(val1+c)}=${tex_nombrec(a/(val1+c))}$`
					last_op = 'division';
					break
				case 3 : // a/(b-c)
					if (b<=val1) b=calcul(b+val1) // b-c positif
 					a=calcul(a*(b-val1)) // on s'assure que le quotient tombe juste
					expf=`Le quotient de ${nombre_avec_espace(a)} par la diffÃ©rence de ${nombre_avec_espace(b)} et ${l1}`
					expl=`$${tex_nombre(a)}\\div (${b}-${l1})$ ou $\\dfrac{${tex_nombre(a)}}{${tex_nombre(b)}-${l1}}$`
					expc=`$${tex_nombre(a)}\\div (${b}-${l1})=${tex_nombre(a)}\\div (${b}-${val1})=${tex_nombre(a)}\\div ${tex_nombrec(b-val1)}=${tex_nombrec(a/(b-val1))}$`
					last_op = 'division';
					break			
				case 4 : // (a+b)/c
					a=calcul(a*val1)
					b=calcul(b*val1) // on s'assure que le quotient tombe juste
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par ${l1}`
					expl=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div  ${l1}$ ou $\\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${l1}}$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div  ${l1}=(${tex_nombre(a)}+${tex_nombre(b)})\\div ${val1}= ${tex_nombrec(a+b)}\\div ${val1}=${tex_nombrec((a+b)/val1)}$`
					last_op = 'division';
					break
				case 5 : // (a-b)/c
					a=calcul(a*c)+val1 // on s'assure que le quotient tombe juste et que a-b>0
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l1} par ${nombre_avec_espace(c)}`
					expl=`$(${tex_nombre(a)}-${l1})\\div ${tex_nombre(c)}$ ou $\\dfrac{${tex_nombre(a)}-${l1}}{${tex_nombre(c)}}$`
					expc=`$(${tex_nombre(a)}-${l1})\\div ${tex_nombre(c)}=(${tex_nombre(a)}-${val1})\\div ${tex_nombre(c)}= ${tex_nombrec(a-val1)}\\div ${tex_nombre(c)}=${tex_nombrec((a-val1)/c)}$`
					last_op = 'division';
					break			
							
			}
			break
		case 3 : // expressions de niveau 2 (3 opÃ©rations)
			souscas=randint(0,13)
			nbval=2
			switch (souscas) {
				case 0 : // (a+b)(c+d)
					a=val1
					d=val2
					expf=`Le produit de la somme de ${l1} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${l1}+${tex_nombre(b)})(${tex_nombre(c)}+${l2})$`
					expc=`$(${l1}+${tex_nombre(b)})(${tex_nombre(c)}+${l2})=(${a}+${tex_nombre(b)})(${tex_nombre(c)}+${d})= ${tex_nombrec(a+b)}\\times ${tex_nombrec(c+d)} = ${tex_nombrec((a+b)*(c+d))}$`
					last_op = 'multiplication';
					break
				case 1 : // (a+b)(c-d)
					d=val2
					b=val1
					if (c<=d) c=calcul(c+d)
					expf=`Le produit de la somme de ${nombre_avec_espace(a)} et ${l1} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${tex_nombre(a)}+${l1})(${tex_nombre(c)}-${l2})$`
					expc=`$(${tex_nombre(a)}+${l1})(${tex_nombre(c)}-${l2})=(${tex_nombre(a)}+${b})(${tex_nombre(c)}-${d})= ${tex_nombrec(a+b)}\\times ${tex_nombrec(c-d)} = ${tex_nombrec((a+b)*(c-d))}$`
					last_op = 'multiplication';
					break
				case 2 : // (a-b)(c+d)
				b=val2
				c=val1
					if (a<=b) a=calcul(a+b)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l2} par la somme de ${l1} et ${nombre_avec_espace(d)}`
					expl=`$(${tex_nombre(a)}-${l2})(${l1}+${tex_nombre(d)})$`
					expc=`$(${tex_nombre(a)}-${l2})(${l1}+${tex_nombre(d)})=(${tex_nombre(a)}-${b})(${c}+${tex_nombre(d)})=${tex_nombrec(a-b)}\\times ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)*(c+d))}$`
					last_op = 'multiplication';
					break
				case 3 : // (a-b)(c-d)
					b=val1
					d=val2
					if (a<=b) a=calcul(a+b)
					if (c<=d) c=calcul(c+d)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l1} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${tex_nombre(a)}-${l1})(${tex_nombre(c)}-${l2})$`
					expc=`$(${tex_nombre(a)}-${l1})(${tex_nombre(c)}-${l2})=(${tex_nombre(a)}-${b})(${tex_nombre(c)}-${d})= ${tex_nombrec(a-b)}\\times ${tex_nombrec(c-d)} = ${tex_nombrec((a-b)*(c-d))}$`
					last_op = 'multiplication';
					break			
				case 4 : // (a+b)/(c+d)
					d=val2
					b=val1
					if (!estentier((a+b)/(c+d))) a=calcul(a*(c+d)-b)
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${l1} par la somme de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}+${l2})$ ou $\\dfrac{${tex_nombre(a)}+${l1}}{${tex_nombre(c)}+${l2}}$`
					expc=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}+${l2})=(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\div ${tex_nombrec(c+d)} = ${tex_nombrec((a+b)/(c+d))}$`
					last_op = 'division';
					break
				case 5 : // (a-b)/(c+d)
					d=val1
					b=val2
					if (a-b<=0||!estentier((a-b)/(c+d))) a=calcul(a*(c+d)+b)
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l2} par la somme de ${nombre_avec_espace(c)} et ${l1}`
					expl=`$(${tex_nombre(a)}-${l2})\\div (${tex_nombre(c)}+${l1})$ ou $\\dfrac{${tex_nombre(a)}-${l2}}{${tex_nombre(c)}+${l1}}$`
					expc=`$(${tex_nombre(a)}-${l2})\\div (${tex_nombre(c)}+${l1})=(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)/(c+d))}$`
					last_op = 'division';
					break			
				case 6 : // (a+b)/(c-d)
					b=val1
					d=val2
					if (c<=d) c=calcul(c+d)
					if (!estentier((a+b)/(c-d))) 
						if (a*(c-d)>b ) a=calcul(a*(c-d)-b)
						else a=calcul((a+b)*(c-d)-b)
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${l1} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}-${l2})$ ou $\\dfrac{${tex_nombre(a)}+${l1}}{${tex_nombre(c)}-${l2}}$`
					expc=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}-${l2})=(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\div ${tex_nombrec(c-d)} = ${tex_nombrec((a+b)/(c-d))}$`
					last_op = 'division';
					break
				case 7 : // (a-b)/(c-d)
					d=val2;
					b=val1;
					if (c<=d) c=calcul(c+d)
					if (a<=b) a=calcul(a+b)
					if (!estentier((a-b)/(c-d))) a=calcul(a*(c-d)+b)
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l1} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$(${tex_nombre(a)}-${l1})\\div (${tex_nombre(c)}-${l2})$ ou $\\dfrac{${tex_nombre(a)}-${l1}}{${tex_nombre(c)}-${l2}}$`
					expc=`$(${tex_nombre(a)}-${l1})\\div (${tex_nombre(c)}-${l2})=(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div ${tex_nombrec(c-d)} = ${tex_nombrec((a-b)/(c-d))}$`
					last_op = 'division';
					break			
				case 8 : // ab+cd
					b=val1;
					d=val2;
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${l1} et du produit de ${nombre_avec_espace(c)} par ${l2}`
					expl=`$${tex_nombre(a)}${l1}+${tex_nombre(c)}${l2}$`
					expc=`$${tex_nombre(a)}${l1}+${tex_nombre(c)}${l2}=${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)} = ${tex_nombrec(a*b)}+${tex_nombrec(c*d)} = ${tex_nombrec(a*b+c*d)}$`
					last_op = 'addition';
					break
				case 9 : // ab-cd
				d=val2
				b=val1
					if (a*b<d*c) a=calcul(a+c)
					while (a*b<d*c) a=calcul(a+c)
					expf=`La diffÃ©rence du produit de ${nombre_avec_espace(a)} par ${l1} et du produit de ${nombre_avec_espace(c)} par ${l2}`
					expl=`$${tex_nombre(a)}${l1}-${tex_nombre(c)}${l2}$`
					expc=`$${tex_nombre(a)}${l1}-${tex_nombre(c)}${l2}=${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\times ${tex_nombre(d)} = ${tex_nombrec(a*b)}-${tex_nombrec(c*d)} = ${tex_nombrec(a*b-c*d)}$`
					last_op = 'soustraction';
					break			
				case 10 : // ab+c/d
					d=val1
					b=val2
					if (!estentier(c/d)) c=calcul(c*d)
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${l2} et du quotient de ${nombre_avec_espace(c)} par ${l1}`
					expl=`$${tex_nombre(a)}${l2}+${tex_nombre(c)}\\div ${l1}$ ou $${tex_nombre(a)}${l2}+\\dfrac{${tex_nombre(c)}}{${l1}}$`
					expc=`$${tex_nombre(a)}${l2}+${tex_nombre(c)}\\div ${l1}=${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a*b)}+${tex_nombrec(c/d)} = ${tex_nombrec(a*b+c/d)}$`
					last_op = 'addition';
					break
				case 11 : // ab-c/d
					d=val2
					b=val1
					if (!estentier(c/d)) c=calcul(c*d)
					while (a*b<c/d) a=calcul(a*c)
					expf=`La diffÃ©rence du produit de ${nombre_avec_espace(a)} par ${l1} et du quotient de ${nombre_avec_espace(c)} par ${l2}`
					expl=`$${tex_nombre(a)}${l1}-${tex_nombre(c)}\\div ${l2}$ ou $${tex_nombre(a)}\\times ${l1}-\\dfrac{${tex_nombre(c)}}{${l2}}$`
					expc=`${tex_nombre(a)}${l1}-${tex_nombre(c)}\\div ${l2}=${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a*b)}-${tex_nombrec(c/d)} = ${tex_nombrec(a*b-c/d)}$`
					last_op = 'soustraction';
					break	
				case 12 : // a/b+c/d
					d=val1
					b=val2
					if(!estentier(a/b)) a=calcul(a*b)
					if (!estentier(c/d)) c=calcul(c*d)
					expf=`La somme du quotient de ${nombre_avec_espace(a)} par ${l2} et du quotient de ${nombre_avec_espace(c)} par ${l1}`
					expl=`$${tex_nombre(a)}\\div ${l2}+${tex_nombre(c)}\\div ${l1}$ ou $\\dfrac{${tex_nombre(a)}}{${l2}}+\\dfrac{${tex_nombre(c)}}{${l1}}$`
					expc=`$${tex_nombre(a)}\\div ${l2}+${tex_nombre(c)}\\div ${l1}=${tex_nombre(a)}\\div ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a/b)}+${tex_nombrec(c/d)} = ${tex_nombrec(a/b+c/d)}$`
					break	
				case 13 : // a/b-c/d
					d=val2
					b=val1		
					if(!estentier(a/b)) a=calcul(a*b)
					if (!estentier(c/d)) c=calcul(c*d)
					while (a/b<c/d) a=calcul(a*c)
					expf=`La diffÃ©rence du quotient de ${nombre_avec_espace(a)} par ${l1} et du quotient de ${nombre_avec_espace(c)} par ${l2}`
					expl=`$${tex_nombre(a)}\\div ${l1}-${tex_nombre(c)}\\div ${l2}$ ou $\\dfrac{${tex_nombre(a)}}{${l1}}-\\dfrac{${tex_nombre(c)}}{${l2}}$`
					expc=`$${tex_nombre(a)}\\div ${l1}-${tex_nombre(c)}\\div ${l2}=${tex_nombre(a)}\\div ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a/b)}-${tex_nombrec(c/d)} = ${tex_nombrec(a/b-c/d)}$`
					last_op = 'soustraction';
					break	
			}
			break ;
		case 5 : // expressions complexes
		souscas=randint(0,5)
		nbval=2
			switch (souscas) {
				case 0 : // 2(a+bc)
					a=val1
					c=val2
					expf=`Le double de la somme de ${l1} et du produit de ${nombre_avec_espace(b)} par ${l2}`
					expl=`$2(${l1}+${tex_nombre(b)}${l2})$`
					expc=`$2(${l1}+${tex_nombre(b)}${l2})=2(${tex_nombre(a)}+${tex_nombre(b)}\\times ${tex_nombre(c)}) = 2(${tex_nombre(a)}+${tex_nombrec(b*c)}) = 2\\times ${tex_nombrec(a+b*c)}=${tex_nombrec(2*(a+b*c))}$`
					last_op = 'multiplication';
					break
				case 1 : // 3(a+b)/c
					b=val1
					c=val2
					if (!estentier(3*(a+b)/c)) a=calcul(a*c-b)
					while (a<b) a=calcul(a*c-b)
					expf=`Le triple du quotient de la somme de ${nombre_avec_espace(a)} et ${l1} par ${l2}`
					expl=`$3(${tex_nombre(a)}+${l1})\\div ${l2}$ ou $3\\times \\dfrac{${tex_nombre(a)}+${l1}}{${l2}}$`
					expc=`$3(${tex_nombre(a)}+${l1})\\div ${l2}=3(${tex_nombre(a)}+${tex_nombre(b)})\\div ${tex_nombre(c)} = 3\\times  ${tex_nombre(a+b)}\\div ${tex_nombre(c)} = ${tex_nombrec(3*(a+b))}\\div ${tex_nombre(c)} = ${tex_nombrec(3*(a+b)/c)}$`
					last_op = 'division';
					break
				case 2 : // (a-b)/3
					nbval=1
					b=val1
					if (!estentier((a-b)/3)) a=calcul(3*a+b)
					expf=`Le tiers de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l1}`
					expl=`$(${tex_nombre(a)}-${l1})\\div  3$ ou $\\dfrac{${tex_nombre(a)}-${l1}}{3}$`
					expc=`$(${tex_nombre(a)}-${l1})\\div  3=(${tex_nombre(a)}-${tex_nombre(b)})\\div  3 = ${tex_nombrec(a-b)}\\div  3 = ${tex_nombrec((a-b)/3)}$`
					last_op = 'division';
					break
				case 3 : // (a-b)/3*2(c+d)
					c=val1
					b=val2
					if (a<=b) a=calcul(a+b)
					if (!estentier((a-b)/3)) a=calcul(3*a+b)
					expf=`Le produit du tiers de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l2} par le double de la somme de ${l1} et ${nombre_avec_espace(d)}`
					expl=`$\\left((${tex_nombre(a)}-${l2})\\div  3\\right)\\times  2(${l1}+${tex_nombre(d)})$`
					expc=`$\\left((${tex_nombre(a)}-${l2})\\div  3\\right)\\times  2(${l1}+${tex_nombre(d)})=\\left((${tex_nombre(a)}-${tex_nombre(b)})\\div  3\\right)\\times  2(${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div  3 \\times  2 \\times ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)/3)} \\times  2 \\times  ${tex_nombrec(c+d)} =  ${tex_nombrec(2*(a-b)/3)} \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(2*(c+d)*(a-b)/3)}$`
					last_op = 'multiplication';
					break			
				case 4 : // 3(a+b)-2(c+d)
					b=val1
					c=val2
					if (3*(a+b)<2*(c+d)) a=calcul(a+c+d)
					expf=`La diffÃ©rence du triple de la somme de ${nombre_avec_espace(a)} et ${l1} et du double de la somme de ${l2} et ${nombre_avec_espace(d)}`
					expl=`$3(${tex_nombre(a)}+${l1})-2(${l2}+${tex_nombre(d)})$`
					expc=`$3(${tex_nombre(a)}+${l1})-2(${l2}+${tex_nombre(d)})=3(${tex_nombre(a)}+${tex_nombre(b)})-2(${tex_nombre(c)}+${tex_nombre(d)}) = 3 \\times  ${tex_nombrec(a+b)} - 2 \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(3*(a+b))} - ${tex_nombrec(2*(c+d))} = ${tex_nombrec(3*(a+b)-2*(c+d))}$`
					last_op = 'soustraction';
					break
				case 5 : // 2(a-b)+3(c+d)
					d=val2
					b=val1
					if (a<=b) a=calcul(a+b)
					expf=`La somme du double de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l1} et du triple de la somme de ${nombre_avec_espace(c)} et ${l2}`
					expl=`$2(${tex_nombre(a)}-${l1})+3(${tex_nombre(c)}+${l2})$`
					expc=`$2(${tex_nombre(a)}-${l1})+3(${tex_nombre(c)}+${l2})=2(${tex_nombre(a)}-${tex_nombre(b)})+3(${tex_nombre(c)}+${tex_nombre(d)}) = 2 \\times  ${tex_nombrec(a-b)} + 3 \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(2*(a-b))} + ${tex_nombrec(3*(c+d))} = ${tex_nombrec(2*(a-b)+3*(c+d))}$`
					last_op = 'addition';
					break	
			}		
			break ;
		case 4 : // 4 opÃ©rations
		souscas=randint(1,3)
		nbval=2
			switch (souscas) {
				case 1 : // (a+b)/(c(d+e))
					b=val1
					e=val2
					if (!estentier((a+b)/(c*(d+e)))) a=calcul(a*c*(d+e)-b)
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${l1} par le produit de ${nombre_avec_espace(c)} par la somme de ${nombre_avec_espace(d)} et ${l2}`
					expl=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}(${tex_nombre(d)}+${l2}))$ ou $\\dfrac{${tex_nombre(a)}+${l1}}{${tex_nombre(c)}(${tex_nombre(d)}+${l2})}$`
					expc=`$(${tex_nombre(a)}+${l1})\\div (${tex_nombre(c)}(${tex_nombre(d)}+${l2}))=(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}(${tex_nombre(d)}+${tex_nombre(e)})) = ${tex_nombrec(a+b)} \\div  (${tex_nombre(c)} \\times  ${tex_nombrec(d+e)}) = ${tex_nombrec(a+b)} \\div  ${tex_nombre(c*(d+e))} = ${tex_nombrec((a+b)/(c*(d+e)))}$`
					last_op = 'division';
					break
				case 2 : //(a-b)*(c+de)
					e=val1
					b=val2
					if (a<=b) a=calcul(a+b)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${l2} par la somme de ${nombre_avec_espace(c)} et du produit de ${nombre_avec_espace(d)} par ${l1}`
					expl=`$(${tex_nombre(a)}-${l2})(${tex_nombre(c)}+${tex_nombre(d)}${l1})$`
					expc=`$(${tex_nombre(a)}-${l2})(${tex_nombre(c)}+${tex_nombre(d)}${l1})=(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)}\\times ${tex_nombre(e)}) = ${tex_nombrec(a-b)}(${tex_nombre(c)}+${tex_nombrec(d*e)}) = ${tex_nombrec(a-b)} \\times  ${tex_nombre(c+d*e)} = ${tex_nombrec((a-b)*(c+d*e))}$`
					last_op = 'multiplication';
					break
				case 3 : // ab+cd/e
					d=val2
					b=val1
					if (!estentier(c*d/e)) c=calcul(c*e)
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${l1} et du quotient du produit de ${nombre_avec_espace(c)} et ${l2} par ${nombre_avec_espace(e)}`
					expl=`$${tex_nombre(a)}${l1}+${tex_nombre(c)}${l2}\\div ${tex_nombre(e)}$ ou $${tex_nombre(a)}${l1}+\\dfrac{${tex_nombre(c)}${l2}}{${tex_nombre(e)}}$`
					expc=`$${tex_nombre(a)}${l1}+${tex_nombre(c)}${l2}\\div ${tex_nombre(e)}=${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)}\\div ${tex_nombre(e)} = ${tex_nombrec(a*b)} + ${tex_nombrec(c*d)} \\div  ${tex_nombre(e)} = ${tex_nombrec(a*b)} + ${tex_nombrec(c*d/e)} = ${tex_nombrec(a*b+c*d/e)}$`
					last_op = 'addition';
					break
			}
			break
		}
		let pos1=0
		for (;pos1<expc.length;pos1++)
			if (expc[pos1]=='=') break
		let pos2=pos1+1
		for (;pos2<expc.length;pos2++)
			if (expc[pos2]=='=') break
		let expn='$'+expc.substring(pos1+1,pos2-1)+'$'
		return [expf,expl,expc,nbval,last_op,expn]
}


/**
* Fonction noyau pour 7 fonctions qui utilisent les mÃªmes variables et la fonction Choisir_expression_numerique
* @Auteur Jean-Claude Lhote
* RÃ©fÃ©rence 5C11,5C11-1, 5C11-2, 5C12, 5C12-1, 5L13, 5L13-1, 5L13-2, 5L13-3
*/
function Ecrire_une_expression_numerique(){
	'use strict'
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup2=false; // si false alors utilisation de nombres entiers, si true alors utilisation de nombres Ã  un chiffre aprÃ¨s la virgule.
	this.sup=false
	this.version=1 // 1 pour ecrire une expression, 2 pour Ã©crire la phrase, 3 pour Ã©crire l'expression et la calculer, 4 pour calculer une expression numÃ©rique

	this.nouvelle_version = function(numero_de_l_exercice){
		let type_de_questions_disponibles
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		if (!this.sup) { // Si aucune liste n'est saisie
		type_de_questions_disponibles = [1,2,3,4,5]
		}
		else {
			if (typeof(this.sup)=='number'){ // Si c'est un nombre c'est qu'il y a qu'une expression
			type_de_questions_disponibles[0] = this.sup
				this.nb_questions=1
			} else {
				type_de_questions_disponibles = this.sup.split("-");// Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
				this.nb_questions=type_de_questions_disponibles.length
			}	
		}
		let expf,expn,expc,decimal=1,nbval,nb_operations,resultats
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) 
		if (this.sup2) decimal=10;
		for (let i = 0, texte, texte_corr,val1,val2, cpt=0; i < this.nb_questions && cpt<50; ) {
			nb_operations=parseInt(liste_type_de_questions[i])
			val1=randint(2,5)
			val2=randint(6,9)
			if (this.version>2&&nb_operations==1&&!this.litteral) nb_operations++
			if (!this.litteral)
				resultats=Choisir_expression_numerique(nb_operations,decimal)
			else 
				resultats=Choisir_expression_litterale(nb_operations,decimal,val1,val2)
			expf=resultats[0]
			expn=resultats[1]
			expc=resultats[2]
			nbval=resultats[3]
			switch (this.version) {
				case 1:
					this.consigne=`Traduire la phrase par un calcul (il nâest pas demandÃ© dâeffectuer ce calcul).`
					texte= `${expf}.`
					texte_corr=`${expf} s'Ã©crit<br>${expn}.`
					break
				case 2:
					if (expn.indexOf('ou')>0) expn=expn.substring(0,expn.indexOf('ou')) // on supprime la deuxiÃ¨me expression fractionnaire
					this.consigne=`Traduire le calcul par une phrase en franÃ§ais.`
					texte=`${expn}`
					expf=`l`+expf.substring(1);
					texte_corr=`${expn} est ${expf}.`
					break
				case 3:
					this.consigne=`Traduire la phrase par un calcul et effectuer ce calcul en respectant les prioritÃ©s opÃ©ratoires.`
					if (!this.litteral) texte=`${expf}.`
					else if (nbval==2) texte=`${expf} puis calculer pour $x=${val1}$ et $y=${val2}$.` //nbval contient le nombre de valeurs en cas de calcul littÃ©ral
					else texte =`${expf} puis calculer pour $x=${val1}$.`
					texte_corr=`${expf} s'Ã©crit ${expn}.<br>`
					if (!this.litteral) texte_corr=`${expc}.`
					else if (nbval==2) texte_corr+=`Pour $x=${val1}$ et $y=${val2}$ :<br> ${expc}.`
					else texte_corr +=`Pour $x=${val1}$ :<br>${expc}.`
					break
				case 4:
					if (expn.indexOf('ou')>0) expn=expn.substring(0,expn.indexOf('ou')) // on supprime la deuxiÃ¨me expression fractionnaire
					this.consigne=`Calculer en respectant les prioritÃ©s opÃ©ratoires.`
					if (!this.litteral) texte=`${expn}.`
					else if (nbval==2) texte=`Pour $x=${val1}$ et $y=${val2}$, calculer ${expn}.`
					else texte =`Pour $x=${val1}$, calculer ${expn}.`
					if (!this.litteral) texte_corr=`${expc}.`
					else if (nbval==2) texte_corr=`Pour $x=${val1}$ et $y=${val2}$ :<br>${expc}.`
					else texte_corr=`Pour $x=${val1}$ :<br>${expc}.`
					break
 		
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_texte = ['Choix des expressions','Nombres sÃ©parÃ©s par des tirets\n 1 : Expressions de base Ã  une opÃ©ration\n2 : Expressions Ã  deux opÃ©rations\n3 : Expressions Ã  3 opÃ©rations\n4 : Expressions Ã  4 opÃ©rations\n5 : Expressions complexes'] // Texte, tooltip
	this.besoin_formulaire2_case_a_cocher = ["Avec dÃ©cimaux.",false]

}

/**
 * Chosis alÃ©atoirement une expressions numÃ©rique parmi de nombreuses variantes.
 * @param {number} nb_operations fixe la complexitÃ© de l'expression Ã  retourner
 * @param {number} decimal 1 si on veut des entiers, 10, 100, 1000 selon le nombre de chiffres aprÃ¨s la virgule qu'on veut
 * retourne
 * * l'expression en franÃ§ais commenÃ§ant par une majuscule sans point final
 * * l'expression en mode maths LaTex
 * * Le dÃ©taillÃ© du calcul en mode maths LaTex 
 * @Auteur Jean-Claude Lhote
 * Fonction utilisÃ©e dans plusieurs exercices.
 */
function Choisir_expression_numerique(nb_operations,decimal) {
	let expf,expn,expc,arrondir=Math.log10(decimal)
	let a=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)
	let b=arrondi(randint(2*decimal,10*decimal,[a*decimal])/decimal,arrondir)
	let c=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)
	let d=arrondi(randint(2*decimal,10*decimal,[c*decimal])/decimal,arrondir)
	let e=arrondi(randint(2*decimal,10*decimal)/decimal,arrondir)  
	let f=arrondi(randint(2*decimal,10*decimal,[e*decimal])/decimal,arrondir)
	let souscas
	switch (nb_operations){
		case 1 : // expressions de base (1 opÃ©ration)
			souscas=randint(0,3)
			switch (souscas) {
				case 0 : //somme de deux nombres
					expf=`La somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)}`
					expn=`$${tex_nombre(a)}+${tex_nombre(b)}$`
					expc=`$${tex_nombre(a)}+${tex_nombre(b)} = ${tex_nombre(a+b)}$`
					break
				case 1 : // diffÃ©rence de deux nombres
					if(a<b) a=a+b
					expf=`La diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)}`
					expn=`$${tex_nombre(a)}-${tex_nombre(b)}$`
					expc=`$${tex_nombre(a)}-${tex_nombre(b)} = ${tex_nombre(a-b)}$`
					break
				case 2 : // produit de deux nombres
					expf=`Le produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)} = ${tex_nombrec(a*b)}$`
					break
				case 3 : // quotient de deux nombres
					a=calcul(Math.round(a)*b)
					expf=`Le quotient de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)}`
					expn=`$${tex_nombre(a)}\\div ${tex_nombre(b)}$`
					expc=`$${tex_nombre(a)}\\div ${tex_nombre(b)} = ${tex_nombrec(a)}$`
					break
			}
			break
		case 2 : // expressions de niveau 1 (2 opÃ©rations)
			souscas=randint(0,5)
			switch (souscas) {
				case 0 : //a(b+c)
					expf=`Le produit de ${nombre_avec_espace(a)} par la somme de ${nombre_avec_espace(b)} et ${nombre_avec_espace(c)}`
					expn=`$${tex_nombre(a)}(${tex_nombre(b)}+${tex_nombre(c)})$`
					expc=`$${tex_nombre(a)}(${tex_nombre(b)}+${tex_nombre(c)}) = ${tex_nombre(a)}\\times ${tex_nombrec(b+c)}=${tex_nombrec(a*(b+c))}$`
					break
				case 1 : // a(b-c)
					if (b<=c) b=calcul(b+c) // b-c positif
					expf=`Le produit de ${nombre_avec_espace(a)} par la diffÃ©rence de ${nombre_avec_espace(b)} et ${nombre_avec_espace(c)}`
					expn=`$${tex_nombre(a)}(${tex_nombre(b)}-${tex_nombre(c)})$`
					expc=`$${tex_nombre(a)}(${tex_nombre(b)}-${tex_nombre(c)}) = ${tex_nombre(a)}\\times ${tex_nombrec(b-c)}=${tex_nombrec(a*(b-c))}$`
					break
				case 2 : // a/(b+c)
					a=calcul(a*(b+c)) // on s'assure que le quotient tombe juste...
					expf=`Le quotient de ${nombre_avec_espace(a)} par la somme de ${nombre_avec_espace(b)} et ${nombre_avec_espace(c)}`
					expn=`$${tex_nombre(a)}\\div (${tex_nombre(b)}+${tex_nombre(c)})$ ou $\\dfrac{${tex_nombre(a)}}{${tex_nombre(b)}+${tex_nombre(c)}}$`
					expc=`$${tex_nombre(a)}\\div (${tex_nombre(b)}+${tex_nombre(c)}) = ${tex_nombre(a)}\\div ${tex_nombrec(b+c)}=${tex_nombrec(a/(b+c))}$`
					break
				case 3 : // a/(b-c)
					if (b<=c) b=calcul(b+c) // b-c positif
 					a=calcul(a*(b-c)) // on s'assure que le quotient tombe juste
					expf=`Le quotient de ${nombre_avec_espace(a)} par la diffÃ©rence de ${nombre_avec_espace(b)} et ${nombre_avec_espace(c)}`
					expn=`$${tex_nombre(a)}\\div (${b}-${tex_nombre(c)})$ ou $\\dfrac{${tex_nombre(a)}}{${tex_nombre(b)}-${tex_nombre(c)}}$`
					expc=`$${tex_nombre(a)}\\div (${b}-${tex_nombre(c)}) = ${tex_nombre(a)}\\div ${tex_nombrec(b-c)}=${tex_nombrec(a/(b-c))}$`
					break			
				case 4 : // (a+b)/c
					a=calcul(a*c)
					b=calcul(b*c) // on s'assure que le quotient tombe juste
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par ${nombre_avec_espace(c)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div ${tex_nombre(c)}$ ou $\\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${tex_nombre(c)}}$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div ${tex_nombre(c)} = ${tex_nombrec(a+b)}\\div ${tex_nombre(c)}=${tex_nombrec((a+b)/c)}$`
					break
				case 5 : // (a-b)/c
					if (a<=b) a=calcul(a+b) // a-b positif
					a=calcul(a*c)
					b=calcul(b*c) // on s'assure que le quotient tombe juste
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par ${nombre_avec_espace(c)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div ${tex_nombre(c)}$ ou $\\dfrac{${tex_nombre(a)}-${tex_nombre(b)}}{${tex_nombre(c)}}$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div ${tex_nombre(c)} = ${tex_nombrec(a-b)}\\div ${tex_nombre(c)}=${tex_nombrec((a-b)/c)}$`
					break			
							
			}
			break
		case 3 : // expressions de niveau 2 (3 opÃ©rations)
			souscas=randint(0,13)
			switch (souscas) {
				case 0 : // (a+b)(c+d)
					expf=`Le produit de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)})$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\times ${tex_nombrec(c+d)} = ${tex_nombrec((a+b)*(c+d))}$`
					break
				case 1 : // (a+b)(c-d)
					if (c<=d) c=calcul(c+d)
					expf=`Le produit de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})(${tex_nombre(c)}-${tex_nombre(d)})$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})(${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\times ${tex_nombrec(c-d)} = ${tex_nombrec((a+b)*(c-d))}$`
					break
				case 2 : // (a-b)(c+d)
					if (a<=b) a=calcul(a+b)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)})$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\times ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)*(c+d))}$`
					break
				case 3 : // (a-b)(c-d)
					if (a<=b) a=calcul(a+b)
					if (c<=d) c=calcul(c+d)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}-${tex_nombre(d)})$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\times ${tex_nombrec(c-d)} = ${tex_nombrec((a-b)*(c-d))}$`
					break			
				case 4 : // (a+b)/(c+d)
					a=calcul(a*(c+d))
					b=calcul(b*(c+d))
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)})$ ou $\\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${tex_nombre(c)}+${tex_nombre(d)}}$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\div ${tex_nombrec(c+d)} = ${tex_nombrec((a+b)/(c+d))}$`
					break
				case 5 : // (a-b)/(c+d)
					a=calcul(a*(c+d))
					b=calcul(b*(c+d))
					if (a<=b) a=calcul(a+b)
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)})$ ou $\\dfrac{${tex_nombre(a)}-${tex_nombre(b)}}{${tex_nombre(c)}+${tex_nombre(d)}}$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)/(c+d))}$`
					break			
				case 6 : // (a+b)/(c-d)
					if (c<=d) c=calcul(c+d)
					a=calcul(a*(c-d))
					b=calcul(b*(c-d))
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)})$ ou $\\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${tex_nombre(c)}-${tex_nombre(d)}}$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a+b)}\\div ${tex_nombrec(c-d)} = ${tex_nombrec((a+b)/(c-d))}$`
					break
				case 7 : // (a-b)/(c-d)
					if (c<=d) c=calcul(c+d)
					if (a<=b) a=calcul(a+b)
					a=calcul(a*(c-d))
					b=calcul(b*(c-d))
					expf=`Le quotient de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la diffÃ©rence de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)})$ ou $\\dfrac{${tex_nombre(a)}-${tex_nombre(b)}}{${tex_nombre(c)}-${tex_nombre(d)}}$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div (${tex_nombre(c)}-${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div ${tex_nombrec(c-d)} = ${tex_nombrec((a-b)/(c-d))}$`
					break			
				case 8 : // ab+cd
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du produit de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)} = ${tex_nombrec(a*b)}+${tex_nombrec(c*d)} = ${tex_nombrec(a*b+c*d)}$`
					break
				case 9 : // ab-cd
					if (a*b<d*c) a=calcul(a+c)
					if (a*b<d*c) b=calcul(b+d)
					expf=`La diffÃ©rence du produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du produit de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\times ${tex_nombre(d)}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\times ${tex_nombre(d)} = ${tex_nombrec(a*b)}-${tex_nombrec(c*d)} = ${tex_nombrec(a*b-c*d)}$`
					break			
				case 10 : // ab+c/d
					c=calcul(c*d)
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du quotient de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)}$ ou $${tex_nombre(a)}\\times ${tex_nombre(b)}+\\dfrac{${tex_nombre(c)}}{${tex_nombre(d)}}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a*b)}+${tex_nombrec(c/d)} = ${tex_nombrec(a*b+c/d)}$`
					break
				case 11 : // ab-c/d
					c=c*d
					if (a*b<c/d) a=calcul(a*c)
					if (a*b<c/d) b=calcul(b*c)
					expf=`La diffÃ©rence du produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du quotient de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)}$ ou $${tex_nombre(a)}\\times ${tex_nombre(b)}-\\dfrac{${tex_nombre(c)}}{${tex_nombre(d)}}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a*b)}-${tex_nombrec(c/d)} = ${tex_nombrec(a*b-c/d)}$`
					break	
				case 12 : // a/b+c/d
					a=calcul(a*b)
					c=calcul(c*d)
					expf=`La somme du quotient de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du quotient de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\div ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)}$ ou $\\dfrac{${tex_nombre(a)}}{${tex_nombre(b)}}+\\dfrac{${tex_nombre(c)}}{${tex_nombre(d)}}$`
					expc=`$${tex_nombre(a)}\\div ${tex_nombre(b)}+${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a/b)}+${tex_nombrec(c/d)} = ${tex_nombrec(a/b+c/d)}$`
					break	
				case 13 : // a/b-c/d		
					a=calcul(a*b)
					c=calcul(c*d)
					if (a/b<c/d) a=calcul(a*c)
					if (a/c<c/d) a=calcul(a*d)
					expf=`La diffÃ©rence du quotient de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du quotient de ${nombre_avec_espace(c)} par ${nombre_avec_espace(d)}`
					expn=`$${tex_nombre(a)}\\div ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)}$ ou $\\dfrac{${tex_nombre(a)}}{${tex_nombre(b)}}-\\dfrac{${tex_nombre(c)}}{${tex_nombre(d)}}$`
					expc=`$${tex_nombre(a)}\\div ${tex_nombre(b)}-${tex_nombre(c)}\\div ${tex_nombre(d)} = ${tex_nombrec(a/b)}-${tex_nombrec(c/d)} = ${tex_nombrec(a/b-c/d)}$`
					break	
			}
			break ;
		case 5 : // expressions complexes
		souscas=randint(0,5)
			switch (souscas) {
				case 0 : // 2(a+bc)
					expf=`Le double de la somme de ${nombre_avec_espace(a)} et du produit de ${nombre_avec_espace(b)} par ${nombre_avec_espace(c)}`
					expn=`$2(${tex_nombre(a)}+${tex_nombre(b)}\\times ${tex_nombre(c)})$`
					expc=`$2(${tex_nombre(a)}+${tex_nombre(b)}\\times ${tex_nombre(c)}) = 2(${tex_nombre(a)}+${tex_nombrec(b*c)}) = 2\\times  ${tex_nombrec(a+b*c)}$`
					break
				case 1 : // 3(a+b)/c
					a=calcul(a*c)
					b=calcul(b*c)
					expf=`Le triple du quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par ${nombre_avec_espace(c)}`
					expn=`$3(${tex_nombre(a)}+${tex_nombre(b)})\\div ${tex_nombre(c)}$ ou $3\\times \\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${tex_nombre(c)}}$`
					expc=`$3(${tex_nombre(a)}+${tex_nombre(b)})\\div ${tex_nombre(c)} = 3\\times  ${tex_nombre(a+b)}\\div ${tex_nombre(c)} = ${tex_nombrec(3*(a+b))}\\div ${tex_nombre(c)} = ${tex_nombrec(3*(a+b)/c)}$`
					break
				case 2 : // (a-b)/3
					if (a<=b) a=calcul(a+b)
					a=calcul(3*a)
					b=calcul(3*b)
					expf=`Le tiers de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div  3$ ou $\\dfrac{${tex_nombre(a)}-${tex_nombre(b)}}{3}$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})\\div  3 = ${tex_nombrec(a-b)}\\div  3 = ${tex_nombrec((a-b)/3)}$`
					break
				case 3 : // (a-b)/3*2(c+d)
					if (a<=b) a=calcul(a+b)
					a=calcul(3*a)
					b=calcul(3*b)
					expf=`Le produit du tiers de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par le double de la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$\\left((${tex_nombre(a)}-${tex_nombre(b)})\\div  3\\right)\\times  2(${tex_nombre(c)}+${tex_nombre(d)})$`
					expc=`$\\left((${tex_nombre(a)}-${tex_nombre(b)})\\div  3\\right)\\times  2(${tex_nombre(c)}+${tex_nombre(d)}) = ${tex_nombrec(a-b)}\\div  3 \\times  2 \\times ${tex_nombrec(c+d)} = ${tex_nombrec((a-b)/3)} \\times  2 \\times  ${tex_nombrec(c+d)} =  ${tex_nombrec(2*(a-b)/3)} \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(2*(c+d)*(a-b)/3)}$`
					break			
				case 4 : // 3(a+b)-2(c+d)
					if (3*(a+b)<2*(c+d)) a=calcul(a+c+d)
					expf=`La diffÃ©rence du triple de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} et du double de la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$3(${tex_nombre(a)}+${tex_nombre(b)})-2(${tex_nombre(c)}+${tex_nombre(d)})$`
					expc=`$3(${tex_nombre(a)}+${tex_nombre(b)})-2(${tex_nombre(c)}+${tex_nombre(d)}) = 3 \\times  ${tex_nombrec(a+b)} - 2 \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(3*(a+b))} - ${tex_nombrec(2*(c+d))} = ${tex_nombrec(3*(a+b)-2*(c+d))}$`
					break
				case 5 : // 2(a-b)+3(c+d)
					if (a<=b) a=calcul(a+b)
					expf=`La somme du double de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} et du triple de la somme de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)}`
					expn=`$2(${tex_nombre(a)}-${tex_nombre(b)})+3(${tex_nombre(c)}+${tex_nombre(d)})$`
					expc=`$2(${tex_nombre(a)}-${tex_nombre(b)})+3(${tex_nombre(c)}+${tex_nombre(d)}) = 2 \\times  ${tex_nombrec(a-b)} + 3 \\times  ${tex_nombrec(c+d)} = ${tex_nombrec(2*(a-b))} + ${tex_nombrec(3*(c+d))} = ${tex_nombrec(2*(a-b)+3*(c+d))}$`
					break	
			}		
			break ;
		case 4 : // 4 opÃ©rations
		souscas=randint(1,3)
			switch (souscas) {
				case 1 : // (a+b)/(c(d+e))
					a=calcul(a*c*(d+e))
					b=calcul(b*c*(d+e))
					expf=`Le quotient de la somme de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par le produit de ${nombre_avec_espace(c)} par la somme de ${nombre_avec_espace(d)} et ${nombre_avec_espace(e)}`
					expn=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}(${tex_nombre(d)}+${tex_nombre(e)}))$ ou $\\dfrac{${tex_nombre(a)}+${tex_nombre(b)}}{${tex_nombre(c)}(${tex_nombre(d)}+${tex_nombre(e)})}$`
					expc=`$(${tex_nombre(a)}+${tex_nombre(b)})\\div (${tex_nombre(c)}(${tex_nombre(d)}+${tex_nombre(e)})) = ${tex_nombrec(a+b)} \\div  (${tex_nombre(c)} \\times  ${tex_nombrec(d+e)}) = ${tex_nombrec(a+b)} \\div  ${tex_nombre(c*(d+e))} = ${tex_nombrec((a+b)/(c*(d+e)))}$`
					break
				case 2 : //(a-b)*(c+de)
					if (a<=b) a=calcul(a+b)
					expf=`Le produit de la diffÃ©rence de ${nombre_avec_espace(a)} et ${nombre_avec_espace(b)} par la somme de ${nombre_avec_espace(c)} et du produit de ${nombre_avec_espace(d)} par ${nombre_avec_espace(e)}`
					expn=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)}\\times ${tex_nombre(e)})$`
					expc=`$(${tex_nombre(a)}-${tex_nombre(b)})(${tex_nombre(c)}+${tex_nombre(d)}\\times ${tex_nombre(e)}) = ${tex_nombrec(a-b)}(${tex_nombre(c)}+${tex_nombrec(d*e)}) = ${tex_nombrec(a-b)} \\times  ${tex_nombre(c+d*e)} = ${tex_nombrec((a-b)*(c+d*e))}$`
					break
				case 3 : // ab+cd/e
					c=calcul(c*e)
					expf=`La somme du produit de ${nombre_avec_espace(a)} par ${nombre_avec_espace(b)} et du quotient du produit de ${nombre_avec_espace(c)} et ${nombre_avec_espace(d)} par ${nombre_avec_espace(e)}`
					expn=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)}\\div ${tex_nombre(e)}$ ou $${tex_nombre(a)}\\times ${tex_nombre(b)}+\\dfrac{${tex_nombre(c)}\\times ${tex_nombre(d)}}{${tex_nombre(e)}}$`
					expc=`$${tex_nombre(a)}\\times ${tex_nombre(b)}+${tex_nombre(c)}\\times ${tex_nombre(d)}\\div ${tex_nombre(e)} = ${tex_nombrec(a*b)} + ${tex_nombrec(c*d)} \\div  ${tex_nombre(e)} = ${tex_nombrec(a*b)} + ${tex_nombrec(c*d/e)} = ${tex_nombrec(a*b+c*d/e)}$`
					break
			}
			break
		}
		return [expf,expn,expc,souscas]
}

/**
 * ConstructibilitÃ© des triangles
 * PrÃ©ciser ici les numÃ©ros des exos 
 * 5G2 exercice parent il faudra supprimmer la version beta5G2 de la liste des choix du fichier mathalea_exercices.js
 * 5G21-1
 * 5G31-1
 * beta5G2,beta5G21-1,beta5G31-1
 * @author SÃ©bastien Lozano
 */

function Constructibilite_des_triangles(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()	
	this.sup=1;
	if (this.exo == this.beta+'5G21-1') { // via longueurs
		this.titre = `ConstructibilitÃ© des triangles via les longueurs`;
		//this.consigne = `Justifier si les longueurs donnÃ©es permettent de construire le triangle. <br> Dire chaque fois le nombre de triangles constructibles, Ã§a peut Ãªtre 0 !`;
		this.consigne = `Justifier si les longueurs donnÃ©es permettent de construire le triangle.`;
		//this.consigne += `<br>Dire chaque fois s'il existe plusieurs triangles constructibles ou s'il n'en existe pas.`;
		this.consigne += `<br>Dire si tous les Ã©lÃ¨ves qui doivent construire ce triangle auront la mÃªme figure.`
		
	} else if (this.exo == this.beta+'5G31-1') {//via angles
		this.titre = `ConstructibilitÃ© des triangles via les angles`;
		//this.consigne = `Justifier si les angles donnÃ©s permettent de construire le triangle. <br> Dire chaque fois le nombre de triangles constructibles, Ã§a peut Ãªtre 0 !`;
		this.consigne = `Justifier si les angles donnÃ©s permettent de construire le triangle.`;
		//this.consigne += `<br>Dire chaque fois s'il existe plusieurs triangles constructibles ou s'il n'en existe pas.`;
		this.consigne += `<br>Dire si tous les Ã©lÃ¨ves qui doivent construire ce triangle auront la mÃªme figure.`
	} else {			
		this.titre = "ConstructibilitÃ© des triangles";	
		//this.consigne = `Justifier si les longueurs ou les angles donnÃ©s permettent de construire le triangle. <br> Dire chaque fois le nombre de triangles constructibles, Ã§a peut Ãªtre 0 !`;
		this.consigne = `Justifier si les longueurs ou les angles donnÃ©s permettent de construire le triangle.`;
		//this.consigne += `<br>Dire chaque fois s'il existe plusieurs triangles constructibles ou s'il n'en existe pas.`;
		this.consigne += `<br>Dire si tous les Ã©lÃ¨ves qui doivent construire ce triangle auront la mÃªme figure.`

	};
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.nb_questions_modifiable = false;

	this.liste_packages = `bclogo`;
	
	let type_de_questions_disponibles;
	
	this.nouvelle_version = function(numero_de_l_exercice){
		// this.introduction=info_message({
		// 	titre : "Exercice BETA",
		// 	texte: "En cours de rÃ©alisation <br>Est-il prÃ©fÃ©rable de mettre du conditionnel dans les corrections?"

		// });

		if (this.exo == this.beta+'5G21-1') { // via longueurs
			if (this.sup ==1) {
				type_de_questions_disponibles = shuffle([1,2,3]);
				this.nb_questions = type_de_questions_disponibles.length;	
			} else if (this.sup ==2) {
				type_de_questions_disponibles = [choice([1,2,3]),4];
				this.nb_questions = type_de_questions_disponibles.length;	
			};
		} else if (this.exo == this.beta+'5G31-1') {//via angles
			if (this.sup ==1) {
				type_de_questions_disponibles = shuffle([5,6,7]);
				this.nb_questions = type_de_questions_disponibles.length;	
			} else if (this.sup ==2) {
				type_de_questions_disponibles = [choice([5,6,7]),8];
				this.nb_questions = type_de_questions_disponibles.length;	
			};
		} else {			
			type_de_questions_disponibles = [1,2,3,4,5,6,7,8];
			this.nb_questions = type_de_questions_disponibles.length;
		};

		//let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = type_de_questions_disponibles // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		for (let i = 0, texte, texte_corr,l1,l2,l3,a1,a2,a3, cpt=0; i < this.nb_questions && cpt<50; ) {
			
			// on fixe longueur min et max en cm
			let l_min = 2;
			let l_max = 20;
			// on fixe angle min et max en degrÃ©
			let a_min = 0;
			let a_max = 180;

			// on crÃ©e un objet triangle 
			let triangle = new Triangles();
			// on crÃ©e un tableau pour le triangle courant
			let current_triangle = [];
			
			switch (liste_type_de_questions[i]) {
				case 1 : // 3 longueurs constructible
					while (!triangle.isTrueTriangleLongueurs()) {						
						l1 = randint(l_min,l_max);
						l2 = randint(l_min,l_max);
						l3 = randint(l_min,l_max);
						triangle.l1 = l1;
						triangle.l2 = l2;
						triangle.l3 = l3;						
					};
					texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;					
					texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i] , valeur: triangle.getLongueursValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					  });
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand cÃ´tÃ©.`;
					texte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;
					texte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}.`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br><br>  Si on considÃ¨re que le triangle nommÃ© dans le sens des aiguilles d'une montre et celui nommÃ© dans le sens inverse sont diffÃ©rents, ${texte_en_couleur('plusieurs tels triangles existent')}.`;
					texte_corr += `<br> Ils sont obtenus les uns Ã  partir des autres par symÃ©tire axiale par rapport Ã  un des cÃ´tÃ©s.`;
					break;
				case 2 : // 3 longueurs plat
					while (!triangle.isPlatTriangleLongueurs()) {						
						l1 = randint(l_min,l_max);
						l2 = randint(l_min,l_max);
						l3 = calcul(l1+l2);
						triangle.l1 = l1;
						triangle.l2 = l2;
						triangle.l3 = l3;						
					};
					texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;					
					texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i] , valeur: triangle.getLongueursValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					});
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand cÃ´tÃ©.`;
					texte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${current_triangle[2].valeur}$ cm aussi.`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom()+' c\'est un triangle plat')}.`;
					texte_corr += `<br><br>${texte_en_couleur('Un seul triangle de ce type existe')}, il s'agit du segment ${current_triangle[2].cote} sur lequel on place le point ${current_triangle[0].longueur.split('')[2]}.`;				
					break;
				case 3 : // 3 longueurs non constructible
				  	// on initialise les longueurs sinon la mÃ©thode isTrueTriangleLongueurs() renvoie false!
					l1 = randint(l_min,l_max);
					l2 = randint(l_min,l_max);
					l3 = randint(l_min,l_max);
					triangle.l1 = l1;
					triangle.l2 = l2;
					triangle.l3 = l3;	

					while (triangle.isTrueTriangleLongueurs()) {						
						l1 = randint(l_min,l_max);
						l2 = randint(l_min,l_max);
						l3 = randint(l_min,l_max);
						triangle.l1 = l1;
						triangle.l2 = l2;
						triangle.l3 = l3;						
					};
					texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;					
					texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i] , valeur: triangle.getLongueursValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					});
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand cÃ´tÃ©.`;
					texte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;
					texte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} < ${current_triangle[2].longueur}, les longueurs donnÃ©es ne permettent donc pas de satisfaire Ã  l'inÃ©galitÃ© triangulaire.`;
					texte_corr += `<br> ${texte_en_couleur('On ne peut donc pas construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br><br>  ${texte_en_couleur('Aucun triangle de ce type n\'existe')}.`;
					break;
				case 4 : // 2 longueurs et le pÃ©rimÃ¨tre
					// on utilise la mÃ©thode isTrueTriangleLongueurs(), le triangle ne sera pas plat.
					while (!triangle.isTrueTriangleLongueurs()) {						
						l1 = randint(l_min,l_max);
						l2 = randint(l_min,l_max);
						l3 = randint(l_min,l_max);
						triangle.l1 = l1;
						triangle.l2 = l2;
						triangle.l3 = l3;						
					};
					texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;					
					texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et dont le pÃ©rimÃ¨tre vaut $${triangle.getPerimetre()}$ cm.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i] , valeur: triangle.getLongueursValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					});
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Puisque le pÃ©rimÃ¨tre vaut $${triangle.getPerimetre()}$ cm alors la troisiÃ¨me longueur vaut ${triangle.getLongueurs()[2]} = $${triangle.getPerimetre()}$ cm - $${triangle.l1}$ cm - $${triangle.l2}$ cm = $${triangle.l3}$ cm.`
					texte_corr += `<br> Donc dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand cÃ´tÃ©.`;
					texte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;
					texte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom())}.`;
					// texte_corr += `<br><br>  Si on considÃ¨re que le triangle nommÃ© dans le sens des aiguilles d'une montre et celui nommÃ© dans le sens inverse sont diffÃ©rents, ${texte_en_couleur('deux tels triangles existent')}.`;
					// texte_corr += `<br> Les deux Ã©tant obtenus l'un Ã  partir de l'autre par symÃ©tire axiale.`;
					texte_corr += `<br><br>  Si on considÃ¨re que le triangle nommÃ© dans le sens des aiguilles d'une montre et celui nommÃ© dans le sens inverse sont diffÃ©rents, ${texte_en_couleur('plusieurs tels triangles existent')}.`;
					texte_corr += `<br> Ils sont obtenus les uns Ã  partir des autres par symÃ©tire axiale par rapport Ã  un des cÃ´tÃ©s.`;
					break;
				case 5 : //3 angles constructible
					while (!triangle.isTrueTriangleAngles()) {	
						a1 = randint(a_min,a_max,[0,180]);
						a2 = randint(a_min,a_max,[0,180]);
						a3 = calcul(180-a1-a2);
						triangle.a1 = a1;
						triangle.a2 = a2;
						triangle.a3 = a3;
					};					
					texte = ``;
					texte_corr = ``;
					texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\degree$ ; `;					
					texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\degree$.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					  });
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\degree + ${current_triangle[1].valeur}\\degree + ${current_triangle[2].valeur}\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\degree$.`;
					texte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br><br>  ${texte_en_couleur('Il existe une infinitÃ© de triangles avec ces mesures.')}`;
					texte_corr += `<br> On les obtient les uns Ã  partir des autres par un agrandissement ou une rÃ©duction.`;
					break;
				case 6 : // 3 angles plat
					while (!triangle.isPlatTriangleAngles()) {	
						a1 = randint(a_min,a_max);
						a2 = randint(a_min,a_max);
						a3 = calcul(180-a1-a2);
						triangle.a1 = a1;
						triangle.a2 = a2;
						triangle.a3 = a3;
					};					
					texte = ``;
					texte_corr = ``;
					texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\degree$ ; `;					
					texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\degree$.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({angle: triangle.getAngles()[i] , valeur: triangle.getAnglesValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					});
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\degree + ${current_triangle[1].valeur}\\degree + ${current_triangle[2].valeur}\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\degree$.`;
					texte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br> Deux des trois angles du triangle valent $0\\degree$, ${texte_en_couleur(triangle.getNom()+' est donc un triangle plat')}.`
					texte_corr += `<br><br>  ${texte_en_couleur('Il existe une infinitÃ© de triangles avec ces mesures.')}`;
					texte_corr += `<br> On les obtient en traÃ§ant des segments et en plaÃ§ant le troisiÃ¨me sommet sur ce segment, les longueurs n'ayant aucune importance.`;
					texte_corr += `<br> Dans le cas prÃ©sent, il s'agit d'un segment $[${current_triangle[2].angle.split('')[12]}${current_triangle[2].angle.split('')[14]}]$ sur lequel on place un point ${current_triangle[2].angle.split('')[13]}.`;
					//texte_corr += `<br> ${JSON.stringify(current_triangle)}`;
					break;
				case 7 : // 3 angles non constructible
					// on initialise les angles sinon la mÃ©thode isTrueTriangleAngles() renvoie false!
					a1 = randint(a_min,a_max);
					a2 = randint(a_min,a_max);
					a3 = randint(a_min,a_max);
					triangle.a1 = a1;
					triangle.a2 = a2;
					triangle.a3 = a3;	
					while (triangle.isTrueTriangleAngles()) {	
						a1 = randint(a_min,a_max);
						a2 = randint(a_min,a_max);
						a3 = randint(a_min,a_max);
						triangle.a1 = a1;
						triangle.a2 = a2;
						triangle.a3 = a3;
					};					
					texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\degree$ ; `;					
					texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\degree$.`;
					// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
					for (let i=0;i<3;i++) {
						current_triangle.push({angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i]});
					};
					// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.
					current_triangle.sort(function (a, b) {
						return a.valeur - b.valeur;
					});
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\degree + ${current_triangle[1].valeur}\\degree + ${current_triangle[2].valeur}\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\degree$.`;
					texte_corr += `<br> Si le triangle Ã©tait constructible, la somme des trois angles vaudrait $180\\degree$,`;
					texte_corr += ` or ce n'est pas le cas.`
					texte_corr += `<br> ${texte_en_couleur('On ne peut donc pas construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br><br>  ${texte_en_couleur('Aucun triangle de ce type n\'existe')}.`;
					break;				
				case 8 : // 2 angles et le 3e fonction du 1er ou du 2eme
					let angle_rg = randint(0,1);
					let operations_possibles = ['triple','quadruple','quart'];
					let operation = '';					
					texte = ``;
					texte_corr = ``;
					texte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;
					switch (angle_rg) {
						case 0 :
							a1 = randint(a_min,a_max);
							triangle.a1 = a1;
							operation = operations_possibles[randint(0,2)];
							texte += `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${tex_nombre(triangle.a1)}\\degree$ ; `;						
							switch (operation) {
								case 'triple' :
									a2 = calcul((180-a1)/4);
									a3 = calcul(3*a2);				
									break;
								case 'quadruple' :
									a2 = calcul((180-a1)/5);
									a3 = calcul(4*a2);
									break;
								case 'quart' :
									a2 = calcul(4*(180-a1)/5);
									a3 = calcul(a2/4);
									break;
							};
							triangle.a2 = a2;
							triangle.a3 = a3;
							texte += `${triangle.getAngles()[1]} $= ${tex_nombre(triangle.a2)}\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[1]}.`;
							// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
							for (let i=0;i<3;i++) {
								current_triangle.push({angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i]});
							};								
							texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[1].angle} = $${tex_nombre(current_triangle[1].valeur)}\\degree$  d'oÃ¹ ${current_triangle[2].angle} = $${tex_nombre(current_triangle[2].valeur)}\\degree$.`;
							break;
						case 1 : 
							a2 = randint(a_min,a_max);
							triangle.a2 = a2;
							operation = operations_possibles[randint(0,2)];
							texte += `${triangle.getNom()} tel que ${triangle.getAngles()[1]} $= ${tex_nombre(triangle.a2)}\\degree$ ; `;							
							switch (operation) {
								case 'triple' :
									a1 = calcul((180-a2)/4);
									a3 = calcul(3*a1);
									break;
								case 'quadruple' :
									a1 = calcul((180-a2)/5);
									a3 = calcul(4*a1);
									break;
								case 'quart' :
									a1 = calcul(4*(180-a2)/5);
									a3 = calcul(a1/4);
									break;
							};
							triangle.a1 = a1;
							triangle.a3 = a3;
							texte += `${triangle.getAngles()[0]} $= ${tex_nombre(triangle.a1)}\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[0]}.`;
							// on crÃ©e l'objet longueurs + valeurs des cÃ´tÃ©s du triangle
							for (let i=0;i<3;i++) {
								current_triangle.push({angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i]});
							};
							texte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[0].angle} = $${tex_nombre(current_triangle[0].valeur)}\\degree$  d'oÃ¹ ${current_triangle[2].angle} = $${tex_nombre(current_triangle[2].valeur)}\\degree$.`;
							break;
					};
					texte_corr += `<br>Donc ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${tex_nombre(current_triangle[0].valeur)}\\degree + ${tex_nombre(current_triangle[1].valeur)}\\degree + ${tex_nombre(current_triangle[2].valeur)}\\degree = ${tex_nombrec(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\degree$.`;							
					texte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.`;
					texte_corr += `<br> ${texte_en_couleur('On peut donc construire le triangle '+triangle.getNom())}.`;
					texte_corr += `<br><br>  ${texte_en_couleur('Il existe une infinitÃ© de triangles avec ces mesures.')}`;
					texte_corr += `<br> On les obtient les uns Ã  partir des autres par un agrandissement ou une rÃ©duction.`;
					break;
			}
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}	
			cpt++;	
		}
	liste_de_question_to_contenu(this);
	}
		if (this.exo == this.beta+'5G21-1') {
			this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : 3 longueurs\n2 : 2 longueurs et le pÃ©rimÃ¨tre"];
		} else if (this.exo == this.beta+'5G31-1') {
			this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : 3 angles\n2 : 2 angles et le 3e en fonction du 1er ou du 2eme"];
		} else {
			//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : sans conversions de longueurs\n2 : avec conversions de longueurs"];
		};
}

/**
 * Vocabulaire des triangles 
 * beta5G21-1
 * @author SÃ©bastien Lozano
 */
function Constructibilite_des_triangles_longueurs(){
	this.beta = ``;
	this.exo = this.beta+`5G21-1`;
	//this.titre = `ConstructibilitÃ© des triangles via les longueurs`;
	Constructibilite_des_triangles.call(this);
};

/**
 * Vocabulaire des triangles 
 * beta5G31-1
 * @author SÃ©bastien Lozano
 */
function Constructibilite_des_triangles_angles(){
	this.beta = ``;
	this.exo = this.beta+`5G31-1`;
	//this.titre = `ConstructibilitÃ© des triangles via les angles`;
	Constructibilite_des_triangles.call(this);
};

/**
 * 5G22
 * @Auteur Jean-Claude Lhote
 * Les droites remarquables du triangle : hauteurs mÃ©diatrices....mÃ©dianes et bissectrices
 */
function DroiteRemarquableDuTriangle(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()

	this.titre = "DÃ©terminer la nature d'une droite remarquable"
	this.consigne = 'DÃ©finir'
	this.spacing = 2;
	this.nb_questions=1
	this.nb_cols=1
	this.nb_cols_corr=1
	this.sup=1

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let triangles=[],sommets=[[]],A=[],B=[],C=[],t=[],d=[],n=[],c=[],objets=[],A0,B0,C0,tri,G
		let type_de_questions_disponibles,liste_type_de_questions
		if (this.sup==1) type_de_questions_disponibles=[1,2]
		if (this.sup==2) type_de_questions_disponibles=[3,4]
		if (this.sup==3) type_de_questions_disponibles=[1,2,3,4]
		liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions)
		for (let i = 0, a, angle,rapport, texte, texte_corr, cpt=0; i < this.nb_questions;i++) {// this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			triangles[i] = new Triangles();
			sommets[i]= triangles[i].getSommets(false);

			A0 = point(3,randint(1,2))
			B0 = point(6,randint(1,2))
			angle = choice([50,60,70,75,80,100,110,120])
			rapport=randint(7,13)/10
			C0 = similitude(B0,A0,angle,rapport)
			tri = polygone(A0,B0,C0)
			G = centreGraviteTriangle(A0,B0,C0)
			a=randint(0,30)*12-180
			A[i] =rotation(A0,G,a,sommets[i][0],'below left')
			B[i] = rotation(B0,G,a,sommets[i][1],'below right')
			C[i] = rotation(C0,G,a,sommets[i][2],'above')
			t[i] = polygone(A[i],B[i],C[i])
			n[i] = nommePolygone(t[i],`${sommets[i][0]}${sommets[i][1]}${sommets[i][2]}`)
			switch (liste_type_de_questions[i]) {
				case 1 :
					d[i] = hauteurTriangle(C[i],B[i],A[i],'blue')
					d[i].epaisseur=1
					c[i] = codageHauteurTriangle(C[i],B[i],A[i])
					objets[i]=[A[i],B[i],C[i],t[i],d[i],n[i],c[i]]
					texte_corr=`La droite tracÃ©e est la hauteur issue de $${sommets[i][0]}$ dans le triangle ${triangles[i].getNom()}.<br>`
					texte_corr+= mathalea2d({xmin:-3,ymin:-3,xmax:8,ymax:8,scale:.5,pixelsParCm:20},...objets[i])
					break
				case 2 :
					d[i] = mediatrice(A[i],B[i],true,'blue')
					d[i].epaisseur=1
					c[i] = codageMediatrice(A[i],B[i])
					objets[i]=[A[i],B[i],C[i],t[i],d[i],n[i],c[i]]
					texte_corr=`La droite tracÃ©e est la mÃ©diatrice du segment [$${sommets[i][0]}${sommets[i][1]}]$.<br>`
					texte_corr+= mathalea2d({xmin:-3,ymin:-3,xmax:8,ymax:8,scale:.5,pixelsParCm:20},...objets[i],constructionMediatrice(A[i],B[i],true,color='gray', markmilieu='Ã', markrayons='||',couleurMediatrice = 'blue', epaisseurMediatrice = 1))
					break
				case 3 :
					d[i] = medianeTriangle(C[i],B[i],A[i],'blue')
					d[i].epaisseur=1
					c[i] = codageMedianeTriangle(C[i],B[i],A[i],color='black',mark='//')
					objets[i]=[A[i],B[i],C[i],t[i],d[i],n[i],c[i]]
					texte_corr=`La droite tracÃ©e est la mÃ©diane issue de $${sommets[i][0]}$ dans le triangle ${triangles[i].getNom()}.<br>`
					texte_corr+= mathalea2d({xmin:-3,ymin:-3,xmax:8,ymax:8,scale:.5,pixelsParCm:20},...objets[i])
					break
				case 4 :
					d[i] = bissectrice(A[i],B[i],C[i],'blue')
					d[i].epaisseur=1
					c[i] = codageBissectrice(A[i],B[i],C[i])
					objets[i]=[A[i],B[i],C[i],t[i],d[i],n[i],c[i]]
					texte_corr=`La droite tracÃ©e est la bissectrice de l'angle $\\widehat{${sommets[i][0]}${sommets[i][1]}${sommets[i][2]}}$.<br>`
					texte_corr+= mathalea2d({xmin:-3,ymin:-3,xmax:8,ymax:8,scale:.5,pixelsParCm:20},...objets[i],constructionBissectrice(A[i],B[i],C[i],detail = false, color='red', mark='Ã',tailleLosange = 3,couleurBissectrice = 'blue', epaiseurBissectrice = 1))
					break

			}

			texte = `Quelle est la nature de la droite tracÃ©e en bleu pour le triangle ${triangles[i].getNom()} ?<br>` + mathalea2d({xmin:-3,ymin:-3,xmax:8,ymax:8,scale:.5,pixelsParCm:20},...objets[i])

			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
			}
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Type de droites',3,"1 : Hauteurs et MÃ©diatrices\n2 : MÃ©dianes et Bissectrices\n3 : Toutes les droites"]
}
/**
 * RÃ©fÃ©rence 6G24-1
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_axiale_point_6e() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'un point par rapport Ã  une droite (cas simples)'
	this.figure=false
	this.sup=0
}
/**
 * RÃ©fÃ©rence 6G24-2
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_axiale_figure_6e() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'une figure par rapport Ã  une droite (cas simples)'
	this.figure=true
	this.sup=0
}
/**
 * RÃ©fÃ©rence 6G10-1
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_axiale_point_5e() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'un point par rapport Ã  une droite'
	this.figure=false
	this.sup=1
}
/**
 * RÃ©fÃ©rence 6G10-2
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_axiale_figure_5e() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'une figure par rapport Ã  une droite'
	this.figure=true
	this.sup=1
}
/**
 * RÃ©fÃ©rence 6G11-1
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_centrale_point() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'un point par rapport Ã  un point'
	this.figure=false
	this.sup=2
}
/**
 * RÃ©fÃ©rence 6G11-2
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_centrale_figure() {
	Construire_par_Symetrie.call(this)
	this.titre='Construire le symÃ©trique d\'une figure par rapport Ã  un point'
	this.figure=true
	this.sup=2
}
/**
 * @Auteur Jean-Claude Lhote
 * Fonction gÃ©nÃ©rale pour les exercices de construction de symÃ©triques (centrale/axiale et points/triangles)
 * rÃ©fÃ©rences  6G24-1, 6G24-2, 5G10-1, 5G10-2, 5G11-1 et 5G11-2
 * Permet une sortie html/pdf sur petits carreaux/gros carreaux/papier blanc
 */

function Construire_par_Symetrie() {
	"use strict";
	Exercice.call(this);
	this.titre = "Construire par SymÃ©trie...";
	this.nb_questions = 1;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.sup2 = 1;
	this.figure = false
	this.nouvelle_version = function (numero_de_l_exercice) {
	  let type_de_questions_disponibles;
	  if (this.sup == 3) 	  //SymÃ©trie axiale ou centrale
		  if (this.figure==false) type_de_questions_disponibles = [0,1, 2]; // points
		  else type_de_questions_disponibles = [3,4,5] // triangle

	  else 
		  if (this.figure==false) type_de_questions_disponibles = [parseInt(this.sup)]; // Le choix 1 ou 2 : points
		  else type_de_questions_disponibles = [parseInt(this.sup)+3] //figures

	  let liste_type_de_questions = combinaison_listes(
		type_de_questions_disponibles,
		this.nb_questions
	  );
	  this.liste_questions = []; // Liste de questions
	  this.liste_corrections = []; // Liste de questions corrigÃ©es
	  let Xmin, Xmax, Ymin, Ymax, sc;
	  if (this.sup2 == 2) sc = 0.8;
	  else sc = 0.5;
  
	  let A,AA,cA,sA,
		B,
		C,CC,cC,sC,sCE,
		D,DD,cD,sD,sDE,
		xE,
		E,EE,cE,sE,sED,
		sEC,
		d,
		dB,
		enonce,
		correction,
		g,
		carreaux,
		k,
		objets_enonce=[],
		objets_correction=[],
		p1,p2,p1nom,p2nom;
	  for (
		let i = 0, texte, texte_corr, cpt = 0;
		i < this.nb_questions && cpt < 50;
  
	  ) {
		
		switch (liste_type_de_questions[i]) {
			case 0 : // 3 symÃ©tries axiales simples de points (6Ã¨me)
			p1nom=creerNomDePolygone(5,"PQ")
			A = point(0, 0, `${p1nom[0]}`,'above');
			k=choice([-1,0,1,2])

			if (k<2) d = droiteParPointEtPente(A,k);
			else d=droiteVerticaleParPoint(A)
			B = pointSurDroite(d,6,`${p1nom[1]}`,'above');
			d.isVisible = true;
			d.epaisseur=1
			if (k==2) {
				A.positionLabel='left'
				B.positionLabel='left'
			}
			C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`,'above left');
			D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`,'below right');
//			dB = droiteParPointEtPerpendiculaire(B, d);
			E=point(randint(6,7),randint(5,6), `${p1nom[4]}`, "left");
			//F = point(E.x+1,5-B.y,'F','above left');
			CC=symetrieAxiale(C,d,`${p1nom[2]}\'`,'below left')
			DD=symetrieAxiale(D,d,`${p1nom[3]}\'`,'above right')
			EE=symetrieAxiale(E,d,`${p1nom[4]}\'`,'left')
			//FF=symetrieAxiale(F,d,'F\'','below left')
			cC=codageMediatrice(C,CC,'red','|')
			cD=codageMediatrice(D,DD,'blue','X')
			cE=codageMediatrice(E,EE,'green','O')
			//cF=codageMediatrice(F,FF,'purple','V')
			sC=segment(C,CC)
			sD=segment(D,DD)
			sE=segment(E,EE)
			//sF=segment(F,FF)
			sCE=droite(CC,EE,'','gray')
			sCE.pointilles=true
			sED=droite(EE,D,'','gray')
			sED.pointilles=true
			sDE=droite(DD,E,'','gray')
			sDE.pointilles=true
			sEC=droite(C,E,'','gray')
			sEC.pointilles=true



			objets_correction.push(d,tracePoint(A, B, C, D, E,CC,DD,EE),labelPoint(A, B, C, D, E,CC,DD,EE),cC,cD,cE,sC,sD,sE,sED,sDE,sCE,sEC)
			objets_enonce.push(tracePoint(A, B, C, D,E),labelPoint(A, B, C, D,E),d);
			enonce = num_alpha(0)+` Reproduire la figure ci-dessous.<br>`
			enonce += num_alpha(1)+` Construire le point $${p1nom[2]}\'$ symÃ©trique de $${p1nom[2]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(2)+` Construire le point $${p1nom[3]}\'$ symÃ©trique de $${p1nom[3]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(3)+` Construire le point $${p1nom[4]}\'$ symÃ©trique de $${p1nom[4]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(5)+` Coder la figure.<br>`;
			Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,E.x,EE.x,CC.x,DD.x)-1)
			Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,E.x,EE.x,CC.x,DD.x)+1)
			Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,E.y,EE.y,CC.y,DD.y)-1)
			Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,E.y,EE.y,CC.y,DD.y)+1)
		
			
			correction=`ContrÃ´ler la figure en vÃ©rifiant que les segments en pointillÃ©s se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`

			break;
		  case 1: // 3 symÃ©tries axiales de points
			p1nom=creerNomDePolygone(5)
			A = point(0, randint(-1,1), `${p1nom[0]}`,'above');
			B = point(6, randint(-1,1,A.y), `${p1nom[1]}`,'above');
			d = droite(A, B);
			d.isVisible = true;
			d.epaisseur=1
			C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`,'above left');
			D = point(randint(10, 13), randint(-4, -3), `${p1nom[3]}`,'below right');
//			dB = droiteParPointEtPerpendiculaire(B, d);
			E=point(randint(6,8),randint(-8,-5), `${p1nom[4]}`, "left");
			//F = point(E.x+1,5-B.y,'F','above left');
			CC=symetrieAxiale(C,d,`${p1nom[2]}\'`,'below left')
			DD=symetrieAxiale(D,d,`${p1nom[3]}\'`,'above right')
			EE=symetrieAxiale(E,d,`${p1nom[4]}\'`,'left')
			//FF=symetrieAxiale(F,d,'F\'','below left')
			cC=codageMediatrice(C,CC,'red','|')
			cD=codageMediatrice(D,DD,'blue','X')
			cE=codageMediatrice(E,EE,'green','O')
			//cF=codageMediatrice(F,FF,'purple','V')
			sC=segment(C,CC)
			sD=segment(D,DD)
			sE=segment(E,EE)
			//sF=segment(F,FF)
			sCE=segment(CC,EE,'gray')
			sCE.pointilles=true
			sED=segment(EE,D,'gray')
			sED.pointilles=true
			sDE=segment(DD,E,'gray')
			sDE.pointilles=true
			sEC=segment(C,E,'gray')
			sEC.pointilles=true



			objets_correction.push(d,tracePoint(A, B, C, D, E,CC,DD,EE),labelPoint(A, B, C, D, E,CC,DD,EE),cC,cD,cE,sC,sD,sE,sED,sDE,sCE,sEC)
			objets_enonce.push(tracePoint(A, B, C, D,E),labelPoint(A, B, C, D,E),d);
			enonce = num_alpha(0)+` Reproduire la figure ci-dessous.<br>`
			enonce += num_alpha(1)+` Construire le point $${p1nom[2]}\'$ symÃ©trique de $${p1nom[2]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(2)+` Construire le point $${p1nom[3]}\'$ symÃ©trique de $${p1nom[3]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(3)+` Construire le point $${p1nom[4]}\'$ symÃ©trique de $${p1nom[4]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(5)+` Coder la figure.<br>`;
			Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,E.x,EE.x,CC.x,DD.x)-1)
			Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,E.x,EE.x,CC.x,DD.x)+1)
			Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,E.y,EE.y,CC.y,DD.y)-1)
			Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,E.y,EE.y,CC.y,DD.y)+1)
		
			
			correction=`ContrÃ´ler la figure en vÃ©rifiant que les segments en pointillÃ©s se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`
			break;
		  case 2: // 3 symÃ©tries centrales de points
			p1nom=creerNomDePolygone(4)
			A = point(0, randint(-1,4), `${p1nom[0]}`,'left');
			B = point(7, randint(-1,1,A.y), `${p1nom[1]}`,'above');
			C = point(randint(2, 3), randint(-4, -2), `${p1nom[2]}`,'left');
			D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`,'below right');
			CC=rotation(C,B,180,`${p1nom[2]}\'`,'right')
			DD=rotation(D,B,180,`${p1nom[3]}\'`,'above left')
			AA=rotation(A,B,180,`${p1nom[0]}\'`,'right')
			cC=codageMilieu(C,CC,'red','|',false)
			cD=codageMilieu(D,DD,'blue','||' ,false)
			cA=codageMilieu(A,AA,'green','|||',false)
			sC=segment(C,CC)
			sD=segment(D,DD)
			sA=segment(A,AA)
			
		objets_correction.push(tracePoint(A, C, D,CC,DD,AA),labelPoint(A, B, C, D,CC,DD,AA),cC,cD,cA,sC,sD,sA)
			objets_enonce.push(tracePoint(A, B, C, D),labelPoint(A, B, C, D));
			enonce = num_alpha(0)+` Reproduire la figure ci-dessous.<br>`
			enonce += num_alpha(1)+` Construire le point $${p1nom[2]}\'$ symÃ©trique de $${p1nom[2]}$ par rapport au point $${p1nom[1]}$.<br>`
			enonce += num_alpha(2)+` Construire le point $${p1nom[3]}\'$ symÃ©trique de $${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`
			enonce += num_alpha(3)+` Construire le point $${p1nom[0]}\'$ symÃ©trique de $${p1nom[0]}$ par rapport au point $${p1nom[1]}$.<br>`
			enonce += num_alpha(4)+` Coder la figure.<br>`;
			Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,AA.x,CC.x,DD.x)-1)
			Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,AA.x,CC.x,DD.x)+1)
			Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,AA.y,CC.y,DD.y)-1)
			Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,AA.y,CC.y,DD.y)+1)
			correction=''
			break;

			case 3 : // symÃ©trie axiale simple d'un triangle
			p1nom=creerNomDePolygone(5,"PQ")
			A = point(0, 0, `${p1nom[0]}`,'above');
			k=choice([-1,0,1,2])

			if (k<2) d = droiteParPointEtPente(A,k);
			else d=droiteVerticaleParPoint(A)
			B = pointSurDroite(d,6,`${p1nom[1]}`,'above');
			d.isVisible = true;
			d.epaisseur=1
			C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`,'above left');
			D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`,'below right');
//			dB = droiteParPointEtPerpendiculaire(B, d);
			E=point(randint(6,7),randint(5,6), `${p1nom[4]}`, "left");
			p1=polygone(C,D,E)
			p2=symetrieAxiale(p1,d)
			p2.listePoints[0].nom=`${p1nom[2]}\'`
			p2.listePoints[1].nom=`${p1nom[3]}\'`
			p2.listePoints[2].nom=`${p1nom[4]}\'`
			//CC=nommePolygone(p1)
			//DD=nommePolygone(p2)
			cC=codageMediatrice(p1.listePoints[0],p2.listePoints[0],'red','|')
			cD=codageMediatrice(p1.listePoints[1],p2.listePoints[1],'blue','X')
			cE=codageMediatrice(p1.listePoints[2],p2.listePoints[2],'green','O')			
			sC=segment(p1.listePoints[0],p2.listePoints[0],'red')
			sD=segment(p1.listePoints[1],p2.listePoints[1],'blue')
			sE=segment(p1.listePoints[2],p2.listePoints[2],'green')	
			sCE=droite(p1.listePoints[2],p1.listePoints[1],'','gray')
			sCE.pointilles=true
			sED=droite(p2.listePoints[2],p2.listePoints[1],'','gray')
			sED.pointilles=true
			objets_correction.push(d,tracePoint(A,B),labelPoint(A,B),cC,cD,cE,sC,sD,sE,CC,DD,p1,p1.sommets,p2,p2.sommets,sCE,sED)
			objets_enonce.push(d,tracePoint(A,B),labelPoint(A,B),CC,p1);
			enonce = num_alpha(0)+`Reproduire la figure ci-dessous.<br>`
			enonce += num_alpha(1)+` Construire le triangle  $${p1nom[2]}\'${p1nom[3]}\'${p1nom[4]}\'$ symÃ©trique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
			enonce += num_alpha(2)+` Coder la figure.<br>`;
			Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)-1)
			Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)+1)
			Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)-1)
			Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)+1)
			correction=''
	
			break
			case 4: // symetrie axiale d'un triangle
				p1nom=creerNomDePolygone(5)


				A = point(0, randint(-1,1), `${p1nom[0]}`,'above');
				B = point(6, randint(-1,1,A.y), `${p1nom[1]}`,'above');
				d = droite(A, B);
				d.isVisible = true;
				d.epaisseur=1
				C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`,'above left');
				D = point(randint(10, 13), randint(-4, -2), `${p1nom[3]}`,'below right');
				dB = droiteParPointEtPerpendiculaire(B, d);
				E=point(randint(6,8),randint(-8,-6), `${p1nom[4]}`, "left");
				p1=polygone(C,D,E)
				p2=symetrieAxiale(p1,d)
				p2.listePoints[0].nom=`${p1nom[2]}\'`
				p2.listePoints[1].nom=`${p1nom[3]}\'`
				p2.listePoints[2].nom=`${p1nom[4]}\'`
				//CC=nommePolygone(p1)
				//DD=nommePolygone(p2)
				cC=codageMediatrice(p1.listePoints[0],p2.listePoints[0],'red','|')
				cD=codageMediatrice(p1.listePoints[1],p2.listePoints[1],'blue','X')
				cE=codageMediatrice(p1.listePoints[2],p2.listePoints[2],'green','O')			
				sC=segment(p1.listePoints[0],p2.listePoints[0],'red')
				sD=segment(p1.listePoints[1],p2.listePoints[1],'blue')
				sE=segment(p1.listePoints[2],p2.listePoints[2],'green')	
				sCE=droite(p1.listePoints[2],p1.listePoints[1],'','gray')
				sCE.pointilles=true
				sED=droite(p2.listePoints[2],p2.listePoints[1],'','gray')
				sED.pointilles=true
				objets_correction.push(d,tracePoint(A,B),labelPoint(A,B),cC,cD,cE,sC,sD,sE,CC,DD,p1,p1.sommets,p2,p2.sommets,sCE,sED)
				objets_enonce.push(d,tracePoint(A,B),labelPoint(A,B),CC,p1);
				enonce = num_alpha(0)+`Reproduire la figure ci-dessous.<br>`
				enonce += num_alpha(1)+` Construire le triangle  $${p1nom[2]}\'${p1nom[3]}\'${p1nom[4]}\'$ symÃ©trique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport Ã  la droite $(${p1nom[0]}${p1nom[1]})$.<br>`
				enonce += num_alpha(2)+` Coder la figure.<br>`;
				Xmin=Math.floor(Math.min(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)-1)
				Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)+1)
				Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)-1)
				Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)+1)

				correction=`ContrÃ´ler la figure en vÃ©rifiant que les cÃ´tÃ©s des deux triangles se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`
				break;
			  case 5:
				p1nom=creerNomDePolygone(4)

				A = point(0, randint(-1,4), `${p1nom[0]}`,'left');
				B = point(7, randint(-1,1,A.y), `${p1nom[1]}`,'above');
				C = point(randint(2, 3), randint(-6, -4), `${p1nom[2]}`,'left');
				D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`,'below right');
				p1=polygone(A,C,D)
				p2=rotation(p1,B,180)
				p2.listePoints[0].nom=`${p1nom[0]}\'`
				p2.listePoints[1].nom=`${p1nom[2]}\'`
				p2.listePoints[2].nom=`${p1nom[3]}\'`
				//CC=nommePolygone(p1)
				//DD=nommePolygone(p2)
				cC=codageMilieu(p1.listePoints[0],p2.listePoints[0],'red','|',false)
				cD=codageMilieu(p1.listePoints[1],p2.listePoints[1],'blue','X' ,false)
				cA=codageMilieu(p1.listePoints[2],p2.listePoints[2],'green','O',false)
				sA=segment(p1.listePoints[0],p2.listePoints[0],'red')
				sC=segment(p1.listePoints[1],p2.listePoints[1],'blue')
				sD=segment(p1.listePoints[2],p2.listePoints[2],'green')	
				
				objets_correction.push(tracePoint(B),labelPoint(B),cC,cD,cA,sC,sD,sA,p1.sommets,p2.sommets,p1,p2)
				objets_enonce.push(tracePoint(B),labelPoint(B),CC,p1);
				enonce = num_alpha(0)+`Reproduire la figure ci-dessous.<br>`
				enonce += num_alpha(1)+` Construire le triangle  $${p1nom[0]}\'${p1nom[2]}\'${p1nom[3]}\'$ symÃ©trique de $${p1nom[0]}${p1nom[2]}${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`
				enonce += num_alpha(2)+` Coder la figure.<br>`;
				Math.floor(Math.min(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)-1)
				Xmax=Math.ceil(Math.max(A.x,B.x,C.x,D.x,p1.listePoints[0].x,p1.listePoints[1].x,p1.listePoints[2].x,p2.listePoints[0].x,p2.listePoints[1].x,p2.listePoints[2].x)+1)
				Ymin=Math.floor(Math.min(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)-1)
				Ymax=Math.ceil(Math.max(A.y,B.y,C.y,D.y,p1.listePoints[0].y,p1.listePoints[1].y,p1.listePoints[2].y,p2.listePoints[0].y,p2.listePoints[1].y,p2.listePoints[2].y)+1)
				correction=''	
				break;

		}
		
		let params={
			xmin: Xmin,
			ymin: Ymin,
			xmax: Xmax,
			ymax: Ymax,
			pixelsParCm: 20,
			scale: sc,
		  }
		  if (this.sup2<3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
		else g=''
		if (this.sup2 == 2) {
		  k = 0.8;
		  carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
		} else {
		  k = 0.5;
		  carreaux = "";
		}
		objets_enonce.push(g,carreaux)
		objets_correction.push(g,carreaux)
		  enonce += mathalea2d( params
			,
			objets_enonce
		  );
		  correction += mathalea2d(
			params,
		   objets_correction
		  );
		if (this.liste_questions.indexOf(texte) == -1) {
		  // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
		  this.liste_questions.push(enonce + "<br>");
		  this.liste_corrections.push(correction + "<br>");
		  i++;
		}
		cpt++;
	  }
  
	  liste_de_question_to_contenu(this);
	};
	this.besoin_formulaire_numerique = ['Type de questions', 4, `0 : symÃ©tries axiales simples\n 1 : SymÃ©trie axiale\n 2 : SymÃ©trie centrale\n 3 : MÃ©lange`]
	this.besoin_formulaire2_numerique = [
	  "Type de cahier",
	  3,
	  `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
	];
  }

  
  /** 
 * * Remplir un tableau en utilisant la notion d'opposÃ©
 * * 5R10-0
 * @author SÃ©bastien Lozano
 */
function Trouver_oppose(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "Trouver l'opposÃ© d'un nombre relatif";
	this.consigne = "ComplÃ©ter le tableau suivant.";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	//sortie_html? this.spacing = 3 : this.spacing = 2; 
  //sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;
  
	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//type_de_questions_disponibles=[1];			

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			// une fonction pour gÃ©nÃ©rer un relatif et son opposÃ©
			function nbRel_et_son_oppose() {
				let nb_num = calcul(randint(-9,9) + calcul(randint(-9,9)/10));
				
				return {
					nb:tex_nombre(nb_num),
					opp:tex_nombre(-nb_num)
				};
			}
			let nb_ligne_nombres = ['\\text{Nombre}'];
			let nb_ligne_nombres_corr = ['\\text{Nombre}'];
			let nb_ligne_nombres_opp = [];
			let nb_ligne_nombres_opp_corr = [];
			let nb;
			for (let k=0;k<6;k++) {
				nb=nbRel_et_son_oppose();
				if (randint(0,1)==1) {
					nb_ligne_nombres[k+1] = '';	
					nb_ligne_nombres_corr[k+1]=mise_en_evidence(nb.nb);
					nb_ligne_nombres_opp.push(nb.opp)
					nb_ligne_nombres_opp_corr.push(nb.opp)
				} else {
					nb_ligne_nombres.push(nb.nb);	
					nb_ligne_nombres_corr.push(nb.nb);	
					nb_ligne_nombres_opp[k] = '';
					nb_ligne_nombres_opp_corr[k]=mise_en_evidence(nb.opp);
				}				
			};
			
			let enonces = [];
			enonces.push({
				enonce:`								
				${tab_C_L(nb_ligne_nombres,['\\text{OpposÃ© du nombre}'],nb_ligne_nombres_opp)}
				`,
				question:``,
				correction:`
				${tab_C_L(nb_ligne_nombres_corr,['\\text{OpposÃ© du nombre}'],nb_ligne_nombres_opp_corr)}				
				`
			  });
			enonces.push({
				enonce:`Ã©noncÃ© type 2`,
				question:``,
				correction:`${texte_en_couleur(`correction type2`)}`
			});

			switch (liste_type_de_questions[i]){
				case 1 : 
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte_corr = ``;	
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;	
        case 2 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
					break;				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/** 
 * * rÃ©soudre un problÃ¨me additif de fractions niv 5e
 * * 5N20-0
 * @author SÃ©bastien Lozano
 */
function Problemes_additifs_fractions_5e(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "RÃ©soudre un problÃ¨me en utilisant des fractions";	
	this.consigne = `Calculatrice autorisÃ©e.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
			  // type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
			  type_de_questions_disponibles = [0];      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es		

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			// on dÃ©finit les fractions pour les vols et les arguments pour le graphique
			let frac_vols = [
				[1,12,[1.8,' ','black',2,1,'red',0.4]],
				[1,12,[1.8,' ','black',2,1,'red',0.4]],
				[1,12,[1.8,' ','black',2,1,'red',0.4]],
				[1,4,[1.8,' ','black',2,1,'blue',0.4]],
				[1,2,[1.8,' ','black',2,1,'green',0.4]]
			];
			// on mÃ©lange pour l'alÃ©atoire tant que les deux premieres fractions sont Ã©gales
			do {
				frac_vols = shuffle(frac_vols);
			} while (frac_vols[0][1] == frac_vols[1][1]);
			

			// let q1a = randint(1,5); // indice pour faire varier la 1ere question sur la destination
			// let q1b = randint(1,5,[q1a]); // indice pour faire varier la 2eme question sur la destination
			let nb_vols_total;
			let destinations_vols = [[`l'`,`Afrique`],[`l'`,`Asie`],[`l'`,`Amerique`],[`l'`,`Europe`],[`la`,` France`]];
			destinations_vols = shuffle(destinations_vols);
			do {		
				nb_vols_total = randint(200,600);
			} while (nb_vols_total%2 != 0 || nb_vols_total%3 != 0 || nb_vols_total%4 != 0)

			// pour les situations
			let situations = [
				{//case 0 --> vols
					fin_enonce_situation:`vols d'une compagnie aÃ©rienne selon la destination`,
					nom_enonce:`vols`,
					last_question:[`cette compagnie a affrÃ©tÃ©`,`vols`,`le nombre de vols`,`Le nombre de vols`],
					cat1:{
						destination:destinations_vols[0][0]+destinations_vols[0][1],
						article:destinations_vols[0][0],
						nom: destinations_vols[0][1],
						frac: frac_vols[0],
						angle: calcul(360/frac_vols[0][1]),
						arg_graph: frac_vols[0][2],
					},
					cat2:{
						destination:destinations_vols[1][0]+destinations_vols[1][1],
						article:destinations_vols[1][0],
						nom: destinations_vols[1][1],
						frac: frac_vols[1],
						angle: calcul(360/frac_vols[1][1]),
						arg_graph: frac_vols[1][2],
					},
					cat3:{
						destination:destinations_vols[2][0]+destinations_vols[2][1],
						article:destinations_vols[2][0],
						nom: destinations_vols[2][1],
						frac: frac_vols[2],
						angle: calcul(360/frac_vols[2][1]),
						arg_graph: frac_vols[2][2],
					},
					cat4:{
						destination:destinations_vols[3][0]+destinations_vols[3][1],
						article:destinations_vols[3][0],
						nom: destinations_vols[3][1],
						frac: frac_vols[3],
						angle: calcul(360/frac_vols[3][1]),
						arg_graph: frac_vols[3][2],
					},
					cat5:{
						destination:destinations_vols[4][0]+destinations_vols[4][1],
						article:destinations_vols[4][0],
						nom: destinations_vols[4][1],
						frac: frac_vols[4],
						angle: calcul(360/frac_vols[4][1]),
						arg_graph: frac_vols[4][2],
					},
					// q1a:q1a,
					// q1b:q1b,
					nb_total:nb_vols_total,
					fig:``,
				},
				{//case 1 --> courses
				},
				{//case 2 --> activitÃ©s sportives
				},
				{//case 3 -->
				},
				{//case 4 -->
				},		
			];
			// une fonction pour gÃ©rer le codage des angles
			function myCodageAngle(A,O,B,angle,[...args]) {
				if (angle == 90) {
					return codageAngleDroit(A,O,B);
				} else {
					return codeAngle(A,O,angle,...args)
				};
			};

			// une fonction pour gÃ©rer l'affichage correct de la lÃ©gende
			//param est l'ordonnÃ©e du point qui sert Ã  la mediatrice !
			function myLegendeOK(param) {
				if (param<0) {
					return 2;
				} else {
					return 1;
				};
			};

			//une fonction pour positionner le label
			// y est l'ordonnÃ©e du point
			function myLabelPosition(y) {
				if (y<0) {
					return 'below';
				} else {
					return 'above';
				};
			};

			// une fonction pour gÃ©rer le texte en fonction de l'angle
			function myTexte_vols_corr(angle) {
				switch (angle) {
					case 90:
						return `du secteur est un angle droit, il mesure $${angle}\\degree$ sur les $360\\degree$ d'un tour complet, donc il reprÃ©sente $\\dfrac{${angle}}{360}$ du disque soit $\\dfrac{1}{4}$.`;
					case 30:
						return `rouge apparaÃ®t 3 fois, l'angle vert vaut $180\\degree$ et il y a un angle droit.<br>
							L'angle pour un tour complet vaut $360\\degree$, donc l'angle rouge vaut $(360-180-90)\\div 3 = ${angle}\\degree$.<br>
							L'angle rouge mesure $${angle}\\degree$ sur les $360\\degree$ d'un tour complet, donc il reprÃ©sente $\\dfrac{${angle}}{360}$ du disque soit $\\dfrac{1}{12}$.
							`;
					case 180:
						return `du secteur est un angle plat, il mesure $${angle}\\degree$ sur les $360\\degree$ d'un tour complet, donc il reprÃ©sente $\\dfrac{${angle}}{360}$ du disque soit $\\dfrac{1}{2}$.`;
		
				}
			};

			// on prÃ©pare la fenetre mathalea2d
			let fenetreMathalea2D = {xmin:-10,ymin:-8,xmax:10,ymax:8,pixelsParCm:20,scale:0.5}
			let O_vols = point(0,0);
			let A_vols = point(fenetreMathalea2D.xmin+6,0);
			let c_vols = cercleCentrePoint(O_vols,A_vols,'blue');
			c_vols.epaisseur = 2;
			// on trace les quartiers
			//cat1
			let B_vols = rotation(A_vols,O_vols,situations[0].cat1.angle);
			let s_OA_vols = segment(O_vols,A_vols);
			let s_OB_vols = segment(O_vols,B_vols);			
			let codage_AOB = myCodageAngle(A_vols,O_vols,B_vols,situations[0].cat1.angle,situations[0].cat1.arg_graph)
			//cat2
			let C_vols = rotation(B_vols,O_vols,situations[0].cat2.angle);			
			let s_OC_vols = segment(O_vols,C_vols);			
			let codage_BOC = myCodageAngle(B_vols,O_vols,C_vols,situations[0].cat2.angle,situations[0].cat2.arg_graph)
			//cat3
			let D_vols = rotation(C_vols,O_vols,situations[0].cat3.angle);			
			let s_OD_vols = segment(O_vols,D_vols);			
			let codage_COD = myCodageAngle(C_vols,O_vols,D_vols,situations[0].cat3.angle,situations[0].cat3.arg_graph)
			//cat4
			let E_vols = rotation(D_vols,O_vols,situations[0].cat4.angle);			
			let s_OE_vols = segment(O_vols,E_vols);			
			let codage_DOE = myCodageAngle(D_vols,O_vols,E_vols,situations[0].cat4.angle,situations[0].cat4.arg_graph)
			//cat5
			let F_vols = rotation(E_vols,O_vols,situations[0].cat5.angle);			
			let s_OF_vols = segment(O_vols,F_vols);			
			let codage_EOF = myCodageAngle(E_vols,O_vols,F_vols,situations[0].cat5.angle,situations[0].cat5.arg_graph)

			// lÃ©gende 
			let A_legende = point(fenetreMathalea2D.xmin+4,0);
			let L_vols_cat1 = rotation(A_legende,O_vols,situations[0].cat1.angle/2,situations[0].cat1.nom);
			L_vols_cat1.positionLabel = myLabelPosition(L_vols_cat1.y);
			let LL_vols_cat1 = rotation(A_vols,O_vols,situations[0].cat1.angle/2,situations[0].cat1.nom);
			let s_legende_cat1 = segment (L_vols_cat1,LL_vols_cat1);
			s_legende_cat1.styleExtremites = '->';
			s_legende_cat1.pointilles = true;

			let L_vols_cat2 = rotation(L_vols_cat1,O_vols,situations[0].cat1.angle/2+situations[0].cat2.angle/2,situations[0].cat2.nom);
			L_vols_cat2.positionLabel = myLabelPosition(L_vols_cat2.y);
			let LL_vols_cat2 = rotation(B_vols,O_vols,situations[0].cat2.angle/2,situations[0].cat2.nom);
			let s_legende_cat2 = segment (L_vols_cat2,LL_vols_cat2);
			s_legende_cat2.styleExtremites = '->';
			s_legende_cat2.pointilles = true;

			let L_vols_cat3 = rotation(L_vols_cat2,O_vols,situations[0].cat2.angle/2+situations[0].cat3.angle/2,situations[0].cat3.nom);
			L_vols_cat3.positionLabel = myLabelPosition(L_vols_cat3.y);
			let LL_vols_cat3 = rotation(C_vols,O_vols,situations[0].cat3.angle/2,situations[0].cat3.nom);
			let s_legende_cat3 = segment (L_vols_cat3,LL_vols_cat3);
			s_legende_cat3.styleExtremites = '->';
			s_legende_cat3.pointilles = true;

			let L_vols_cat4 = rotation(L_vols_cat3,O_vols,situations[0].cat3.angle/2+situations[0].cat4.angle/2,situations[0].cat4.nom);
			L_vols_cat4.positionLabel = myLabelPosition(L_vols_cat4.y);
			let LL_vols_cat4 = rotation(D_vols,O_vols,situations[0].cat4.angle/2,situations[0].cat4.nom);
			let s_legende_cat4 = segment (L_vols_cat4,LL_vols_cat4);
			s_legende_cat4.styleExtremites = '->';
			s_legende_cat4.pointilles = true;

			let L_vols_cat5 = rotation(L_vols_cat4,O_vols,situations[0].cat4.angle/2+situations[0].cat5.angle/2,situations[0].cat5.nom);
			L_vols_cat5.positionLabel = myLabelPosition(L_vols_cat5.y);
			let LL_vols_cat5 = rotation(E_vols,O_vols,situations[0].cat5.angle/2,situations[0].cat5.nom);
			let s_legende_cat5 = segment (L_vols_cat5,LL_vols_cat5);
			s_legende_cat5.styleExtremites = '->';
			s_legende_cat5.pointilles = true;

			
			let mesAppels = [
				c_vols,
				s_OA_vols,
				s_OB_vols,
				s_OC_vols,
				s_OD_vols,
				s_OE_vols,
				s_OF_vols,
				codage_AOB,
				codage_BOC,				
				codage_COD,				
				codage_DOE,				
				codage_EOF,				
				labelPoint(L_vols_cat1),
				labelPoint(L_vols_cat2),
				labelPoint(L_vols_cat3),
				labelPoint(L_vols_cat4),
				labelPoint(L_vols_cat5),
				s_legende_cat1,
				s_legende_cat2,
				s_legende_cat3,
				s_legende_cat4,
				s_legende_cat5,
			];
			let fig_vols = mathalea2d(
				fenetreMathalea2D,
				mesAppels
			);
			situations[0].fig = fig_vols;

			let enonces = [];			
			let i_sous_question=0;
			let i_sous_question_corr=0;

			for (let k=0;k<1;k++) {
				enonces.push({
					enonce:`
					On a reprÃ©sentÃ© sur le diagramme circulaire ci-contre la rÃ©partition des ${situations[k].fin_enonce_situation}.<br>
					${texte_gras(`Les angles de mÃªme couleur ont la mÃªme mesure.`)}<br>
					${texte_gras(`L'angle vert est un angle plat.`)}<br>
					${situations[k].fig}<br>
					${num_alpha(i_sous_question++)} Quelle fraction reprÃ©sente les ${situations[k].nom_enonce} vers ${situations[k].cat1.destination} ?<br>
					${num_alpha(i_sous_question++)} Quelle fraction reprÃ©sente les ${situations[k].nom_enonce} vers ${situations[k].cat2.destination} ?<br>
					${num_alpha(i_sous_question++)} Sachant que ${situations[k].last_question[0]} ${situations[k].nb_total} ${situations[k].last_question[1]}
					et que les ${situations[k].nom_enonce} vers ${situations[k].cat3.destination} reprÃ©sentent $\\dfrac{${situations[k].cat3.frac[0]}}{${situations[k].cat3.frac[1]}}$ de ce total,
					caluler ${situations[k].last_question[2]} vers ${situations[k].cat3.destination}?
												
					`,
					correction:`
					${num_alpha(i_sous_question_corr++)} Pour ${situations[k].cat1.destination} l'angle ${myTexte_vols_corr(situations[k].cat1.angle)}<br>					
					${texte_en_couleur(`La fraction qui reprÃ©sente les ${situations[k].nom_enonce} vers ${situations[k].cat1.destination} vaut donc $\\dfrac{${situations[k].cat1.frac[0]}}{${situations[k].cat1.frac[1]}}$`)}.<br>
					
					${num_alpha(i_sous_question_corr++)} Pour ${situations[k].cat2.destination} l'angle ${myTexte_vols_corr(situations[k].cat2.angle)}<br>				
					${texte_en_couleur(`La fraction qui reprÃ©sente les ${situations[k].nom_enonce} vers ${situations[k].cat2.destination} vaut donc $\\dfrac{${situations[k].cat2.frac[0]}}{${situations[k].cat2.frac[1]}}$`)}<br>

					${num_alpha(i_sous_question_corr++)} Calculons $\\dfrac{${situations[k].cat3.frac[0]}}{${situations[k].cat3.frac[1]}}$ de ${situations[k].nb_total} :<br> 
					$\\dfrac{${situations[k].cat3.frac[0]}}{${situations[k].cat3.frac[1]}}\\times ${situations[k].nb_total} = \\dfrac{${situations[k].cat3.frac[0]}\\times ${situations[k].nb_total}}{${situations[k].cat3.frac[1]}} = \\dfrac{${situations[k].cat3.frac[0]}\\times ${calcul(situations[k].nb_total/situations[k].cat3.frac[1])}\\times ${situations[k].cat3.frac[1]}}{${situations[k].cat3.frac[1]}} = \\dfrac{${situations[k].cat3.frac[0]}\\times ${calcul(situations[k].nb_total/situations[k].cat3.frac[1])}\\times \\cancel{${situations[k].cat3.frac[1]}}}{\\cancel{${situations[k].cat3.frac[1]}}} = ${situations[k].cat3.frac[0]}\\times ${calcul(situations[k].nb_total/situations[k].cat3.frac[1])} = ${calcul(situations[k].nb_total/situations[k].cat3.frac[1])}$<br>
					${texte_en_couleur(`${situations[k].last_question[3]} vers ${situations[k].cat3.destination} vaut donc ${calcul(situations[k].nb_total/situations[k].cat3.frac[1])}.`)}
					`
				});
			};
		
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;		
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};
  

/** 
 * * rÃ©soudre un problÃ¨me additif avec des relatifs
 * * 5R20-4
 * @author SÃ©bastien Lozano
 */

function Problemes_additifs_relatifs_5e(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "RÃ©soudre un problÃ¨me en utilisant une somme algÃ©brique de relatifs.";	
	this.consigne = ``;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
			//   type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
			  type_de_questions_disponibles = [0];			      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//type_de_questions_disponibles=[1];			

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let g_p_u; //pour le gain/perte unitaire
			let g_m; //pour le gain multiple
			// on veut des multiples de 5 pour n'avoir que des demis entiers ou des entiers
			do {
				g_p_u = randint(10,30);
				g_m = randint(10,30);
			} while (g_p_u%5 != 0 || g_m%5 != 0 || g_m <= g_p_u) 

			let n_tot=randint(10,15); // nombre totale de lancers
			let n_g_u; // nb de gains untitaires
			let n_p; // nb de pertes
			do {
				n_g_u = randint(2,10);
				n_p = randint(2,10);
			} while (n_g_u+n_p >= n_tot)

			// on Ã©change parfois le nombre de gain unitaire et le nombre de perte pour avoir un bilan nÃ©gatif plus souvent
			if (n_p<n_g_u) {
				if (randint(0,1)==0) {
					let temp = n_p;
					n_p=n_g_u;
					n_g_u=temp;
				};
			};

			let prenoms = [[prenomF(),'Elle','elle'],[prenomM(),'Il','il']];
			let currentPrenom = choice(prenoms);

			// une fonction pour Ã©crire les chaine correctives
			function myGainPerteString(nb,type,valeur) {
				let sortie=``;
				switch (type) {
					case 'gain':						
						sortie = `(+${tex_prix(valeur)}$â¬$)`;
						for (let m=1;m<nb;m++) {
							sortie +=`+(+${tex_prix(valeur)}$â¬$)`;
						};
						break;
					case 'perte':
						sortie = `(-${tex_prix(valeur)}$â¬$)`;
						for (let m=1;m<nb;m++) {
							sortie +=`+(-${tex_prix(valeur)}$â¬$)`;
						};
						break;					
				};
				return sortie;
			}

			// une fonction pour dire si le bilan est positif ou nÃ©gatif
			function isBilanPositif(tot) {
				if (tot >= 0) {
					return true;
				} else {
					return false;
				};
			};

			let bilan;			
			if ( isBilanPositif( calcul((n_tot-n_g_u-n_p)*calcul(g_m/10)) + calcul(n_g_u*calcul(g_p_u/10)) - calcul(n_p*calcul(g_p_u/10))) ) {
				bilan = [`Globalement, le montant des gains`,`est supÃ©rieur au montant des pertes`,`${texte_en_couleur(`Le bilan est donc positif.`)}`,`a gagnÃ©`,tex_prix(calcul((n_tot-n_g_u-n_p)*calcul(g_m/10)) + calcul(n_g_u*calcul(g_p_u/10)) - calcul(n_p*calcul(g_p_u/10)))];
			} else {
				bilan = [`Globalement, le montant des gains`,`est infÃ©rieur au montant des pertes`,`${texte_en_couleur(`Le bilan est donc nÃ©gatif.`)}`,`a perdu`,tex_prix((-1)*(calcul((n_tot-n_g_u-n_p)*calcul(g_m/10)) + calcul(n_g_u*calcul(g_p_u/10)) - calcul(n_p*calcul(g_p_u/10))))];
			}
			// pour les situations
			let situations = [
				{//case 0 --> les quilles
					nb_tot_lancers:n_tot,
					nb_gains_unitaires:n_g_u,
					nb_pertes:n_p,
					nb_gains:n_tot-n_g_u-n_p,
					perte:calcul(g_p_u/10),
					gain_unitaire:calcul(g_p_u/10),
					gain_multiple:calcul(g_m/10),
					enonce_1:`lancer une balle sur des quilles.`,
					enonce_2:`- Si la balle touche plusieurs quilles, le joueur gagne `,
					enonce_3:`- Si la balle ne touche qu'une quille, le joueur gagne `,
					enonce_4:`- Si la balle ne touche aucune quille, le joueur perd `,
					enonce_5:`a lancÃ©`,
					enonce_6:`la balle`,
					correction_1:`touchÃ© plusieurs quilles`,
					correction_2:`touchÃ© qu'une seule quille`,
					prenom:currentPrenom[0],//prenoms[choice([0,1])][0],
					pronomMaj:currentPrenom[1],//prenoms[choice([0,1])][1],
					pronomMin:currentPrenom[2],//prenoms[choice([0,1])][2],
					bilan:bilan,
				},		
			];

			let enonces = [];
			let i_sous_question;
			let i_sous_question_corr;
			for (let k=0;k<situations.length;k++) {
				i_sous_question = 0;
				i_sous_question_corr = 0;
				enonces.push({
					enonce:`
					Un jeu consiste Ã  ${situations[k].enonce_1}
					<br>${situations[0].enonce_2} $${tex_prix(situations[0].gain_multiple)}$â¬.				
					<br>${situations[0].enonce_3} $${tex_prix(situations[0].gain_unitaire)}$â¬.
					<br>${situations[0].enonce_4} $${tex_prix(situations[0].perte)}$â¬.
					<br>${situations[k].prenom} ${situations[k].enonce_5} $${situations[k].nb_tot_lancers}$ fois ${situations[k].enonce_6}.
					${situations[k].pronomMaj} a perdu de l'argent $${situations[k].nb_pertes}$ fois et a gagnÃ© $${situations[k].nb_gains_unitaires}$ fois $${tex_prix(situations[k].gain_unitaire)}$â¬.
					<br> ${num_alpha(i_sous_question++)} A-t-${situations[k].pronomMin} globalement gagnÃ© ou perdu de l'argent ?
					<br> ${num_alpha(i_sous_question++)} Combien a-t-${situations[k].pronomMin} globalement gagnÃ© ou perdu ?
					`,
					question:``,
					correction:`
					${situations[k].prenom} ${situations[k].enonce_5} $${situations[k].nb_tot_lancers}$ fois ${situations[k].enonce_6},
					sur les $${situations[k].nb_tot_lancers}$ lancers, on sait combien de fois ${situations[k].pronomMin} a perdu de l'argent et combien de fois ${situations[k].pronomMin} a gagnÃ© $${tex_prix(situations[k].gain_unitaire)}$â¬, les autres lancers correspondent donc au nombre de fois oÃ¹ ${situations[k].pronomMin} a ${situations[k].correction_1} et qu'${situations[k].pronomMin} a gagnÃ© $${tex_prix(situations[k].gain_multiple)}$â¬ 
					<br> $${situations[k].nb_tot_lancers}-${situations[k].nb_pertes}-${situations[k].nb_gains_unitaires} = ${situations[k].nb_tot_lancers-situations[k].nb_pertes-situations[k].nb_gains_unitaires}$,
					${situations[k].pronomMin} a donc ${situations[k].correction_1} $${situations[k].nb_gains}$ fois.

					<br>${texte_gras(`Gains lorsqu'${situations[k].pronomMin} a ${situations[k].correction_1} :`)}
					<br>$${myGainPerteString(situations[k].nb_gains,'gain',situations[k].gain_multiple)} = ${situations[k].nb_gains}\\times (+${tex_prix(situations[k].gain_multiple)}$â¬$) = +${tex_prix(situations[k].nb_gains*situations[k].gain_multiple)}$â¬

					<br>${texte_gras(`Gains lorsqu'${situations[k].pronomMin} n'a ${situations[k].correction_2} :`)}
					<br>$${myGainPerteString(situations[k].nb_gains_unitaires,'gain',situations[k].gain_unitaire)} = ${situations[k].nb_gains_unitaires}\\times (+${tex_prix(situations[k].gain_unitaire)}$â¬$) = +${tex_prix(situations[k].nb_gains_unitaires*situations[k].gain_unitaire)}$â¬

					<br>${texte_gras(`Pertes :`)}
					<br>$${myGainPerteString(situations[k].nb_pertes,'perte',situations[k].perte)} = ${situations[k].nb_pertes}\\times (-${tex_prix(situations[k].perte)}$â¬$) = -${tex_prix(situations[k].nb_pertes*situations[k].perte)}$â¬

					<br>${num_alpha(i_sous_question_corr++)} ${situations[k].bilan[0]}, $(+${tex_prix(situations[k].nb_gains*situations[k].gain_multiple)}$â¬$)$ et $(+${tex_prix(situations[k].nb_gains_unitaires*situations[k].gain_unitaire)}$â¬$)$, ${situations[k].bilan[1]}, $(-${tex_prix(situations[k].nb_pertes*situations[k].perte)}$â¬$)$.
					<br> ${situations[k].bilan[2]}   

					<br>${num_alpha(i_sous_question_corr++)} 
					$(+${tex_prix(situations[k].nb_gains*situations[k].gain_multiple)}$â¬$)+(+${tex_prix(situations[k].nb_gains_unitaires*situations[k].gain_unitaire)}$â¬$)+(-${tex_prix(situations[k].nb_pertes*situations[k].perte)}$â¬$) = (${tex_prix(situations[k].nb_gains*situations[k].gain_multiple+situations[k].nb_gains_unitaires*situations[k].gain_unitaire-situations[k].nb_pertes*situations[k].perte)}$â¬$)$
					<br>${texte_en_couleur(`Globalement ${situations[k].prenom} ${situations[k].bilan[3]} $${situations[k].bilan[4]}$â¬`)} 

					`
				});
			};
		
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;				
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};


/**
 * Caculer la valeur d'une expression littÃ©rale de degrÃ© 1 Ã  une inconnue
 * 5L13-5
 * @author SÃ©bastien Lozano forking 5L13 of RÃ©mi Angot
 */  
function Calculer_la_valeur_d_une_expression_litterale_deg1_inc1() {
	Calculer_la_valeur_d_une_expression_litterale.call(this)
	this.version="5L13-5";	
	this.titre="Calculer la valeur d'une expression littÃ©rale de degrÃ© 1 Ã  1 inconnue";
	this.nb_questions=2;

}


/** 
 * * Justifier qu'un tableau est un tableau de proportionnalitÃ© ou non
 * * 5P10
 * @author SÃ©bastien Lozano
 */

function Tableaux_et_proportionnalite(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 6;
	} else {
		this.nb_questions = 4;
	};	

	this.titre = "Tableaux et proportionnalitÃ©.";	
	this.consigne = `Dire si les tableaux suivants sont de tableaux de proportionnalitÃ©. Justifier.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0,1,2,3,4,5];			
		} else {
			  //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
			  type_de_questions_disponibles = [choice([0,1]),2,choice([3,4]),5];			      			
			  type_de_questions_disponibles = shuffle(type_de_questions_disponibles);
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {

			let n1 = randint(5,9);
			let n2 = randint(5,9,[n1]);
			let n3 = randint(5,9,[n1,n2]);
			let coeff = randint(2,9);
			let coeff_soust = randint(2,4);

			// pour les dÃ©cimaux seulement en demis
			let u1 = randint(1,9);
			let ci1 = choice([0,5]); 					
			let u2 = randint(1,9);
			let ci2 = choice([0,5]); 					
			let u3 = randint(1,9);
			let ci3 = choice([0,5]);
			
			while ( ci1==0 && ci2 == 0 && ci3 == 0) {
				ci1 = choice([0,5]); 					
				ci2 = choice([0,5]); 					
				ci3 = choice([0,5]); 					
			};

			// une fonction pour la justification
			function justifications_OK(n1,n2,n3,coeff,sens) {
				let sortie;
				switch (sens) {
					case 'L1L2':
						sortie = `$\\dfrac{\\textcolor{blue}{${tex_nombre(n1)}}}{\\textcolor{red}{${tex_nombre(n1*coeff)}}} = \\dfrac{\\textcolor{blue}{${tex_nombre(n2)}}}{\\textcolor{red}{${tex_nombre(n2*coeff)}}} = \\dfrac{\\textcolor{blue}{${tex_nombre(n3)}}}{\\textcolor{red}{${tex_nombre(n3*coeff)}}}$`;
						break;
					case 'L2L1':
						sortie = `$\\dfrac{\\textcolor{red}{${tex_nombre(n1*coeff)}}}{\\textcolor{blue}{${tex_nombre(n1)}}} = \\dfrac{\\textcolor{red}{${tex_nombre(n2*coeff)}}}{\\textcolor{blue}{${tex_nombre(n2)}}} = \\dfrac{\\textcolor{red}{${tex_nombre(n3*coeff)}}}{\\textcolor{blue}{${tex_nombre(n3)}}}$`;
						break;
				};
				return sortie;				
			};

			// une fonction pour la justification sens1
			function justifications_KO(n1,n2,n3,coeff,operation,sens) {
				let sortie;
				let isEq = function(n1,n2,coeff) {
					if ( calcul(n1/(n1+coeff)) == calcul(n2/(n2+coeff)) ) {
						return `=`;
					} else {
						return `\\neq`;
					};
				};
				let color1,color2;
				switch (sens) {
					case 'L1L2':
						color1 = 'red';
						color2 = 'blue';
						break;
					case 'L2L1':
						color1 = 'blue';
						color2 = 'red';
						break;				
				};
				switch (operation) {
					case '+':						
						sortie = `$\\dfrac{\\textcolor{${color2}}{${tex_nombre(n1)}}}{\\textcolor{${color1}}{${tex_nombre(n1+coeff)}}}`;
						sortie += isEq(n1,n2,coeff);
						sortie += `\\dfrac{\\textcolor{${color2}}{${tex_nombre(n2)}}}{\\textcolor{${color1}}{${tex_nombre(n2+coeff)}}}`;	
						sortie += isEq(n2,n3,coeff);
						sortie += `\\dfrac{\\textcolor{${color2}}{${tex_nombre(n3)}}}{\\textcolor{${color1}}{${tex_nombre(n3+coeff)}}}$`;	
						break;
					case '-':
						sortie = `$\\dfrac{\\textcolor{${color2}}{${tex_nombre(n1)}}}{\\textcolor{${color1}}{${tex_nombre(n1-coeff)}}}`;
						sortie += isEq(n1,n2,coeff);
						sortie += `\\dfrac{\\textcolor{${color2}}{${tex_nombre(n2)}}}{\\textcolor{${color1}}{${tex_nombre(n2-coeff)}}}`;	
						sortie += isEq(n2,n3,coeff);
						sortie += `\\dfrac{\\textcolor{${color2}}{${tex_nombre(n3)}}}{\\textcolor{${color1}}{${tex_nombre(n3-coeff)}}}$`;	
						break;
				};
				return sortie;				
			};


			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
				{//case 0 --> multiplication ligne1 vers ligne2
					tableau:tab_C_L(
						[`\\phantom{000}`+n1+`\\phantom{000}`,`\\phantom{000}`+n2+`\\phantom{000}`,`\\phantom{000}`+n3+`\\phantom{000}`],
						[n1*coeff],[n2*coeff,n3*coeff]
						),
					justification_L1_L2:justifications_OK(n1,n2,n3,coeff,'L1L2'),
					justification_L2_L1:justifications_OK(n1,n2,n3,coeff,'L2L1'),
					isProportionnel:texte_en_couleur_et_gras(`C'est donc un tableau de proportionnalitÃ©.`),
					areEgaux:`Ã©gaux`,

				},
				{//case 1 --> multiplication ligne1 vers ligne2 DÃ©cimaux
					tableau:tab_C_L(
						[`\\phantom{000}`+tex_nombre(u1+ci1/10)+`\\phantom{000}`,`\\phantom{000}`+tex_nombre(u2+ci2/10)+`\\phantom{000}`,`\\phantom{000}`+tex_nombre(u3+ci3/10)+`\\phantom{000}`],
						[tex_nombre((u1+ci1/10)*coeff)],[tex_nombre((u2+ci2/10)*coeff),tex_nombre((u3+ci3/10)*coeff)]
						),
					justification_L1_L2:justifications_OK(u1+ci1/10,u2+ci2/10,u3+ci3/10,coeff,'L1L2'),
					justification_L2_L1:justifications_OK(u1+ci1/10,u2+ci2/10,u3+ci3/10,coeff,'L2L1'),
					isProportionnel:texte_en_couleur_et_gras(`C'est donc un tableau de proportionnalitÃ©.`),
					areEgaux:`Ã©gaux`,

				},
				{//case 2 --> division ligne1 vers ligne2
						tableau:tab_C_L(
							[`\\phantom{000}`+n1*coeff+`\\phantom{000}`,`\\phantom{000}`+n2*coeff+`\\phantom{000}`,`\\phantom{000}`+n3*coeff+`\\phantom{000}`],
							[n1],[n2,n3]
							),
						justification_L1_L2:justifications_OK(n1*coeff,n2*coeff,n3*coeff,1/coeff,'L1L2'),
						justification_L2_L1:justifications_OK(n1*coeff,n2*coeff,n3*coeff,1/coeff,'L2L1'),
						isProportionnel:texte_en_couleur_et_gras(`C'est donc un tableau de proportionnalitÃ©.`),
						areEgaux:`Ã©gaux`,
							
				},
				{//case 3 --> addition ligne1 vers ligne2
					tableau:tab_C_L(
						[`\\phantom{000}`+n1+`\\phantom{000}`,`\\phantom{000}`+n2+`\\phantom{000}`,`\\phantom{000}`+n3+`\\phantom{000}`],
						[n1+coeff],[n2+coeff,n3+coeff]
						),
					justification_L1_L2:justifications_KO(n1,n2,n3,coeff,'+','L1L2'),
					justification_L2_L1:justifications_KO(n1+coeff,n2+coeff,n3+coeff,-coeff,'+','L2L1'),
					isProportionnel:texte_en_couleur_et_gras(`Ce n'est donc pas un tableau de proportionnalitÃ©.`),
					areEgaux:`diffÃ©rents`,
				},
				{//case 4 --> addition ligne1 vers ligne2 DÃ©cimaux
					tableau:tab_C_L(
						[`\\phantom{000}`+tex_nombre(u1+ci1/10)+`\\phantom{000}`,`\\phantom{000}`+tex_nombre(u2+ci2/10)+`\\phantom{000}`,`\\phantom{000}`+tex_nombre(u3+ci3/10)+`\\phantom{000}`],
						[tex_nombre((u1+ci1/10)+coeff)],[tex_nombre((u2+ci2/10)+coeff),tex_nombre((u3+ci3/10)+coeff)]
						),
					justification_L1_L2:justifications_KO(u1+ci1/10,u2+ci2/10,u3+ci3/10,coeff,'+','L1L2'),
					justification_L2_L1:justifications_KO(u1+ci1/10,u2+ci2/10,u3+ci3/10,coeff,'+','L2L1'),
					isProportionnel:texte_en_couleur_et_gras(`Ce n'est donc pas un tableau de proportionnalitÃ©.`),
					areEgaux:`diffÃ©rents`,

				},
				{//case 5 --> soustraction ligne1 vers ligne2
					tableau:tab_C_L(
						[`\\phantom{000}`+n1+`\\phantom{000}`,`\\phantom{000}`+n2+`\\phantom{000}`,`\\phantom{000}`+n3+`\\phantom{000}`],
						[n1-coeff_soust],[n2-coeff_soust,n3-coeff_soust]
						),
					justification_L1_L2:justifications_KO(n1,n2,n3,coeff_soust,'-','L1L2'),
					justification_L2_L1:justifications_KO(n1-coeff_soust,n2-coeff_soust,n3-coeff_soust,-coeff_soust,'-','L2L1'),
					isProportionnel:texte_en_couleur_et_gras(`Ce n'est donc pas un tableau de proportionnalitÃ©.`),
					areEgaux:`diffÃ©rents`,
				},
			];

			let enonces = [];
			for (let k=0;k<situations.length;k++) {
				enonces.push({
					enonce:`					
					${situations[k].tableau}				
					`,
					question:``,
					correction:`
					Pour dÃ©terminer si c'est un tableau de proportionnalitÃ©, il suffit de comparer les quotients d'un nombre de la premiÃ¨re ligne par le nombre correspondant de la seconde ligne ou inversement.
					<br> Soit ${situations[k].justification_L1_L2}, on constate qu'ils sont ${situations[k].areEgaux}.
					<br>Ou bien ${situations[k].justification_L2_L1}, on constate aussi qu'ils sont ${situations[k].areEgaux}.
					<br>${situations[k].isProportionnel}
					`
				});
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	
        		case 1 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          			break;
        		case 2 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
          			break;				
        		case 3 : 
					texte = `${enonces[3].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[3].correction}`;
					};
					break;	
				case 4 : 
					texte = `${enonces[4].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[4].correction}`;
					};
					break;
				case 5 : 
					texte = `${enonces[5].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[5].correction}`;
					};
					break;					
 			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/** 
 * * Tableaux et pourcentages
 * * 5N11-1
 * @author SÃ©bastien Lozano
 */

function Tableaux_et_pourcentages(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "Tableaux et pourcentages";	
	this.consigne = `ComplÃ©ter le tableau suivant.`;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	// sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	// sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
			  //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
			  type_de_questions_disponibles = [0];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let prix,remises;
			do {
				prix = randint(150,300);
			} while (prix%5 != 0)
			
			if (this.sup == 1) {//coeff entier
				remises = choice([
					[{str:'10\\%',nb:10},{str:'20\\%',nb:20},{str:'30\\%',nb:30}],
					[{str:'5\\%',nb:5},{str:'15\\%',nb:10},{str:'35\\%',nb:35}],
					[{str:'10\\%',nb:20},{str:'40\\%',nb:40},{str:'80\\%',nb:80}],
					[{str:'5\\%',nb:5},{str:'25\\%',nb:25},{str:'55\\%',nb:55}],
					//[{str:'10\\%',nb:10},{str:'5\\%',nb:5},{str:'15\\%',nb:15}],
					//[{str:'50\\%',nb:50},{str:'30\\%',nb:30},{str:'10\\%',nb:10}],
				]);	
			};
			if (this.sup == 2) {//coeff dÃ©cimal
				remises = choice([
					//[{str:'10\\%',nb:10},{str:'20\\%',nb:20},{str:'30\\%',nb:30}],					
					//[{str:'5\\%',nb:5},{str:'10\\%',nb:10},{str:'35\\%',nb:35}],
					[{str:'10\\%',nb:10},{str:'5\\%',nb:5},{str:'15\\%',nb:15}],
					[{str:'50\\%',nb:50},{str:'30\\%',nb:30},{str:'10\\%',nb:10}],
					[{str:'20\\%',nb:20},{str:'10\\%',nb:10},{str:'50\\%',nb:50}],
					[{str:'40\\%',nb:40},{str:'10\\%',nb:10},{str:'5\\%',nb:5}],
				]);	
			}

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
				{//case 0 -->
					tableau:tab_C_L([`\\text{Prix en euro}`,tex_prix(prix),tex_prix(prix),tex_prix(prix)],[`\\text{Remise en pourcentage}`,`\\text{Montant de la remise en euro}`,`\\text{Nouveau prix}`],[
						remises[0].str,remises[1].str,remises[2].str,
						tex_prix(prix*remises[0].nb/100),'','',
						tex_prix(prix-prix*remises[0].nb/100),'','',
					]),
					tableau_corr:tab_C_L([`\\text{Prix en euro}`,tex_prix(prix),tex_prix(prix),tex_prix(prix)],[`\\text{Remise en pourcentage}`,`\\text{Montant de la remise en euro}`,`\\text{Nouveau prix}`],[
						remises[0].str,remises[1].str,remises[2].str,
						tex_prix(prix*remises[0].nb/100),mise_en_evidence(`${tex_prix(prix*remises[0].nb/100)} \\times ${tex_nombre(remises[1].nb/remises[0].nb)} = ${tex_prix(prix*remises[1].nb/100)}`),mise_en_evidence(`${tex_prix(prix*remises[0].nb/100)} \\times ${tex_nombre(remises[2].nb/remises[0].nb)} = ${tex_prix(prix*remises[2].nb/100)}`),
						tex_prix(prix-prix*remises[0].nb/100),mise_en_evidence(`${tex_prix(prix)}-${tex_prix(prix*remises[1].nb/100)} = ${tex_prix(prix-prix*remises[1].nb/100)}`),mise_en_evidence(`${tex_prix(prix)}-${tex_prix(prix*remises[2].nb/100)} = ${tex_prix(prix-prix*remises[2].nb/100)}`),
					]),
				},	
			];

			let enonces = [];
			for (let k=0;k<situations.length;k++) {
				enonces.push({
					enonce:`					
					${situations[k].tableau}	
					`,
					question:``,
					correction:`
					L'Ã©noncÃ© indique le montant pour une remise de $${remises[0].str}$.
					<br>Or $${tex_nombre(remises[1].nb/remises[0].nb)} \\times ${remises[0].str} = ${remises[1].str}$.
					<br>Donc pour $${remises[1].str}$ le montant de la remise sera $${tex_nombre(remises[1].nb/remises[0].nb)}$ fois celui de la remise de $${remises[0].str}$, d'oÃ¹ le calul indiquÃ© dans le tableau.
					<br><br>
					L'Ã©noncÃ© indique le montant pour une remise de $${remises[0].str}$.
					<br>Or $${tex_nombre(remises[2].nb/remises[0].nb)} \\times ${remises[0].str} = ${remises[2].str}$.
					<br>Donc pour $${remises[2].str}$ le montant de la remise sera $${tex_nombre(remises[2].nb/remises[0].nb)}$ fois celui de la remise de $${remises[0].str}$, d'oÃ¹ le calul indiquÃ© dans le tableau.
					<br><br>${situations[k].tableau_corr}
					`
				});
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	
			
			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : coefficient enttier\n2 : coefficient dÃ©cimal"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};


/** 
 * * Traduire la dÃ©pendance entre deux grandeurs par un tableau de valeurs et produire une formule.
 * * 5L10-4
 * @author SÃ©bastien Lozano
 */

function Tableaux_et_fonction(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "Produire une formule Ã  partir d'un tableau";	
	this.consigne = ``;	
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 2; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [0];			
		} else {
			  //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
			  type_de_questions_disponibles = [0];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			let L1 = randint(3,7);
			let L2 = L1+1;
			let L3 = L2*2;
			let L4 = L2*3;

			let cote_inconnu = choice(['L']);	
			let cote_inconnu_corr;		
			let cote_inconnu_corr_num;	
			let cote_connu = randint(3,7);

			let unites;
			let grand_L;
			let grand_L_num;
			let petit_l;
			let petit_l_num;
			let unite_grand_L;
			let unite_petit_l; 
			let txt_corr;			
			if (this.sup == 1) {//mÃªme unitÃ©s
				unites = choice([['cm','cm'],['m','m']]);
				grand_L = [`${L1}`,`${L2}`,`${L3}`,`${L4}`];
				grand_L_num = [`${L1}`,`${L2}`,`${L3}`,`${L4}`]; 
				petit_l = [`${cote_connu}`,``,``,``]; 
				petit_l_num = [`${cote_connu}`,``,``,``];
				unite_grand_L = unites[0];
				unite_petit_l = unites[1];
				cote_inconnu_corr  = cote_inconnu;
				cote_inconnu_corr_num =  `2`+cote_inconnu;
				txt_corr = `Les unitÃ©s sont les mÃªmes il n'est donc pas necessaire de convertir.`;
			};
			if (this.sup == 2) {// unitÃ©s diffÃ©rentes
				unites = choice([['cm','m'],['m','cm']]);
				if (unites[0]=='cm') {
					grand_L =[`${L1}`,`${L2}`,`${L3}`,`${L4}`];
					grand_L_num =[`${L1}`,`${L2}`,`${L3}`,`${L4}`];
					petit_l = [`${cote_connu}\\times 100`,``,``,``];					
					petit_l_num =[`${100*cote_connu}`,``,``,``]; 
					unite_grand_L = unites[0];
					unite_petit_l = unites[0];
					cote_inconnu_corr =  cote_inconnu;
					cote_inconnu_corr_num =  `2`+cote_inconnu;
					txt_corr = `Les unitÃ©s sont diffÃ©rentes, pour plus de confort, nous pouvons les convertir dans la mÃªme unitÃ©, ici en cm.`;
				};
				if (unites[0]=='m') {					
					grand_L = [`${L1}\\times 100`,`${L2}\\times 100`,`${L3}\\times 100`,`${L4}\\times 100`];
					grand_L_num = [`${100*L1}`,`${100*L2}`,`${100*L3}`,`${100*L4}`];
					petit_l = [`${cote_connu}`,``,``,``];
					petit_l_num =[`${cote_connu}`,``,``,``]; 					
					unite_grand_L = unites[1];
					unite_petit_l = unites[1];
					cote_inconnu_corr = cote_inconnu+`\\times 100`;
					cote_inconnu_corr_num = `200`+cote_inconnu;
					
					txt_corr = `Les unitÃ©s sont diffÃ©rentes, pour plus de confort, nous pouvons les convertir dans la mÃªme unitÃ©, ici en cm.`;
				};

			};			
			
			

			// on prÃ©pare la fenetre mathalea2d
			let fenetreMathalea2D = {xmin:-5,ymin:-3,xmax:5,ymax:3,pixelsParCm:20,scale:0.5}
			let A = point(-4,2);
			let B = point(-4,-2);
			let C = point(4,-2);
			let D = point(4,2);
			let mesAppels = [
				polygone(A,B,C,D),		
			];
			let figure = mathalea2d(
				fenetreMathalea2D,
				mesAppels
			);

			// une fonction pour moduler l'affichage d'une Ã©tape dans la correction
			function etapeCorrective(str,sup) {
				let sortie;
				if (sup == 1) {
					sortie = ``;
				};
				if (sup == 2) {
					sortie = str;
				};
				return sortie;

			};

			// pour les situations, autant de situations que de cas dans le switch !
			let situations = [
				{//case 0 -->
					unites:unites,
					cote_connu:cote_connu,
					cote_inconnu:cote_inconnu,
					tableau:tab_C_L([`\\text{Longueur $${cote_inconnu}$ du cÃ´tÃ© (en ${unites[0]})}`,`\\phantom{000}${L1}\\phantom{000}`,`\\phantom{000}${L2}\\phantom{000}`,`\\phantom{000}${L3}\\phantom{000}`,`\\phantom{000}${L4}\\phantom{000}`],[`\\text{PÃ©rimÃ¨tre du rectangle (en $${unites[1]}$)}`],
					['','','','']
					),
					calculL1:`Pour ${L1} ${unites[0]} : $2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L1} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[0])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[0])} \\; \\text{${unite_grand_L}}}$.`,
					calculL2:`Pour ${L2} ${unites[0]} : $2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L2} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[1])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[1])} \\; \\text{${unite_grand_L}}}$.`,
					calculL3:`Pour ${L3} ${unites[0]} : $2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L3} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[2])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[2])} \\; \\text{${unite_grand_L}}}$.`,
					calculL4:`Pour ${L4} ${unites[0]} : $2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L4} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[3])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[3])} \\; \\text{${unite_grand_L}}}$.`,
					tableau_corr:tab_C_L([`\\text{Longueur $${cote_inconnu_corr}$ du cÃ´tÃ© (en ${unite_grand_L})}`,`\\phantom{0}${grand_L[0]}\\phantom{0}`,`\\phantom{0}${grand_L[1]}\\phantom{0}`,`\\phantom{0}${grand_L[2]}\\phantom{0}`,`\\phantom{0}${grand_L[3]}\\phantom{0}`],
					[`\\text{PÃ©rimÃ¨tre du rectangle (en ${unite_petit_l})}`],
					[
						`${tex_nombre(2*petit_l_num[0]+2*grand_L_num[0])} \\; \\text{${unite_grand_L}}`,
						`${tex_nombre(2*petit_l_num[0]+2*grand_L_num[1])} \\; \\text{${unite_grand_L}}`,
						`${tex_nombre(2*petit_l_num[0]+2*grand_L_num[2])} \\; \\text{${unite_grand_L}}`,
						`${tex_nombre(2*petit_l_num[0]+2*grand_L_num[3])} \\; \\text{${unite_grand_L}}`,
					],
					),
					tableau_corr_p1:tab_C_L([`\\text{Longueur $${cote_inconnu_corr}$ du cÃ´tÃ© (en $${unite_grand_L}$)}`,`\\phantom{000}${grand_L[0]}\\phantom{000}`,`\\phantom{000}${grand_L[1]}\\phantom{000}`],//,`\\phantom{000}${grand_L[2]}\\phantom{000}`,`\\phantom{000}${grand_L[3]}\\phantom{000}`],
					[`\\text{PÃ©rimÃ¨tre du rectangle (en ${unite_petit_l})}`],
					[
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L1} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[0])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[0])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L2} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[1])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[1])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L3} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${grand_L_num[2]} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[2])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L4} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${grand_L_num[3]} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[3])} \\; \\text{${unite_grand_L}}}`,`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L4} \\; \\text{${unites[0]}}} \\color{black}{ = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${grand_L_num[3]} \\; \\text{${unite_grand_L}} = \\color{black}{${tex_nombre(2*petit_l_num[0]+2*grand_L_num[3])} \\; \\text{${unite_grand_L}}}}`,
					],
					),
					tableau_corr_p2:tab_C_L([`\\text{Longueur $${cote_inconnu_corr}$ du cÃ´tÃ© (en $${unite_grand_L}$)}`,`\\phantom{000}${grand_L[2]}\\phantom{000}`,`\\phantom{000}${grand_L[3]}\\phantom{000}`],//,`\\phantom{000}${grand_L[2]}\\phantom{000}`,`\\phantom{000}${grand_L[3]}\\phantom{000}`],
					[`\\text{PÃ©rimÃ¨tre du rectangle (en $${unite_petit_l}$)}`],
					[
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L1} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${grand_L_num[0]} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[0])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L2} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${grand_L_num[1]} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[1])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L3} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[2])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[2])} \\; \\text{${unite_grand_L}}}`,
						//`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${L4} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${tex_nombre(grand_L_num[3])} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0]+2*grand_L_num[3])} \\; \\text{${unite_grand_L}}}`,
					],
					),
					secondeQ:`2\\times \\color{blue}{${cote_connu} \\; \\text{${unites[1]}}} \\color{black}{+2\\times} \\color{red}{${cote_inconnu} \\; \\text{${unites[0]}}} ${etapeCorrective(`\\color{black}{\\; = 2\\times} \\color{blue}{${petit_l_num[0]} \\; \\text{${unite_petit_l}}} \\color{black}{+2\\times} \\color{red}{${cote_inconnu_corr} \\; \\text{${unite_grand_L}}}`,this.sup)} \\color{black}{ \\;= ${tex_nombre(2*petit_l_num[0])} + ${cote_inconnu_corr_num} \\; \\text{exprimÃ© en ${unite_grand_L}}}`,
					intro:txt_corr,
					fig:figure,
				},	
			];

			let enonces = [];
			let i_sous_question=0;
			let i_sous_question_corr=0;

			for (let k=0;k<situations.length;k++) {
				enonces.push({					
					enonce:`
					On considÃ¨re le rectangle ci-dessous dont l'un des cÃ´tÃ©s mesure $${situations[k].cote_connu}$ $${unites[1]}$ et l'autre mesure $${situations[k].cote_inconnu}$ $${unites[0]}$.<br>
					${situations[k].fig}<br>
					${num_alpha(i_sous_question++)} ComplÃ©ter le tableau suivant :<br><br>
					${situations[k].tableau}<br><br>
					${num_alpha(i_sous_question++)} Quelle formule permet de calculer le pÃ©rimÃ¨tre de ce rectangle en fonction de $${situations[k].cote_inconnu}$ ?								
					`,
					question:``,
					correction:`
					${num_alpha(i_sous_question_corr++)} ${situations[k].intro}<br>
					Il y a plusieurs faÃ§ons de calculer le pÃ©rimÃ¨tre d'un rectangle, par exemple : <br> $2\\times largeur + 2\\times Longueur$.<br>
					Ici l'un des cÃ´tÃ©s mesure toujours $\\textcolor{blue}{${petit_l[0]}}$ $${unite_petit_l}$<br>
					Calculons les pÃ©rimÃ¨tres pour chacune des valeurs donnÃ©es :<br>
					${situations[k].calculL1}<br>
					${situations[k].calculL2}<br>
					${situations[k].calculL3}<br>
					${situations[k].calculL4}<br>
					Nous pouvons alors remplir le tableau<br>
					${situations[k].tableau_corr}<br><br>
					${num_alpha(i_sous_question_corr++)} On peut gÃ©nÃ©raliser le raisonnement des calculs du pÃ©rimÃ¨tre, et ainsi obtenir une formule.<br>
					$${situations[k].secondeQ}$

					`
				});
			};
            
            // autant de case que d'elements dans le tableau des situations
			switch (liste_type_de_questions[i]){
				case 0 : 					
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte += `             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          			break;	

			};			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : les mÃªmes unitÃ©s\n2 : unitÃ©s diffÃ©rentes"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/**
* Effectuer des additions de relatifs dans un tableau Ã  double entrÃ©e
*
* @Auteur RÃ©mi Angot
* 5R20-5
*/
function Exercice_tableau_additions_relatifs (){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = false ;
	this.titre = "Additions de deux entiers relatifs dans un tableau Ã  double entrÃ©e"
	this.consigne = 'Calculer'
  	this.spacing = 1;
  	this.nb_questions = 1;
  	this.nb_questions_modifiable = false;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_signes1 = combinaison_listes([-1,1],4);
    let liste_signes2 = combinaison_listes([-1,1],4);
    let a1 = randint(2,9);
    let a2 = randint(2,9,a1);
    let a3 = randint(2,9,[a1,a2]);
    let a4 = randint(2,9,[a1,a2,a3]);
    let b1 = randint(2,9);
    let b2 = randint(2,9,b1);
    let b3 = randint(2,9,[b1,b2]);
    let b4 = randint(2,9,[b1,b2,b3]);
    a1 *= liste_signes1[0]
    a2 *= liste_signes1[1]
    a3 *= liste_signes1[2]
    a4 *= liste_signes1[3]
    b1 *= liste_signes1[0]
    b2 *= liste_signes1[1]
    b3 *= liste_signes1[2]
    b4 *= liste_signes1[3]

    let texte = `$\\def\\arraystretch{1.5}\\begin{array}{|c|c|c|c|c|}
    \\hline
    + & ${ecriture_algebrique(a1)} & ${ecriture_algebrique(a2)} & ${ecriture_algebrique(a3)} & ${ecriture_algebrique(a4)} \\\\
    \\hline
    ${ecriture_algebrique(b1)} &  &  & &  \\\\
    \\hline
    ${ecriture_algebrique(b2)} & & & & \\\\
    \\hline
    ${ecriture_algebrique(b3)} & & & & \\\\
    \\hline
    ${ecriture_algebrique(b4)} & & & & \\\\
    \\hline
    \\end{array}$`

    let texte_corr = `$\\def\\arraystretch{1.5}\\begin{array}{|c|c|c|c|c|}
    \\hline
    + & ${ecriture_algebrique(a1)} & ${ecriture_algebrique(a2)} & ${ecriture_algebrique(a3)} & ${ecriture_algebrique(a4)} \\\\
    \\hline
    ${ecriture_algebrique(b1)} & ${ecriture_algebrique(a1+b1)} & ${ecriture_algebrique(a2+b1)} & ${ecriture_algebrique(a3+b1)} & ${ecriture_algebrique(a4+b1)} \\\\
    \\hline
    ${ecriture_algebrique(b2)} & ${ecriture_algebrique(a1+b2)} & ${ecriture_algebrique(a2+b2)} & ${ecriture_algebrique(a3+b2)} & ${ecriture_algebrique(a4+b2)} \\\\
    \\hline
    ${ecriture_algebrique(b3)} & ${ecriture_algebrique(a1+b3)} & ${ecriture_algebrique(a2+b3)} & ${ecriture_algebrique(a3+b3)} & ${ecriture_algebrique(a4+b3)} \\\\
    \\hline
    ${ecriture_algebrique(b4)} & ${ecriture_algebrique(a1+b4)} & ${ecriture_algebrique(a2+b4)} & ${ecriture_algebrique(a3+b4)} & ${ecriture_algebrique(a4+b4)} \\\\
    \\hline
	\\end{array}$`
	this.liste_questions.push(texte);
	this.liste_corrections.push(texte_corr);
	liste_de_question_to_contenu(this);
	}
}

/**
 * * Calcul de l'inverse d'un nombre.
 *
 * ParamÃ©trages possibles :
 * * 1 : inverse d'un nombre entier
 * * 2 : inverse d'une fraction
 * * 3 : inverse d'un nombre dÃ©cimal
 * * 4 : mÃ©lange des trois autres niveaux
 * @auteur Jean-Claude Lhote
 * 4C22-1
 */
function Exercice_trouver_l_inverse() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1; // Avec ou sans relatifs
  this.titre = "Trouver l'inverse d'un nombre";
  this.consigne =
    "Calculer l'inverse et donner la rÃ©ponse sous forme dÃ©cimale ou de fraction simplifiÃ©e quand c'est impossible";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles;
    let liste_entiers = [
      [1, 1],
      [2, 0.5],
      [3, 0],
      [4, 0.25],
      [5, 0.2],
      [6, 0],
      [7, 0],
      [8, 0.125],
      [9, 0],
      [10, 0.1],
      [11, 0],
      [12, 0],
      [13, 0],
      [14, 0],
      [15, 0],
      [20, 0.05],
      [50, 0.02],
      [100, 0.01],
    ];
    // [n,0] si l'inverse de n n'est pas dÃ©cimal [n,1/n] si il est dÃ©cimal.
    let liste_decimaux = [
      [0.1, 10, 1],
      [0.2, 5, 1],
      [0.3, 10, 3],
      [0.4, 10, 4],
      [0.5, 2, 1],
      [0.6, 10, 6],
      [0.75, 100, 75],
      [0.8, 10, 8],
      [1.2, 10, 12],
      [1.5, 10, 15],
      [2.5, 10, 25],
      [3.5, 10, 35],
      [4.8, 10, 48],
      [7.5, 10, 75],
    ];
    // [x,n,d] n/d = inverse de x fraction Ã  rÃ©duire si besoin ... d=1 si l'inverse de x est entier.
    let liste_fractions = [
      [3, 4, false],
      [5, 2, true],
      [4, 5, true],
      [5, 7, true],
      [7, 3, false],
      [16, 6, true],
      [12, 18, true],
      [9, 4, false],
      [4, 6, true],
      [8, 7, true],
      [5, 9, true],
      [9, 7, false],
      [13, 6, false],
      [7, 2, false],
    ];
    // [n,d,bol] inverse d/n Ã  simplifier si besoin. si bol = true, alors d/n est dÃ©cimal.
    let liste_couples_d_inverses;
    let couples_d_inverses;
    if (this.sup == 4) {
      type_de_questions_disponibles = [1, 1, 2, 2, 3];
    } // nombre entier,fraction,dÃ©cimal]
    else {
      type_de_questions_disponibles = [parseInt(this.sup)];
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0,
        nombre_choisi,
        nombre_inverse,
        nombre_inverse_num,
        nombre_inverse_den,
        texte,
        texte_corr,
        type_de_questions,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: //inverse d'entier
          couples_d_inverses = choice(liste_entiers);
          nombre_choisi = couples_d_inverses[0];
          nombre_inverse = couples_d_inverses[1];
          if (choice([true, false])) {
            // nombre entier positif
            if (nombre_inverse != 0) {
              //inverse dÃ©cimal
              texte_corr = `L\'inverse de $${nombre_choisi}$ est $${tex_nombrec(
                nombre_inverse
              )} \\:$ car $\\: ${nombre_choisi}   \\times   ${tex_nombrec(
                nombre_inverse
              )} =  1$.`;
            } else {
              //inverse non dÃ©cimal
              texte_corr = `L\'inverse de $${nombre_choisi}$ est $${tex_fraction(
                1,
                nombre_choisi
              )} \\:$ car $\\: ${nombre_choisi}   \\times   ${tex_fraction(
                1,
                nombre_choisi
              )} =  1$.`;
            }
          } else {
            //nombre entier nÃ©gatif
            nombre_choisi = -nombre_choisi;
            if (nombre_inverse != 0) {
              //inverse dÃ©cimal
              texte_corr = `L'inverse de $${nombre_choisi}$ est $${tex_nombrec(
                -nombre_inverse
              )} \\:$`;
              texte_corr += ` car $\\: ${nombre_choisi}  \\times  \\left(-${tex_nombrec(
                nombre_inverse
              )}\\right)  =  1$.`;
            } else {
              //inverse non dÃ©cimal
              texte_corr = `L\'inverse de $${nombre_choisi}$ est $-${tex_fraction(
                1,
                -nombre_choisi
              )} \\:$ car $\\: ${nombre_choisi}   \\times   \\left(-${tex_fraction(
                1,
                -nombre_choisi
              )}\\right) =  1$.`;
            }
          }
          texte = `Quel est l'inverse de $${tex_nombrec(nombre_choisi)}$ ?`;
          break;
        case 2:
          couples_d_inverses = choice(liste_decimaux);
          nombre_choisi = couples_d_inverses[0];
          nombre_inverse_num = couples_d_inverses[1];
          nombre_inverse_den = couples_d_inverses[2];
          if (choice([true, false])) {
            // nombre positif
            if (pgcd(nombre_inverse_num, nombre_inverse_den) == 1) {
              //non simplifiable aprÃ¨s inversion
              texte_corr = `Comme $${tex_nombrec(nombre_choisi)}=${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}$, l'inverse de $${tex_nombrec(
                nombre_choisi
              )}$ est $${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\:$ car $\\: ${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}   \\times   ${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )} =  1$.`;
            } else {
              // Ã  simplifier aprÃ¨s inversion
              texte_corr = `Comme $${tex_nombrec(nombre_choisi)}=${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}=${tex_fraction_reduite(
                nombre_inverse_den,
                nombre_inverse_num
              )}$, l'inverse de $${tex_nombrec(
                nombre_choisi
              )}$ est $${tex_fraction_reduite(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\:$ car $\\: ${tex_fraction_reduite(
                nombre_inverse_den,
                nombre_inverse_num
              )}  \\times   ${tex_fraction_reduite(
                nombre_inverse_num,
                nombre_inverse_den
              )} =  1$.`;
            }
          } else {
            // nombre nÃ©gatif
            nombre_choisi = -nombre_choisi;
            if (pgcd(nombre_inverse_num, nombre_inverse_den) == 1) {
              //non simplifiable aprÃ¨s inversion
              texte_corr = `L'inverse de $${tex_nombrec(
                nombre_choisi
              )}$ est $-${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\:$ car $\\: ${tex_nombrec(
                nombre_choisi
              )}   \\times   \\left(-${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}\\right) =  1$.`;
              texte_corr = `Comme $${tex_nombrec(
                nombre_choisi
              )}=-${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}$, l'inverse de $${tex_nombrec(
                nombre_choisi
              )}$ est $-${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\:$ car $\\: -${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}   \\times  \\left(- ${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}\\right) =  1$.`;
            } else {
              // Ã  simplifier aprÃ¨s inversion
              texte_corr = `Comme $${tex_nombrec(
                nombre_choisi
              )}=-${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}=-${tex_fraction_reduite(
                nombre_inverse_den,
                nombre_inverse_num
              )}$, l'inverse de $${tex_nombrec(
                nombre_choisi
              )}$ est $-${tex_fraction_reduite(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\:$ car $\\: -${tex_fraction_reduite(
                nombre_inverse_den,
                nombre_inverse_num
              )}  \\times  \\left(- ${tex_fraction_reduite(
                nombre_inverse_num,
                nombre_inverse_den
              )} \\right)=  1$.`;
            }
          }
          texte = `Quel est l'inverse de $${tex_nombrec(nombre_choisi)}$ ?`;
          break;
        case 3:
          couples_d_inverses = choice(liste_fractions);
          nombre_inverse_num = couples_d_inverses[0];
          nombre_inverse_den = couples_d_inverses[1];
          if (choice([true, false])) {
            // fraction positive
            if (couples_d_inverses[2] == true) {
              // inverse dÃ©cimal
              texte_corr = `L'inverse de $${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}$ est $${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}=${tex_nombrec(
                nombre_inverse_den / nombre_inverse_num
              )} \\:$ car $\\: ${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}   \\times   ${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )} =  1$.`;
            } else {
              // inverse non dÃ©cimal
              texte_corr = `L'inverse de $${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}$ est $${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )} \\:$ car $\\: ${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}   \\times   ${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )} =  1$.`;
            }
            texte = `Quel est l'inverse de $${tex_fraction(
              nombre_inverse_num,
              nombre_inverse_den
            )}$ ?`;
          } else {
            // fraction nÃ©gative
            if (couples_d_inverses[2] == true) {
              // inverse dÃ©cimal
              texte_corr = `L'inverse de $-${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}$ est $-${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}=-${tex_nombrec(
                nombre_inverse_den / nombre_inverse_num
              )} \\:$ car $\\: -${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}   \\times  \\left(- ${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )}\\right) =  1$.`;
            } else {
              // inverse non dÃ©cimal
              texte_corr = `L'inverse de $-${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}$ est $-${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )} \\:$ car $\\: -${tex_fraction(
                nombre_inverse_num,
                nombre_inverse_den
              )}   \\times  \\left(- ${tex_fraction(
                nombre_inverse_den,
                nombre_inverse_num
              )} \\right)=  1$.`;
            }
            texte = `Quel est l'inverse de $-${tex_fraction(
              nombre_inverse_num,
              nombre_inverse_den
            )}$ ?`;
          }

          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Nombres entiers\n 2 : Fractions\n 3 : Nombres dÃ©cimaux\n 4 : MÃ©lange des 3 niveaux",
  ];
}

/**
 * Exercice de calcul de produit de deux fractions.
 *
 * ParamÃ©trages possibles :
 * * 1 : Produits de nombres positifs seulement
 * * 2 : deux questions niveau 1 puis deux questions niveau 3
 * * 3 : Produits de nombres relatifs
 * * Si dÃ©composition cochÃ©e : les nombres utilisÃ©s sont plus importants.
 * @auteur Jean-Claude Lhote
 * 4C22
 */
function Exercice_multiplier_fractions() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1; // Avec ou sans relatifs
  this.titre = "Mutliplier des fractions";
  this.consigne = "Calculer et donner le rÃ©sultat sous forme irrÃ©ductible";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;
  this.sup2 = false; //mÃ©thode
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles;
    liste_fractions = obtenir_liste_fractions_irreductibles();

    if (this.sup == 1) {
      type_de_questions_disponibles = [1, 2, 2, 2];
    } // 1*nombre entier,3*fraction (pas de nÃ©gatifs)
    else if (this.sup == 2) {
      type_de_questions_disponibles = [2, 2, 3, 3];
    } // fractions, 2*positifs, 2*relatifs
    else {
      type_de_questions_disponibles = [3];
    }
    let nombre_de_signe_moins;
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0,
        ab,
        cd,
        a,
        b,
        c,
        d,
        p,
        aa,
        bb,
        cc,
        dd,
        signe,
        numerateur,
        denominateur,
        index,
        texte,
        texte_corr,
        type_de_questions,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      ab = choice(liste_fractions);
      cd = choice(liste_fractions);
      a = ab[0];
      b = ab[1];
      c = cd[0];
      d = cd[1];
      if (this.sup2 == false) {
        // methode 1 : simplifications finale
        switch (type_de_questions) {
          case 1: // entier * fraction (tout positif)
            if (a == 1) {
              a = randint(2, 9);
            }
            if (a == c) {
              a = a + 1;
            }
            texte = `$${tex_fraction(a, 1)}\\times${tex_fraction(c, d)}=$`;
            texte_corr = `$${tex_fraction(a, 1)}\\times${tex_fraction(c, d)}$`;
            texte_corr += `$=\\dfrac{${a}}{1}\\times${tex_fraction(c, d)}$`;
            texte_corr += `$=${tex_fraction(
              a + "\\times" + c,
              "1\\times" + d
            )}$`;
            texte_corr += `$=${tex_fraction(a * c, d)}$`;
            if (pgcd(a * c, d) != 1) {
              texte_corr += `$=${tex_fraction_reduite(a * c, d)}$`;
            }
            break;

          case 2: // fraction * fraction tout positif
            p = pgcd(a * c, b * d);
            texte = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}=$`;
            texte_corr = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            texte_corr += `$=${tex_fraction(
              a + "\\times" + c,
              b + "\\times" + d
            )}$`;
            texte_corr += `$=${tex_fraction(a * c, b * d)}$`;
            if (p != 1) {
              texte_corr += `$=${tex_fraction(
                (a * c) / p + "\\times\\cancel{" + p + "}",
                (b * d) / p + "\\times\\cancel{" + p + "}"
              )}$`;
              texte_corr += `$=${tex_fraction((a * c) / p, (b * d) / p)}$`;
            }
            break;

          case 3:
            a = a * randint(-1, 1, [0]);
            b = b * randint(-1, 1, [0]);
            c = c * randint(-1, 1, [0]);
            d = d * randint(-1, 1, [0]);
            nombre_de_signe_moins = (a < 0) + (b < 0) + (c < 0) + (d < 0);
            if (Math.pow(-1, nombre_de_signe_moins) == 1) {
              signe = "";
            } else {
              signe = "-";
            }

            texte = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            texte_corr = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            aa = abs(a);
            bb = abs(b);
            cc = abs(c);
            dd = abs(d);
            p = pgcd(aa * cc, bb * dd);
            texte_corr += `$=${signe}${tex_fraction(
              aa,
              bb
            )}\\times${tex_fraction(cc, dd)}$`;
            texte_corr += `$=${signe}${tex_fraction(
              aa + "\\times" + cc,
              bb + "\\times" + dd
            )}$`;
            if (p == 1) {
              texte_corr += `$=${signe}${tex_fraction(aa * cc, bb * dd)}$`;
            } else {
              texte_corr += `$=${signe}${tex_fraction(aa * cc, bb * dd)}$`;
              if (aa * cc != bb * dd) {
                texte_corr += `$=${signe}${tex_fraction(
                  (aa * cc) / p + "\\times\\cancel{" + p + "}",
                  (bb * dd) / p + "\\times\\cancel{" + p + "}"
                )}$`;
                texte_corr += `$=${signe}${tex_fraction(
                  (aa * cc) / p,
                  (bb * dd) / p
                )}$`;
              } else {
                texte_corr += `$=${signe}1$`;
              }
            }
            break;
        }
      } else {
        //mÃ©thode 2 : dÃ©composition
        if (a == c) {
          a++;
        }
        aa = obtenir_liste_nombres_premiers()[randint(1, 5)];
        bb = obtenir_liste_nombres_premiers()[randint(1, 5, [aa])];
        a = a * aa;
        d = d * aa;
        b = b * bb;
        c = c * bb;

        var listea = obtenir_liste_facteurs_premiers(a);
        var listeb = obtenir_liste_facteurs_premiers(b);
        var listec = obtenir_liste_facteurs_premiers(c);
        var listed = obtenir_liste_facteurs_premiers(d);
        var listeavf, listebvf;

        switch (type_de_questions) {
          case 1: // entier * fraction (tout positif)
            texte = `$${a}\\times${tex_fraction(c, d)}=$`;
            texte_corr = `$${a}\\times${tex_fraction(c, d)}$`;
            texte_corr += `$=${tex_fraction(a + "\\times" + c, d)}$`;
            texte_corr += `$=${tex_fraction(
              decomposition_facteurs_premiers(a) +
                "\\times" +
                decomposition_facteurs_premiers(c),
              decomposition_facteurs_premiers(d)
            )}$`;
            // texte_corr += `$=${tex_fraction(decomposition_facteurs_premiers(a * c), decomposition_facteurs_premiers(d))}$`
            for (let k in listec) {
              listea.push(listec[k]);
            }
            listeb = listed;
            listeavf = [];
            listebvf = [];

            listea.forEach(function a_ajouter_dans_listeavf(element) {
              listeavf.push([element, true]);
            });
            listeb.forEach(function a_ajouter_dans_listebvf(element) {
              listebvf.push([element, true]);
            });

            for (index = 0; index < listeb.length; ) {
              for (let j = 0; j <= listea.length; ) {
                if (listeb[index] == listea[j]) {
                  listebvf[index] = [listeb[index], false];
                  listeavf[j] = [listea[j], false];
                  listea[j] = 1;
                  listeb[index] = 1;
                  break;
                }
                j++;
              }
              index++;
            }

            a = 1;
            b = 1;
            for (let k in listea) {
              a = a * listea[k];
            }
            for (let k in listeb) {
              b = b * listeb[k];
            }

            numerateur = "";
            denominateur = "";

            for (let j in listeavf) {
              if (listeavf[j][1] == true) {
                numerateur += listeavf[j][0] + "\\times";
              } else {
                numerateur += "\\cancel{" + listeavf[j][0] + "}\\times";
              }
            }
            numerateur = numerateur.substr(0, numerateur.length - 6);

            for (let j in listebvf) {
              if (listebvf[j][1] == true) {
                denominateur += listebvf[j][0] + "\\times";
              } else {
                denominateur += "\\cancel{" + listebvf[j][0] + "}\\times";
              }
            }
            denominateur = denominateur.substr(0, denominateur.length - 6);

            texte_corr += `$=\\dfrac{${numerateur}}{${denominateur}}$`;
            texte_corr += `$=${tex_fraction(a, b)}$`;
            break;

          case 2: // fraction * fraction tout positif
            texte = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}=$`;
            texte_corr = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            texte_corr += `$=${tex_fraction(
              a + "\\times" + c,
              b + "\\times" + d
            )}$`;

            for (let k in listec) {
              listea.push(listec[k]);
            }
            for (let k in listed) {
              listeb.push(listed[k]);
            }

            listeavf = [];
            listebvf = [];

            listea.forEach(function a_ajouter_dans_listeavf(element) {
              listeavf.push([element, true]);
            });
            listeb.forEach(function a_ajouter_dans_listebvf(element) {
              listebvf.push([element, true]);
            });

            for (index = 0; index < listeb.length; ) {
              for (let j = 0; j <= listea.length; ) {
                if (listeb[index] == listea[j]) {
                  listebvf[index] = [listeb[index], false];
                  listeavf[j] = [listea[j], false];
                  listea[j] = 1;
                  listeb[index] = 1;
                  break;
                }
                j++;
              }
              index++;
            }

            a = 1;
            b = 1;
            for (let k in listea) {
              a = a * listea[k];
            }
            for (let k in listeb) {
              b = b * listeb[k];
            }

            numerateur = "";
            denominateur = "";

            for (let j in listeavf) {
              if (listeavf[j][1] == true) {
                numerateur += listeavf[j][0] + "\\times";
              } else {
                numerateur += "\\cancel{" + listeavf[j][0] + "}\\times";
              }
            }
            numerateur = numerateur.substr(0, numerateur.length - 6);

            for (let j in listebvf) {
              if (listebvf[j][1] == true) {
                denominateur += listebvf[j][0] + "\\times";
              } else {
                denominateur += "\\cancel{" + listebvf[j][0] + "}\\times";
              }
            }
            denominateur = denominateur.substr(0, denominateur.length - 6);

            texte_corr += `$=\\dfrac{${numerateur}}{${denominateur}}$`;
            texte_corr += `$=${tex_fraction(a, b)}$`;
            break;

          case 3:
            a = a * randint(-1, 1, [0]);
            b = b * randint(-1, 1, [0]);
            c = c * randint(-1, 1, [0]);
            d = d * randint(-1, 1, [0]);
            nombre_de_signe_moins = (a < 0) + (b < 0) + (c < 0) + (d < 0);
            if (Math.pow(-1, nombre_de_signe_moins) == 1) {
              signe = "";
            } else {
              signe = "-";
            }

            texte = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            texte_corr = `$${tex_fraction(a, b)}\\times${tex_fraction(c, d)}$`;
            aa = abs(a);
            bb = abs(b);
            cc = abs(c);
            dd = abs(d);

            texte_corr += `$=${signe}${tex_fraction(
              aa,
              bb
            )}\\times${tex_fraction(cc, dd)}$`;
            texte_corr += `$=${signe}${tex_fraction(
              aa + "\\times" + cc,
              bb + "\\times" + dd
            )}$`;

            for (let k in listec) {
              listea.push(listec[k]);
            }
            for (let k in listed) {
              listeb.push(listed[k]);
            }

            listeavf = [];
            listebvf = [];

            listea.forEach(function a_ajouter_dans_listeavf(element) {
              listeavf.push([element, true]);
            });
            listeb.forEach(function a_ajouter_dans_listebvf(element) {
              listebvf.push([element, true]);
            });

            for (index = 0; index < listeb.length; ) {
              for (let j = 0; j <= listea.length; ) {
                if (listeb[index] == listea[j]) {
                  listebvf[index] = [listeb[index], false];
                  listeavf[j] = [listea[j], false];
                  listea[j] = 1;
                  listeb[index] = 1;
                  break;
                }
                j++;
              }
              index++;
            }

            a = 1;
            b = 1;
            for (let k in listea) {
              a = a * listea[k];
            }
            for (let k in listeb) {
              b = b * listeb[k];
            }

            numerateur = "";
            denominateur = "";

            for (let j in listeavf) {
              if (listeavf[j][1] == true) {
                numerateur += listeavf[j][0] + "\\times";
              } else {
                numerateur += "\\cancel{" + listeavf[j][0] + "}\\times";
              }
            }
            numerateur = numerateur.substr(0, numerateur.length - 6);

            for (let j in listebvf) {
              if (listebvf[j][1] == true) {
                denominateur += listebvf[j][0] + "\\times";
              } else {
                denominateur += "\\cancel{" + listebvf[j][0] + "}\\times";
              }
            }
            denominateur = denominateur.substr(0, denominateur.length - 6);

            texte_corr += `$=${signe}\\dfrac{${numerateur}}{${denominateur}}$`;
            texte_corr += `$=${signe}${tex_fraction(a, b)}$`;
            break;
        }
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : Fractions Ã  numÃ©rateurs et dÃ©nominateurs positifs \n 2 : Type 1 et type 3 pour 50%/50%\n 3 : Ecritures fractionnaires Ã  numÃ©rateur et dÃ©nominateur entiers relatifs",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec dÃ©composition"];
}

/**
 * Calcul du quotient de deux fractions. ParamÃ©trages possibles :
 * * 1 : Nombres positifs exclusivement
 * * 2 : nombres relatifs
 * @auteur Jean-Claude Lhote
 * 4C22-2
 */
function Exercice_diviser_fractions() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1; // Avec ou sans relatifs
  this.titre = "Diviser des fractions";
  this.consigne = "Calculer et donner le rÃ©sultat sous forme irrÃ©ductible";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = obtenir_liste_fractions_irreductibles();

    let type_de_questions_disponibles;
    type_de_questions_disponibles = [parseInt(this.sup)];
    let nombre_de_signe_moins;
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0,
        ab,
        cd,
        a,
        b,
        c,
        d,
        p,
        signe,
        texte,
        texte_corr,
        type_de_questions,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      ab = choice(liste_fractions);
      cd = choice(liste_fractions);
      a = ab[0];
      b = ab[1];
      c = cd[0];
      d = cd[1];

      p = pgcd(a * d, b * c);

      switch (type_de_questions) {
        //	case 0 : // entier * fraction (tout positif)
        //		texte=`$${tex_fraction(a,1)}\\div${tex_fraction(c,d)}=$`;
        //		if (pgcd(a*d,c)==1) {
        //			texte_corr= `$${tex_fraction(a,1)}\\div${tex_fraction(c,d)}=${tex_fraction(a,1)}\\times${tex_fraction(d,c)}=\\dfrac{${a}}{1}\\times${tex_fraction(d,c)}=${tex_fraction(a +'\\times'+d,'1\\times'+c)}=${tex_fraction(a*d,c)}$`
        //		}
        //		else {
        //			texte_corr= `$${tex_fraction(a,1)}\\div${tex_fraction(c,d)}=${tex_fraction(a,1)}\\times${tex_fraction(d,c)}=${tex_fraction(a*d,c)}=${tex_fraction_reduite(a*d,c)}$`
        //		}
        //		break
        //
        case 1: // fraction * fraction tout positif
          texte = `$${tex_fraction(a, b)}\\div${tex_fraction(c, d)}=$`;
          if (p == 1) {
            texte_corr = `$${tex_fraction(a, b)}\\div${tex_fraction(
              c,
              d
            )}=${tex_fraction(a, b)}\\times${tex_fraction(d, c)}=${tex_fraction(
              a + "\\times" + d,
              b + "\\times" + c
            )}=${tex_fraction(a * d, b * c)}$`;
          } else {
            texte_corr = `$${tex_fraction(a, b)}\\div${tex_fraction(
              c,
              d
            )}=${tex_fraction(a, b)}\\times${tex_fraction(d, c)}=${tex_fraction(
              a + "\\times" + d,
              b + "\\times" + c
            )}=${tex_fraction(a * d, b * c)}=${tex_fraction(
              (a * d) / p + "\\times\\cancel{" + p + "}",
              (b * c) / p + "\\times\\cancel{" + p + "}"
            )}=${tex_fraction((a * d) / p, (b * c) / p)}$`;
          }
          break;

        case 2:
          a = a * randint(-1, 1, [0]);
          b = b * randint(-1, 1, [0]);
          c = c * randint(-1, 1, [0]);
          d = d * randint(-1, 1, [0]);
          nombre_de_signe_moins = (a < 0) + (b < 0) + (c < 0) + (d < 0);
          if (Math.pow(-1, nombre_de_signe_moins) == 1) {
            signe = "";
          } else {
            signe = "-";
          }
          texte = `$${tex_fraction(a, b)}\\div${tex_fraction(c, d)}=$`;
          texte_corr = `$${tex_fraction(a, b)}\\div${tex_fraction(c, d)}$`;
          a = abs(a);
          b = abs(b);
          c = abs(c);
          d = abs(d);
          p = pgcd(a * d, b * c);
          texte_corr += `$=${signe}${tex_fraction(a, b)}\\times${tex_fraction(
            d,
            c
          )}$`;
          texte_corr += `$=${signe}${tex_fraction(
            a + "\\times" + ecriture_parenthese_si_negatif(d),
            b + "\\times" + ecriture_parenthese_si_negatif(c)
          )}$`;
          if (p == 1) {
            texte_corr += `$=${signe}${tex_fraction_signe(a * d, b * c)}$`;
          } else {
            texte_corr += `$=${signe}${tex_fraction(a * d, b * c)}$`;
            if (a * d != b * c) {
              texte_corr += `$=${signe}${tex_fraction(
                (a * d) / p + "\\times\\cancel{" + p + "}",
                (b * c) / p + "\\times\\cancel{" + p + "}"
              )}$`;
              texte_corr += `$=${signe}${tex_fraction(
                (a * d) / p,
                (b * c) / p
              )}$`;
            } else {
              texte_corr += `$=${signe}1$`;
            }
          }
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }

      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Fractions Ã  numÃ©rateur et dÃ©nominateur positifs \n 2 : Fractions Ã  numÃ©rateur et dÃ©nominateur relatifs",
  ];
}

/**
 * * Calcul fractionnaire : somme d'une fraction et du produit de deux autres fractions. ParamÃ©trages possibles :
 * 1 : Calcul avec nombres positifs sans piÃ¨ge de prioritÃ©
 * * 2 : Calcul avec nombres positifs avec piÃ¨ge
 * * 3 : Calcul avec nombres relatifs
 * @auteur Jean-Claude Lhote
 * 4C23
 */
function Exercice_additionner_fraction_produit() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1; // Avec ou sans relatifs
  this.titre = "Fractions et prioritÃ©s opÃ©ratoires";
  this.consigne = "Calculer et donner le rÃ©sultat sous forme irrÃ©ductible";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles;
    liste_fractions = obtenir_liste_fractions_irreductibles();
    let nombre_de_signe_moins;
    if (this.sup == 1) {
      type_de_questions_disponibles = [1, 1, 2, 2];
    } // 1*nombre entier,3*fraction (pas de nÃ©gatifs)
    else if (this.sup == 2) {
      type_de_questions_disponibles = [2, 2, 3, 3];
    } // fractions, 2*positifs, 2*relatifs
    else {
      type_de_questions_disponibles = [3];
    }

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0,
        ab,
        cd,
        ef,
        a,
        b,
        c,
        d,
        e,
        f,
        p,
        k1,
        k2,
        signe1,
        signe2,
        texte,
        texte_corr,
        type_de_questions,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      ab = choice(liste_fractions);
      cd = choice(liste_fractions);
      ef = choice(liste_fractions);
      a = ab[0];
      b = ab[1];
      c = cd[0];
      d = cd[1];
      e = ef[0];
      f = ef[1];

      switch (type_de_questions) {
        case 1: // sans piÃ¨ge fraction1 + fraction2 x fraction3 (tout positif)
          texte = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}$`;

          p = pgcd(c * e, d * f);
          texte_corr = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}$`;
          texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
            c + "\\times" + e,
            d + "\\times" + f
          )}$`;
          texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
            c * e,
            d * f
          )}$`;
          // faut-il simplifier c*e/d*f
          if (p != 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {
            texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
              (e * c) / p + "\\times\\cancel{" + p + "}",
              (f * d) / p + "\\times\\cancel{" + p + "}"
            )}$`;
            c = (e * c) / p;
            d = (f * d) / p;
          } else {
            c = e * c;
            d = f * d;
          }
          p = ppcm(b, d); // p = dÃ©nominateur commun
          k1 = p / b;
          k2 = p / d;
          if (k1 != 1) {
            texte_corr += `$=${tex_fraction(
              a + mise_en_evidence("\\times" + k1),
              b + mise_en_evidence("\\times" + k1)
            )}$`;
          } else {
            texte_corr += `$=${tex_fraction(a, b)}$`;
          }
          if (k2 != 1) {
            texte_corr += `$+${tex_fraction(
              c + mise_en_evidence("\\times" + k2),
              d + mise_en_evidence("\\times" + k2)
            )}$`;
          } else {
            texte_corr += `$+${tex_fraction(c, d)}$`;
          }

          texte_corr += `$=${tex_fraction(a * k1, p)}+${tex_fraction(
            c * k2,
            p
          )}$`;
          e = a * k1 + c * k2;
          f = p;
          texte_corr += `$=${tex_fraction(e, f)}$`;
          p = pgcd(e, f);
          // faut-il simplifier e/f
          if (p != 1) {
            texte_corr += `$=${tex_fraction(
              e / p + "\\times\\cancel{" + p + "}",
              f / p + "\\times\\cancel{" + p + "}"
            )}$`;
            texte_corr += `$=${tex_fraction_reduite(e / p, f / p)}$`;
          }

          break;

        case 2: // avec piege addition non prioritaire fraction1 + fraction2 * fraction3 tout positif
          d = b;

          texte = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}$`;

          p = pgcd(c * e, d * f);
          texte_corr = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}$`;
          texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
            c + "\\times" + e,
            d + "\\times" + f
          )}$`;
          texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
            c * e,
            d * f
          )}$`;

          // faut-il simplifier c*e/d*f
          if (p != 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {
            texte_corr += `$=${tex_fraction(a, b)}+${tex_fraction(
              (e * c) / p + "\\times\\cancel{" + p + "}",
              (f * d) / p + "\\times\\cancel{" + p + "}"
            )}$`;
            c = (e * c) / p;
            d = (f * d) / p;
          } else {
            c = e * c;
            d = f * d;
          }
          p = ppcm(b, d); //denominateur commun = p
          k1 = p / b;
          k2 = p / d;
          if (k1 != 1) {
            texte_corr += `$=${tex_fraction(
              a + mise_en_evidence("\\times" + k1),
              b + mise_en_evidence("\\times" + k1)
            )}$`;
          } else {
            texte_corr += `$=${tex_fraction(a, b)}$`;
          }
          if (k2 != 1) {
            texte_corr += `$+${tex_fraction(
              c + "\\times" + k2,
              d + "\\times" + k2
            )}$`;
          } else {
            texte_corr += `$+${tex_fraction(c, d)}$`;
          }
          texte_corr += `$=${tex_fraction(a * k1, b * k1)}+${tex_fraction(
            c * k2,
            d * k2
          )}=${tex_fraction(a * k1 + c * k2, p)}$`;
          e = a * k1 + c * k2;
          f = p;
          texte_corr += `$=${tex_fraction(e, f)}$`;
          p = pgcd(e, f);
          // faut-il simplifier e/f
          if (p != 1) {
            texte_corr += `$=${tex_fraction(
              e / p + "\\times\\cancel{" + p + "}",
              f / p + "\\times\\cancel{" + p + "}"
            )}$`;
            texte_corr += `$=${tex_fraction_reduite(e / p, f / p)}$`;
          }

          break;

        case 3:
          a = a * randint(-1, 1, [0]);
          b = b * randint(-1, 1, [0]);
          c = c * randint(-1, 1, [0]);
          d = d * randint(-1, 1, [0]);
          e = e * randint(-1, 1, [0]);
          f = f * randint(-1, 1, [0]);

          nombre_de_signe_moins = (c < 0) + (d < 0) + (e < 0) + (f < 0);
          if (Math.pow(-1, nombre_de_signe_moins) == 1) {
            signe2 = "+";
          } else {
            signe2 = "-";
          }
          texte = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}=$`;
          texte_corr = `$${tex_fraction(a, b)}+${tex_fraction(
            c,
            d
          )}\\times${tex_fraction(e, f)}$`;

          c = abs(c); // gestion du signe du produit avec {signe}
          d = abs(d);
          e = abs(e);
          f = abs(f);

          if (a * b > 0) {
            //suppression des signes - superflus de la premiÃ¨re fraction

            signe1 = "";
          } else {
            signe1 = "-";
          }

          a = abs(a);
          b = abs(b);

          texte_corr += `$=${signe1}${tex_fraction(
            a,
            b
          )}${signe2}${tex_fraction(c + "\\times" + e, d + "\\times" + f)}$`;
          texte_corr += `$=${signe1}${tex_fraction(
            a,
            b
          )}${signe2}${tex_fraction(c * e, d * f)}$`;

          p = pgcd(c * e, d * f);
          // faut-il simplifier c*e/d*f
          if (p != 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {
            texte_corr += `$=${signe1}${tex_fraction(
              a,
              b
            )}${signe2}${tex_fraction(
              (e * c) / p + "\\times\\cancel{" + p + "}",
              (f * d) / p + "\\times\\cancel{" + p + "}"
            )}$`;
            c = (e * c) / p;
            d = (f * d) / p;
          } else {
            c = e * c;
            d = f * d;
          }
          p = ppcm(d, b); // mise au mÃªme dÃ©nominateur
          if (d % b != 0 && b % d != 0) {
            // dÃ©nominateur commun = p
            k1 = p / b;
            k2 = p / d;
            texte_corr += `$=${signe1}${tex_fraction(
              a + mise_en_evidence("\\times" + k1),
              b + mise_en_evidence("\\times" + k1)
            )}${signe2}${tex_fraction(
              c + mise_en_evidence("\\times" + k2),
              d + mise_en_evidence("\\times" + k2)
            )}$`;
            texte_corr += `$=${signe1}${tex_fraction(
              a * k1,
              b * k1
            )}${signe2}${tex_fraction(c * k2, d * k2)}$`;
            texte_corr += `$=${tex_fraction(
              signe1 + a * k1 + signe2 + c * k2,
              b * k1
            )}$`;
            a = a * k1;
            c = c * k2;
            d = p;
          } else {
            if (p == d) {
              k1 = d / b; // d = dÃ©nominateur commun
              texte_corr += `$=${signe1}${tex_fraction(
                a + mise_en_evidence("\\times" + k1),
                b + mise_en_evidence("\\times" + k1)
              )}${signe2}${tex_fraction(c, d)}$`;
              texte_corr += `$=${signe1}${tex_fraction(
                a * k1,
                d
              )}${signe2}${tex_fraction(c, d)}$`;
              texte_corr += `$=${tex_fraction(
                signe1 + a * k1 + signe2 + c,
                d
              )}$`;
              a = a * k1;
            } else {
              // b=k2*d
              k2 = b / d; // b= dÃ©nominateur commun
              texte_corr += `$=${signe1}${tex_fraction(
                a,
                b
              )}${signe2}${tex_fraction(
                c + mise_en_evidence("\\times" + k2),
                d + mise_en_evidence("\\times" + k2)
              )}$`;
              texte_corr += `$=${signe1}${tex_fraction(
                a,
                b
              )}${signe2}${tex_fraction(c * k2, b)}$`;
              texte_corr += `$=${tex_fraction(
                signe1 + a + signe2 + c * k2,
                b
              )}$`;
              c = c * k2;
              d = d * k2;
            }
          }

          if (a != c) {
            e = 0;
            if (signe1 == "") {
              e = a;
            } else {
              e = -a;
            }
            if (signe2 == "+") {
              e += c;
            } else {
              e = e - c;
            }
          } else {
            if (
              (signe1 == "-" && signe2 == "+") ||
              (signe1 == "" && signe2 == "-")
            ) {
              e = 0;
            } else {
              e = 0;
              if (signe1 == "") {
                e = a + c;
              } else {
                e = -a - c;
              }
            }
          }

          texte_corr += `$=${tex_fraction_signe(e, d)}$`;
          p = pgcd(abs(e), d);
          if (p != 1) {
            f = d / p;
            e = e / p;
            if (e > 0) {
              // fraction positive => pas de signe
              texte_corr += `$=${tex_fraction(
                e + "\\times\\cancel{" + p + "}",
                f + "\\times\\cancel{" + p + "}"
              )}$`;
              texte_corr += `$=${tex_fraction(e, f)}$`;
            } else {
              // numÃ©rateur nÃ©gatif => signe - devant les fractions suivantes.
              texte_corr += `$=-${tex_fraction(
                -e + "\\times\\cancel{" + p + "}",
                f + "\\times\\cancel{" + p + "}"
              )}$`;
              texte_corr += `$=-${tex_fraction(-e, f)}$`;
            }
          }

          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : nombres positifs sans piÃ¨ge de prioritÃ©\n 2 : 2 calculs avec positifs et piÃ¨ge de prioritÃ© et 2 calculs avec relatifs\n 3 : calculs avec relatifs",
  ];
}

/**
 * Donner l'opposÃ© d'une expression.
 *
 *
 * @Auteur RÃ©mi Angot
 * 3L10
 */
function Oppose_expression() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Donner l'opposÃ© d'une expression";
  this.consigne = "DÃ©velopper et rÃ©duire les expressions suivantes.";
  this.spacing = 1;
  this.nb_questions = 6;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1);

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = ["-(ax+b)", "-(ax2+bx+c)"];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, c, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      c = randint(-11, 11, 0);
      a = randint(-9, 9, 0);
      b = randint(-9, 9, 0);
      switch (liste_type_de_questions[i]) {
        case "-(ax+b)":
          texte = `$${lettre_depuis_chiffre(i + 1)}=-(${printlatex(
            `${a}x+(${b})`
          )})$`;
          texte_corr = texte;
          texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(
            i + 1
          )}}=${printlatex(`${-a}*x+(${-b})`)}$`;
          break;
        case "-(ax2+bx+c)":
          texte = `$${lettre_depuis_chiffre(i + 1)}=-(${printlatex(
            `${a}x^2+(${b})x+(${c})`
          )})$`;
          texte_corr = texte;
          texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(
            i + 1
          )}}=${printlatex(`${-a}x^2+(${-b})x+(${-c})`)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  // this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,'1 : Multiplication par un facteur positif\n2: Multiplication par un facteur relatif']
}

/**
 * DÃ©velopper et rÃ©duire des expressions avec des parenthÃ¨ses prÃ©cÃ©dÃ©es d'un signe + ou -
 *
 *
 * @Auteur RÃ©mi Angot
 * 3L10-1
 */
function Parentheses_precedes_de_moins_ou_plus() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Additionner ou soustraire une expression entre parenthÃ¨ses";
  this.consigne = "DÃ©velopper et rÃ©duire les expressions suivantes.";
  this.spacing = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = ["a-()", "a+()"];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, k, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      k = randint(-11, 11, 0);
      a = randint(-9, 9, 0);
      b = randint(-9, 9, 0);
      switch (liste_type_de_questions[i]) {
        case "a-()":
          // k-(ax+b)
          texte = `$${lettre_depuis_chiffre(i + 1)}=${k}-(${printlatex(
            `${a}x+(${b})`
          )})$`;
          texte_corr = `$${lettre_depuis_chiffre(i + 1)}=${k}-(${printlatex(
            `${a}x+(${b})`
          )})$`;
          texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(
            i + 1
          )}}=${printlatex(`${k}+(${-a}*x)+(${-b})`)}=${printlatex(
            `${-a}*x+(${k - b})`
          )}$`;
          break;
        case "a+()":
          // k-(ax+b)
          texte = `$${lettre_depuis_chiffre(i + 1)}=${k}+(${printlatex(
            `${a}x+(${b})`
          )})$`;
          texte_corr = `$${lettre_depuis_chiffre(i + 1)}=${k}+(${printlatex(
            `${a}x+(${b})`
          )})$`;
          texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(
            i + 1
          )}}=${printlatex(`${k}+(${a}*x)+(${b})`)}=${printlatex(
            `${a}*x+(${k + b})`
          )}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  // this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,'1 : Multiplication par un facteur positif\n2: Multiplication par un facteur relatif']
}

/**
 * DÃ©velopper en utilisant la distributivitÃ© simple
 *
 * * La lettre peut Ãªtre x, y, z, t, a, b ou c
 * * 3 fois sur 6 c'est une distributivitÃ© simple :  k(ax+b)
 * * 1 fois sur 6 c'est une distributivitÃ© simple : (ax+b)Ãk
 * * 1 fois sur 6, la variable est en facteur : kx(ax+b)
 * * 1 fois sur 6 il faut ensuite rÃ©duire : k(ax+b)+c
 *
 * Niveau de difficultÃ© :
 * * 1 : Multiplication par un facteur positif
 * * 2: Multiplication par un facteur relatif
 * @Auteur RÃ©mi Angot
 * 4L10 et 3L11
 */
function Exercice_developper(difficulte = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = difficulte;
  this.titre = "Utiliser la simple distributivitÃ©";
  this.consigne = "DÃ©velopper.";
  this.spacing = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let lettre = ["x", "y", "z", "t", "a", "b", "c"];
    let type_de_questions_disponibles = [
      "simple",
      "simple",
      "simple2",
      "x_en_facteur",
      "developper_et_reduire",
    ];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      let k = randint(2, 11);
      if (this.sup > 1) {
        // si difficultÃ© 2, k peut Ãªtre nÃ©gatif
        k = k * choice([-1, 1]);
      }
      let a = randint(1, 9);
      let b = randint(1, 9) * choice([-1, 1]);
      let inconnue = choice(lettre);
      switch (type_de_questions) {
        case "simple":
          if (a == 1) {
            // ne pas Ã©crire 1x
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${inconnue}${ecriture_algebrique(b)})$`;
          } else {
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${a}${inconnue}${ecriture_algebrique(b)})$`;
          }

          if (a == 1) {
            // ne pas Ã©crire 1x
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${inconnue}${ecriture_algebrique(b)})=${k}
						\\times ${inconnue}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b)}$`;
          } else {
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${a}${inconnue}${ecriture_algebrique(b)})=${k}
						\\times ${a}${inconnue}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b)}$`;
          }
          break;
        case "simple2":
          if (a == 1) {
            // ne pas Ã©crire 1x
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=(${inconnue}${ecriture_algebrique(
              b
            )})\\times${ecriture_parenthese_si_negatif(k)}$`;
          } else {
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=(${a}${inconnue}${ecriture_algebrique(
              b
            )})\\times${ecriture_parenthese_si_negatif(k)}$`;
          }

          if (a == 1) {
            // ne pas Ã©crire 1x
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=(${inconnue}${ecriture_algebrique(
              b
            )})\\times${ecriture_parenthese_si_negatif(k)}=${k}
						\\times ${inconnue}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b)}$`;
          } else {
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=(${a}${inconnue}${ecriture_algebrique(
              b
            )})\\times${ecriture_parenthese_si_negatif(k)}=${k}
						\\times ${a}${inconnue}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b)}$`;
          }
          break;
        case "x_en_facteur":
          if (a == 1) {
            // ne pas Ã©crire 1x
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}${inconnue}(${inconnue}${ecriture_algebrique(b)})$`;
          } else {
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}${inconnue}(${a}${inconnue}${ecriture_algebrique(b)})$`;
          }

          if (a == 1) {
            // ne pas Ã©crire 1x
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}${inconnue}(${inconnue}${ecriture_algebrique(
              b
            )})=${k}${inconnue}\\times ${inconnue} ${signe(
              k * b
            )}${k}${inconnue}\\times ${abs(b)}=${
              k * a
            }${inconnue}^2${ecriture_algebrique(k * b)}${inconnue}$`;
          } else {
            if (k > 0) {
              texte_corr = `$${lettre_depuis_chiffre(
                i + 1
              )}=${k}${inconnue}(${a}${inconnue}${ecriture_algebrique(
                b
              )})=${k}${inconnue}\\times ${a}${inconnue} + ${k}${inconnue}\\times ${ecriture_parenthese_si_negatif(
                b
              )}=${k * a}${inconnue}^2${ecriture_algebrique(
                k * b
              )}${inconnue}$`;
            } else {
              texte_corr = `$${lettre_depuis_chiffre(
                i + 1
              )}=${k}${inconnue}(${a}${inconnue}${ecriture_algebrique(
                b
              )})=${k}${inconnue}\\times ${a}${inconnue} + (${k}${inconnue})\\times ${ecriture_parenthese_si_negatif(
                b
              )}=${k * a}${inconnue}^2${ecriture_algebrique(
                k * b
              )}${inconnue}$`;
            }
          }
          break;
        case "developper_et_reduire":
          let c = randint(2, 9);
          if (a == 1) {
            // ne pas Ã©crire 1x
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${inconnue}${ecriture_algebrique(b)})+${c}$`;
          } else {
            texte = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${a}${inconnue}${ecriture_algebrique(b)})+${c}$`;
          }

          if (a == 1) {
            // ne pas Ã©crire 1x
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${inconnue}${ecriture_algebrique(
              b
            )})+${c}=${k}\\times ${inconnue}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}+${c}
						=${k * a}${inconnue}${ecriture_algebrique(k * b)}+${c}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b + c)}$`;
          } else {
            texte_corr = `$${lettre_depuis_chiffre(
              i + 1
            )}=${k}(${a}${inconnue}${ecriture_algebrique(
              b
            )})+${c}=${k}\\times${ecriture_parenthese_si_moins(
              a + inconnue
            )}+${ecriture_parenthese_si_negatif(
              k
            )}\\times${ecriture_parenthese_si_negatif(b)}+${c}
						=${k * a}${inconnue}${ecriture_algebrique(k * b)}+${c}=${
              k * a
            }${inconnue}${ecriture_algebrique(k * b + c)}$`;
          }
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Multiplication par un facteur positif\n2: Multiplication par un facteur relatif",
  ];
}

/**
 * Ãquation du premier degrÃ©
 * * Type 1 : x+a=b ou ax=b
 * * Type 2 : ax+b=c
 * * Type 3 : ax+b=cx+d
 * * Tous les types
 * @Auteur RÃ©mi Angot
 * 4L20 et 3L13
 */
function Exercice_equation1() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Ãquation du premier degrÃ©";
  this.consigne = "RÃ©soudre les Ã©quations suivantes";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.correction_detaillee_disponible = true;
  if (!sortie_html) {
    this.correction_detaillee = false;
  }
  this.sup = true; // Avec des nombres relatifs
  this.sup2 = 4; // Choix du type d'Ã©quation
  this.nb_questions = 6;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    switch (this.sup2.toString()) {
      case "1":
        liste_type_de_questions = ["ax=b", "x+b=c"];
        break;
      case "2":
        liste_type_de_questions = ["ax+b=c"];
        break;
      case "3":
        liste_type_de_questions = ["ax+b=cx+d"];
        break;
      default:
        liste_type_de_questions = [
          "ax+b=0",
          "ax+b=c",
          "ax=b",
          "x+b=c",
          "ax+b=cx+d",
        ];
        break;
    }
    liste_type_de_questions = combinaison_listes(
      liste_type_de_questions,
      this.nb_questions
    );
    for (
      let i = 0, a, b, c, d, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      a = randint(2, 13);
      b = randint(1, 13);
      c = randint(1, 13);
      d = randint(1, 13);
      if (this.sup) {
        a *= choice([-1, 1]);
        b *= choice([-1, 1]);
        c *= choice([-1, 1]);
        d *= choice([-1, 1]);
      }
      if (
        liste_type_de_questions[i] == "ax+b=0" ||
        liste_type_de_questions[i] == "ax+b=c"
      ) {
        if (liste_type_de_questions[i] == "ax+b=0") {
          c = 0;
        }
        if (!this.sup && c < b) {
          b = randint(1, 9);
          c = randint(b, 15); // c sera plus grand que b pour que c-b>0
        }
        texte = `$${a}x${ecriture_algebrique(b)}=${c}$`;
        texte_corr = texte + "<br>";
        if (this.correction_detaillee) {
          if (b > 0) {
            texte_corr += `On soustrait $${b}$ aux deux membres.<br>`;
          } else {
            texte_corr += `On ajoute $${-1 * b}$ aux deux membres.<br>`;
          }
        }
        texte_corr += `$${a}x${ecriture_algebrique(b)}${mise_en_evidence(
          ecriture_algebrique(-1 * b)
        )}=${c}${mise_en_evidence(ecriture_algebrique(-1 * b))}$<br>`;
        texte_corr += `$${a}x=${c - b}$<br>`;
        if (this.correction_detaillee) {
          texte_corr += `On divise les deux membres par $${a}$.<br>`;
        }
        texte_corr += `$${a}x${mise_en_evidence(
          "\\div" + ecriture_parenthese_si_negatif(a)
        )}=${
          c - b + mise_en_evidence("\\div" + ecriture_parenthese_si_negatif(a))
        }$<br>`;
        texte_corr += `$x=${tex_fraction(c - b, a)}$`;
        if (pgcd(abs(a), abs(c - b)) > 1 || a < 0) {
          texte_corr += `<br>$x=${tex_fraction_reduite(c - b, a)}$`;
        }
        texte_corr += `<br> La solution est $${tex_fraction_reduite(
          c - b,
          a
        )}$.`;
      }
      if (liste_type_de_questions[i] == "x+b=c") {
        if (!this.sup && c < b) {
          b = randint(-9, 9, [0]); // b peut Ãªtre nÃ©gatif, Ã§a sera une Ã©quation du type x-b=c
          c = abs(randint(b, 15)); // c sera plus grand que b pour que c-b>0
        }
        texte = `$x${ecriture_algebrique(b)}=${c}$`;
        texte_corr = texte + "<br>";
        if (this.correction_detaillee) {
          if (b > 0) {
            texte_corr += `On soustrait $${b}$ aux deux membres.<br>`;
          } else {
            texte_corr += `On ajoute $${-1 * b}$ aux deux membres.<br>`;
          }
        }
        texte_corr += `$x${ecriture_algebrique(b)}${mise_en_evidence(
          ecriture_algebrique(-1 * b)
        )}=${c}${mise_en_evidence(ecriture_algebrique(-1 * b))}$<br>`;
        texte_corr += `$x=${c - b}$`;
        texte_corr += `<br> La solution est $${c - b}$.`;
      }
      if (liste_type_de_questions[i] == "ax=b") {
        texte = `$${a}x=${b}$`;
        texte_corr = texte + "<br>";
        if (this.correction_detaillee) {
          texte_corr += `On divise les deux membres par $${a}$.<br>`;
        }
        texte_corr += `$${a}x${mise_en_evidence(
          "\\div" + ecriture_parenthese_si_negatif(a)
        )}=${
          b + mise_en_evidence("\\div" + ecriture_parenthese_si_negatif(a))
        }$<br>`;
        texte_corr += `$x=${tex_fraction(b, a)}$`;
        if (pgcd(abs(a), abs(b)) > 1 || a < 0) {
          texte_corr += `<br>$x=${tex_fraction_reduite(b, a)}$`;
        }
        texte_corr += `<br> La solution est $${tex_fraction_reduite(b, a)}$.`;
      }
      if (liste_type_de_questions[i] == "ax+b=cx+d") {
        if (c == a) {
          c = randint(1, 13, [a]);
        } // sinon on arrive Ã  une division par 0
        if (!this.sup && a < c) {
          c = randint(1, 9);
          a = randint(c + 1, 15); // a sera plus grand que c pour que a-c>0
        }
        if (!this.sup && d < b) {
          b = randint(1, 9);
          d = randint(b + 1, 15); // d sera plus grand que b pour que d-b>0
        }
        texte = `$${rien_si_1(a)}x${ecriture_algebrique(b)}=${rien_si_1(
          c
        )}x${ecriture_algebrique(d)}$`;
        texte_corr = texte + "<br>";
        if (this.correction_detaillee) {
          if (c > 0) {
            texte_corr += `On soustrait $${rien_si_1(
              c
            )}x$ aux deux membres.<br>`;
          } else {
            texte_corr += `On ajoute $${rien_si_1(
              -1 * c
            )}x$ aux deux membres.<br>`;
          }
        }
        texte_corr += `$${rien_si_1(a)}x${ecriture_algebrique(
          b
        )}${mise_en_evidence(
          signe(-1 * c) + rien_si_1(abs(c)) + "x"
        )}=${c}x${ecriture_algebrique(d)}${mise_en_evidence(
          signe(-1 * c) + rien_si_1(abs(c)) + "x"
        )}$<br>`;
        texte_corr += `$${rien_si_1(a - c)}x${ecriture_algebrique(
          b
        )}=${d}$<br>`;
        if (this.correction_detaillee) {
          if (b > 0) {
            texte_corr += `On soustrait $${b}$ aux deux membres.<br>`;
          } else {
            texte_corr += `On ajoute $${-1 * b}$ aux deux membres.<br>`;
          }
        }
        texte_corr += `$${rien_si_1(a - c)}x${ecriture_algebrique(
          b
        )}${mise_en_evidence(
          ecriture_algebrique(-1 * b)
        )}=${d}${mise_en_evidence(ecriture_algebrique(-1 * b))}$<br>`;
        texte_corr += `$${rien_si_1(a - c)}x=${d - b}$<br>`;

        if (this.correction_detaillee) {
          texte_corr += `On divise les deux membres par $${a - c}$.<br>`;
        }
        texte_corr += `$${rien_si_1(a - c)}x${mise_en_evidence(
          "\\div" + ecriture_parenthese_si_negatif(a - c)
        )}=${
          d -
          b +
          mise_en_evidence("\\div" + ecriture_parenthese_si_negatif(a - c))
        }$<br>`;
        texte_corr += `$x=${tex_fraction(d - b, a - c)}$`;
        if (pgcd(abs(d - b), abs(a - c)) > 1 || a - c < 0) {
          texte_corr += `<br>$x=${tex_fraction_reduite(d - b, a - c)}$`;
        }
        texte_corr += `<br> La solution est $${tex_fraction_reduite(
          d - b,
          a - c
        )}$.`;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte); //replace(/1x/g,'x')); //remplace 1x par x
        this.liste_corrections.push(texte_corr); //.replace(/1x/g,'x')); //remplace 1x par x
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_case_a_cocher = ["Avec des nombres relatifs"];
  this.besoin_formulaire2_numerique = [
    "Type d'Ã©quations",
    4,
    "1 : ax=b ou x+a=b ou x-a=b\n2: ax+b=c\n3: ax+b=cx+d\n4: Les 2 types prÃ©cÃ©dents",
  ];
}

/**
 * @auteur Jean-Claude Lhote
 * 3G20
 */
function Exercice_Thales() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©terminer une longueur avec la propriÃ©tÃ© de Thales";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 1);
  sortie_html ? (this.spacing = 2) : (this.spacing = 1.5);
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.quatrieme = false;
  this.sup = 1; // 1 calcul direct | 2 calcul en deux Ã©tapes | 3 version 1&2 sans figure
  this.liste_packages = "tkz-euclide";
  // paramÃ¨tres communs Html ou Latex

  // let s1='A',s2='B',s3='C',s4='M',s5='N'
  // coefficient de l'homothÃ©tie compris entre -0,8 et -0,2 ou entre 0,2 et 0,8 pour Ã©viter les constructions trop serrÃ©es
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = [];
    this.liste_corrections = [];
    let lettre1 = randint(1, 26); // aleatoirisation du nom des points
    let s1 = lettre_depuis_chiffre(lettre1);
    let lettre2 = randint(1, 26, [lettre1]);
    let s2 = lettre_depuis_chiffre(lettre2);
    let lettre3 = randint(1, 26, [lettre1, lettre2]);
    let s3 = lettre_depuis_chiffre(lettre3);
    let lettre4 = randint(1, 26, [lettre1, lettre2, lettre3]);
    let s4 = lettre_depuis_chiffre(lettre4);
    let lettre5 = randint(1, 26, [lettre1, lettre2, lettre3, lettre4]);
    let s5 = lettre_depuis_chiffre(lettre5);
    let x2 = randint(2, 4);
    let y2 = randint(3, 5);
    let x3 = randint(5, 6);
    let y3 = randint(-2, 1);
    let k = (randint(2, 8) * randint(-1, 1, [0])) / 10;
    if (this.quatrieme) {
      k = abs(k);
    }
    let dist23 = arrondi(Math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2), 1); //calcul des longueurs du triangle principal
    let dist12 = arrondi(Math.sqrt(x2 ** 2 + y2 ** 2), 1);
    let dist13 = arrondi(Math.sqrt(x3 ** 2 + y3 ** 2), 1);
    let dist15 = arrondi(dist13 * abs(k), 2);
    let dist45 = arrondi(dist23 * abs(k), 2);
    let dist35, texte, texte_corr;
    let dist14 = arrondi(dist12 * abs(k), 2); // calcul des longueurs demandÃ©es Ã  partir

    // On ne garde qu'une approximation au dixiÃ¨me pour l'exercice

    let s45 = tex_nombrec(dist45); // mise en texte avec 1 chiffres aprÃ¨s la virgule pour Ã©noncÃ©
    let s13 = tex_nombrec(dist13);
    let s12 = tex_nombrec(dist12);
    let s15 = tex_nombrec(dist15);
    let s14 = tex_nombrec(dist14);
    let s23 = tex_nombrec(dist23);
    if (k < 0) {
      dist35 = dist13 + dist15;
    } else {
      dist35 = dist13 - dist15;
    } // calcul de la longueur intermÃ©diaire dans un cas classique ou en papillon
    let s35 = tex_nombrec(dist35); // Ã  priori, c'est dÃ©jÃ  arrondi au dixiÃ¨me, mais je me mÃ©fie des calculs flottants en js
    let niv_diff = randint(1, 2);
    if (sortie_html) {
      this.type_exercice = "MG32";
      this.taille_div_MG32 = [700, 500];
      let codeBase64;

      if (k < 0) {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAJBJwBANgAAAAAAAEAzAAAAAAAABwABQHYBR64UeuFAcdwo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAQAAJJJwDAGAAAAAAAAAAAAAAAAAAABQABQEerQ5WBBiUAAAAC#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAASAAABAAEAAAABAAAAA#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAEAAAAE#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAAQAAAAP#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAABQAAAAb#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####AQAAAAAQAAABBQABAAAABwAAAAkA#####wEAAAAAEAACSicAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAASAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMgAAAAFAAAAAAAAAAAAAABEA#####wACeTIAATUAAAABQBQAAAAAAAAAAAARAP####8AAngzAAE2AAAAAUAYAAAAAAAAAAAAEQD#####AAJ5MwACLTH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAEQD#####AAFrAAQtMC41AAAAEgAAAAE#4AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABgAAlonAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAATAP####8AAAAAABgAAkInAMAwAAAAAAAAwEOAAAAAAAAHAAAAAAoAAAAOAAAADwAAAA4AAAAQAAAAEwD#####AAAAAAAYAAJDJwAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAABEAAAAOAAAAEgAAAAwA#####wAAABQAAAAOAAAAEwAAAA8A#####wAAAAAAGAACTScAwCQAAAAAAADAAAAAAAAAAAcAAAAAFQAAABcAAAAPAP####8AAAAAABgAAk4nAMAzAAAAAAAAwEMAAAAAAAAHAAAAABYAAAAX#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABYAAAAVAAAAFAAAABYAAAAUAP####8AAAAAAAIAAAAEAAAAGQAAABQAAAAYAAAAGf####8AAAABABBDU3VyZmFjZVBvbHlnb25lAP####8BAAD#AAAABQAAABsAAAAVAP####8B#wAAAAAABQAAABr#####AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AP8AAAH#####EECIoKPXCj1xQELhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZBcHBBTU4AAAAAAAEAAAAcAAAAABYA#####wD#AAAB#####xBAiLCj1wo9cUBUMKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQXBwQUJDAAAAAAABAAAAHQD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wD#AAAB#####xBAi+Cj1wo9cUBE4UeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHTWFzcUFNTgAAAAAAAQAAABwAAAAXAP####8A#wAAAf####8QQIvoo9cKPXFAVPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB01hc3FBQkMAAAAAAAEAAAAd#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQIj4o9cKPXFAX3Cj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAAB#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8A#wAAAf####8QQFHFHrhR64VAePwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAClRyaWFuZ2xlIDEAAAAAAAMAAAAfAAAAIgAAACEAAAAZAP####8A#wAAAf####8QQFFFHrhR64VAe3wo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAClRyaWFuZ2xlIDIAAAAAAAMAAAAeAAAAIgAAACAAAAAO##########8=";
      } else {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAJBJwDAKAAAAAAAAEAiAAAAAAAABwABQHMxR64UeuFAcbwo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAOAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAQAAJJJwDAGAAAAAAAAAAAAAAAAAAABQABQEerQ5WBBiUAAAAC#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAASAAABAAEAAAABAAAAA#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAAA4AAAEAAQAAAAEAAAAE#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAAQAAAAP#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAABQAAAAb#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####AQAAAAAOAAABBQABAAAABwAAAAkA#####wEAAAAAEAACSicAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAASAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMgAAAAFAAAAAAAAAAAAAABEA#####wACeTIAATUAAAABQBQAAAAAAAAAAAARAP####8AAngzAAE2AAAAAUAYAAAAAAAAAAAAEQD#####AAJ5MwACLTH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAEQD#####AAFrAAMwLjUAAAABP+AAAAAAAAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AQAAAAAYAAJaJwAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AAAAAAAYAAJCJwDAMAAAAAAAAMBDgAAAAAAABwAAAAAKAAAADgAAAA8AAAAOAAAAEAAAABMA#####wAAAAAAGAACQycAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAA4AAAARAAAADgAAABIAAAAMAP####8AAAAUAAAADgAAABMAAAAPAP####8AAAAAABgAAk0nAMA7AAAAAAAAwDcAAAAAAAAHAAAAABUAAAAXAAAADwD#####AAAAAAAYAAJOJwDAKAAAAAAAAEAAAAAAAAAABwAAAAAWAAAAF#####8AAAABAAlDUG9seWdvbmUA#####wAAAAAAAgAAAAQAAAAWAAAAFQAAABQAAAAWAAAAFAD#####AAAAAAACAAAABAAAABkAAAAUAAAAGAAAABn#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQAA#wAAAAUAAAAbAAAAFQD#####Af8AAAAAAAUAAAAa#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAiKCj1wo9cUBC4UeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQXBwQU1OAAAAAAABAAAAHAAAAAAWAP####8A#wAAAf####8QQIiwo9cKPXFAVDCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABkFwcEFCQwAAAAAAAQAAAB0A#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8A#wAAAf####8QQIvgo9cKPXFAROFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB01hc3FBTU4AAAAAAAEAAAAcAAAAFwD#####AP8AAAH#####EECL6KPXCj1xQFTwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAdNYXNxQUJDAAAAAAABAAAAHf####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECI+KPXCj1xQF9wo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAf####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AP8AAAH#####EEBRxR64UeuFQHj8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApUcmlhbmdsZSAxAAAAAAADAAAAHwAAACIAAAAhAAAAGQD#####AP8AAAH#####EEBRRR64UeuFQHt8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApUcmlhbmdsZSAyAAAAAAADAAAAHgAAACIAAAAgAAAADv##########";
      }
      if (this.sup == 1) {
        // calcul direct de AM et BC : pas de calcul intermÃ©diaire de AN
        texte = `Dans la figure ci-dessous, les droites $(${s4 + s5})$ et $(${
          s2 + s3
        })$ sont parallÃ¨les.<br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s4 + s5}=${s45}$ cm et $${s1 + s5}=${s15}$ cm.<br>`;
        texte += `Calculer $${s1 + s4}$ et $${s2 + s3}$.`;
        if (k > 0) {
          texte_corr =
            "Dans le triangle " +
            `$${s1 + s2 + s3}$` +
            ", les droites " +
            `$(${s4 + s5})$` +
            " et " +
            `$(${s2 + s3})$` +
            " sont parallÃ¨les.<br>" +
            " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>";
        } else {
          texte_corr =
            "Les droites " +
            `$(${s4 + s5})$` +
            " et " +
            `$(${s2 + s3})$` +
            " sont parallÃ¨les.";
          texte_corr += `<br>Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre.`;
          texte_corr +=
            "<br>D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}$` +
            "<br>";
        }
      } else if (this.sup == 2) {
        // Calcul de AN nÃ©cessaire avant de calculer AM et BC
        texte = `Dans la figure ci-dessous, les droites $(${s4 + s5})$ et $(${
          s2 + s3
        })$ sont parallÃ¨les.<br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s4 + s5}=${s45}$ cm et $${s5 + s3}=${s35}$ cm.`;
        texte += `<br>Le point $${s1}$ peut Ãªtre dÃ©placÃ©.<br>`;
        texte += `Calculer $${s1 + s4}$ et $${s2 + s3}$.`;
        if (k > 0) {
          texte_corr =
            "Dans le triangle " +
            `$${s1 + s2 + s3}$` +
            ", les droites " +
            `$(${s4 + s5})$` +
            " et " +
            `$(${s2 + s3})$` +
            " sont parallÃ¨les.<br>" +
            " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>";
        } else {
          texte_corr =
            `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre et les droites $(${
              s4 + s5
            })$ et $(${s2 + s3})$ sont parallÃ¨les.<br>` +
            " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>";
        }
        if (k > 0) {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s5 + s3}=${s13}-${s35}=${s15}$` +
            " cm.<br>";
        } else {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s3 + s5}-${s1 + s3}=${s35}-${s13}=${s15}$` +
            " cm.<br>";
        }
      } else if (randint(1, 2) == 1) {
        texte = `$${s1}$, $${s2}$ et $${s3}$ sont trois point distincts. $${s4} \\in [${
          s1 + s2
        }]$ et $${s5} \\in [${s1 + s3}]$ tel que les droites $(${
          s4 + s5
        })$ et $(${s2 + s3})$ sont parallÃ¨les.<br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s4 + s5}=${s45}$ cm et $${s1 + s5}=${s15}$ cm.`;
        texte += `<br>Calculer $${s1 + s4}$ et $${s2 + s3}$.`;
        texte_corr =
          "Dans le triangle " +
          `$${s1 + s2 + s3}$` +
          ", les droites " +
          `$(${s4 + s5})$` +
          " et " +
          `$(${s2 + s3})$` +
          " sont parallÃ¨les.<br>" +
          " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
          `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
            s1 + s5,
            s1 + s3
          )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
          "<br>";
      } else {
        texte = `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre.`;
        texte += `<br>Les droites $(${s4 + s5})$ et $(${
          s2 + s3
        })$ sont parallÃ¨les.<br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s4 + s5}=${s45}$ cm et $${s5 + s3}=${s35}$ cm.`;
        texte += `<br>Calculer $${s1 + s4}$ et $${s2 + s3}$.`;
        if (k > 0) {
          texte_corr =
            "Dans le triangle " +
            `$${s1 + s2 + s3}$` +
            ", les droites " +
            `$(${s4 + s5})$` +
            " et " +
            `$(${s2 + s3})$` +
            " sont parallÃ¨les.<br>" +
            " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>";
        } else {
          texte_corr =
            `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s et les droites $(${
              s4 + s5
            })$ et $(${s2 + s3})$ sont parallÃ¨les.<br>` +
            " D&rsquo;aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>";
        }
        if (k > 0) {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s5 + s3}=${s13}-${s35}=${s15}$` +
            " cm.<br>";
        } else {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s3 + s5}-${s1 + s3}=${s35}-${s13}=${s15}$` +
            " cm.<br>";
        }
      }
      texte_corr += "Avec les donnÃ©es numÃ©riques :<br>";
      texte_corr +=
        `$${tex_fraction(s1 + s4, s12)}=${tex_fraction(
          s15,
          s13
        )}=${tex_fraction(s45, s2 + s3)}$` + "<br>";
      texte_corr +=
        `Soit $${s1 + s4}=` +
        quatrieme_proportionnelle(dist13, dist15, dist12, 1) +
        "$ cm";
      texte_corr +=
        ` et $${s2 + s3}=` +
        quatrieme_proportionnelle(dist15, dist13, dist45, 1) +
        "$ cm.";

      if (this.sup < 3) {
        this.MG32codeBase64 = codeBase64;
        this.MG32code_pour_modifier_la_figure = `
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x3", "${x3}");
		        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y2", "${y2}");
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y3", "${y3}");
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "k", "${k}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","A'","${s1}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","B'","${s2}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","C'","${s3}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","M'","${s4}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","N'","${s5}");
				mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        	mtg32App.display("MG32svg${numero_de_l_exercice}");
				`;
        texte += `<br>$\\footnotesize{\\textit{Le point \\thickspace ${s1} peut Ãªtre dÃ©placÃ© (si la figure est tronquÃ©e).}}$<br>`;
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      if (this.sup < 3) {
        liste_de_question_to_contenu(this);
      } else {
        this.type_exercice = "";
        liste_de_question_to_contenu_sans_numero(this);
      }
    } else {
      // sortie Latex
      texte =
        "\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}";
      texte += `\n\t\\item Les droites $(${s4 + s5})$ et $(${
        s2 + s3
      })$ sont parallÃ¨les.`;
      if (this.sup == 1) {
        //niveau 1 : Calcul direct quatriÃ¨me proportionnelle

        // enoncÃ©  niveau 1

        texte += "\n\t\\item " + `$${s1 + s2 + " = " + s12 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s1 + s3 + " = " + s13 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s4 + s5 + " = " + s45 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s1 + s5 + " = " + s15 + "~\\text{cm}."}$`;
        texte +=
          "\\end{itemize} \\bigskip  Calculer " +
          `$${s1 + s4}$` +
          " et " +
          `$${s2 + s3}$` +
          " Ã  0,1 prÃ¨s. \\end{minipage}";
      } else if (this.sup == 2) {
        // niveau 2 : Calcul intermÃ©diaire nÃ©cessaire

        // enoncÃ©  niveau 2

        texte += "\n\t\\item " + `$${s1 + s2 + " = " + s12 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s1 + s3 + " = " + s13 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s4 + s5 + " = " + s45 + "~\\text{cm}~;"}$`;
        texte += "\n\t\\item " + `$${s3 + s5 + " = " + s35 + "~\\text{cm}."}$`;
        texte +=
          "\\end{itemize} \\bigskip  Calculer " +
          `$${s1 + s4}$` +
          " et " +
          `$${s2 + s3}$` +
          " Ã  0,1 prÃ¨s. \\end{minipage}";
      } // Ã©noncÃ© sans figure
      else if (k > 0) {
        texte =
          `$${s1}$, $${s2}$ et $${s3}$` +
          " sont trois point distincts.<br>\n" +
          `$${s4} \\in [${s1 + s2}]$` +
          " et " +
          `$${s5} \\in [${s1 + s3}]$` +
          " tel que les droites " +
          `$(${s4 + s5})$` +
          " et " +
          `$(${s2 + s3})$` +
          " sont parallÃ¨les.<br>\n";
        texte += `$${s1 + s2}=${s12}$ cm, $${s1 + s3}=${s13}$ cm, $${
          s4 + s5
        }=${s45}$ cm et `;
        if (niv_diff == 1) {
          texte += `$${s1 + s5}=${s15}$ cm.`;
        } else {
          texte += `$${s3 + s5}=${s35}$ cm.`;
        }
        texte += `<br>\nCalculer $${s1 + s4}$ et $${s2 + s3}$.`;
        texte_corr =
          "Dans le triangle " +
          `$${s1 + s2 + s3}$` +
          ", les droites " +
          `$(${s4 + s5})$` +
          " et " +
          `$(${s2 + s3})$` +
          " sont parallÃ¨les.<br>\n" +
          " D'aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
          `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
            s1 + s5,
            s1 + s3
          )}=${tex_fraction(s4 + s5, s2 + s3)}.$`;
        if (niv_diff == 2) {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s5 + s3}=${s13}-${s35}=${s15}$` +
            "~;cm.";
        }
      } else {
        texte = `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre.`;
        texte += `<br>\nLes droites $(${s4 + s5})$ et $(${
          s2 + s3
        })$ sont parallÃ¨les.<br>\n $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s4 + s5}=${s45}$ cm et `;
        if (niv_diff == 1) {
          texte += `$${s1 + s5}=${s15}$ cm.`;
        } else {
          texte += `$${s3 + s5}=${s35}$ cm.`;
        }
        texte += `<br>\nCalculer $${s1 + s4}$ et $${s2 + s3}$.`;
        texte_corr =
          `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre et les droites $(${
            s4 + s5
          })$ et $(${s2 + s3})$ sont parallÃ¨les.<br>\n` +
          " D'aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
          `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
            s1 + s5,
            s1 + s3
          )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
          "<br>\n";
        if (niv_diff == 2) {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s5 + s3}=${s13}-${s35}=${s15}$` +
            " cm.";
        }
      }
      if (this.sup < 3) {
        // on ne fait la figure que si niveau < 3
        texte += "\\begin{minipage}{0.3 \\linewidth}";
        // dessin de la figure
        texte += "\n \\begin{tikzpicture}[scale=0.7]"; // Balise dÃ©but de figure
        texte +=
          "\n\t \\tkzDefPoints{0/0/" +
          s1 +
          "," +
          x3 +
          "/" +
          y3 +
          "/" +
          s3 +
          "," +
          x2 +
          "/" +
          y2 +
          "/" +
          s2 +
          "}"; // Placer les points du triangle principal
        texte += "\n\t \\tkzDrawPolygon(" + s1 + "," + s2 + "," + s3 + ")"; // Trace le triangle principal
        // DÃ©finit les points M et N par homothÃ©tie de centre C et de rapport 0,3<k<0,8
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s1 +
          " ratio " +
          k +
          "](" +
          s2 +
          ")" +
          "\t\\tkzGetPoint{" +
          s4 +
          "}"; // Place le premier point du triangle image
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s1 +
          " ratio " +
          k +
          "](" +
          s3 +
          ")" +
          "\t\\tkzGetPoint{" +
          s5 +
          "}"; // Place le deuxiÃ¨me point du triangle image
        texte += "\n\t \\tkzDrawSegment(" + s4 + "," + s5 + ")"; // Trace le segment
        if (k > 0) {
          texte += "\n\t \\tkzLabelPoints[left](" + s1 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[above left](" + s2 + "," + s4 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[below](" + s3 + "," + s5 + ")"; //nomme les points
          // Nomme les points au dessus avec above, dessous avec below...
        } else {
          // position papillon -> position du nom inversÃ©e et nÃ©cessitÃ© de tracer le triangle secondaire
          texte += "\n\t \\tkzLabelPoints[below](" + s1 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[below](" + s3 + "," + s4 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[above](" + s2 + "," + s5 + ")"; //nomme les points
          texte += "\n\t \\tkzDrawPolygon(" + s1 + "," + s4 + "," + s5 + ")"; // Trace le triangle secondaire
        }
        texte += "\n \\end{tikzpicture}"; // Balise de fin de figure
        texte += "\\end{minipage}";
      }
      this.liste_questions.push(texte); // on envoie la question
      // correction
      if (this.sup == 2) {
        //niveau 2 : Calcul intermÃ©diaire nÃ©cessaire
        texte_corr = `Les droites $(${s4 + s5})$ et $(${
          s2 + s3
        })$ sont parallÃ¨les.<br>\n\t D\'aprÃ¨s la propriÃ©tÃ© de Thales, on a $${tex_fraction(
          s1 + s4,
          s1 + s2
        )}=${tex_fraction(s1 + s5, s1 + s3)}=${tex_fraction(
          s4 + s5,
          s2 + s3
        )}.$<br>\n\t`;
        if (k > 0) {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${
              s5 + s3
            }=${s13}-${s35}=${s15}~\\text{cm}.$`;
        } else {
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s3 + s5}-${
              s1 + s3
            }=${s35}-${s13}=${s15}~\\text{cm}.$`;
        }
      } else if (this.sup == 1) {
        if (k > 0) {
          texte_corr = `Dans le triangle $${s1 + s2 + s3}$, les droites $(${
            s4 + s5
          })$ et $(${
            s2 + s3
          })$ sont parallÃ¨les.<br>\n D\'aprÃ¨s la propriÃ©tÃ© de Thales, on a $${tex_fraction(
            s1 + s4,
            s1 + s2
          )}=${tex_fraction(s1 + s5, s1 + s3)}=${tex_fraction(
            s4 + s5,
            s2 + s3
          )}.$`;
        } else {
          texte_corr =
            `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s et les droites $(${
              s4 + s5
            })$ et $(${s2 + s3})$ sont parallÃ¨les.<br>\n` +
            " D'aprÃ¨s la propriÃ©tÃ© de Thales, on a " +
            `$${tex_fraction(s1 + s4, s1 + s2)}=${tex_fraction(
              s1 + s5,
              s1 + s3
            )}=${tex_fraction(s4 + s5, s2 + s3)}.$` +
            "<br>\n";
        }
      }
      texte_corr += `<br>\n On a donc $${tex_fraction(
        s1 + s4,
        s12
      )}=${tex_fraction(s15, s13)}=${tex_fraction(s45, s2 + s3)}$`;
      texte_corr += `<br>\n Soit $${s1 + s4}=${tex_fraction(
        s15 + "\\times" + s12,
        s13
      )}\\approx${s14}~\\text{cm}$.`;
      texte_corr += `<br>\n Et $${s2 + s3}=${tex_fraction(
        s13 + "\\times" + s45,
        s15
      )}\\approx${s23}~\\text{cm}$.`;

      this.liste_corrections.push(texte_corr);

      liste_de_question_to_contenu_sans_numero(this);
    }
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : Calcul direct de deux longueurs \n 2 : Avec calcul intermÃ©diaire\n 3 : Sans figure",
  ];
}
/**
 * Reciproque_Thales
 * @Auteur Jean-Claude Lhote
 * 3G21
 */
function Reciproque_Thales() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ContrÃ´ler si deux droites sont parallÃ¨les";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 1);
  sortie_html ? (this.spacing = 2) : (this.spacing = 1.5);
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.quatrieme = false;
  this.sup = 1;
  this.liste_packages = "tkz-euclide";

  // let s1='A',s2='B',s3='C',s4='M',s5='N'
  // coefficient de l'homothÃ©tie compris entre -0,8 et -0,2 ou entre 0,2 et 0,8 pour Ã©viter les constructions trop serrÃ©es
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = [];
    this.liste_corrections = [];
    let lettre1 = randint(1, 26); // aleatoirisation du nom des points
    let s1 = lettre_depuis_chiffre(lettre1);
    let lettre2 = randint(1, 26, [lettre1]);
    let s2 = lettre_depuis_chiffre(lettre2);
    let lettre3 = randint(1, 26, [lettre1, lettre2]);
    let s3 = lettre_depuis_chiffre(lettre3);
    let lettre4 = randint(1, 26, [lettre1, lettre2, lettre3]);
    let s4 = lettre_depuis_chiffre(lettre4);
    let lettre5 = randint(1, 26, [lettre1, lettre2, lettre3, lettre4]);
    let s5 = lettre_depuis_chiffre(lettre5);
    let x2 = randint(2, 4);
    let y2 = randint(3, 5);
    let x3 = randint(5, 6);
    let y3 = randint(-2, 1);
    let k = (randint(2, 8) * randint(-1, 1, [0])) / 10;
    let k2 = k * (1 + randint(0, 1) * 0.1);
    if (this.quatrieme) {
      k = abs(k);
      k2 = abs(k2);
    }
    let dist24;
    let dist12 = arrondi(Math.sqrt(x2 * x2 + y2 * y2), 1);
    let dist13 = arrondi(Math.sqrt(x3 * x3 + y3 * y3), 1);
    while (dist12 == dist13) {
      //Ã©viter les triangles isocÃ¨les imbriquÃ©s qui ne nÃ©cÃ©ssitent aucun calculs.
      x2 = randint(2, 4);
      y2 = randint(3, 5);
      x3 = randint(5, 6);
      y3 = randint(-2, 1);
      dist12 = arrondi(Math.sqrt(x2 * x2 + y2 * y2), 1);
      dist13 = arrondi(Math.sqrt(x3 * x3 + y3 * y3), 1);
    }
    let dist15 = arrondi(dist13 * abs(k), 2);
    let dist14 = arrondi(dist12 * abs(k2), 2);
    let dist35;

    let num1, num2, den1, den2;
    if (k < 0) {
      dist35 = dist13 + dist15;
      dist24 = dist12 + dist14;
    } else {
      dist35 = dist13 - dist15;
      dist24 = dist12 - dist14;
    }

    let texte, texte_corr;
    // On ne garde qu'une approximation au dixiÃ¨me pour l'exercice

    // mise en texte avec 1 chiffres aprÃ¨s la virgule pour Ã©noncÃ©
    let s13 = tex_nombrec(dist13);
    let s12 = tex_nombrec(dist12);
    let s15 = tex_nombrec(dist15);
    let s14 = tex_nombrec(dist14);
    let s24 = tex_nombrec(dist24);
    let s35 = tex_nombrec(dist35);
    num1 = arrondi(dist12 * 100);
    den1 = arrondi(dist14 * 100);
    num2 = arrondi(dist13 * 100);
    den2 = arrondi(dist15 * 100);
    let fraction1 = [],
      fraction2 = [];
    fraction1 = fraction_simplifiee(num1, den1);
    fraction2 = fraction_simplifiee(num2, den2);

    if (sortie_html) {
      this.type_exercice = "MG32";
      this.taille_div_MG32 = [700, 500];
      let codeBase64;

      if (k < 0) {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAJBJwBANgAAAAAAAEAzAAAAAAAABwABQHYBR64UeuFAcdwo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAQAAJJJwDAGAAAAAAAAAAAAAAAAAAABQABQEerQ5WBBiUAAAAC#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAASAAABAAEAAAABAAAAA#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAEAAAAE#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAAQAAAAP#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAABQAAAAb#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####AQAAAAAQAAABBQABAAAABwAAAAkA#####wEAAAAAEAACSicAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAASAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMgAAAAFAAAAAAAAAAAAAABEA#####wACeTIAATUAAAABQBQAAAAAAAAAAAARAP####8AAngzAAE2AAAAAUAYAAAAAAAAAAAAEQD#####AAJ5MwACLTH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAEQD#####AAFrAAQtMC41AAAAEgAAAAE#4AAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABgAAlonAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAATAP####8AAAAAABgAAkInAMAwAAAAAAAAwEOAAAAAAAAHAAAAAAoAAAAOAAAADwAAAA4AAAAQAAAAEwD#####AAAAAAAYAAJDJwAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAABEAAAAOAAAAEgAAAAwA#####wAAABQAAAAOAAAAEwAAAA8A#####wAAAAAAGAACTScAwCQAAAAAAADAAAAAAAAAAAcAAAAAFQAAABcAAAAPAP####8AAAAAABgAAk4nAMAzAAAAAAAAwEMAAAAAAAAHAAAAABYAAAAX#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABYAAAAVAAAAFAAAABYAAAAUAP####8AAAAAAAIAAAAEAAAAGQAAABQAAAAYAAAAGf####8AAAABABBDU3VyZmFjZVBvbHlnb25lAP####8BAAD#AAAABQAAABsAAAAVAP####8B#wAAAAAABQAAABr#####AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AP8AAAH#####EECIoKPXCj1xQELhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZBcHBBTU4AAAAAAAEAAAAcAAAAABYA#####wD#AAAB#####xBAiLCj1wo9cUBUMKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQXBwQUJDAAAAAAABAAAAHQD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wD#AAAB#####xBAi+Cj1wo9cUBE4UeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHTWFzcUFNTgAAAAAAAQAAABwAAAAXAP####8A#wAAAf####8QQIvoo9cKPXFAVPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB01hc3FBQkMAAAAAAAEAAAAd#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQIj4o9cKPXFAX3Cj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAAB#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8A#wAAAf####8QQFHFHrhR64VAePwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAClRyaWFuZ2xlIDEAAAAAAAMAAAAfAAAAIgAAACEAAAAZAP####8A#wAAAf####8QQFFFHrhR64VAe3wo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAClRyaWFuZ2xlIDIAAAAAAAMAAAAeAAAAIgAAACAAAAAO##########8=";
      } else {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAJBJwDAKAAAAAAAAEAiAAAAAAAABwABQHMxR64UeuFAcbwo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAOAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAQAAJJJwDAGAAAAAAAAAAAAAAAAAAABQABQEerQ5WBBiUAAAAC#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAASAAABAAEAAAABAAAAA#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAAA4AAAEAAQAAAAEAAAAE#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAAQAAAAP#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAABQAAAAb#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####AQAAAAAOAAABBQABAAAABwAAAAkA#####wEAAAAAEAACSicAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAASAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMgAAAAFAAAAAAAAAAAAAABEA#####wACeTIAATUAAAABQBQAAAAAAAAAAAARAP####8AAngzAAE2AAAAAUAYAAAAAAAAAAAAEQD#####AAJ5MwACLTH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAEQD#####AAFrAAMwLjUAAAABP+AAAAAAAAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AQAAAAAYAAJaJwAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AAAAAAAYAAJCJwDAMAAAAAAAAMBDgAAAAAAABwAAAAAKAAAADgAAAA8AAAAOAAAAEAAAABMA#####wAAAAAAGAACQycAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAA4AAAARAAAADgAAABIAAAAMAP####8AAAAUAAAADgAAABMAAAAPAP####8AAAAAABgAAk0nAMA7AAAAAAAAwDcAAAAAAAAHAAAAABUAAAAXAAAADwD#####AAAAAAAYAAJOJwDAKAAAAAAAAEAAAAAAAAAABwAAAAAWAAAAF#####8AAAABAAlDUG9seWdvbmUA#####wAAAAAAAgAAAAQAAAAWAAAAFQAAABQAAAAWAAAAFAD#####AAAAAAACAAAABAAAABkAAAAUAAAAGAAAABn#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQAA#wAAAAUAAAAbAAAAFQD#####Af8AAAAAAAUAAAAa#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAiKCj1wo9cUBC4UeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQXBwQU1OAAAAAAABAAAAHAAAAAAWAP####8A#wAAAf####8QQIiwo9cKPXFAVDCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABkFwcEFCQwAAAAAAAQAAAB0A#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8A#wAAAf####8QQIvgo9cKPXFAROFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB01hc3FBTU4AAAAAAAEAAAAcAAAAFwD#####AP8AAAH#####EECL6KPXCj1xQFTwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAdNYXNxQUJDAAAAAAABAAAAHf####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECI+KPXCj1xQF9wo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAf####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AP8AAAH#####EEBRxR64UeuFQHj8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApUcmlhbmdsZSAxAAAAAAADAAAAHwAAACIAAAAhAAAAGQD#####AP8AAAH#####EEBRRR64UeuFQHt8KPXCj1wCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApUcmlhbmdsZSAyAAAAAAADAAAAHgAAACIAAAAgAAAADv##########";
      }

      if (this.sup == 1) {
        // AM,AB,AN,AC sont donnÃ©s pas de calculs intermÃ©diaires
        texte = `Dans la figure ci-dessous, $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s1 + s5}=${s15}$ cm et $${s1 + s4}=${s14}$ cm.<br>`;
        texte_corr = ``;
      } else if (this.sup == 2) {
        // AN n'est pas donnÃ©, il faut le calculer avant.
        texte = `Dans la figure ci-dessous, $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s3 + s5}=${s35}$ cm et $${s2 + s4}=${s24}$ cm.<br>`;
        texte_corr = ``;
        if (k > 0) {
          //triangles imbriquÃ©s
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s3 + s5}=${s13}-${s35}=${s15}$` +
            " cm.<br>";
          texte_corr +=
            "et que " +
            `$${s1 + s4}=${s1 + s2}-${s2 + s4}=${s12}-${s24}=${s14}$` +
            " cm.<br>";
        } else {
          // papillon
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s3 + s5}-${s1 + s3}=${s35}-${s13}=${s15}$` +
            " cm.<br>";
          texte_corr +=
            "et que " +
            `$${s1 + s4}=${s2 + s4}-${s1 + s2}=${s24}-${s12}=${s14}$` +
            " cm.<br>";
        }
      } else if (randint(1, 2) == 1) {
        //triangles imbriquÃ©s sans figure
        texte = `$${s1}$, $${s2}$ et $${s3}$ sont trois point distincts. $${s4} \\in [${
          s1 + s2
        }]$ et $${s5} \\in [${s1 + s3}]$ <br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s1 + s4}=${s14}$ cm et $${s1 + s5}=${s15}$ cm.`;
        texte_corr = ``;
      } else {
        // papillon sans figure
        texte = `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre.<br>`;
        texte += `$${s1 + s2}=${s12}$ cm, $${s1 + s3}=${s13}$ cm, $${
          s1 + s4
        }=${s14}$ cm et $${s1 + s5}=${s15}$ cm.<br>`;
        texte_corr = ``;
      }
      texte += `Les droites $(${s2 + s3})$ et $(${
        s4 + s5
      })$ sont-elles parallÃ¨les ?<br>`;

      texte_corr += `D'une part on a $\\dfrac{${s1 + s2}}{${
        s1 + s4
      }}=\\dfrac{${s12}}{${s14}}=\\dfrac{${s12}\\times${mise_en_evidence(
        s15
      )}}{${s14}\\times${mise_en_evidence(s15)}}=${tex_fraction(
        tex_nombrec(arrondi(dist12 * dist15, 3)),
        tex_nombrec(arrondi(dist14 * dist15, 4))
      )}$`;
      texte_corr += `<br>D'autre part on a $\\dfrac{${s1 + s3}}{${
        s1 + s5
      }}=\\dfrac{${s13}}{${s15}}=\\dfrac{${s13}\\times${mise_en_evidence(
        s14
      )}}{${s15}\\times${mise_en_evidence(s14)}}=${tex_fraction(
        tex_nombrec(arrondi(dist13 * dist14, 3)),
        tex_nombrec(arrondi(dist14 * dist15, 4))
      )}$`;

      if (k != k2) {
        // droites non parallÃ¨les

        texte_corr += `<br>$\\dfrac{${s1 + s2}}{${s1 + s4}}\\not=\\dfrac{${
          s1 + s3
        }}{${s1 + s5}}$.<br>`;
        texte_corr += `Donc d'aprÃ¨s le thÃ©orÃ¨me de Thales, les droites $(${
          s2 + s3
        })$ et $(${s4 + s5})$ ne sont pas parallÃ¨les.<br>`;
      } else {
        // droites parallÃ¨les
        texte_corr += `<br>$\\dfrac{${s1 + s2}}{${s1 + s4}}=\\dfrac{${
          s1 + s3
        }}{${s1 + s5}}$.<br>`; //car les produits en croix sont Ã©gaux : $${s12}\\times${s15}=${s13}\\times${s14}=${tex_nombre(arrondi(dist12*dist15,3))}$.<br>`;
        if (k > 0)
          texte_corr += `$${s1}$,$${s4}$,$${s2}$ et $${s1}$,$${s5}$,$${s3}$ sont alignÃ©s dans le mÃªme ordre.<br>`;
        else
          texte_corr += `$${s4}$,$${s1}$,$${s2}$ et $${s5}$,$${s1}$,$${s3}$ sont alignÃ©s dans le mÃªme ordre.<br>`;
        texte_corr += `Donc d'aprÃ¨s la rÃ©ciproque du thÃ©orÃ¨me de Thales, les droites $(${
          s2 + s3
        })$ et $(${s4 + s5})$ sont parallÃ¨les.<br>`;
      }

      if (this.sup < 3) {
        this.MG32codeBase64 = codeBase64;
        this.MG32code_pour_modifier_la_figure = `
					mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x3", "${x3}");
					mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y2", "${y2}");
					mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y3", "${y3}");
					mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "k", "${k}");
					mtg32App.rename("MG32svg${numero_de_l_exercice}","A'","${s1}");
					mtg32App.rename("MG32svg${numero_de_l_exercice}","B'","${s2}");
					mtg32App.rename("MG32svg${numero_de_l_exercice}","C'","${s3}");
					mtg32App.rename("MG32svg${numero_de_l_exercice}","M'","${s4}");
					mtg32App.rename("MG32svg${numero_de_l_exercice}","N'","${s5}");
					mtg32App.calculate("MG32svg${numero_de_l_exercice}");
					mtg32App.display("MG32svg${numero_de_l_exercice}");
					`;
        texte += `$\\footnotesize{\\textit{Le point \\thickspace ${s1} peut Ãªtre dÃ©placÃ© (si la figure est tronquÃ©e).}}$<br>`;
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      if (this.sup < 3) {
        liste_de_question_to_contenu(this);
      } else {
        this.type_exercice = "";
        liste_de_question_to_contenu_sans_numero(this);
      }
    } else {
      // sortie Latex
      texte_corr = ``;
      if (this.sup == 1) {
        //niveau 1 : Calcul direct
        texte =
          "\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}";
        texte += `\n\t \\item ${s1 + s2}=${s12} cm \n\t \\item ${
          s1 + s3
        }=${s13} cm\n\t \\item ${s1 + s5}=${s15} cm\n\t \\item ${
          s1 + s4
        }=${s14} cm.<br>`;
        texte +=
          `\\end{itemize}  ` +
          `Les droites (${s2 + s3}) et (${
            s4 + s5
          }) sont-elles parallÃ¨les ?<br>` +
          ". \\end{minipage}";
      } else if (this.sup == 2) {
        // niveau 2 : Calcul intermÃ©diaire nÃ©cessaire
        texte =
          "\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}";
        texte += `\n\t \\item ${s1 + s2} = ${s12} cm\n\t \\item ${
          s1 + s3
        } = ${s13} cm\n\t \\item ${s3 + s5} = ${s35} cm\n\t \\item ${
          s2 + s4
        } = ${s24} cm.<br>`;
        texte +=
          "\\end{itemize}  " +
          `Les droites (${s2 + s3}) et (${
            s4 + s5
          }) sont-elles parallÃ¨les ?<br>` +
          ". \\end{minipage}";
        if (k > 0) {
          // triangles imbriquÃ©s
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s1 + s3}-${s3 + s5}=${s13}-${s35}=${s15}$` +
            " cm.<br>";
          texte_corr +=
            "et que " +
            `$${s1 + s4}=${s1 + s2}-${s2 + s4}=${s12}-${s24}=${s14}$` +
            " cm.<br>";
        } else {
          // papillon
          texte_corr +=
            "On sait que " +
            `$${s1 + s5}=${s3 + s5}-${s1 + s3}=${s35}-${s13}=${s15}$` +
            " cm.<br>";
          texte_corr +=
            "et que " +
            `$${s1 + s4}=${s2 + s4}-${s1 + s2}=${s24}-${s12}=${s14}$` +
            " cm.<br>";
        }
      }
      // Ã©noncÃ© sans figure
      else if (randint(1, 2) == 1) {
        // triangles imbriquÃ©s
        texte = `$${s1}$, $${s2}$ et $${s3}$ sont trois point distincts. $${s4} \\in [${
          s1 + s2
        }]$ et $${s5} \\in [${s1 + s3}]$ <br> $${s1 + s2}=${s12}$ cm, $${
          s1 + s3
        }=${s13}$ cm, $${s1 + s4}=${s14}$ cm et $${s1 + s5}=${s15}$ cm.<br>`;
        texte += `Les droites (${s2 + s3}) et (${
          s4 + s5
        }) sont-elles parallÃ¨les ?<br>`;
      } else {
        // papillon
        texte = `Les points $${s2}$, $${s1}$, $${s4}$ et $${s3}$, $${s1}$, $${s5}$ sont alignÃ©s dans cet ordre.<br>`;
        texte += `$${s1 + s2}=${s12}$ cm, $${s1 + s3}=${s13}$ cm, $${
          s1 + s4
        }=${s14}$ cm et $${s1 + s5}=${s15}$ cm.<br>`;
        texte += `Les droites (${s2 + s3}) et (${
          s4 + s5
        }) sont-elles parallÃ¨les ?<br>`;
      }

      if (this.sup < 3) {
        // on ne fait la figure que si niveau < 3
        texte += "\\begin{minipage}{0.3 \\linewidth}";
        // dessin de la figure
        texte += "\n \\begin{tikzpicture}[scale=0.7]"; // Balise dÃ©but de figure
        texte +=
          "\n\t \\tkzDefPoints{0/0/" +
          s1 +
          "," +
          x3 +
          "/" +
          y3 +
          "/" +
          s3 +
          "," +
          x2 +
          "/" +
          y2 +
          "/" +
          s2 +
          "}"; // Placer les points du triangle principal
        texte += "\n\t \\tkzDrawPolygon(" + s1 + "," + s2 + "," + s3 + ")"; // Trace le triangle principal
        // DÃ©finit les points M et N par homothÃ©tie de centre C et de rapport 0,3<k<0,8
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s1 +
          " ratio " +
          k +
          "](" +
          s2 +
          ")" +
          "\t\\tkzGetPoint{" +
          s4 +
          "}"; // Place le premier point du triangle image
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s1 +
          " ratio " +
          k +
          "](" +
          s3 +
          ")" +
          "\t\\tkzGetPoint{" +
          s5 +
          "}"; // Place le deuxiÃ¨me point du triangle image
        texte += "\n\t \\tkzDrawSegment(" + s4 + "," + s5 + ")"; // Trace le segment
        if (k > 0) {
          texte += "\n\t \\tkzLabelPoints[left](" + s1 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[above left](" + s2 + "," + s4 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[below](" + s3 + "," + s5 + ")"; //nomme les points
          // Nomme les points au dessus avec above, dessous avec below...
        } else {
          // position papillon -> position du nom inversÃ©e et nÃ©cessitÃ© de tracer le triangle secondaire
          texte += "\n\t \\tkzLabelPoints[below](" + s1 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[below](" + s3 + "," + s4 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[above](" + s2 + "," + s5 + ")"; //nomme les points
          texte += "\n\t \\tkzDrawPolygon(" + s1 + "," + s4 + "," + s5 + ")"; // Trace le triangle secondaire
        }
        texte += "\n \\end{tikzpicture}"; // Balise de fin de figure
        texte += "\\end{minipage}";
      }
      this.liste_questions.push(texte); // on envoie la question
      // correction
      texte_corr += `D'une part on a $\\dfrac{${s1 + s2}}{${
        s1 + s4
      }}=\\dfrac{${s12}}{${s14}}=\\dfrac{${s12}\\times${mise_en_evidence(
        s15
      )}}{${s14}\\times${mise_en_evidence(s15)}}=${tex_fraction(
        tex_nombrec(arrondi(dist12 * dist15, 3)),
        tex_nombrec(arrondi(dist14 * dist15, 4))
      )}$`;
      texte_corr += `<br>D'autre part on a $\\dfrac{${s1 + s3}}{${
        s1 + s5
      }}=\\dfrac{${s13}}{${s15}}=\\dfrac{${s13}\\times${mise_en_evidence(
        s14
      )}}{${s15}\\times${mise_en_evidence(s14)}}=${tex_fraction(
        tex_nombrec(arrondi(dist13 * dist14, 3)),
        tex_nombrec(arrondi(dist14 * dist15, 4))
      )}$`;

      if (k != k2) {
        // droites pas parallÃ¨les

        texte_corr += `<br>$\\dfrac{${s1 + s2}}{${s1 + s4}}\\not=\\dfrac{${
          s1 + s3
        }}{${s1 + s5}}$.<br>`;
        texte_corr += `Donc d'aprÃ¨s le thÃ©orÃ¨me de Thales, les droites $(${
          s2 + s3
        })$ et $(${s4 + s5})$ ne sont pas parallÃ¨les.<br>`;
      } else {
        // droites parallÃ¨les
        texte_corr += `<br>$\\dfrac{${s1 + s2}}{${s1 + s4}}=\\dfrac{${
          s1 + s3
        }}{${s1 + s5}}$.<br>`; //car les produits en croix sont Ã©gaux : $${s12}\\times${s15}=${s13}\\times${s14}=${tex_nombre(arrondi(dist12*dist15,3))}$.<br>`;
        if (k > 0)
          texte_corr += `$${s1}$,$${s4}$,$${s2}$ et $${s1}$,$${s5}$,$${s3}$ sont alignÃ©s dans le mÃªme ordre.<br>`;
        else
          texte_corr += `$${s4}$,$${s1}$,$${s2}$ et $${s5}$,$${s1}$,$${s3}$ sont alignÃ©s dans le mÃªme ordre.<br>`;
        texte_corr += `Donc d'aprÃ¨s la rÃ©ciproque du thÃ©orÃ¨me de Thales, les droites $(${
          s2 + s3
        })$ et $(${s4 + s5})$ sont parallÃ¨les.<br>`;
      }

      this.liste_corrections.push(texte_corr);

      liste_de_question_to_contenu_sans_numero(this);
    }
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : Cas simple \n 2 : Complication \n 3 : Sans figure",
  ];
}

/**
 * @auteur Jean-Claude Lhote
 * 4G20MG32
 */
function Exercice_Pythagore() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer une longueur avec l'Ã©galitÃ© de Pythagore (MG32)";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1; // 1 calcul de l'hypotÃ©nuse 2 calcul d'un cÃ´tÃ© de l'angle droit
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.taille_div_MG32 = [700, 500];
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let lettre0 = randint(11, 25); // aleatoirisation du nom des points
    let s0 = lettre_depuis_chiffre(lettre0);
    lettre1 = randint(11, 25, [lettre0]);
    let s1 = lettre_depuis_chiffre(lettre1);
    lettre2 = randint(11, 25, [lettre0, lettre1]);
    let s2 = lettre_depuis_chiffre(lettre2);
    let type_de_questions;
    if (this.sup == 1) {
      type_de_questions = 1; //calcul de l'hypotÃ©nuse
    }
    if (this.sup == 2) {
      type_de_questions = 2; //calcul d'un cÃ´tÃ© de l'angle droit
    }
    if (this.sup == 3) {
      type_de_questions = randint(1, 2); //un des deux calculs
    }
    if (this.sup == 4) {
      type_de_questions = randint(3, 4);
    }
    let nom_du_triangle = choice([
      s0 + s1 + s2,
      s0 + s2 + s1,
      s1 + s0 + s2,
      s1 + s2 + s0,
      s2 + s0 + s1,
      s2 + s1 + s0,
    ]);
    let k1 = Math.round((Math.random() * 3 + 3) * 10) / 10;
    let k2 = Math.round((Math.random() * 3 + 1) * 10) / 10;
    let alpha1 = Math.random() * Math.PI - Math.PI / 2;
    let alpha1deg = Math.round((alpha1 * 180) / Math.PI);
    let x1 = k1; // coordonnÃ©es des deux sommets du triangle
    let y2 = k2;
    let s01 = arrondi_virgule(k1, 1); // mise en texte avec 1 chiffres aprÃ¨s la virgule pour Ã©noncÃ©
    let s02 = arrondi_virgule(k2, 1);

    let carre01 = Math.round(k1 * k1 * 100) / 100;
    let carre02 = Math.round(k2 * k2 * 100) / 100;
    let dist12 = Math.sqrt(carre01 + carre02); //calcul de l'hypotÃ©nuse
    dist12 = Math.round(dist12 * 10) / 10; // On ne garde qu'une approximation au dixiÃ¨me pour l'exercice
    let s12 = arrondi_virgule(dist12, 1);
    let carre12 = Math.round(dist12 * dist12 * 100) / 100;

    let scarre01 = arrondi_virgule(carre01, 2); // carremn = distance entre (xm;ym) et (xn;yn) au carrÃ© avec 2 dÃ©cimales
    let scarre02 = arrondi_virgule(carre02, 2); // scarremn = chaine de caractÃ¨re avec 2 dÃ©cimales aprÃ¨s une virgule.
    let scarre12 = arrondi_virgule(carre12, 2);
    if (sortie_html) {
      let codeBase64;
      if (alpha1deg < 0) {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAACH#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMA7AAAAAAAAwCAAAAAAAAAFAAFAcLFHrhR64UBneFHrhR64#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAMtOTD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBWgAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAFgABWgDAFAAAAAAAAEAAAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AQAAAAAWAAFGAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAAOAAAADwAAAAEAAAAAAAAAAAAAABMA#####wEAAAAAFgABRAAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAADgAAABD#####AAAAAQAJQ1JvdGF0aW9uAP####8AAAASAAAADgAAABEAAAAPAP####8AAAAAABYAAUIAQCoAAAAAAADALgAAAAAAAAcAAAAAEwAAABUAAAAPAP####8AAAAAABYAAUMAQBAAAAAAAADAOwAAAAAAAAcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAP####8AAAAAAAIAAAAEAAAAEgAAABYAAAAXAAAAEv####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAA#wAEAAAAAUAwAAAAAAAAAAAAFgAAABIAAAAX#####wAAAAEACENTZWdtZW50AP####8BAAD#ABAAAAEABAAAABcAAAAW#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAh8ij1wo9cUBHYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFQXBwQkMAAAAAAAEAAAAaAP####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AP8AAAH#####EECKaKPXCj1xQEphR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZNYXNxQkMAAAAAAAEAAAAa#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQI1oo9cKPXFASuFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAABAAAAGQD#####AAAA#wH#####EECIIKPXCj1xQFqwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApNYXNxQW5nZHJ0AAAAAAABAAAAGQAAABgA#####wAAAP8B#####xBAjAij1wo9cUBa8KPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQXBwQW5nRHJ0AAAAAAABAAAAGQD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAAP8B#####xBAWMUeuFHrhUB4fCj1wo9cAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALaHlwb3TDqW51c2UAAAAAAAsAAAAeAAAAGwAAAB0AAAAfAAAAHAAAAB0AAAAeAAAAGwAAAB0AAAAcAAAAHwAAAA7##########w==";
      } else {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAACH#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMAUAAAAAAAAQBQAAAAAAAAFAAFAbFo9cKPXBkB0BhR64Ueu#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAI5MAAAAAFAVoAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABYAAVoAwBQAAAAAAABAAAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABIA#####wEAAAAAFgABRgAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAAA8AAAABAAAAAAAAAAAAAAASAP####8BAAAAABYAAUQAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAA4AAAAQ#####wAAAAEACUNSb3RhdGlvbgD#####AAAAEgAAAA4AAAARAAAADwD#####AAAAAAAWAAFCAEAqAAAAAAAAwDgAAAAAAAAHAAAAABMAAAAVAAAADwD#####AAAAAAAWAAFDAMA3AAAAAAAAwEAAAAAAAAAHAAAAABQAAAAV#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABIAAAAWAAAAFwAAABL#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAP8ABAAAAAFAMAAAAAAAAAAAABYAAAASAAAAF#####8AAAABAAhDU2VnbWVudAD#####AQAA#wAQAAABAAQAAAAXAAAAFv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8A#wAAAf####8QQIfIo9cKPXFAR2FHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABUFwcEJDAAAAAAABAAAAGgD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wAAAP8B#####xBAimij1wo9cUBKYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGTWFzcUJDAAAAAAABAAAAGv####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECNaKPXCj1xQErhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAQAAABgA#####wAAAP8B#####xBAh#Cj1wo9cUBbcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKTWFzcUFuZ0RydAAAAAAAAQAAABkAAAAXAP####8AAAD#Af####8QQIw4o9cKPXFAXPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACUFwcEFuZ0RydAAAAAAAAQAAABkA#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8AAAD#Af####8QQFjFHrhR64VAeHwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAC2h5cG90w6ludXNlAAAAAAALAAAAHgAAABsAAAAdAAAAHwAAABwAAAAdAAAAHgAAABsAAAAdAAAAHwAAABwAAAAO##########8=";
      }

      if (type_de_questions == 1) {
        // calcul direct de l'hypotÃ©nuse
        texte = `Dans la figure ci-dessous, le triangle $${nom_du_triangle}$ est rectangle en $${s0}$, $${
          s0 + s1
        }=${s01}$ cm, $${s0 + s2}=${s02}$ cm.`;
        texte += `<br>Le point $${s0}$ peut Ãªtre dÃ©placÃ©.<br>`;
        texte += `Calculer $${s1 + s2}$.`;
        texte_corr = `Dans le triangle $${nom_du_triangle}$ rectangle en $${s0}$, d&rsquo;aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${
          s1 + s2
        }^2 = ${s0 + s1}^2~+~${s0 + s2}^2.$<br>`;
        texte_corr +=
          "D&rsquo;oÃ¹ " +
          `$${
            s1 + s2
          }^2~=~${s01}^2~+~${s02}^2~=~${scarre01}~+~${scarre02}~=~${arrondi_virgule(
            carre02 + carre01,
            2
          )}.$` +
          "<br>";
        texte_corr +=
          "Soit " +
          `$${s1 + s2}~=~\\sqrt{${arrondi_virgule(
            carre02 + carre01,
            2
          )}}~\\approx${s12}$` +
          " cm.";
      }
      if (type_de_questions == 2) {
        // Calcul d'un cÃ´tÃ© de l'angle droit
        texte = `Dans la figure ci-dessous, le triangle $${nom_du_triangle}$ est rectangle en $${s0}$, $${
          s0 + s1
        }=${s01}$ cm, $${s1 + s2}=${s12}$ cm.`;
        texte += `Calculer $${s0 + s2}$.`;
        texte_corr = `Dans le triangle $${nom_du_triangle}$ rectangle en $${s0}$, d&rsquo;aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${
          s1 + s2
        }^2 = ${s0 + s1}^2~+~${s0 + s2}^2.$<br>`;
        texte_corr +=
          "D&rsquo;oÃ¹ " +
          `$${s0 + s2}^2~=~${s1 + s2}^2~-~${
            s0 + s1
          }^2 = ${s12}^2~-~${s01}^2~=~${scarre12}~-~${scarre01}~=~${arrondi_virgule(
            carre12 - carre01,
            2
          )}.$` +
          "<br>";
        texte_corr +=
          "Soit " +
          `$${s0 + s2}~=~\\sqrt{${arrondi_virgule(
            carre12 - carre01,
            2
          )}}~\\approx${s02}$` +
          " cm.";
      }
      if (type_de_questions < 3) {
        this.type_exercice = "MG32";
        this.MG32codeBase64 = codeBase64;
        this.MG32code_pour_modifier_la_figure = `
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x2", "${y2}");
		        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x1", "${x1}");
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "alphadeg", "${alpha1deg}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","A","${s0}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","B","${s1}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","C","${s2}");
				mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        	mtg32App.display("MG32svg${numero_de_l_exercice}");
				`;
        texte += `<br>$\\footnotesize{\\textit{Le point \\thickspace ${s0} peut Ãªtre dÃ©placÃ© (si la figure est tronquÃ©e).}}$<br>`;
      } else {
        this.type_exercice = "";
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      if (type_de_questions < 3) {
        liste_de_question_to_contenu(this);
      } else {
        liste_de_question_to_contenu_sans_numero(this);
      }
    } else {
      if (type_de_questions < 3) {
        texte =
          "\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}";
        texte +=
          "\n\t\\item Le cÃ´tÃ© " +
          `$[${s0 + s1}]$` +
          " est perpendiculaire au cÃ´tÃ© " +
          `$[${s0 + s2}]~;$`;
        if (type_de_questions == 1) {
          //niveau 1 : Calcul de l'hypotÃ©nuse

          // enoncÃ©  niveau 1

          texte +=
            "\n\t\\item " + `$${s0 + s1 + " = " + s01 + "~\\text{cm}~;"}$`;
          texte +=
            "\n\t\\item " + `$${s0 + s2 + " = " + s02 + "~\\text{cm}~;"}$`;
          texte +=
            "\\end{itemize} \\bigskip\n\t  Calculer " +
            `$${s1 + s2}$` +
            " Ã  0,1 prÃ¨s. \\end{minipage}";
        } else {
          // niveau 2 : Calcul d'un cÃ´tÃ© de l'angle droit
          // enoncÃ©  niveau 2

          texte +=
            "\n\t\\item " + `$${s1 + s2 + " = " + s12 + "~\\text{cm}~;"}$`;
          texte +=
            "\n\t\\item " + `$${s0 + s1 + " = " + s01 + "~\\text{cm}~;"}$`;
          texte +=
            "\\end{itemize} \\bigskip  Calculer " +
            `$${s0 + s2}$` +
            " Ã  0,1 prÃ¨s. \\end{minipage}";
        }
        texte += "\\begin{minipage}{0.3 \\linewidth}";
        // dessin de la figure
        texte += "\n \\begin{tikzpicture}[scale=0.7]"; // Balise dÃ©but de figure
        texte +=
          "\n\t \\tkzDefPoints{0/0/" + s0 + "," + x1 + "/0/B,0/" + y2 + "/C}"; // crÃ©er les points du triangle initial
        // DÃ©finit les points M et N par homothÃ©tie de centre C et de rapport 0,3<k<0,8
        texte +=
          "\n\t \\tkzDefPointBy[rotation= center " +
          s0 +
          " angle " +
          alpha1deg +
          "](B) \\tkzGetPoint{" +
          s1 +
          "}"; // transformer le premier point par rotation
        texte +=
          "\n\t \\tkzDefPointBy[rotation= center " +
          s0 +
          " angle " +
          alpha1deg +
          "](C) \\tkzGetPoint{" +
          s2 +
          "}"; // transformer le deuxiÃ¨me point par rotation
        texte += "\n\t \\tkzDrawPolygon(" + s0 + "," + s1 + "," + s2 + ")"; // Trace le triangle
        // marquer l'angle droit
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s0 +
          " ratio 0.1](" +
          s1 +
          ")" +
          "\\tkzGetPoint{B}";
        texte +=
          "\n\t \\tkzDefPointBy[rotation= center " +
          s0 +
          " angle 90](B) \\tkzGetPoint{C}";
        texte +=
          "\n\t \\tkzDefPointBy[homothety=center " +
          s0 +
          " ratio 0.1414](" +
          s1 +
          ")" +
          "\\tkzGetPoint{A}";
        texte +=
          "\n\t \\tkzDefPointBy[rotation= center " +
          s0 +
          " angle 45](A) \\tkzGetPoint{A}";
        texte += "\n\t \\tkzDrawPolygon(" + s0 + ",B,A,C)"; // Trace la marque d'angle droit

        if (alpha1deg > 0) {
          // rotation "angle droit dessous"
          texte += "\n\t \\tkzLabelPoints[below](" + s0 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[right](" + s1 + ")";
          texte += "\n\t \\tkzLabelPoints[left](" + s2 + ")";
        } else {
          // rotation "angle droit dessus" position du nom inversÃ©e
          texte += "\n\t \\tkzLabelPoints[above](" + s0 + ")"; //nomme les points
          texte += "\n\t \\tkzLabelPoints[left](" + s1 + ")";
          texte += "\n\t \\tkzLabelPoints[right](" + s2 + ")";
        }
        texte += "\n \\end{tikzpicture}"; // Balise de fin de figure
        texte += "\\end{minipage}";
      } else {
        texte =
          "\\begin{minipage}{.5 \\linewidth} 	\\vspace{0cm} Dans le triangle " +
          `${nom_du_triangle}` +
          " rectangle en " +
          `${s0}` +
          " : \\begin{itemize}";
        // texte += '\n\t\\item Le cÃ´tÃ© ' + `$[${s0 + s1}]$` + ' est perpendiculaire au cÃ´tÃ© ' + `$[${s0 + s2}]~;$`
        if (type_de_questions == 1) {
          //niveau 1 : Calcul de l'hypotÃ©nuse

          // enoncÃ©  niveau 1

          texte +=
            "\n\t\\item " + `$${s0 + s1 + " = " + s01 + "~\\text{cm}~;"}$`;
          texte +=
            "\n\t\\item " + `$${s0 + s2 + " = " + s02 + "~\\text{cm}~;"}$`;
          texte +=
            "\\end{itemize} \\bigskip\n\t  Calculer " +
            `$${s1 + s2}$` +
            " Ã  0,1 prÃ¨s. \\end{minipage}";
        } else {
          // niveau 2 : Calcul d'un cÃ´tÃ© de l'angle droit
          // enoncÃ©  niveau 2

          texte +=
            "\n\t\\item " + `$${s1 + s2 + " = " + s12 + "~\\text{cm}~;"}$`;
          texte +=
            "\n\t\\item " + `$${s0 + s1 + " = " + s01 + "~\\text{cm}~;"}$`;
          texte +=
            "\\end{itemize} \\bigskip  Calculer " +
            `$${s0 + s2}$` +
            " Ã  0,1 prÃ¨s. \\end{minipage}";
        }
      }
      this.liste_questions.push(texte); // on envoie la question
      // correction
      if (type_de_questions == 2 || type_de_questions == 4) {
        //niveau 2 : Calcul d'un cÃ´tÃ© de l'angle droit
        texte_corr =
          "Le triangle " +
          `$${nom_du_triangle}$` +
          " est rectangle en " +
          `$${s0}.$` +
          "<br>\n D'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a :~" +
          `$${s1 + s2}^2 = ${s0 + s1}^2~+~${s0 + s2}^2.$`;
        texte_corr +=
          "<br>\n D'oÃ¹ " +
          `$${s0 + s2}^2~=~${s1 + s2}^2~-~${
            s0 + s1
          }^2 = ${s12}^2~-~${s01}^2~=~${scarre12}~-~${scarre01}~=~${arrondi_virgule(
            carre12 - carre01,
            2
          )}.$`;
        texte_corr +=
          "<br>\n Soit " +
          `$${s0 + s2}~=~\\sqrt{${arrondi_virgule(
            carre12 - carre01,
            2
          )}}~\\approx${s02}~\\text{cm}.$`;
      } else {
        texte_corr =
          "Le triangle " +
          `$${nom_du_triangle}$` +
          " est rectangle en " +
          `$${s0}.$` +
          "<br>\n D'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a " +
          `$${s1 + s2}^2 = ${s0 + s1}^2~+~${s0 + s2}^2.$`;
        texte_corr +=
          "<br>\n D'oÃ¹ " +
          `$${
            s1 + s2
          }^2~=~${s01}^2~+~${s02}^2~=~${scarre01}~+~${scarre02}~=~${arrondi_virgule(
            carre02 + carre01,
            2
          )}.$`;
        texte_corr +=
          "<br>\n Soit " +
          `$${s1 + s2}~=~\\sqrt{${arrondi_virgule(
            carre02 + carre01,
            2
          )}}~\\approx${s12}~\\text{cm}.$`;
      }

      this.liste_corrections.push(texte_corr);

      liste_de_question_to_contenu_sans_numero(this);

      // }end for
    }
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Calcul de l'hypotÃ©nuse \n 2 : Calcul d'un cÃ´tÃ© de l'angle droit\n 3 : Calcul d'un cÃ´tÃ© quelconque\n 4 : Sans la figure",
  ];
}

/**
 * @auteur Jean-Claude Lhote
 * 3G30
 */
function Exercice_Trigo_longueurs() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©terminer une longueur grÃ¢ce Ã  la trigonomÃ©trie";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.quatrieme = false;
  this.sup = 1; // 1 utilisation du cosinus exclusivement 2 utilisation des 3 fonctions trigo
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    let lettre1, lettre2, texte, texte_corr;
    this.bouton_aide = modal_youtube(
      numero_de_l_exercice,
      "DYW-BTMFzd4",
      "TrigonomÃ©trie (vidÃ©o de digiSchool)"
    );
    this.type_exercice = "MG32";
    this.taille_div_MG32 = [700, 500];
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let lettre0 = randint(11, 25); // aleatoirisation du nom des points
    let s0 = lettre_depuis_chiffre(lettre0);
    lettre1 = randint(11, 25, [lettre0]);
    let s1 = lettre_depuis_chiffre(lettre1);
    lettre2 = randint(11, 25, [lettre0, lettre1]);
    let s2 = lettre_depuis_chiffre(lettre2);
    let angle1;
    let type_de_questions;
    if (this.sup == 1) type_de_questions = choice([1, 3, 5]); // on multiplie par cos, sin ou tan
    if (this.sup == 2) type_de_questions = choice([2, 4, 6]); // on divise par cos, sin ou tan
    if (this.sup == 3) type_de_questions = randint(1, 6);
    if (this.quatrieme) type_de_questions = ((type_de_questions - 1) % 2) + 1; // on n'utilise que le cosinus.
    let nom_du_triangle = choice([
      s0 + s1 + s2,
      s0 + s2 + s1,
      s1 + s0 + s2,
      s1 + s2 + s0,
      s2 + s0 + s1,
      s2 + s1 + s0,
    ]);
    let k1 = Math.round((Math.random() * 5 + 1) * 10) / 10;
    let k2 = Math.round((Math.random() * 5 + 1) * 10) / 10;
    angle1 = Math.round(Math.degres(Math.atan(k2 / k1)));
    let alpha1 = Math.random() * Math.PI - Math.PI / 2;
    let alpha1deg = Math.round((alpha1 * 180) / Math.PI);
    let x1 = k1; // coordonnÃ©es des deux sommets du triangle
    let y2 = k2;
    let s01 = arrondi_virgule(k1, 1); // mise en texte avec 1 chiffres aprÃ¨s la virgule pour Ã©noncÃ©
    let s02 = arrondi_virgule(k2, 1);

    let dist12 = k1 / Math.cos(Math.atan(k2 / k1)); //calcul de l'hypotÃ©nuse
    dist12 = Math.round(dist12 * 10) / 10; // On ne garde qu'une approximation au dixiÃ¨me pour l'exercice
    let s12 = arrondi_virgule(dist12, 1);
    texte_corr = `Dans le triangle $${nom_du_triangle}$ rectangle en $${s0}$ :<br>`;
    if (sortie_html) {
      // sortie html MG32
      let codeBase64;
      if (alpha1deg < 0) {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMA7AAAAAAAAwCAAAAAAAAAFAAFAcLFHrhR64UBneFHrhR64#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAMtOTD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBWgAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAFgABWgDAFAAAAAAAAEAAAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AQAAAAAWAAFGAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAAOAAAADwAAAAEAAAAAAAAAAAAAABMA#####wEAAAAAFgABRAAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAADgAAABD#####AAAAAQAJQ1JvdGF0aW9uAP####8AAAASAAAADgAAABEAAAAPAP####8AAAAAABYAAUIAQCoAAAAAAADALgAAAAAAAAcAAAAAEwAAABUAAAAPAP####8AAAAAABYAAUMAQBAAAAAAAADAOwAAAAAAAAcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAP####8AAAAAAAIAAAAEAAAAEgAAABYAAAAXAAAAEv####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAA#wAEAAAAAUAwAAAAAAAAAAAAFgAAABIAAAAX#####wAAAAEACENTZWdtZW50AP####8BAAD#ABAAAAEABAAAABcAAAAW#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAh8ij1wo9cUBHYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFQXBwQkMAAAAAAAEAAAAaAP####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AP8AAAH#####EECKaKPXCj1xQEphR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZNYXNxQkMAAAAAAAEAAAAa#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQI1oo9cKPXFASuFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAABAAAAGQD#####AAAA#wH#####EECIIKPXCj1xQFqwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApNYXNxQW5nZHJ0AAAAAAABAAAAGQAAABgA#####wAAAP8B#####xBAjAij1wo9cUBa8KPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQXBwQW5nRHJ0AAAAAAABAAAAGQD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAAP8B#####xBAWMUeuFHrhUB4fCj1wo9cAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALaHlwb3TDqW51c2UAAAAAAAsAAAAeAAAAGwAAAB0AAAAfAAAAHAAAAB0AAAAeAAAAGwAAAB0AAAAcAAAAHwAAABYA#####wAAAP8ABQAAACBAQIGJiJxJngAAAAEAAAAWAAAAFwAAAA7##########w==";
      } else {
        codeBase64 =
          "TWF0aEdyYXBoSmF2YTEuMAAAABI#AAAAAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMAUAAAAAAAAQBQAAAAAAAAFAAFAbFo9cKPXBkB0BhR64Ueu#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAI5MAAAAAFAVoAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABYAAVoAwBQAAAAAAABAAAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABIA#####wEAAAAAFgABRgAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAAA8AAAABAAAAAAAAAAAAAAASAP####8BAAAAABYAAUQAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAA4AAAAQ#####wAAAAEACUNSb3RhdGlvbgD#####AAAAEgAAAA4AAAARAAAADwD#####AAAAAAAWAAFCAEAqAAAAAAAAwDgAAAAAAAAHAAAAABMAAAAVAAAADwD#####AAAAAAAWAAFDAMA3AAAAAAAAwEAAAAAAAAAHAAAAABQAAAAV#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABIAAAAWAAAAFwAAABL#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAP8ABAAAAAFAMAAAAAAAAAAAABYAAAASAAAAF#####8AAAABAAhDU2VnbWVudAD#####AQAA#wAQAAABAAQAAAAXAAAAFv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8A#wAAAf####8QQIfIo9cKPXFAR2FHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABUFwcEJDAAAAAAABAAAAGgD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wAAAP8B#####xBAimij1wo9cUBKYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGTWFzcUJDAAAAAAABAAAAGv####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECNaKPXCj1xQErhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAQAAABgA#####wAAAP8B#####xBAh#Cj1wo9cUBbcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKTWFzcUFuZ0RydAAAAAAAAQAAABkAAAAXAP####8AAAD#Af####8QQIw4o9cKPXFAXPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACUFwcEFuZ0RydAAAAAAAAQAAABkA#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8AAAD#Af####8QQFjFHrhR64VAeHwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAC2h5cG90w6ludXNlAAAAAAALAAAAHgAAABsAAAAdAAAAHwAAABwAAAAdAAAAHgAAABsAAAAdAAAAHwAAABwAAAAVAP####8AAAD#AAUAAAAgQEHcp2T0QTQAAAABAAAAFgAAABcAAAAO##########8=";
      }
      texte = `Dans la figure ci-dessous, le triangle $${nom_du_triangle}$ est rectangle en $${s0}$.<br>`;

      if (type_de_questions == 1) {
        // calcul du cÃ´tÃ© adjacent (cosinus)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s1 + s2}=${s12}$ cm.<br>`;
        texte += `Calculer $${s0 + s1}$.`;
      }
      if (type_de_questions == 2) {
        // Calcul de l'hypotÃ©nuse (1/cosinus)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s0 + s1}=${s01}$ cm.<br>`;
        texte += `Calculer $${s1 + s2}$.`;
      }
      if (type_de_questions == 3) {
        // calcul du cÃ´tÃ© opposÃ© (sinus)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s1 + s2}=${s12}$ cm.<br>`;
        texte += `Calculer $${s0 + s2}$.`;
      }
      if (type_de_questions == 4) {
        // Calcul de l'hypotÃ©nuse (1/sinus)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s0 + s2}=${s02}$ cm.<br>`;
        texte += `Calculer $${s1 + s2}$.`;
      }
      if (type_de_questions == 5) {
        // calcul du cÃ´tÃ© opposÃ© (tangente)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s0 + s1}=${s01}$ cm.<br>`;
        texte += `Calculer $${s0 + s2}$.`;
      }
      if (type_de_questions == 6) {
        // Calcul du cÃ´tÃ© adjacent (1/tangente)
        texte += `L'angle $\\widehat{${
          s0 + s1 + s2
        }}$ mesure $${angle1}\\degree$, $${s0 + s2}=${s02}$ cm.<br>`;
        texte += `Calculer $${s0 + s1}$.`;
      }

      this.type_exercice = "MG32";
      this.MG32codeBase64 = codeBase64;
      this.MG32code_pour_modifier_la_figure = `
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x2", "${y2}");
		        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x1", "${x1}");
				mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "alphadeg", "${alpha1deg}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","A","${s0}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","B","${s1}");
				mtg32App.rename("MG32svg${numero_de_l_exercice}","C","${s2}");
				mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        	mtg32App.display("MG32svg${numero_de_l_exercice}");
				`;
      texte += `<br>$\\footnotesize{\\textit{Le point \\thickspace ${s0} peut Ãªtre dÃ©placÃ© (si la figure est tronquÃ©e).}}$<br>`;
    } else {
      //sortie Latex
      texte = `\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}`;
      texte += `\n\t\\item Le triangle $${nom_du_triangle}$ est rectangle en $${s0}$~;`;

      if (type_de_questions == 1) {
        // Calcul du cotÃ© adjacent (cosinus)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s0 + s1
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 2) {
        // Calcul de l'hypotÃ©nuse (1/cosinus)
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s1 + s2
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 3) {
        // Calcul du cotÃ© opposÃ© (sinus)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s0 + s2
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 4) {
        // Calcul de l'hypotÃ©nuse (1/sinus)
        texte += `\n\t\\item $${s0 + s2}=${s02}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s1 + s2
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 5) {
        // Calcul du cÃ´tÃ© opposÃ© (tangente)
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s0 + s2
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 6) {
        // Calcul du cÃ´tÃ© adjacent (1/tangente)
        texte += `\n\t\\item $${s0 + s2}=${s02}~\\text{cm}$`;
        texte += `\n\t\\item L'angle $\\widehat{${
          s0 + s1 + s2
        }}$~mesure~$${angle1}\\degree$.<br>`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer $${
          s0 + s1
        }$ Ã  0,1 prÃ¨s. \\end{minipage}`;
      }
      texte += "\\begin{minipage}{0.3 \\linewidth}";
      // dessin de la figure
      texte += "\n \\begin{tikzpicture}[scale=0.7]"; // Balise dÃ©but de figure
      texte +=
        "\n\t \\tkzDefPoints{0/0/" + s0 + "," + x1 + "/0/B,0/" + y2 + "/C}"; // crÃ©er les points du triangle initial
      // DÃ©finit les points M et N par homothÃ©tie de centre C et de rapport 0,3<k<0,8
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle " +
        alpha1deg +
        "](B) \\tkzGetPoint{" +
        s1 +
        "}"; // transformer le premier point par rotation
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle " +
        alpha1deg +
        "](C) \\tkzGetPoint{" +
        s2 +
        "}"; // transformer le deuxiÃ¨me point par rotation
      texte += "\n\t \\tkzDrawPolygon(" + s0 + "," + s1 + "," + s2 + ")"; // Trace le triangle
      // marquer l'angle droit
      texte +=
        "\n\t \\tkzDefPointBy[homothety=center " +
        s0 +
        " ratio 0.1](" +
        s1 +
        ")" +
        "\\tkzGetPoint{B}";
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle 90](B) \\tkzGetPoint{C}";
      texte +=
        "\n\t \\tkzDefPointBy[homothety=center " +
        s0 +
        " ratio 0.1414](" +
        s1 +
        ")" +
        "\\tkzGetPoint{A}";
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle 45](A) \\tkzGetPoint{A}";
      texte += "\n\t \\tkzDrawPolygon(" + s0 + ",B,A,C)"; // Trace la marque d'angle droit
      if (alpha1deg > 0) {
        // rotation "angle droit dessous"
        texte += "\n\t \\tkzLabelPoints[below](" + s0 + ")"; //nomme les points
        texte += "\n\t \\tkzLabelPoints[above right](" + s1 + ")";
        texte += "\n\t \\tkzLabelPoints[left](" + s2 + ")";
      } else {
        // rotation "angle droit dessus" position du nom inversÃ©e
        texte += "\n\t \\tkzLabelPoints[left](" + s0 + ")"; //nomme les points
        texte += "\n\t \\tkzLabelPoints[below left](" + s1 + ")";
        texte += "\n\t \\tkzLabelPoints[above right](" + s2 + ")";
      }
      texte += "\n \\end{tikzpicture}"; // Balise de fin de figure
      texte += "\\end{minipage}";
    }
    if (type_de_questions == 1) {
      texte_corr += `Le cosinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\cos \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s1, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\cos\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s0 + s1,
        s12
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s0 + s1}=${quatrieme_proportionnelle(
        "\\color{red}{1}",
        s12,
        `\\cos\\left(${angle1}\\degree\\right)`
      )}$<br>`; // ${s12}\\times\\cos\\left(${angle1}\\degree\\right)$<br>`;
      texte_corr += `Soit $${s0 + s1}\\approx${s01}$ cm.`;
    }
    if (type_de_questions == 2) {
      texte_corr += `Le cosinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\cos \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s1, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\cos\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s01,
        s1 + s2
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s1 + s2}=${quatrieme_proportionnelle(
        `\\cos\\left(${angle1}\\degree\\right)`,
        s01,
        "\\color{red}{1}"
      )}$<br>`; // ${s01}\\div\\cos\\left(${angle1}\\degree\\right)$<br>`;
      texte_corr += `Soit $${s1 + s2}\\approx${s12}$ cm.`;
    }
    if (type_de_questions == 3) {
      texte_corr += `Le sinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\sin \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\sin\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s0 + s2,
        s12
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s0 + s2}=${quatrieme_proportionnelle(
        "\\color{red}{1}",
        s12,
        `\\sin\\left(${angle1}\\degree\\right)`
      )}$<br>`;
      texte_corr += `Soit $${s0 + s2}\\approx${s02}$ cm.`;
    }
    if (type_de_questions == 4) {
      texte_corr = `Le sinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\sin \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\sin\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s02,
        s1 + s2
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s1 + s2}=${quatrieme_proportionnelle(
        `\\sin\\left(${angle1}\\degree\\right)`,
        s02,
        "\\color{red}{1}"
      )}$<br>`;
      texte_corr += `Soit $${s1 + s2}\\approx${s12}$ cm.`;
    }
    if (type_de_questions == 5) {
      texte_corr = `La tangente de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©finie par :<br>`;
      texte_corr += `$\\tan \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s0 + s1)}<br>$`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\tan\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s0 + s2,
        s01
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s0 + s2}=${quatrieme_proportionnelle(
        "\\color{red}{1}",
        s01,
        `\\tan\\left(${angle1}\\degree\\right)`
      )}$<br>`;
      texte_corr += `Soit $${s0 + s2}\\approx${s02}$ cm.`;
    }
    if (type_de_questions == 6) {
      texte_corr = `La tangente de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©finie par :<br>`;
      texte_corr += `$\\tan \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s0 + s1)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\dfrac{\\tan\\left(${angle1}\\degree\\right)}{\\color{red}{1}}=${tex_fraction(
        s02,
        s0 + s1
      )}$<br>`;
      texte_corr += `$\\bf\\textcolor{red}{Les~ produits~ en~ croix~ sont~ \\acute{e}gaux~donc~ :}$<br>`;
      texte_corr += `$${s0 + s1}=${quatrieme_proportionnelle(
        `\\tan\\left(${angle1}\\degree\\right)`,
        s02,
        "\\color{red}{1}"
      )}$<br>`;
      texte_corr += `Soit $${s0 + s1}\\approx${s01}$ cm.`;
    }
    // texte+=href('Comment calculer une longueur avec la trigonomÃ©trie','https://www.youtube.com/watch?v=DYW-BTMFzd4')
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : Calculs faciles \n 2 : Calculs moins faciles \n 3 : MÃ©lange",
  ];
}
/**
 * @auteur Jean-Claude Lhote
 * 3G31
 * Calcul d'angle dans le triangle rectangle
 * Le niveau 1 se limite Ã  l'utilisation de Arccos
 * Le niveau 2 utilise la fonction trigo la plus pertinente pour un calcul direct
 */
function Exercice_Trigo_angles() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©terminer un angle grÃ¢ce Ã  la trigonomÃ©trie";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1; // 1 calcul avec Arccos
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.taille_div_MG32 = [700, 500];
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let lettre0 = randint(11, 25); // aleatoirisation du nom des points
    let s0 = lettre_depuis_chiffre(lettre0);
    let lettre1 = randint(11, 25, [lettre0]);
    let s1 = lettre_depuis_chiffre(lettre1);
    let lettre2 = randint(11, 25, [lettre0, lettre1]);
    let s2 = lettre_depuis_chiffre(lettre2);
    let angle1, angle2;
    let type_de_questions;
    if (this.sup == 1) {
      type_de_questions = randint(1, 2); // utilisation de Arccos
    }
    if (this.sup == 2) {
      type_de_questions = randint(1, 6, [2]); // utilisation des 3 fonctions Arccos, Arcsin et Arctan
    }

    let nom_du_triangle = choice([
      s0 + s1 + s2,
      s0 + s2 + s1,
      s1 + s0 + s2,
      s1 + s2 + s0,
      s2 + s0 + s1,
      s2 + s1 + s0,
    ]);
    let k1 = Math.round((Math.random() * 5 + 1) * 10) / 10;
    let k2 = Math.round((Math.random() * 5 + 1) * 10) / 10;
    angle1 = Math.round(Math.degres(Math.atan(k2 / k1)));
    angle2 = 90 - angle1;
    let alpha1 = Math.random() * Math.PI - Math.PI / 2;
    let alpha1deg = Math.round((alpha1 * 180) / Math.PI);
    let x1 = k1; // coordonnÃ©es des deux sommets du triangle
    let y2 = k2;
    let s01 = arrondi_virgule(k1, 1); // mise en texte avec 1 chiffres aprÃ¨s la virgule pour Ã©noncÃ©
    let s02 = arrondi_virgule(k2, 1);

    let dist12 = k1 / Math.cos(Math.atan(k2 / k1)); //calcul de l'hypotÃ©nuse
    dist12 = Math.round(dist12 * 10) / 10; // On ne garde qu'une approximation au dixiÃ¨me pour l'exercice
    let s12 = arrondi_virgule(dist12, 1);
    let texte;
    let texte_corr = `Dans le triangle $${nom_du_triangle}$ rectangle en $${s0}$ :<br>`;
    if (sortie_html) {
      // sortie html MG32
      let codeBase64;
      if (type_de_questions % 2 != 0) {
        if (alpha1deg < 0) {
          codeBase64 =
            "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMA7AAAAAAAAwCAAAAAAAAAFAAFAcLFHrhR64UBneFHrhR64#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAMtOTD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBWgAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAFgABWgDAFAAAAAAAAEAAAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AQAAAAAWAAFGAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAAOAAAADwAAAAEAAAAAAAAAAAAAABMA#####wEAAAAAFgABRAAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAADgAAABD#####AAAAAQAJQ1JvdGF0aW9uAP####8AAAASAAAADgAAABEAAAAPAP####8AAAAAABYAAUIAQCoAAAAAAADALgAAAAAAAAcAAAAAEwAAABUAAAAPAP####8AAAAAABYAAUMAQBAAAAAAAADAOwAAAAAAAAcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAP####8AAAAAAAIAAAAEAAAAEgAAABYAAAAXAAAAEv####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAA#wAEAAAAAUAwAAAAAAAAAAAAFgAAABIAAAAX#####wAAAAEACENTZWdtZW50AP####8BAAD#ABAAAAEABAAAABcAAAAW#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAh8ij1wo9cUBHYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFQXBwQkMAAAAAAAEAAAAaAP####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AP8AAAH#####EECKaKPXCj1xQEphR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZNYXNxQkMAAAAAAAEAAAAa#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQI1oo9cKPXFASuFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAABAAAAGQD#####AAAA#wH#####EECIIKPXCj1xQFqwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApNYXNxQW5nZHJ0AAAAAAABAAAAGQAAABgA#####wAAAP8B#####xBAjAij1wo9cUBa8KPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQXBwQW5nRHJ0AAAAAAABAAAAGQD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAAP8B#####xBAWMUeuFHrhUB4fCj1wo9cAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALaHlwb3TDqW51c2UAAAAAAAsAAAAeAAAAGwAAAB0AAAAfAAAAHAAAAB0AAAAeAAAAGwAAAB0AAAAcAAAAHwAAABYA#####wAAAP8ABQAAACBAQIGJiJxJngAAAAEAAAAWAAAAFwAAAA7##########w==";
        } else {
          codeBase64 =
            "TWF0aEdyYXBoSmF2YTEuMAAAABI#AAAAAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMAUAAAAAAAAQBQAAAAAAAAFAAFAbFo9cKPXBkB0BhR64Ueu#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAI5MAAAAAFAVoAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABYAAVoAwBQAAAAAAABAAAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABIA#####wEAAAAAFgABRgAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAAA8AAAABAAAAAAAAAAAAAAASAP####8BAAAAABYAAUQAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAA4AAAAQ#####wAAAAEACUNSb3RhdGlvbgD#####AAAAEgAAAA4AAAARAAAADwD#####AAAAAAAWAAFCAEAqAAAAAAAAwDgAAAAAAAAHAAAAABMAAAAVAAAADwD#####AAAAAAAWAAFDAMA3AAAAAAAAwEAAAAAAAAAHAAAAABQAAAAV#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABIAAAAWAAAAFwAAABL#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAP8ABAAAAAFAMAAAAAAAAAAAABYAAAASAAAAF#####8AAAABAAhDU2VnbWVudAD#####AQAA#wAQAAABAAQAAAAXAAAAFv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8A#wAAAf####8QQIfIo9cKPXFAR2FHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABUFwcEJDAAAAAAABAAAAGgD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wAAAP8B#####xBAimij1wo9cUBKYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGTWFzcUJDAAAAAAABAAAAGv####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECNaKPXCj1xQErhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAQAAABgA#####wAAAP8B#####xBAh#Cj1wo9cUBbcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKTWFzcUFuZ0RydAAAAAAAAQAAABkAAAAXAP####8AAAD#Af####8QQIw4o9cKPXFAXPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACUFwcEFuZ0RydAAAAAAAAQAAABkA#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8AAAD#Af####8QQFjFHrhR64VAeHwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAC2h5cG90w6ludXNlAAAAAAALAAAAHgAAABsAAAAdAAAAHwAAABwAAAAdAAAAHgAAABsAAAAdAAAAHwAAABwAAAAVAP####8AAAD#AAUAAAAgQEHcp2T0QTQAAAABAAAAFgAAABcAAAAO##########8=";
        }
      } else {
        if (alpha1deg < 0) {
          codeBase64 =
            "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMA7AAAAAAAAwCAAAAAAAAAFAAFAcLFHrhR64UBneFHrhR64#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAMtOTD#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBWgAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAFgABWgDAFAAAAAAAAEAAAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwD#####AQAAAAAWAAFGAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAoAAAAOAAAADwAAAAEAAAAAAAAAAAAAABMA#####wEAAAAAFgABRAAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAAAQAAAAAAAAAAAAAADgAAABD#####AAAAAQAJQ1JvdGF0aW9uAP####8AAAASAAAADgAAABEAAAAPAP####8AAAAAABYAAUIAQCoAAAAAAADALgAAAAAAAAcAAAAAEwAAABUAAAAPAP####8AAAAAABYAAUMAQBAAAAAAAADAOwAAAAAAAAcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAP####8AAAAAAAIAAAAEAAAAEgAAABYAAAAXAAAAEv####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAA#wAEAAAAAUAwAAAAAAAAAAAAFgAAABIAAAAX#####wAAAAEACENTZWdtZW50AP####8BAAD#ABAAAAEABAAAABcAAAAW#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wD#AAAB#####xBAh8ij1wo9cUBHYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFQXBwQkMAAAAAAAEAAAAaAP####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AP8AAAH#####EECKaKPXCj1xQEphR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZNYXNxQkMAAAAAAAEAAAAa#####wAAAAEAC0NNYWNyb1BhdXNlAP####8A#wAAAf####8QQI1oo9cKPXFASuFHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABVBhdXNlAAAAAAABAAAAGQD#####AAAA#wH#####EECIIKPXCj1xQFqwo9cKPXACAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApNYXNxQW5nZHJ0AAAAAAABAAAAGQAAABgA#####wAAAP8B#####xBAjAij1wo9cUBa8KPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJQXBwQW5nRHJ0AAAAAAABAAAAGQD#####AAAAAQARQ01hY3JvU3VpdGVNYWNyb3MA#####wAAAP8B#####xBAWMUeuFHrhUB4fCj1wo9cAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAALaHlwb3TDqW51c2UAAAAAAAsAAAAeAAAAGwAAAB0AAAAfAAAAHAAAAB0AAAAeAAAAGwAAAB0AAAAcAAAAHwAAABYA#####wAAAP8AAwAAACBAQHXBUVjTVQAAAAEAAAAXAAAAFgAAAA7##########w==";
        } else {
          codeBase64 =
            "TWF0aEdyYXBoSmF2YTEuMAAAABI#AAAAAAJmcv###wEA#wEAAAAAAAAAAAYfAAADsgAAAQEAAAAAAAAAAQAAACL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAWAAFBAMAUAAAAAAAAQBQAAAAAAAAFAAFAbFo9cKPXBkB0BhR64Ueu#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABYAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBHq0OVgQYlAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAWAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAFgAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAJ4MQABNgAAAAFAGAAAAAAAAAAAABEA#####wACeDIAATQAAAABQBAAAAAAAAAAAAARAP####8ACGFscGhhZGVnAAI5MAAAAAFAVoAAAAAAAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABYAAVoAwBQAAAAAAABAAAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABIA#####wEAAAAAFgABRgAAAAAAAAAAAEAIAAAAAAAABwAAAAAKAAAADgAAAA8AAAABAAAAAAAAAAAAAAASAP####8BAAAAABYAAUQAAAAAAAAAAABACAAAAAAAAAcAAAAACgAAAAEAAAAAAAAAAAAAAA4AAAAQ#####wAAAAEACUNSb3RhdGlvbgD#####AAAAEgAAAA4AAAARAAAADwD#####AAAAAAAWAAFCAEAqAAAAAAAAwDgAAAAAAAAHAAAAABMAAAAVAAAADwD#####AAAAAAAWAAFDAMA3AAAAAAAAwEAAAAAAAAAHAAAAABQAAAAV#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAACAAAABAAAABIAAAAWAAAAFwAAABL#####AAAAAgAXQ01hcnF1ZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAAP8ABAAAAAFAMAAAAAAAAAAAABYAAAASAAAAF#####8AAAABAAhDU2VnbWVudAD#####AQAA#wAQAAABAAQAAAAXAAAAFv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8A#wAAAf####8QQIfIo9cKPXFAR2FHrhR64QIAAAAAAAAAAAAAAAABAAAAAAAAAAAABUFwcEJDAAAAAAABAAAAGgD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wAAAP8B#####xBAimij1wo9cUBKYUeuFHrhAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGTWFzcUJDAAAAAAABAAAAGv####8AAAABAAtDTWFjcm9QYXVzZQD#####AP8AAAH#####EECNaKPXCj1xQErhR64UeuECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAQAAABgA#####wAAAP8B#####xBAh#Cj1wo9cUBbcKPXCj1wAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKTWFzcUFuZ0RydAAAAAAAAQAAABkAAAAXAP####8AAAD#Af####8QQIw4o9cKPXFAXPCj1wo9cAIAAAAAAAAAAAAAAAABAAAAAAAAAAAACUFwcEFuZ0RydAAAAAAAAQAAABkA#####wAAAAEAEUNNYWNyb1N1aXRlTWFjcm9zAP####8AAAD#Af####8QQFjFHrhR64VAeHwo9cKPXAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAC2h5cG90w6ludXNlAAAAAAALAAAAHgAAABsAAAAdAAAAHwAAABwAAAAdAAAAHgAAABsAAAAdAAAAHwAAABwAAAAVAP####8AAAD#AAMAAAAgQELJWhOPSZcAAAABAAAAFwAAABYAAAAO##########8=";
        }
      }
      texte = `Dans la figure ci-dessous, le triangle $${nom_du_triangle}$ est rectangle en $${s0}$.<br>`;

      if (type_de_questions == 1) {
        // calcul de l'angle 1 (arccos)
        texte += `$${s1 + s2}=${s12}$ cm<br>`;
        texte += `$${s0 + s1}=${s01}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s1 + s2}}$ Ã  1Â° prÃ¨s.`;
      }
      if (type_de_questions == 2) {
        // Calcul de l'angle 2 (90-arccos)
        texte += `$${s1 + s2}=${s12}$ cm<br>`;
        texte += `$${s0 + s1}=${s01}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s2 + s1}}$ Ã  1Â° prÃ¨s.`;
      }
      if (type_de_questions == 3) {
        // calcul de l'angle 1 (arcsin)
        texte += `$${s0 + s2}=${s02}$ cm<br>`;
        texte += `$${s1 + s2}=${s12}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s1 + s2}}$ Ã  1Â° prÃ¨s.`;
      }
      if (type_de_questions == 4) {
        // Calcul de l'angle 2 (arcsin)
        texte += `$${s1 + s2}=${s12}$ cm<br>`;
        texte += `$${s0 + s1}=${s01}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s2 + s1}}$ Ã  1Â° prÃ¨s.`;
      }
      if (type_de_questions == 5) {
        // calcul de l'angle 1 (arctan)
        texte += `$${s0 + s2}=${s02}$ cm<br>`;
        texte += `$${s0 + s1}=${s01}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s1 + s2}}$ Ã  1Â° prÃ¨s.`;
      }
      if (type_de_questions == 6) {
        // Calcul de l'angle 2 (arctan)
        texte += `$${s0 + s2}=${s02}$ cm<br>`;
        texte += `$${s0 + s1}=${s01}$ cm<br>`;
        texte += `Calculer l'angle $\\widehat{${s0 + s2 + s1}}$ Ã  1Â° prÃ¨s.`;
      }

      this.type_exercice = "MG32";
      this.MG32codeBase64 = codeBase64;
      this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x2", "${y2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x1", "${x1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "alphadeg", "${alpha1deg}");
			mtg32App.rename("MG32svg${numero_de_l_exercice}","A","${s0}");
			mtg32App.rename("MG32svg${numero_de_l_exercice}","B","${s1}");
			mtg32App.rename("MG32svg${numero_de_l_exercice}","C","${s2}");
			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			`;
      texte += `<br>$\\footnotesize{\\textit{Le point \\thickspace ${s0} peut Ãªtre dÃ©placÃ© (si la figure est tronquÃ©e).}}$<br>`;
    } else {
      //sortie Latex
      texte = `\\begin{minipage}{.7 \\linewidth} 	\\vspace{0cm} Sur la figure ci-contre, on a  : \\begin{itemize}`;
      texte += `\n\t\\item Le triangle $${nom_du_triangle}$ est rectangle en $${s0}$;`;

      if (type_de_questions == 1) {
        // Calcul de l'angle cotÃ© adjacent (Arccos)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s1 + s2
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 2) {
        // Calcul de l'angle opposÃ© (90-Arccos)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s2 + s1
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 3) {
        // Calcul de l'angle 1 (Arcsin)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s2}=${s02}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s1 + s2
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 4) {
        // Calcul de l'angle 2 (Arcsin)
        texte += `\n\t\\item $${s1 + s2}=${s12}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s2 + s1
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 5) {
        // Calcul de l'angle 1 (Arctan)
        texte += `\n\t\\item $${s0 + s2}=${s02}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s1 + s2
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      if (type_de_questions == 6) {
        // Calcul de l'angle 2 (Arctan)
        texte += `\n\t\\item $${s0 + s2}=${s02}~\\text{cm}$`;
        texte += `\n\t\\item $${s0 + s1}=${s01}~\\text{cm}$`;
        texte += `\\end{itemize} \\bigskip\n\t  Calculer l'angle $\\widehat{${
          s0 + s2 + s1
        }}$ Ã  1Â° prÃ¨s. \\end{minipage}`;
      }
      texte += "\\begin{minipage}{0.3 \\linewidth}";
      // dessin de la figure
      texte += "\n \\begin{tikzpicture}[scale=0.7]"; // Balise dÃ©but de figure
      texte +=
        "\n\t \\tkzDefPoints{0/0/" + s0 + "," + x1 + "/0/B,0/" + y2 + "/C}"; // crÃ©er les points du triangle initial
      // DÃ©finit les points M et N par homothÃ©tie de centre C et de rapport 0,3<k<0,8
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle " +
        alpha1deg +
        "](B) \\tkzGetPoint{" +
        s1 +
        "}"; // transformer le premier point par rotation
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle " +
        alpha1deg +
        "](C) \\tkzGetPoint{" +
        s2 +
        "}"; // transformer le deuxiÃ¨me point par rotation
      texte += "\n\t \\tkzDrawPolygon(" + s0 + "," + s1 + "," + s2 + ")"; // Trace le triangle
      // marquer l'angle droit
      texte +=
        "\n\t \\tkzDefPointBy[homothety=center " +
        s0 +
        " ratio 0.1](" +
        s1 +
        ")" +
        "\\tkzGetPoint{B}";
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle 90](B) \\tkzGetPoint{C}";
      texte +=
        "\n\t \\tkzDefPointBy[homothety=center " +
        s0 +
        " ratio 0.1414](" +
        s1 +
        ")" +
        "\\tkzGetPoint{A}";
      texte +=
        "\n\t \\tkzDefPointBy[rotation= center " +
        s0 +
        " angle 45](A) \\tkzGetPoint{A}";
      texte += "\n\t \\tkzDrawPolygon(" + s0 + ",B,A,C)"; // Trace la marque d'angle droit
      if (alpha1deg > 0) {
        // rotation "angle droit dessous"
        texte += "\n\t \\tkzLabelPoints[below](" + s0 + ")"; //nomme les points
        texte += "\n\t \\tkzLabelPoints[above right](" + s1 + ")";
        texte += "\n\t \\tkzLabelPoints[left](" + s2 + ")";
      } else {
        // rotation "angle droit dessus" position du nom inversÃ©e
        texte += "\n\t \\tkzLabelPoints[left](" + s0 + ")"; //nomme les points
        texte += "\n\t \\tkzLabelPoints[below left](" + s1 + ")";
        texte += "\n\t \\tkzLabelPoints[above right](" + s2 + ")";
      }
      texte += "\n \\end{tikzpicture}"; // Balise de fin de figure
      texte += "\\end{minipage}";
    }
    if (type_de_questions == 1) {
      texte_corr += `Le cosinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\cos \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s1, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\cos\\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s01, s12)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s1 + s2
      }}=\\arccos\\left(${tex_fraction(s01, s12)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s1 + s2
      }}\\approx${angle1}\\degree$`;
    }
    if (type_de_questions == 2) {
      texte_corr += `Le cosinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\cos \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s1, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\cos\\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s01, s12)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s1 + s2
      }}=\\arccos\\left(${tex_fraction(s01, s12)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s1 + s2
      }}\\approx${angle1}\\degree$<br>`;
      texte_corr += `Or, dans un triangle rectangle les angles aigus sont complÃ©mentaires, donc :<br>`;
      texte_corr += `$\\widehat{${
        s0 + s2 + s1
      }}\\approx90-${angle1}\\approx${angle2}\\degree$`;
    }
    if (type_de_questions == 3) {
      texte_corr += `Le sinus de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\sin \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\sin\\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s02, s12)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s1 + s2
      }}=\\arcsin\\left(${tex_fraction(s02, s12)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s1 + s2
      }}\\approx${angle1}\\degree$`;
    }
    if (type_de_questions == 4) {
      texte_corr += `Le sinus de l'angle $\\widehat{${
        s0 + s2 + s1
      }}$ est dÃ©fini par :<br>`;
      texte_corr += `$\\sin \\left(\\widehat{${
        s0 + s2 + s1
      }}\\right)=${tex_fraction(s0 + s1, s1 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\sin\\left(\\widehat{${
        s0 + s2 + s1
      }}\\right)=${tex_fraction(s01, s12)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s2 + s1
      }}=\\arcsin\\left(${tex_fraction(s01, s12)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s2 + s1
      }}\\approx${angle2}\\degree$`;
    }
    if (type_de_questions == 5) {
      texte_corr += `La tangente de l'angle $\\widehat{${
        s0 + s1 + s2
      }}$ est dÃ©finie par :<br>`;
      texte_corr += `$\\tan \\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s0 + s2, s0 + s1)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\tan\\left(\\widehat{${
        s0 + s1 + s2
      }}\\right)=${tex_fraction(s02, s01)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s1 + s2
      }}=\\arctan\\left(${tex_fraction(s02, s01)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s1 + s2
      }}\\approx${angle1}\\degree$`;
    }
    if (type_de_questions == 6) {
      texte_corr += `La tangente de l'angle $\\widehat{${
        s0 + s2 + s1
      }}$ est dÃ©finie par :<br>`;
      texte_corr += `$\\tan \\left(\\widehat{${
        s0 + s2 + s1
      }}\\right)=${tex_fraction(s0 + s1, s0 + s2)}$<br>`;
      texte_corr += `Avec les donnÃ©es numÃ©riques :<br>`;
      texte_corr += `$\\tan\\left(\\widehat{${
        s0 + s2 + s1
      }}\\right)=${tex_fraction(s01, s02)}$<br>`;
      texte_corr += `On en dÃ©duit que $\\widehat{${
        s0 + s2 + s1
      }}=\\arctan\\left(${tex_fraction(s01, s02)}\\right)$<br>`;
      texte_corr += `Soit $\\widehat{${
        s0 + s2 + s1
      }}\\approx${angle2}\\degree$`;
    }
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Calcul de l'angle avec Acos \n 2 : Calcul de l'angle avec Acos, Asin ou Atan",
  ];
}

/**
 * DÃ©terminer la racine carrÃ©e d'un carrÃ© parfait compris entre 4 et 256
 * @auteur StÃ©phane Guyon
 * 4G20-2
 */
function Racine_caree_de_carres_parfaits() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Racine carrÃ© d'un carrÃ© parfait (calcul mental)";
  this.consigne = "Calculer de tÃªte les racines suivantes.";
  this.nb_questions = 4;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, 16);
      c = a * a;
      texte = `$\\sqrt{${c}}=$`;
      texte_corr = `$\\sqrt{${c}}=${a}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Ã partir de la donnÃ©e des 3 longueurs d'un triangle, dÃ©terminer si il est rectangle ou pas.
 * @Auteur RÃ©mi Angot
 * 4G21
 */
function Reciproque_Pythagore() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©terminer si un triangle est rectangle ou pas.";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1);

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = combinaison_listes(
      ["rectangle", "rectangle", "pas_rectangle", "pas_rectangle"],
      this.nb_questions
    );
    let liste_triplets_pythagoriciens = [
      [3, 4, 5],
      [5, 12, 13],
      [6, 8, 10],
      [7, 24, 25],
      [8, 15, 17],
      [9, 12, 15],
      [9, 40, 41],
      [10, 24, 26],
      [11, 60, 61],
      [12, 16, 20],
      [12, 35, 37],
      [13, 84, 85],
      [14, 48, 50],
      [15, 20, 25],
      [15, 36, 39],
      [16, 30, 34],
      [16, 63, 65],
      [18, 24, 30],
      [18, 80, 82],
      [20, 21, 29],
      [20, 48, 52],
      [21, 28, 35],
      [21, 72, 75],
      [24, 32, 40],
      [24, 45, 51],
      [24, 70, 74],
      [25, 60, 65],
      [27, 36, 45],
      [28, 45, 53],
      [28, 96, 100],
      [30, 40, 50],
      [30, 72, 78],
      [32, 60, 68],
      [33, 44, 55],
      [33, 56, 65],
      [35, 84, 91],
      [36, 48, 60],
      [36, 77, 85],
      [39, 52, 65],
      [39, 80, 89],
      [40, 42, 58],
      [40, 75, 85],
      [42, 56, 70],
      [45, 60, 75],
      [48, 55, 73],
      [48, 64, 80],
      [51, 68, 85],
      [54, 72, 90],
      [57, 76, 95],
      [60, 63, 87],
      [60, 80, 100],
      [65, 72, 97],
    ];
    let liste_noms_triangles = []; // on mÃ©morise les noms des triangles pour ne pas les redonner
    for (
      let i = 0,
        texte,
        texte_corr,
        AB,
        BC,
        AC,
        a,
        b,
        c,
        nom_triangle,
        triplet,
        ordre_des_cotes,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      nom_triangle = creerNomDePolygone(3, liste_noms_triangles);
      liste_noms_triangles.push(nom_triangle);
      A = nom_triangle[0];
      B = nom_triangle[1];
      C = nom_triangle[2];
      triplet = choice(liste_triplets_pythagoriciens);
      enleve_element(liste_triplets_pythagoriciens, triplet); // Supprime le triplet pour les prochaines questions
      a = triplet[0];
      b = triplet[1];
      c = triplet[2];
      if (liste_type_de_questions[i] == "pas_rectangle") {
        c += randint(-3, 3, [0]); // on change la valeur de c
        while (a ** 2 + b ** 2 == c ** 2) {
          // si par hasard (est-ce possible ?) on retombe sur un triplet pythagoricien on change les valeurs
          c += randint(-3, 3, [0]); // on change la valeur de c
          b += randint(-3, 3, [0]); // on change la valeur de b
        }
      }
      if (a > 9 && choice([true, true, true, false])) {
        //le plus souvent on utilise des dÃ©cimaux
        a = calcul(a / 10);
        b = calcul(b / 10);
        c = calcul(c / 10);
      }
      ordre_des_cotes = randint(1, 3);
      switch (ordre_des_cotes) {
        case 1:
          texte = `Le triangle $${nom_triangle}$ est tel que $${
            A + B
          }=${tex_nombre(c)}$ cm, $${A + C}=${tex_nombre(b)}$ cm et $${
            B + C
          }=${tex_nombre(a)}$ cm.`;
          break;
        case 2:
          texte = `Le triangle $${nom_triangle}$ est tel que  $${
            B + C
          }=${tex_nombre(a)}$ cm, $${A + C}=${tex_nombre(b)}$ cm et $${
            A + B
          }=${tex_nombre(c)}$ cm.`;
          break;
        case 3:
          texte = `Le triangle $${nom_triangle}$ est tel que $${
            A + C
          }=${tex_nombre(b)}$ cm, $${A + B}=${tex_nombre(c)}$ cm,  et $${
            B + C
          }=${tex_nombre(a)}$ cm.`;
          break;
      }
      texte += `<br>Ce triangle est-il rectangle ?`;
      texte_corr = `Dans le triangle $${nom_triangle}$, le plus grand cÃ´tÃ© est $[${
        A + B
      }]$.`;
      texte_corr += `<br>$${A + B}^2=${tex_nombre(c)}^2=${tex_nombrec(
        c ** 2
      )}$`;
      texte_corr += `<br>$${A + C}^2+${B + C}^2=${tex_nombre(b)}^2+${tex_nombre(
        a
      )}^2=${tex_nombrec(b ** 2 + a ** 2)}$`;
      if (liste_type_de_questions[i] == "rectangle") {
        texte_corr += `<br>On constate que $${A + B}^2=${A + C}^2+${
          B + C
        }^2$, l'Ã©galitÃ© de Pythagore est vÃ©rifiÃ©e donc $${nom_triangle}$ est rectangle en $${C}$.`;
      } else {
        texte_corr += `<br>On constate que $${A + B}^2\\not=${A + C}^2+${
          B + C
        }^2$, l'Ã©galitÃ© de Pythagore n'est pas vÃ©rifiÃ©e donc $${nom_triangle}$ n'est pas rectangle.`;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * ProblÃ¨mes utilisant le thÃ©orÃ¨me de Pythagore ou sa rÃ©ciproque et des propriÃ©tÃ©s des quadrilatÃ¨res particuliers.
 *
 * * Dans un losange, on connait la longueur du cÃ´tÃ© et une diagonale, il faut calculer l'autre.
 * * Dans un rectangle on connait la longueur et une diagonale, il faut calculer la largeur.
 * * Dans un rectangle on connait la longueur et la largeur, il faut calculer la diagonale.
 * * Est-ce qu'un parallÃ©logramme est un losange ? On peut dÃ©montrer que les diagonales sont perpendiculaires ou pas.
 * * Est-ce qu'un parallÃ©logramme est un rectangle ? On peut dÃ©montrer qu'il possÃ¨de un angle droit ou pas .
 * @Auteur RÃ©mi Angot
 * 4G22
 */
function Problemes_Pythagore() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨mes utilisant le thÃ©orÃ¨me de Pythagore";
  this.consigne = "";
  this.nb_questions = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1.5);

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [
      "losange",
      "rectangle_diagonale_connue",
      "rectangle_diagonale_a_trouver",
      "parallelogramme_est_losange",
      "parallelogramme_n_est_pas_losange",
      "parallelogramme_est_rectangle",
      "parallelogramme_n_est_pas_rectangle",
    ];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    let liste_triplets_pythagoriciens = [
      [3, 4, 5],
      [5, 12, 13],
      [6, 8, 10],
      [7, 24, 25],
      [8, 15, 17],
      [9, 12, 15],
      [9, 40, 41],
      [10, 24, 26],
      [11, 60, 61],
      [12, 16, 20],
      [12, 35, 37],
      [13, 84, 85],
      [14, 48, 50],
      [15, 20, 25],
      [15, 36, 39],
      [16, 30, 34],
      [16, 63, 65],
      [18, 24, 30],
      [18, 80, 82],
      [20, 21, 29],
      [20, 48, 52],
      [21, 28, 35],
      [21, 72, 75],
      [24, 32, 40],
      [24, 45, 51],
      [24, 70, 74],
      [25, 60, 65],
      [27, 36, 45],
      [28, 45, 53],
      [28, 96, 100],
      [30, 40, 50],
      [30, 72, 78],
      [32, 60, 68],
      [33, 44, 55],
      [33, 56, 65],
      [35, 84, 91],
      [36, 48, 60],
      [36, 77, 85],
      [39, 52, 65],
      [39, 80, 89],
      [40, 42, 58],
      [40, 75, 85],
      [42, 56, 70],
      [45, 60, 75],
      [48, 55, 73],
      [48, 64, 80],
      [51, 68, 85],
      [54, 72, 90],
      [57, 76, 95],
      [60, 63, 87],
      [60, 80, 100],
      [65, 72, 97],
    ];
    let liste_noms_quadrilateres = ["L", "M", "N", "O"]; // pour que le O ne soit pas une des 4 lettres
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let nom_quadrilatere = creerNomDePolygone(4, liste_noms_quadrilateres);
      liste_noms_quadrilateres.push(nom_quadrilatere);
      let A = nom_quadrilatere[0];
      let B = nom_quadrilatere[1];
      let C = nom_quadrilatere[2];
      let D = nom_quadrilatere[3];
      let O = `O`;
      let triplet = choice(liste_triplets_pythagoriciens);
      enleve_element(liste_triplets_pythagoriciens, triplet); // Supprime le triplet pour les prochaines questions
      let a = triplet[0];
      let b = triplet[1];
      let c = triplet[2];
      if (
        liste_type_de_questions[i] == "parallelogramme_n_est_pas_losange" ||
        liste_type_de_questions[i] == "parallelogramme_n_est_pas_rectangle"
      ) {
        c += randint(-3, 3, [0]); // on change la valeur de c
        while (a ** 2 + b ** 2 == c ** 2) {
          // si par hasard (est-ce possible ?) on retombe sur un triplet pythagoricien on change les valeurs
          c += randint(-3, 3, [0]); // on change la valeur de c
          b += randint(-3, 3, [0]); // on change la valeur de b
        }
      }
      if (a > 9 && choice([true, true, true, false])) {
        //le plus souvent on utilise des dÃ©cimaux
        a = calcul(a / 10);
        b = calcul(b / 10);
        c = calcul(c / 10);
      }

      switch (liste_type_de_questions[i]) {
        case "losange":
          texte = `$${nom_quadrilatere}$ est un losange de centre $O$ tel que $${
            A + B
          }=${tex_nombre(c)}$ cm et $${A + C}=${tex_nombre(2 * a)}$ cm.<br>`;
          texte += `Calculer $${D + B}$.`;

          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="250" viewBox="0 0 400 250"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><g id=""/><g/><g id=""/><g id=""/><g/><g id=""/><g id=""/><g id="mtg32svg#6"/><text x="185.5" y="32.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><text x="220.5" y="134.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><line x1="190.5" y1="43.44" x2="216.5" y2="129.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="144.54431444308477" y="133.14525664249953" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><line x1="190.5" y1="43.44" x2="163.54431444308477" y2="129.14525664249953" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="183.54431444308474" y="234.14525664249953" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><line x1="216.5" y1="129.44" x2="189.54431444308474" y2="215.14525664249953" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="189.54431444308474" y1="215.14525664249953" x2="163.54431444308477" y2="129.14525664249953" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><g  id=""><line x1="208.86483613904568" y1="86.9074753482156" x2="199.2927218660596" y2="89.80137036097884" style="stroke-width:1;stroke:rgb(0,0,255);" /><line x1="207.7072781339404" y1="83.07862963902116" x2="198.13516386095432" y2="85.9725246517844" style="stroke-width:1;stroke:rgb(0,0,255);" /></g><g  id=""><line x1="207.19175809011574" y1="175.70062312711323" x2="197.652449829911" y2="172.70035681946817" style="stroke-width:1;stroke:rgb(0,0,255);" /><line x1="208.39186461317377" y1="171.88489982303136" x2="198.85255635296903" y2="168.8846335153863" style="stroke-width:1;stroke:rgb(0,0,255);" /></g><g  id=""><line x1="171.1794783040391" y1="171.67778129428393" x2="180.75159257702518" y2="168.78388628152072" style="stroke-width:1;stroke:rgb(0,0,255);" /><line x1="172.33703630914437" y1="175.50662700347834" x2="181.90915058213045" y2="172.61273199071513" style="stroke-width:1;stroke:rgb(0,0,255);" /></g><g  id=""><line x1="181.19175809011574" y1="89.70062312711323" x2="171.652449829911" y2="86.7003568194682" style="stroke-width:1;stroke:rgb(0,0,255);" /><line x1="182.39186461317377" y1="85.88489982303133" x2="172.85255635296903" y2="82.8846335153863" style="stroke-width:1;stroke:rgb(0,0,255);" /></g><text x="176.02215722154236" y="144.29262832124977" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>O</tspan></text><g  id=""><line x1="198.79500694133887" y1="129.34145667941502" x2="198.84383529950412" y2="120.56860695961849" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(255,0,0);"/><line x1="190.0709855797076" y1="120.51977860145324" x2="198.84383529950412" y2="120.56860695961849" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(255,0,0);"/></g><line x1="190.5" y1="43.44" x2="190.02215722154236" y2="129.29262832124977" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="190.02215722154236" y1="129.29262832124977" x2="189.54431444308474" y2="215.14525664249953" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="190.02215722154236" y1="129.29262832124977" x2="163.54431444308477" y2="129.14525664249953" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="190.02215722154236" y1="129.29262832124977" x2="216.5" y2="129.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g  id=""><line x1="193.7768798113023" y1="89.9214712483418" x2="186.74527741024002" y2="82.81115707290796" style="stroke-width:1;stroke:rgb(255,0,0);" /><line x1="186.70592152305426" y1="89.88211536115601" x2="193.81623569848807" y2="82.85051296009375" style="stroke-width:1;stroke:rgb(255,0,0);" /></g><g  id=""><line x1="193.2990370328447" y1="175.77409956959156" x2="186.2674346317824" y2="168.66378539415774" style="stroke-width:1;stroke:rgb(255,0,0);" /><line x1="186.22807874459664" y1="175.7347436824058" x2="193.33839292003046" y2="168.7031412813435" style="stroke-width:1;stroke:rgb(255,0,0);" /></g><g  id=""><line x1="176.75540701760488" y1="134.21886503698207" x2="176.81106464702222" y2="124.21901992676723" style="stroke-width:1;stroke:rgb(255,0,0);" /></g><g  id=""><line x1="203.28890742547983" y1="124.36639160551746" x2="203.2332497960625" y2="134.3662367157323" style="stroke-width:1;stroke:rgb(255,0,0);" /></g></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `$${nom_quadrilatere}$ est un losange donc ses diagonales se coupent en leur milieu : $${
            A + O
          }=${A + C}\\div2=${tex_nombre(2 * a)}\\div2=${tex_nombre(
            a
          )}$ cm.<br>`;
          texte_corr += `On sait que les diagonales d'un losange se coupent perpendiculairement donc $${
            A + O + C
          }$ est un triangle rectangle en $O$.<br>`;
          texte_corr += `D'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A + O}^2+${
            O + B
          }^2=${A + B}^2$.<br>`;
          texte_corr += `Donc $${O + B}^2=${A + B}^2-${A + O}^2=${tex_nombre(
            c
          )}^2-${tex_nombre(a)}^2=${tex_nombre(b ** 2)}$.<br>`;
          texte_corr += `On a alors $${O + B}=\\sqrt{${tex_nombrec(
            b ** 2
          )}}=${tex_nombre(b)}$ cm.<br>`;
          texte_corr += `Finalement comme $O$ est aussi le milieu de $[${
            D + B
          }]$ : $${D + B}=2\\times ${O + B}=2\\times${tex_nombre(
            b
          )}=${tex_nombre(2 * b)}$ cm.`;
          break;

        case "rectangle_diagonale_connue":
          texte = `$${nom_quadrilatere}$ est un rectangle tel que $${
            A + B
          }=${tex_nombre(a)}$ cm et $${A + C}=${tex_nombre(c)}$ cm.<br>`;
          texte += `Calculer $${B + C}$.`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><g id=""/><g/><g id=""/><g id=""/><g/><g id=""/><g id=""/><g id=""/><text x="113.5" y="49.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="276.5" y="49.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><g id=""/><g id=""/><text x="276.5" y="138.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><text x="111.5" y="141.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><polygon points="126.500,53.440 272.500,53.440 272.500,124.440 126.500,124.440 " style="stroke-width:1;stroke:rgb(0,0,0);fill:none"  id=""/><g  id=""><line x1="142.5" y1="53.44" x2="142.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="126.5" y1="69.44" x2="142.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="272.5" y1="69.44" x2="256.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="256.5" y1="53.44" x2="256.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="256.5" y1="124.44" x2="256.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="272.5" y1="108.44" x2="256.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="126.5" y1="108.44" x2="142.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="142.5" y1="124.44" x2="142.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><line x1="126.5" y1="53.44" x2="272.5" y2="124.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/></svg></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `$${nom_quadrilatere}$ est un rectangle donc il possÃ¨de 4 angles droits et $${
            A + B + C
          }$ est un triangle rectangle en $${B}$.<br>`;
          texte_corr += `D'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A + B}^2+${
            B + C
          }^2=${A + C}^2$.<br>`;
          texte_corr += `Donc $${B + C}^2=${A + C}^2-${A + B}^2=${tex_nombre(
            c
          )}^2-${tex_nombre(a)}^2=${tex_nombre(b ** 2)}$.<br>`;
          texte_corr += `Finalement, $${B + C}=\\sqrt{${tex_nombrec(
            b ** 2
          )}}=${tex_nombre(b)}$ cm.`;
          break;

        case "rectangle_diagonale_a_trouver":
          texte = `$${nom_quadrilatere}$ est un rectangle tel que $${
            A + B
          }=${tex_nombre(a)}$ cm et $${B + C}=${tex_nombre(b)}$ cm.<br>`;
          texte += `Calculer $${A + C}$.`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><g id=""/><g/><g id=""/><g id=""/><g/><g id=""/><g id=""/><g id=""/><text x="113.5" y="49.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="276.5" y="49.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><g id=""/><g id=""/><text x="276.5" y="138.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><text x="111.5" y="141.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><polygon points="126.500,53.440 272.500,53.440 272.500,124.440 126.500,124.440 " style="stroke-width:1;stroke:rgb(0,0,0);fill:none"  id=""/><g  id=""><line x1="142.5" y1="53.44" x2="142.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="126.5" y1="69.44" x2="142.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="272.5" y1="69.44" x2="256.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="256.5" y1="53.44" x2="256.5" y2="69.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="256.5" y1="124.44" x2="256.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="272.5" y1="108.44" x2="256.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><g  id=""><line x1="126.5" y1="108.44" x2="142.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/><line x1="142.5" y1="124.44" x2="142.5" y2="108.44" style="stroke-width:1;stroke:rgb(0,0,255);"/></g><line x1="126.5" y1="53.44" x2="272.5" y2="124.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/></svg></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `$${nom_quadrilatere}$ est un rectangle donc il possÃ¨de 4 angles droits et $${
            A + B + C
          }$ est un triangle rectangle en $${B}$.<br>`;
          texte_corr += `D'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A + C}^2=${
            A + B
          }^2+${B + C}^2=${tex_nombrec(a)}^2+${tex_nombrec(b)}^2=${tex_nombrec(
            c ** 2
          )}$.<br>`;
          texte_corr += `Finalement, $${A + C}=\\sqrt{${tex_nombrec(
            c ** 2
          )}}=${tex_nombre(c)}$ cm.`;
          break;

        case "parallelogramme_est_losange":
          texte = `$${nom_quadrilatere}$ est un parallÃ©logramme de centre $O$ tel que $${
            A + O
          }=${tex_nombre(a)}$ cm, $${A + B}=${tex_nombre(c)}$ cm et $${
            B + O
          }=${tex_nombre(b)}$ cm.<br>`;
          texte += `$${nom_quadrilatere}$ est-il un losange ?`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><text x="85.5" y="46.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="252.5" y="45.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><text x="302.5" y="156.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><line x1="256.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="256.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="137.5" y="155.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><line x1="307.5" y1="138.44" x2="143.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="143.5" y1="138.44" x2="92.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="256.5" y1="52.44" x2="143.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><text x="200" y="114.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>O</tspan></text></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `Dans le triangle $${
            A + O + B
          }$, le plus grand cÃ´tÃ© est $[${A + B}]$.<br>`;
          texte_corr += `$${A + B}^2=${tex_nombre(c)}^2=${tex_nombrec(
            c ** 2
          )}$<br>`;
          texte_corr += `$${A + O}^2+${O + B}^2=${tex_nombre(a)}^2+${tex_nombre(
            b
          )}^2=${tex_nombrec(a ** 2 + b ** 2)}$<br>`;
          texte_corr += `On constate que $${A + B}^2=${A + O}^2+${
            O + B
          }^2$, l'Ã©galitÃ© de Pythagore est vÃ©rifiÃ©e donc $${
            A + O + B
          }$ est rectangle en $O$.<br>`;
          texte_corr += `Finalement, comme $${nom_quadrilatere}$ est un parallÃ©logramme qui a ses diagonales perpendiculaires alors c'est aussi un losange.`;
          break;

        case "parallelogramme_n_est_pas_losange":
          texte = `$${nom_quadrilatere}$ est un parallÃ©logramme de centre $O$ tel que $${
            A + O
          }=${tex_nombre(a)}$ cm, $${A + B}=${tex_nombre(c)}$ cm et $${
            B + O
          }=${tex_nombre(b)}$ cm.<br>`;
          texte += `$${nom_quadrilatere}$ est-il un losange ?`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><text x="85.5" y="46.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="252.5" y="45.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><text x="302.5" y="156.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><line x1="256.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="256.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="137.5" y="155.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><line x1="307.5" y1="138.44" x2="143.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="143.5" y1="138.44" x2="92.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="256.5" y1="52.44" x2="143.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><text x="200" y="114.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>O</tspan></text></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `Dans le triangle $${
            A + O + B
          }$, le plus grand cÃ´tÃ© est $[${A + B}]$.<br>`;
          texte_corr += `$${A + B}^2=${tex_nombre(c)}^2=${tex_nombrec(
            c ** 2
          )}$<br>`;
          texte_corr += `$${A + O}^2+${O + B}^2=${tex_nombre(a)}^2+${tex_nombre(
            b
          )}^2=${tex_nombrec(a ** 2 + b ** 2)}$<br>`;
          texte_corr += `On constate que $${A + B}^2\\not=${A + O}^2+${
            O + B
          }^2$, l'Ã©galitÃ© de Pythagore n'est pas vÃ©rifiÃ©e donc $${
            A + O + B
          }$ n'est pas un triangle rectangle.<br>`;
          texte_corr += `Si $${nom_quadrilatere}$ Ã©tait un losange alors ses diagonales devraient Ãªtre perpendiculaires et $${
            A + O + B
          }$ devrait Ãªtre un triangle rectangle.<br>`;
          texte_corr += `Finalement comme $${
            A + O + B
          }$ n'est pas un triangle rectangle, $${nom_quadrilatere}$ n'est pas un losange.`;
          break;

        case "parallelogramme_est_rectangle":
          texte = `$${nom_quadrilatere}$ est un parallÃ©logramme de centre $O$ tel que $${
            A + B
          }=${tex_nombre(a)}$ cm, $${A + C}=${tex_nombre(c)}$ cm et $${
            B + C
          }=${tex_nombre(b)}$ cm.<br>`;
          texte += `$${nom_quadrilatere}$ est-il un rectangle ?`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><text x="85.5" y="46.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="252.5" y="45.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><text x="302.5" y="156.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><line x1="256.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="256.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="137.5" y="155.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><line x1="307.5" y1="138.44" x2="143.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="143.5" y1="138.44" x2="92.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="256.5" y1="52.44" x2="143.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><text x="200" y="114.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>O</tspan></text></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `Dans le triangle $${
            A + B + C
          }$, le plus grand cÃ´tÃ© est $[${A + C}]$.<br>`;
          texte_corr += `$${A + C}^2=${tex_nombre(c)}^2=${tex_nombrec(
            c ** 2
          )}$<br>`;
          texte_corr += `$${A + B}^2+${B + C}^2=${tex_nombre(a)}^2+${tex_nombre(
            b
          )}^2=${tex_nombrec(a ** 2 + b ** 2)}$<br>`;
          texte_corr += `On constate que $${A + C}^2=${A + B}^2+${
            B + C
          }^2$, l'Ã©galitÃ© de Pythagore est vÃ©rifiÃ©e donc $${
            A + B + C
          }$ est rectangle en $${B}$.<br>`;
          texte_corr += `Finalement, comme $${nom_quadrilatere}$ est un parallÃ©logramme qui a un angle droit en $${B}$ alors c'est aussi un rectangle.`;
          break;

        case "parallelogramme_n_est_pas_rectangle":
          texte = `$${nom_quadrilatere}$ est un parallÃ©logramme de centre $O$ tel que $${
            A + B
          }=${tex_nombre(a)}$ cm, $${A + C}=${tex_nombre(c)}$ cm et $${
            B + C
          }=${tex_nombre(b)}$ cm.<br>`;
          texte += `$${nom_quadrilatere}$ est-il un rectangle ?`;
          if (sortie_html) {
            texte_corr = `<p style="margin-left:10%"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs id="mtg32_patterns"/><rect width="100%" height="100%" fill="rgb(255,255,255)"/><g id="mtg32svgTraces" transform="scale(1)"/><text x="85.5" y="46.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${A}</tspan></text><g id=""/><text x="252.5" y="45.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${B}</tspan></text><text x="302.5" y="156.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${C}</tspan></text><g id=""/><line x1="256.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="256.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><g id=""/><text x="137.5" y="155.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>${D}</tspan></text><line x1="307.5" y1="138.44" x2="143.5" y2="138.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="143.5" y1="138.44" x2="92.5" y2="52.44" style="stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="92.5" y1="52.44" x2="307.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><line x1="256.5" y1="52.44" x2="143.5" y2="138.44" style="stroke-dasharray:3 3;stroke-width:1;stroke:rgb(0,0,0);"  id=""/><text x="200" y="114.44" style="text-anchor : left;fill:rgb(0,0,0);font-size:16px;" id="name"  visibility="visible"><tspan>O</tspan></text></svg></p>`;
          } else {
            texte_corr = ``;
          }
          texte_corr += `Dans le triangle $${
            A + B + C
          }$, le plus grand cÃ´tÃ© est $[${A + C}]$.<br>`;
          texte_corr += `$${A + C}^2=${tex_nombre(c)}^2=${tex_nombrec(
            c ** 2
          )}$<br>`;
          texte_corr += `$${A + B}^2+${B + C}^2=${tex_nombre(a)}^2+${tex_nombre(
            b
          )}^2=${tex_nombrec(a ** 2 + b ** 2)}$<br>`;
          texte_corr += `On constate que $${A + C}^2\\not=${A + B}^2+${
            B + C
          }^2$, l'Ã©galitÃ© de Pythagore n'est pas vÃ©rifiÃ©e donc $${
            A + B + C
          }$ n'est pas rectangle en $${B}$.<br>`;
          texte_corr += `Finalement, comme $${nom_quadrilatere}$ n'a pas d'angle droit en $${B}$ ce n'est pas un rectangle.`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Puissances d'un relatif (1)
 * * Lâobjectif est de travailler le sens des rÃ¨gles de calcul sur les puissances plutÃ´t que les formules magiques
 *
 * ParamÃ©trages possibles :
 * * 1 : produit de puissances de mÃªme base
 * * 2 : quotient de puissances de mÃªme base
 * * 3 : puissance de puissance
 * * 4 : produit de puissances de mÃªme exposant
 * * 5 : mÃ©lange des trois autres niveaux
 * @Auteur SÃ©bastien Lozano
 * 4C33-1
 */
function Puissances_d_un_relatif_1() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1;
  this.titre = "Puissances : Le sens des rÃ¨gles de calculs";
  sortie_html
    ? (this.consigne = "Ãcrire sous la forme $\\mathbf{a^n}$.")
    : (this.consigne = "Ãcrire sous la forme $a^n$.");
  sortie_html ? (this.spacing = 3) : (this.spacing = 2);
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1);
  this.nb_questions = 5;
  this.correction_detaillee_disponible = true;
  this.nb_cols_corr = 1;
  this.sup = 5;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions;
    this.bouton_aide = modal_pdf(
      numero_de_l_exercice,
      "pdf/FichePuissances-4N21.pdf",
      "Aide mÃ©moire sur les puissances (SÃ©bastien Lozano)",
      "Aide mÃ©moire"
    );

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [];
    if (this.sup == 1) {
      type_de_questions_disponibles = [1]; // produit de puissances de mÃªme base
    } else if (this.sup == 2) {
      type_de_questions_disponibles = [2]; // quotient de puissances de mÃªme base
    } else if (this.sup == 3) {
      type_de_questions_disponibles = [3]; // puissance de puissance
    } else if (this.sup == 4) {
      type_de_questions_disponibles = [4]; // produit de puissances de mÃªme exposant
    } else if (this.sup == 5) {
      type_de_questions_disponibles = [1, 2, 3, 4]; // mÃ©lange
    }

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );

    // pour pouvoir adapter les couleurs en cas de besoin
    let coul0 = "red";
    let coul1 = "blue";

    for (
      let i = 0,
        base0,
        base1,
        base,
        base_utile,
        exp0,
        exp1,
        exp,
        coul_exp0,
        coul_exp1,
        lettre,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];

      base = randint(2, 9) * choice([-1, 1]); // on choisit une base sauf 1 ... penser Ã  gÃ©rer le cas des bases qui sont des puissances
      exp0 = randint(1, 9);
      exp1 = randint(1, 9, [exp0]);
      exp = [exp0, exp1]; // on choisit deux exposants diffÃ©rents c'est mieux
      lettre = lettre_depuis_chiffre(i + 1); // on utilise des lettres pour les calculs

      if (base < 0) {
        base_utile = "(" + base + ")"; // on dÃ©finit une base avec des parenthÃ¨ses pour l'affichage du cas negatif
      } else {
        base_utile = base;
      }

      switch (type_de_questions) {
        case 1: // produit de puissances de mÃªme base
          texte = `$${lettre}=${base_utile}^${exp[0]}\\times ${base_utile}^${exp[1]}$`;

          texte_corr = `$${lettre}=${base_utile}^${exp[0]}\\times ${base_utile}^${exp[1]}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=${eclatePuissance(
              base_utile,
              exp[0],
              coul0
            )} \\times ${eclatePuissance(base_utile, exp[1], coul1)}$`;
          }
          texte_corr += `<br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul0}}{${exp[0]}}~\\color{black}{+}~\\color{${coul1}}{${exp[1]}}}$ facteurs tous Ã©gaux Ã  $${base_utile}$`;
          texte_corr += `<br>`;
          texte_corr += `$${lettre}=${base_utile}^{${exp[0]}+${
            exp[1]
          }} = ${base_utile}^{${exp[0] + exp[1]}}`;
          // attention la base_utile est de type str alors que la fonction switch sur un type number
          if (simpNotPuissance(base, exp[0] + exp[1]) != ` `) {
            texte_corr += `=${simpNotPuissance(base, exp[0] + exp[1])}`;
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 2: // quotient de puissances de mÃªme base
          // Pour que la couleur de la base associÃ©e Ã  l'exposant max soit toujours rouge.
          if (Math.max(exp[0], exp[1]) == exp[0]) {
            coul_exp0 = coul0;
            coul_exp1 = coul1;
          } else {
            coul_exp0 = coul1;
            coul_exp1 = coul0;
          }

          texte = `$${lettre}=\\dfrac{${base_utile}^${exp[0]}}{${base_utile}^${exp[1]}}$`;

          texte_corr = `$${lettre}=\\dfrac{${base_utile}^${exp[0]}}{${base_utile}^${exp[1]}}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
              base_utile,
              exp[0],
              coul_exp0
            )}}{${eclatePuissance(base_utile, exp[1], coul_exp1)}}$`;
          }
          texte_corr += `<br><br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul1}}{${Math.min(
            exp[0],
            exp[1]
          )}}}$ simplifications par $${base_utile}$ possibles.`;
          if (this.correction_detaillee) {
            texte_corr += `<br><br>`;
          }
          if (exp[0] - exp[1] == 0) {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[0],
                coul_exp0
              )}}{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[0],
                coul_exp1
              )}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=1`;
          } else if (exp[0] - exp[1] < 0) {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[0],
                coul_exp0
              )}}{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[0],
                coul_exp1
              )}\\times${eclatePuissance(
                base_utile,
                exp[1] - exp[0],
                coul_exp1
              )}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=\\dfrac{1}{${base_utile}^{${exp[1]}-${
              exp[0]
            }}}=\\dfrac{1}{${base_utile}^{${exp[1] - exp[0]}}}`;
            if (simpNotPuissance(base, exp[1] - exp[0]) != ` `) {
              texte_corr += `=\\dfrac{1}{${simpNotPuissance(
                base,
                exp[1] - exp[0]
              )}}=${simpNotPuissance(base, exp[0] - exp[1])}`;
            } else {
              texte_corr += `=${base_utile}^{${exp[0] - exp[1]}}`;
            }
          } else {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[1],
                coul_exp0
              )}\\times${eclatePuissance(
                base_utile,
                exp[0] - exp[1],
                coul_exp0
              )}}{${eclatePuissance(
                `\\cancel{${base_utile}}`,
                exp[1],
                coul_exp1
              )}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=${base_utile}^{${exp[0]}-${
              exp[1]
            }}=${base_utile}^{${exp[0] - exp[1]}}`;
            if (simpNotPuissance(base, exp[0] - exp[1]) != ` `) {
              texte_corr += `=${simpNotPuissance(base, exp[0] - exp[1])}`;
            }
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 3: // exponentiation
          exp = [randint(2, 4), randint(2, 4)]; // on redÃ©finit les deux exposants pour ne pas avoir d'Ã©critures trop longues et pour Ã©viter 1
          texte = `$${lettre}=(${base_utile}^${exp[0]})^{${exp[1]}}$`;

          texte_corr = `$${lettre}=(${base_utile}^${exp[0]})^{${exp[1]}}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=\\color{${coul0}}{\\underbrace{${eclatePuissance(
              `(${base_utile}^${exp[0]})`,
              exp[1],
              coul0
            )}}_{${exp[1]}\\thickspace\\text{facteurs}}}$`;
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=\\color{${coul0}}{\\underbrace{${eclatePuissance(
              `(\\color{${coul1}}{\\underbrace{${eclatePuissance(
                base_utile,
                exp[0],
                coul1
              )}}_{${exp[0]}\\thickspace\\text{facteurs}}}\\color{${coul0}})`,
              exp[1],
              coul0
            )}}_{${exp[1]}\\times\\color{${coul1}}{${
              exp[0]
            }}\\thickspace\\color{black}{\\text{facteurs}}}}$`;
          }
          texte_corr += `<br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul0}}{${exp[1]}}~\\color{black}{\\times}~\\color{${coul1}}{${exp[0]}}}$ facteurs tous Ã©gaux Ã  $${base_utile}$`;
          texte_corr += `<br>`;
          texte_corr += `$${lettre}=${base_utile}^{${exp[0]}\\times${
            exp[1]
          }} = ${base_utile}^{${exp[0] * exp[1]}}`;
          if (simpNotPuissance(base, exp[0] * exp[1]) != ` `) {
            texte_corr += `= ${simpNotPuissance(base, exp[0] * exp[1])}`;
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 4: // produit de puissances de mÃªme exposant
          base0 = randint(2, 8, [4, 6]);
          base1 = randint(2, 8, [4, 6, base0]);
          base = [base0, base1]; // on choisit 2 bases diffÃ©rentes c'est mieux
          exp = randint(2, 5, 6); // on choisit un exposant
          texte = `$${lettre}=${base[0]}^${exp}\\times ${base[1]}^${exp}$`;
          texte_corr += `<br>`;
          texte_corr = `$${lettre}=${base[0]}^${exp}\\times ${base[1]}^${exp}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=${eclatePuissance(
              base[0],
              exp,
              coul0
            )} \\times ${eclatePuissance(base[1], exp, coul1)}$`;
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=${reorganiseProduitPuissance(
              base[0],
              base[1],
              exp,
              coul0,
              coul1
            )}$`;
          }
          texte_corr += `<br>`;
          texte_corr += `$${lettre}= (\\color{${coul0}}{\\mathbf{${
            base[0]
          }}} \\color{black}{\\times} \\color{${coul1}}{\\mathbf{${
            base[1]
          }}}\\color{black}{)^{${exp}}}=${base[0] * base[1]}^${exp}$`;
          texte_corr += `<br>`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = [
    "RÃ¨gle Ã  travailler",
    5,
    "1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange",
  ];
}

/**
 * Puissances d'un relatif (2)
 * * Travailler des rÃ©sultats automatisÃ©s
 * * mais aussi d'utiliser les propriÃ©tÃ©s du produit de puissance, du quotient de puissances et des puissances de puissances
 * @Auteur SÃ©bastien Lozano
 * 4C33-3
 */
function Puissances_d_un_relatif_2() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1;
  this.titre = "Puissances : Calculs automatisÃ©s et rÃ¨gles de calculs";
  sortie_html
    ? (this.consigne = "Ãcrire sous la forme $\\mathbf{a^n}$.")
    : (this.consigne = "Ãcrire sous la forme $a^n$.");
  this.spacing = 2;
  this.spacing_corr = 2.5;
  this.nb_questions = 8;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );

    this.bouton_aide = modal_pdf(
      numero_de_l_exercice,
      "pdf/FichePuissances-4N21.pdf",
      "Aide mÃ©moire sur les puissances (SÃ©bastien Lozano)",
      "Aide mÃ©moire"
    );

    for (
      let i = 0, base, exp, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let type_de_questions = liste_type_de_questions[i];

      switch (type_de_questions) {
        case 1:
          base = 3; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1]), randint(1, 7, [1]), randint(1, 7, [1])]; // on a besoin de 3 exposants distincts
          texte = `$\\dfrac{${base}^${exp[0]}\\times ${base * base}}{${base}^${
            exp[1]
          } \\times ${base}^${exp[2]}}$`;
          texte_corr = `$\\dfrac{${base}^${exp[0]}\\times ${
            base * base
          }}{${base}^${exp[1]} \\times ${base}^${exp[2]}}`;
          texte_corr += ` = \\dfrac{${base}^${exp[0]}\\times ${base}^{2}}{${base}^${exp[1]} \\times ${base}^${exp[2]}}`;
          texte_corr += ` = \\dfrac{${base}^{${exp[0]}+2}}{${base}^{${exp[1]}+${exp[2]}}}`;
          texte_corr += ` = \\dfrac{${base}^{${exp[0] + 2}}}{${base}^{${
            exp[1] + exp[2]
          }}}`;
          texte_corr += ` = ${base}^{${exp[0] + 2}-${exp[1] + exp[2]}}`;
          texte_corr += ` = ${base}^{${exp[0] + 2 - exp[1] - exp[2]}}`;
          if (
            exp[0] + 2 - exp[1] - exp[2] == 0 ||
            exp[0] + 2 - exp[1] - exp[2] == 1
          ) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, exp[0] + 2 - exp[1] - exp[2]);
          }
          texte_corr += `$`;
          break;
        case 2:
          base = 2; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1]), randint(1, 7, [1])]; // on a besoin de 2 exposants distincts
          texte = `$\\dfrac{${base}^${exp[0]}\\times ${base ** 3}}{${base}^${
            exp[1]
          }}$`;
          texte_corr = `$\\dfrac{${base}^${exp[0]}\\times ${
            base ** 3
          }}{${base}^${exp[1]}}`;
          texte_corr += ` = \\dfrac{${base}^${exp[0]}\\times ${base}^3}{${base}^${exp[1]}}`;
          texte_corr += ` = \\dfrac{${base}^{${exp[0]}+3}}{${base}^${exp[1]}}`;
          texte_corr += ` = \\dfrac{${base}^{${exp[0] + 3}}}{${base}^${
            exp[1]
          }}`;
          texte_corr += ` = ${base}^{${exp[0] + 3}-${exp[1]}}`;
          texte_corr += ` = ${base}^{${exp[0] + 3 - exp[1]}}`;
          if (exp[0] + 3 - exp[1] == 0 || exp[0] + 3 - exp[1] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, exp[0] + 3 - exp[1]);
          }
          texte_corr += `$`;
          break;
        case 3:
          base = 5; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1]), randint(1, 2)]; // on a besoin de 2 exposants distincts
          // le second exposant ne peut valoir que 1 ou 2 la fonction testExp ne convient pas Ã  l'affichage ici
          if (exp[1] == 2) {
            texte = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${base ** 2}^${
              exp[1]
            }}$`;
            texte_corr = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${
              base ** 2
            }^${exp[1]}}`;
            texte_corr += `=\\dfrac{${base}^{1+${exp[0]}}}{(${base}^2)^${exp[1]}}`;
            texte_corr += `=\\dfrac{${base}^{1+${exp[0]}}}{${base}^{2 \\times ${exp[1]}}}`;
            texte_corr += `=\\dfrac{${base}^{${1 + exp[0]}}}{${base}^{${
              2 * exp[1]
            }}}`;
          } else {
            texte = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${base ** 2}}$`;
            texte_corr = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${
              base ** 2
            }}`;
            texte_corr += `=\\dfrac{${base}^{1+${exp[0]}}}{${base}^2}`;
          }
          texte_corr += `=${base}^{${1 + exp[0]}-${2 * exp[1]}}`;
          texte_corr += `=${base}^{${1 + exp[0] - 2 * exp[1]}}`;
          if (1 + exp[0] - 2 * exp[1] == 0 || 1 + exp[0] - 2 * exp[1] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, 1 + exp[0] - 2 * exp[1]);
          }
          texte_corr += `$`;
          break;
        case 4:
          base = 2; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${
            base ** 2
          }\\times ${base ** 2}}$`;
          texte_corr = `$\\dfrac{${base}\\times ${base}^${exp[0]}}{${
            base ** 2
          }\\times ${base ** 2}}`;
          texte_corr += `=\\dfrac{${base}^{1+${exp[0]}}}{${base}^2\\times ${base}^2}`;
          texte_corr += `=\\dfrac{${base}^{${1 + exp[0]}}}{${base}^{2+2}}`;
          texte_corr += `=\\dfrac{${base}^{${1 + exp[0]}}}{${base}^{${2 + 2}}}`;
          texte_corr += `=${base}^{${1 + exp[0]}-${2 + 2}}`;
          texte_corr += `=${base}^{${1 + exp[0] - 2 - 2}}`;
          if (1 + exp[0] - 2 - 2 == 0 || 1 + exp[0] - 2 - 2 == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, 1 + exp[0] - 2 - 2);
          }
          texte_corr += `$`;
          break;
        case 5:
          base = 2; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{${base ** 2}^${exp[0]}}{${base}}$`;
          texte_corr = `$\\dfrac{${base ** 2}^${exp[0]}}{${base}}`;
          texte_corr += `=\\dfrac{(${base}^2)^${exp[0]}}{${base}}`;
          texte_corr += `=\\dfrac{${base}^{2\\times ${exp[0]}}}{${base}}`;
          texte_corr += `=\\dfrac{${base}^{${2 * exp[0]}}}{${base}}`;
          texte_corr += `=${base}^{${2 * exp[0]}-1}`;
          texte_corr += `=${base}^{${2 * exp[0] - 1}}$`;
          // Inutile de tester l'exposant final car il vaut au minimum 3
          break;
        case 6:
          base = 3; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 3, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{${base ** 3}^${exp[0]}}{${base}}$`;
          texte_corr = `$\\dfrac{${base ** 3}^${exp[0]}}{${base}}`;
          texte_corr += `=\\dfrac{(${base}^3)^${exp[0]}}{${base}}`;
          texte_corr += `=\\dfrac{${base}^{3\\times ${exp[0]}}}{${base}}`;
          texte_corr += `=\\dfrac{${base}^{${3 * exp[0]}}}{${base}}`;
          texte_corr += `=${base}^{${3 * exp[0]}-1}`;
          texte_corr += `=${base}^{${3 * exp[0] - 1}}$`;
          // inutile de tester l'exposant final car il vaut au minimum 5
          break;
        case 7:
          base = 3; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1]), randint(1, 7, [1]), randint(1, 4, [1])]; // on a besoin de 3 exposants distincts
          texte = `$\\dfrac{${base}^${exp[0]}\\times ${base}^${exp[1]}}{${
            base ** 2
          }^${exp[2]}}\\times ${base}$`;
          texte_corr = `$\\dfrac{${base}^${exp[0]}\\times ${base}^${exp[1]}}{${
            base ** 2
          }^${exp[2]}}\\times ${base}`;
          texte_corr += `=\\dfrac{${base}^{${exp[0]}+${exp[1]}}}{(${base}^2)^${exp[2]}}\\times ${base}`;
          texte_corr += `=\\dfrac{${base}^{${
            exp[0] + exp[1]
          }}}{${base}^{2\\times ${exp[2]}}}\\times ${base}`;
          texte_corr += `=\\dfrac{${base}^{${exp[0] + exp[1]}}}{${base}^{${
            2 * exp[2]
          }}}\\times ${base}`;
          texte_corr += `=\\dfrac{${base}^{${
            exp[0] + exp[1]
          }}\\times ${base}}{${base}^{${2 * exp[2]}}}`;
          texte_corr += `=\\dfrac{${base}^{${exp[0] + exp[1]}+1}}{${base}^{${
            2 * exp[2]
          }}}`;
          texte_corr += `=\\dfrac{${base}^{${exp[0] + exp[1] + 1}}}{${base}^{${
            2 * exp[2]
          }}}`;
          texte_corr += `=${base}^{${exp[0] + exp[1] + 1}-${2 * exp[2]}}`;
          texte_corr += `=${base}^{${exp[0] + exp[1] + 1 - 2 * exp[2]}}`;
          if (
            exp[0] + exp[1] + 1 - 2 * exp[2] == 0 ||
            exp[0] + exp[1] + 1 - 2 * exp[2] == 1
          ) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, exp[0] + exp[1] + 1 - 2 * exp[2]);
          }
          texte_corr += `$`;
          break;
        case 8:
          base = 2; // on travaille sur cette base mais on pourrait rendre la base alÃ©atoire
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{${base ** 3}\\times ${base}}{${base ** 2}^${
            exp[0]
          }}$`;
          texte_corr = `$\\dfrac{${base ** 3}\\times ${base}}{${base ** 2}^${
            exp[0]
          }}`;
          texte_corr += `=\\dfrac{${base}^3\\times ${base}}{(${base}^2)^${exp[0]}}`;
          texte_corr += `=\\dfrac{${base}^{3+1}}{${base}^{2\\times${exp[0]}}}`;
          texte_corr += `=\\dfrac{${base}^{4}}{${base}^{${2 * exp[0]}}}`;
          texte_corr += `=${base}^{4-${2 * exp[0]}}`;
          texte_corr += `=${base}^{${3 + 1 - 2 * exp[0]}}`;
          if (3 + 1 - 2 * exp[0] == 0 || 3 + 1 - 2 * exp[0] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant est Ã©vincÃ©
            texte_corr += `=` + simpExp(base, 3 + 1 - 2 * exp[0]);
          }
          texte_corr += `$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * 4C30 -- Puissances de 10
 * * Travailler des rÃ©sultats automatisÃ©s
 * @author SÃ©bastien Lozano
 */
function Puissances_de_dix() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1;
  this.titre = "Puissances de 10 : Le sens des rÃ¨gles de calculs";
  sortie_html
    ? (this.consigne = "Ãcrire sous la forme $\\mathbf{10^n}$.")
    : (this.consigne = "Ãcrire sous la forme $10^n$.");
  sortie_html ? (this.spacing = 3) : (this.spacing = 2);
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 5;
  this.correction_detaillee_disponible = true;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions;
    this.bouton_aide = modal_pdf(
      numero_de_l_exercice,
      "pdf/FichePuissances-4N21.pdf",
      "Aide mÃ©moire sur les puissances (SÃ©bastien Lozano)",
      "Aide mÃ©moire"
    );

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [];
    if (this.sup == 1) {
      type_de_questions_disponibles = [1, 2, 3]; // produit, quotient et exponentiation de puissances de 10
    } else if (this.sup == 2) {
      type_de_questions_disponibles = [4, 5, 6, 7, 8, 9, 10, 11]; // calculs premiÃ¨re sÃ©rie
    } else if (this.sup == 3) {
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // calculs deuxiÃ¨me sÃ©rie
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );

    // pour pouvoir adapter les couleurs en cas de besoin
    let coul0 = "red";
    let coul1 = "blue";

    for (
      let i = 0,
        exp0,
        exp1,
        exp,
        coul_exp0,
        coul_exp1,
        lettre,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];

      exp0 = randint(1, 9);
      exp1 = randint(1, 9, [exp0]);
      exp = [exp0, exp1]; // on choisit deux exposants diffÃ©rents c'est mieux
      lettre = lettre_depuis_chiffre(i + 1); // on utilise des lettres pour les calculs

      switch (type_de_questions) {
        case 1: // produit de puissances de mÃªme base
          texte = `$${lettre}=10^${exp[0]}\\times 10^${exp[1]}$`;

          texte_corr = `$${lettre}=10^${exp[0]}\\times 10^${exp[1]}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=${eclatePuissance(
              10,
              exp[0],
              coul0
            )} \\times ${eclatePuissance(10, exp[1], coul1)}$`;
          }
          texte_corr += `<br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul0}}{${exp[0]}}~\\color{black}{+}~\\color{${coul1}}{${exp[1]}}}$ facteurs tous Ã©gaux Ã  $10$`;
          texte_corr += `<br>`;
          texte_corr += `$${lettre}=10^{${exp[0]}+${exp[1]}} = 10^{${
            exp[0] + exp[1]
          }}`;
          // attention la base est de type str alors que la fonction switch sur un type number
          if (simpNotPuissance(10, exp[0] + exp[1]) != ` `) {
            texte_corr += `=${simpNotPuissance(10, exp[0] + exp[1])}`;
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 2: // quotient de puissances de mÃªme base
          // Pour que la couleur de la 10 associÃ©e Ã  l'exposant max soit toujours rouge.
          if (Math.max(exp[0], exp[1]) == exp[0]) {
            coul_exp0 = coul0;
            coul_exp1 = coul1;
          } else {
            coul_exp0 = coul1;
            coul_exp1 = coul0;
          }

          texte = `$${lettre}=\\dfrac{10^${exp[0]}}{10^${exp[1]}}$`;

          texte_corr = `$${lettre}=\\dfrac{10^${exp[0]}}{10^${exp[1]}}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
              10,
              exp[0],
              coul_exp0
            )}}{${eclatePuissance(10, exp[1], coul_exp1)}}$`;
          }
          texte_corr += `<br><br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul1}}{${Math.min(
            exp[0],
            exp[1]
          )}}}$ simplifications par $10$ possibles.`;
          if (this.correction_detaillee) {
            texte_corr += `<br><br>`;
          }
          if (exp[0] - exp[1] == 0) {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{10}`,
                exp[0],
                coul_exp0
              )}}{${eclatePuissance(`\\cancel{10}`, exp[0], coul_exp1)}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=1`;
          } else if (exp[0] - exp[1] < 0) {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{10}`,
                exp[0],
                coul_exp0
              )}}{${eclatePuissance(
                `\\cancel{10}`,
                exp[0],
                coul_exp1
              )}\\times${eclatePuissance(10, exp[1] - exp[0], coul_exp1)}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=\\dfrac{1}{10^{${exp[1]}-${
              exp[0]
            }}}=\\dfrac{1}{10^{${exp[1] - exp[0]}}}`;
            if (simpNotPuissance(10, exp[1] - exp[0]) != ` `) {
              texte_corr += `=\\dfrac{1}{${simpNotPuissance(
                10,
                exp[1] - exp[0]
              )}}=${simpNotPuissance(10, exp[0] - exp[1])}`;
            } else {
              texte_corr += `=10^{${exp[0] - exp[1]}}`;
            }
          } else {
            if (this.correction_detaillee) {
              texte_corr += `$${lettre}=\\dfrac{${eclatePuissance(
                `\\cancel{10}`,
                exp[1],
                coul_exp0
              )}\\times${eclatePuissance(
                10,
                exp[0] - exp[1],
                coul_exp0
              )}}{${eclatePuissance(`\\cancel{10}`, exp[1], coul_exp1)}}$`;
            }
            texte_corr += `<br><br>`;
            texte_corr += `$${lettre}=10^{${exp[0]}-${exp[1]}}=10^{${
              exp[0] - exp[1]
            }}`;
            if (simpNotPuissance(10, exp[0] - exp[1]) != ` `) {
              texte_corr += `=${simpNotPuissance(10, exp[0] - exp[1])}`;
            }
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 3: // exponentiation
          exp = [randint(2, 4), randint(2, 4)]; // on redÃ©finit les deux exposants pour ne pas avoir d'Ã©critures trop longues et pour Ã©viter 1
          texte = `$${lettre}=(10^${exp[0]})^{${exp[1]}}$`;

          texte_corr = `$${lettre}=(10^${exp[0]})^{${exp[1]}}$`;
          if (this.correction_detaillee) {
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=\\color{${coul0}}{\\underbrace{${eclatePuissance(
              `(10^${exp[0]})`,
              exp[1],
              coul0
            )}}_{${exp[1]}\\thickspace\\text{facteurs}}}$`;
            texte_corr += `<br>`;
            texte_corr += `$${lettre}=\\color{${coul0}}{\\underbrace{${eclatePuissance(
              `(\\color{${coul1}}{\\underbrace{${eclatePuissance(
                10,
                exp[0],
                coul1
              )}}_{${exp[0]}\\thickspace\\text{facteurs}}}\\color{${coul0}})`,
              exp[1],
              coul0
            )}}_{${exp[1]}\\times\\color{${coul1}}{${
              exp[0]
            }}\\thickspace\\color{black}{\\text{facteurs}}}}$`;
          }
          texte_corr += `<br>`;
          texte_corr += `Il y a donc $\\mathbf{\\color{${coul0}}{${exp[1]}}~\\color{black}{\\times}~\\color{${coul1}}{${exp[0]}}}$ facteurs tous Ã©gaux Ã  $10$`;
          texte_corr += `<br>`;
          texte_corr += `$${lettre}=10^{${exp[0]}\\times${exp[1]}} = 10^{${
            exp[0] * exp[1]
          }}`;
          if (simpNotPuissance(10, exp[0] * exp[1]) != ` `) {
            texte_corr += `= ${simpNotPuissance(10, exp[0] * exp[1])}`;
          }
          texte_corr += `$`;
          texte_corr += `<br>`;
          break;
        case 4:
          exp = [randint(1, 7, [1]), randint(1, 7, [1]), randint(1, 7, [1])]; // on a besoin de 3 exposants distincts
          texte = `$\\dfrac{10^${exp[0]}\\times 100}{10^${exp[1]} \\times 10^${exp[2]}}$`;
          texte_corr = `$\\dfrac{10^${exp[0]}\\times 100}{10^${exp[1]} \\times 10^${exp[2]}}`;
          texte_corr += ` = \\dfrac{10^${exp[0]}\\times 10^{2}}{10^${exp[1]} \\times 10^${exp[2]}}`;
          texte_corr += ` = \\dfrac{10^{${exp[0]}+2}}{10^{${exp[1]}+${exp[2]}}}`;
          texte_corr += ` = \\dfrac{10^{${exp[0] + 2}}}{10^{${
            exp[1] + exp[2]
          }}}`;
          texte_corr += ` = 10^{${exp[0] + 2}-${exp[1] + exp[2]}}`;
          texte_corr += ` = 10^{${exp[0] + 2 - exp[1] - exp[2]}}`;
          if (
            exp[0] + 2 - exp[1] - exp[2] == 0 ||
            exp[0] + 2 - exp[1] - exp[2] == 1
          ) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, exp[0] + 2 - exp[1] - exp[2]);
          }
          texte_corr += `$`;
          break;
        case 5:
          exp = [randint(1, 7, [1]), randint(1, 7, [1])]; // on a besoin de 2 exposants distincts
          texte = `$\\dfrac{10^${exp[0]}\\times 1000}{10^${exp[1]}}$`;
          texte_corr = `$\\dfrac{10^${exp[0]}\\times 1000}{10^${exp[1]}}`;
          texte_corr += ` = \\dfrac{10^${exp[0]}\\times 10^3}{10^${exp[1]}}`;
          texte_corr += ` = \\dfrac{10^{${exp[0]}+3}}{10^${exp[1]}}`;
          texte_corr += ` = \\dfrac{10^{${exp[0] + 3}}}{10^${exp[1]}}`;
          texte_corr += ` = 10^{${exp[0] + 3}-${exp[1]}}`;
          texte_corr += ` = 10^{${exp[0] + 3 - exp[1]}}`;
          if (exp[0] + 3 - exp[1] == 0 || exp[0] + 3 - exp[1] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, exp[0] + 3 - exp[1]);
          }
          texte_corr += `$`;
          break;
        case 6:
          exp = [randint(1, 7, [1]), randint(1, 2)]; // on a besoin de 2 exposants distincts
          // le second exposant ne peut valoir que 1 ou 2 la fonction testExp ne convient pas Ã  l'affichage ici
          if (exp[1] == 2) {
            texte = `$\\dfrac{10\\times 10^${exp[0]}}{100^${exp[1]}}$`;
            texte_corr = `$\\dfrac{10\\times 10^${exp[0]}}{100^${exp[1]}}`;
            texte_corr += `=\\dfrac{10^{1+${exp[0]}}}{(10^2)^${exp[1]}}`;
            texte_corr += `=\\dfrac{10^{1+${exp[0]}}}{10^{2 \\times ${exp[1]}}}`;
            texte_corr += `=\\dfrac{10^{${1 + exp[0]}}}{10^{${2 * exp[1]}}}`;
          } else {
            texte = `$\\dfrac{10\\times 10^${exp[0]}}{100}$`;
            texte_corr = `$\\dfrac{10\\times 10^${exp[0]}}{100}`;
            texte_corr += `=\\dfrac{10^{1+${exp[0]}}}{10^2}`;
          }
          texte_corr += `=10^{${1 + exp[0]}-${2 * exp[1]}}`;
          texte_corr += `=10^{${1 + exp[0] - 2 * exp[1]}}`;
          if (1 + exp[0] - 2 * exp[1] == 0 || 1 + exp[0] - 2 * exp[1] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, 1 + exp[0] - 2 * exp[1]);
          }
          texte_corr += `$`;
          break;
        case 7:
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{10\\times 10^${exp[0]}}{100\\times 100}$`;
          texte_corr = `$\\dfrac{10\\times 10^${exp[0]}}{100\\times 100}`;
          texte_corr += `=\\dfrac{10^{1+${exp[0]}}}{10^2\\times 10^2}`;
          texte_corr += `=\\dfrac{10^{${1 + exp[0]}}}{10^{2+2}}`;
          texte_corr += `=\\dfrac{10^{${1 + exp[0]}}}{10^{${2 + 2}}}`;
          texte_corr += `=10^{${1 + exp[0]}-${2 + 2}}`;
          texte_corr += `=10^{${1 + exp[0] - 2 - 2}}`;
          if (1 + exp[0] - 2 - 2 == 0 || 1 + exp[0] - 2 - 2 == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant 1 est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, 1 + exp[0] - 2 - 2);
          }
          texte_corr += `$`;
          break;
        case 8:
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{100^${exp[0]}}{10}$`;
          texte_corr = `$\\dfrac{100^${exp[0]}}{10}`;
          texte_corr += `=\\dfrac{(10^2)^${exp[0]}}{10}`;
          texte_corr += `=\\dfrac{10^{2\\times ${exp[0]}}}{10}`;
          texte_corr += `=\\dfrac{10^{${2 * exp[0]}}}{10}`;
          texte_corr += `=10^{${2 * exp[0]}-1}`;
          texte_corr += `=10^{${2 * exp[0] - 1}}$`;
          // Inutile de tester l'exposant final car il vaut au minimum 3
          break;
        case 9:
          exp = [randint(1, 3, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{1000^${exp[0]}}{10}$`;
          texte_corr = `$\\dfrac{1000^${exp[0]}}{10}`;
          texte_corr += `=\\dfrac{(10^3)^${exp[0]}}{10}`;
          texte_corr += `=\\dfrac{10^{3\\times ${exp[0]}}}{10}`;
          texte_corr += `=\\dfrac{10^{${3 * exp[0]}}}{10}`;
          texte_corr += `=10^{${3 * exp[0]}-1}`;
          texte_corr += `=10^{${3 * exp[0] - 1}}$`;
          // inutile de tester l'exposant final car il vaut au minimum 5
          break;
        case 10:
          exp = [randint(1, 7, [1]), randint(1, 7, [1]), randint(1, 4, [1])]; // on a besoin de 3 exposants distincts
          texte = `$\\dfrac{10^${exp[0]}\\times 10^${exp[1]}}{100^${exp[2]}}\\times 10$`;
          texte_corr = `$\\dfrac{10^${exp[0]}\\times 10^${exp[1]}}{100^${exp[2]}}\\times 10`;
          texte_corr += `=\\dfrac{10^{${exp[0]}+${exp[1]}}}{(10^2)^${exp[2]}}\\times 10`;
          texte_corr += `=\\dfrac{10^{${exp[0] + exp[1]}}}{10^{2\\times ${
            exp[2]
          }}}\\times 10`;
          texte_corr += `=\\dfrac{10^{${exp[0] + exp[1]}}}{10^{${
            2 * exp[2]
          }}}\\times 10`;
          texte_corr += `=\\dfrac{10^{${exp[0] + exp[1]}}\\times 10}{10^{${
            2 * exp[2]
          }}}`;
          texte_corr += `=\\dfrac{10^{${exp[0] + exp[1]}+1}}{10^{${
            2 * exp[2]
          }}}`;
          texte_corr += `=\\dfrac{10^{${exp[0] + exp[1] + 1}}}{10^{${
            2 * exp[2]
          }}}`;
          texte_corr += `=10^{${exp[0] + exp[1] + 1}-${2 * exp[2]}}`;
          texte_corr += `=10^{${exp[0] + exp[1] + 1 - 2 * exp[2]}}`;
          if (
            exp[0] + exp[1] + 1 - 2 * exp[2] == 0 ||
            exp[0] + exp[1] + 1 - 2 * exp[2] == 1
          ) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, exp[0] + exp[1] + 1 - 2 * exp[2]);
          }
          texte_corr += `$`;
          break;
        case 11:
          exp = [randint(1, 7, [1])]; // on a besoin de 1 exposant
          texte = `$\\dfrac{1000\\times 10}{100^${exp[0]}}$`;
          texte_corr = `$\\dfrac{1000\\times 10}{100^${exp[0]}}`;
          texte_corr += `=\\dfrac{10^3\\times 10}{(10^2)^${exp[0]}}`;
          texte_corr += `=\\dfrac{10^{3+1}}{10^{2\\times${exp[0]}}}`;
          texte_corr += `=\\dfrac{10^{4}}{10^{${2 * exp[0]}}}`;
          texte_corr += `=10^{4-${2 * exp[0]}}`;
          texte_corr += `=10^{${3 + 1 - 2 * exp[0]}}`;
          if (3 + 1 - 2 * exp[0] == 0 || 3 + 1 - 2 * exp[0] == 1) {
            // on ne teste l'exposant que pour la sortie puisque l'exposant est Ã©vincÃ©
            texte_corr += `=` + simpExp(10, 3 + 1 - 2 * exp[0]);
          }
          texte_corr += `$`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "RÃ¨gle Ã  travailler",
    3,
    "1 : Calculs de base\n2 : Calculs plus complexes\n3 : MÃ©lange",
  ];
}

/**
 * problÃ¨mes de grandeurs composÃ©es
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence : 4P10
 */
function Problemes_grandeurs_composees() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "RÃ©soudre des problÃ¨mes de grandeurs composÃ©es et de conversion d'unitÃ©s complexes";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  sortie_html ? (this.spacing = 3) : (this.spacing = 1.5);
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.sup = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    // let liste_index_disponibles=[1,2,3,4,5,6,7,8,9,10,11,12,13,14];
    // let liste_index=combinaison_listes(liste_index_disponibles,this.nb_questions);
    let grandeurs = [];
    if (!this.sup) {
      // Si aucune grandeur n'est saisie
      grandeurs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    } else {
      if (typeof this.sup == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        grandeurs[0] = this.sup;
        this.nb_questions = 1;
      } else {
        grandeurs = this.sup.split("-"); // Sinon on crÃ©Ã© un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        this.nb_questions = grandeurs.length;
      }
    }

    let liste_index = combinaison_listes(grandeurs, this.nb_questions);
    let monchoix;
    let type_aide = 1;
    if (!sortie_html) type_aide = 0;
    let solutes = [
      [`sel`, `d'eau`, 300],
      [`sucre`, `d'eau`, 2000],
      [`dioxyde de carbone`, `d'eau`, 3],
      [`bicarbonate de sodium`, `d'eau`, 9],
      [`carbonate de sodium`, `d'eau`, 300],
    ]; //solutÃ©, masse maximale en gramme pour saturer 1 L de solvant
    let materiaux = [
      [`Paladium`, 12000],
      [`acier`, 7800],
      [`fonte`, 7100],
      [`aluminium`, 2700],
      [`argent`, 10500],
      [`bronze`, 8800],
      [`cuivre`, 8960],
      [`fer`, 7860],
      [`lithium`, 530],
      [`mercure`, 13545],
      [`nickel`, 8900],
      [`or`, 19300],
      [`platine`, 21450],
      [`titane`, 4500],
      [`zinc`, 7150],
    ];
    let villes = [
      [`Nice`, 342637, 71.9],
      [`Montpellier`, 281613, 56.9],
      [`Rennes`, 216268, 50.4],
      [`Dijon`, 155090, 40.4],
      [`OrlÃ©ans`, 114782, 27.5],
      [`Clermont-Ferrand`, 142686, 42.7],
      [`Nantes`, 306694, 65.2],
      [`Paris`, 2190327, 105.4],
      [`Lyon`, 515695, 47.9],
      [`Marseille`, 862211, 240.6],
      [`Bordeaux`, 252040, 49.4],
      [`Nancy`, 104592, 15],
      [`Toulouse`, 475438, 118.3],
      [`Lille`, 232440, 34.8],
      [`Strasbourg`, 279284, 78.3],
    ]; //[Ville, population, superfice en ha, annÃ©e du recensement]
    let locations = [
      [`un vÃ©lo`, 1.5, 2, 8],
      [`un canoÃ©`, 10, 2, 4],
      [`des rollers`, 7, 2, 5],
      [`un char Ã  voile`, 12, 2, 4],
    ];
    let cours = [
      [`de piano`, 20],
      [`de maths`, 25],
      [`yoga`, 5],
      [`dessin`, 12],
      [`voile`, 15],
    ];
    let fruits = [
      [`pÃªches`, 4, 10, 30],
      [`Noix`, 5.4, 4, 13],
      [`cerises`, 5.6, 11, 20],
      [`pommes`, 2.2, 20, 40],
      [`framboises`, 15, 1, 5],
      [`fraises`, 7.5, 5, 10],
      [`citrons`, 1.5, 15, 30],
      [`bananes`, 1.5, 15, 25],
    ];
    let appareils = [
      [`radiateur`, 2000, 20],
      [`tÃ©lÃ©viseur`, 350, 12],
      [`four Ã©lectrique`, 2500, 4],
      [`ordinateur`, 450, 8],
    ]; // [appareil,puissance,durÃ©e maxi de fonctionnement]
    let liquides = [
      [`de lait entier`, 1.032],
      [`d'essence`, 0.755],
      [`de diesel`, 0.83],
      [`d'huile`, 0.91],
      [`de biÃ¨re`, 0.9],
      [`de sable`, 1.6],
    ]; // [nom,densitÃ©]
    let rivieres = [
      [`Marne`, `Gournay-sur-Marne`, 110, 550, `avril 1983`, `la `, `de la `],
      [`Seine`, `Alfortville`, 218, 2100, `janvier 1982`, `la `, `de la `],
      [`Oise`, `Pont-Sainte-Maxence`, 109, 665, `fÃ©vrier 1995`, `l'`, `de l'`],
      [`Loire`, `Saint-Nazaire`, 931, 5350, `dÃ©cembre 1999`, `la `, `de la`],
      [`Rhin`, `Strasbourg`, 951, 3310, `juin 2016`, `le `, `du `],
      [`RhÃ´ne`, `Beaucaire`, 1690, 11500, `dÃ©cembre 2003`, `le `, `du `],
      [`Meuse`, `Chooz`, 144, 1610, `janvier 1995`, `la `, `de la `],
    ];
    // [Nom de riviÃ¨re,Lieu de passage,dÃ©bit moyen annuel, dÃ©bitmax, date de la crue, article dÃ©fini, article partitif]
    let vitesses = [
      [`sur un vÃ©lo`, 4, 12, 8],
      [`dans un train`, 50, 100, 5],
      [`dans une voiture`, 15, 30, 5],
      [`en avion`, 150, 250, 12],
      [`Ã  pied`, 2, 4, 5],
    ]; // [moyen de transport, vitesse min,vitesse max en m/s,durÃ©e max en h]
    for (
      let i = 0,
        j,
        index,
        index1,
        index2,
        duree,
        quidam,
        nbheures,
        nbminutes,
        nbsecondes,
        vitesse_moy,
        distance,
        masse,
        masse2,
        masse3,
        prix1,
        prix2,
        prix3,
        texte,
        texte_corr,
        cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (parseInt(liste_index[i])) {
        case 1: // problÃ¨me de consommation Ã©lÃ©ctrique
          index = randint(0, 3);
          let appareil = appareils[index][0];
          let puissance = appareils[index][1];
          let duree_max = appareils[index][2];
          let nbquartsdheures = randint(0, 3);
          nbheures = randint(duree_max / 4, duree_max, [1]);
          duree = nbheures + nbquartsdheures * 0.25;
          let prixkwh = calcul(randint(0, 5) / 100 + 0.14);
          texte = `L'Ã©tiquette apposÃ©e au dos d'un ${appareil} indique une puissance de ${puissance} Watts. On le fait fonctionner pendant ${Math.floor(
            duree
          )} heures `;
          if (nbquartsdheures != 0)
            texte += `et ${nbquartsdheures * 15} minutes`;
          texte += `.<br>Le prix d'un kWh est de ${tex_nombrec(
            prixkwh
          )} â¬.<br>`;
          if (sortie_html) {
            // les boutons d'aide uniquement pour la version html
          }
          texte +=
            num_alpha(0) +
            ` Exprimer en kWh l' ` +
            katex_Popup2(
              numero_de_l_exercice + i + 1,
              type_aide,
              "Ã©nergie",
              `DÃ©finition : Ã©nergie (grandeur physique)`,
              `Câest le produit de la puissance Ã©lectrique (Watt) par le temps (s) et se mesure en Joule (J).<br>1 J=1 W Ã 1 s.<br>Cependant pour mesurer des Ã©nergies plus importantes on utilise plutÃ´t le kiloWattheure (kWh).<br>1 kWh=1000 W Ã 1 h.`
            ) +
            ` consommÃ©e.<br>`;
          texte += num_alpha(1) + ` Calculer la dÃ©pense correspondante.`;
          texte_corr =
            num_alpha(0) +
            ` Un ${appareil} d'une puissance de ${puissance} Watts qui fonctionne pendant ${Math.floor(
              duree
            )} heures `;
          if (nbquartsdheures != 0)
            texte_corr += `et ${nbquartsdheures * 15} minutes`;
          texte_corr += ` consomme : <br>`;
          if (nbquartsdheures != 0)
            texte_corr += `$${nbheures}\\text{ h } ${
              nbquartsdheures * 15
            } = ${nbheures}\\text{ h} + ${tex_fraction_reduite(
              nbquartsdheures,
              4
            )}\\text{ h} =${tex_nombre(
              nbheures + nbquartsdheures * 0.25
            )}\\text{ h}$<br>`;
          texte_corr += `$${puissance}\\text{ W}\\times${tex_nombre(
            duree
          )}\\text{ h}=${tex_nombre(
            puissance / 1000
          )}\\text{ kW}\\times${tex_nombre(duree)}\\text{ h}=${tex_nombre(
            calcul(puissance * duree * 0.001)
          )}\\text{ kWh}.$<br>`;
          texte_corr +=
            num_alpha(1) +
            ` Le prix de cette Ã©nergie consommÃ©e est : $${tex_nombre(
              prixkwh
            )}$ â¬$\\text{ /kWh} \\times${tex_nombre(
              calcul(puissance * duree * 0.001)
            )}\\text{ kWh}`;
          if (
            !(
              (prixkwh * puissance * duree) / 10 ==
              Math.round((prixkwh * puissance * duree) / 10)
            )
          )
            texte_corr += `\\approx${arrondi_virgule(
              ((prixkwh * puissance) / 1000) * duree,
              2
            )}$ â¬`;
          else
            texte_corr += `=${arrondi_virgule(
              ((prixkwh * puissance) / 1000) * duree,
              2
            )}$ â¬`;
          break;
        case 2: // problÃ¨mes de volumes
          index1 = randint(0, 1);
          switch (index1) {
            case 0: // Volume d'une piscine
              let h1 = 180 + randint(0, 10) * 10;
              let h2 = 80 + randint(0, 4) * 10;
              let l = 5 + randint(0, 5);
              let L = l * 2 + randint(0, 4) * 2;
              let deltat = randint(2, 5);
              texte = `Une piscine a la forme d'un prisme droit. La profondeur Ã  son extrÃ©mitÃ© nord est de ${h1} cm et la profondeur Ã  son extrÃ©mitÃ© sud est de ${h2} cm.<br>`;
              texte += `D\'une extrÃ©mitÃ© Ã  l\'autre la pente au fond de la piscine est rÃ©guliÃ¨re.<br>La largeur de la piscine (Est-Ouest) est de ${l} m et sa longueur (Nord-Sud) est de ${L} m.<br>`;
              texte +=
                num_alpha(0) +
                ` Calculer le ` +
                katex_Popup2(
                  numero_de_l_exercice + i * 3,
                  type_aide,
                  "volume",
                  `DÃ©finition : volume (grandeur physique)`,
                  `Câest le produit de trois longueurs ou le produit d'une aire et d'une longueur.<br>L'unitÃ© de mesure du volume est le mÃ¨tre cube (m${exposant(
                    3
                  )}) mais on peut aussi rencontrer le litre (L) avec comme correspondance 1dm${exposant(
                    3
                  )}=1L`
                ) +
                ` d'eau en m${exposant(
                  3
                )} contenu dans cette piscine quand elle est pleine.<br>`;
              texte +=
                num_alpha(1) +
                ` Sachant que pour Ã©lever la tempÃ©rature d'un litre d'eau de 1 degrÃ©, il faut une Ã©nergie de 1,162 Wattheure.<br> Quelle est l'Ã©nergie consommÃ©e en kWh pour augmenter de ${deltat} degrÃ©s ?<br>`;
              texte_corr =
                num_alpha(0) +
                ` La base de ce prisme droit est un trapÃ¨ze rectangle de petite base ${h2} cm, de grande base ${h1} cm et de hauteur ${L} m.<br>`;
              texte_corr += `$\\mathcal{A}=\\dfrac{\\left(${h1}\\text{ cm}+${h2}\\text{ cm}\\right)}{2}\\times${L}\\text{ m}$`;
              texte_corr += ` $=\\dfrac{\\left(${arrondi_virgule(
                h1 / 100
              )}\\text{ m}+${arrondi_virgule(
                h2 / 100
              )}\\text{ m}\\right)}{2}\\times${L}\\text{ m}$`;
              texte_corr += ` $=\\dfrac{${arrondi_virgule(
                (h1 + h2) / 100
              )}\\text{ m}}{2}\\times${L}\\text{ m}$`;
              texte_corr += ` $=${arrondi_virgule(
                (h1 + h2) / 200
              )}\\text{ m}\\times${L}\\text{ m}$`;
              texte_corr += ` $=${arrondi_virgule(
                ((h1 + h2) / 200) * L
              )}\\text{ m}$${exposant(2)}<br>`;
              texte_corr += `Le volume de ce prisme et donc par extension le volume d'eau conteu dans la piscine est :<br>`;
              texte_corr += `$\\mathcal{A}\\times\\mathcal{h}=${arrondi_virgule(
                ((h1 + h2) / 200) * L
              )}\\text{ m}^2\\times${l}\\text{ m}$`;
              texte_corr += ` $=${arrondi_virgule(
                ((h1 + h2) / 200) * L * l
              )}$m${exposant(3)}.<br>`;
              texte_corr +=
                num_alpha(1) +
                ` Convertissons le volume de la piscine en litres : $${arrondi_virgule(
                  ((h1 + h2) / 200) * L * l
                )}\\text{ m}^3=${tex_nombre(
                  (h1 + h2) * L * l * 5
                )}\\text{ dm}^3=${tex_nombre(
                  (h1 + h2) * L * l * 5
                )}\\text{ L}$<br>`;
              texte_corr += ` L'Ã©nergie consomÃ©e pour Ã©lever la tempÃ©rature de l'eau de cette piscine de ${deltat} degrÃ©s est :<br>`;
              texte_corr += `$\\mathcal{E}=${tex_nombre(
                (h1 + h2) * L * l * 5
              )}\\text{ L}\\times${deltat}\\text{ Â°C}\\times 1,162 \\dfrac{\\text{Wh}}{\\text{Â°C}\\times\\text{L}}=${tex_nombre(
                arrondi((h1 + h2) * L * l * 5 * deltat * 1.162, 3)
              )}\\text{ Wh}=${tex_nombre(
                arrondi((((h1 + h2) * L * l) / 200) * deltat * 1.162, 7)
              )}\\text{ kWh}$<br>`;
              break;
            case 1: // Volume d'un tonneau cylindrique
              index2 = randint(0, 5);
              let r = randint(10, 15) * 2;
              let h = randint(0, 10) + r * 4;
              texte = `Un tonneau cylindrique a un rayon de ${r} cm et une hauteur de ${h} cm.<br>`;
              texte +=
                num_alpha(0) +
                ` Calculer le ` +
                katex_Popup2(
                  numero_de_l_exercice + i * 3,
                  type_aide,
                  "volume",
                  `DÃ©finition : volume (grandeur physique)`,
                  `Câest le produit de trois longueurs ou le produit d'une aire et d'une longueur.<br>L'unitÃ© de mesure du volume est le mÃ¨tre cube ($\\text{m}^3$) mais on peut aussi rencontrer le litre (L) avec comme correspondance $\\text{1dm}^3=\\text{1L}$`
                ) +
                ` en dm${exposant(3)} Ã  0,1 prÃ¨s de ce tonneau.<br>`;
              texte +=
                num_alpha(1) +
                ` Si on le remplit ${liquides[index2][0]} (dont la ` +
                katex_Popup2(
                  numero_de_l_exercice + i * 3,
                  type_aide,
                  "densitÃ©",
                  `DÃ©finition : densitÃ© (grandeur physique)`,
                  `La densitÃ© d'une substance est Ã©gale Ã  la masse volumique de la substance divisÃ©e par la masse volumique du corps de rÃ©fÃ©rence Ã  la mÃªme tempÃ©rature.<br>Pour les liquides et les solides, l'eau est utilisÃ©e comme rÃ©fÃ©rence (sa masse volumique est de 1kg/dm$^3$), pour les gaz, la mesure s'effectue par rapport Ã  l'air.<br>Donc pour les liquides, la densitÃ© est Ã©gale Ã  la masse volumique exprimÃ©e en kg/dm$^3$.`
                ) +
                ` est de ${tex_nombrec(liquides[index2][1])}), quelle masse ${
                  liquides[index2][0]
                } en kg contiendra-t-il au gramme prÃ¨s ?<br>`;
              texte_corr =
                num_alpha(0) +
                ` Le volume d'un cylindre est donnÃ© par la formule $\\mathcal{A}\\text{ire de base}\\times\\mathcal{h}$.<br> Ici la base est un disque de rayon ${r} cm.<br>`;
              texte_corr += `$\\mathcal{A}\\text{ire de base}\\times\\mathcal{h}=\\pi\\times${r}^{2}\\text{ cm}^2\\times${h}\\text{ cm}=${
                r * r * h
              }\\pi\\text{ cm}^3\\approx${tex_nombre(
                arrondi(r * r * h * Math.PI, 1)
              )}\\text{ cm}^3\\approx${tex_nombre(
                arrondi((r * r * h * Math.PI) / 1000, 1)
              )}\\text{ dm}^3$<br>`;
              texte_corr +=
                num_alpha(1) +
                ` La masse de lait contenue dans ce tonneau est :<br>`;
              texte_corr += `$${tex_nombre(
                arrondi((r * r * h * Math.PI) / 1000, 1)
              )}\\text{ dm}^3\\times ${tex_nombrec(
                liquides[index2][1]
              )} \\times 1 \\dfrac{kg}{dm}^3\\approx${tex_nombre(
                arrondi(((r * r * h * Math.PI) / 1000) * liquides[index2][1], 3)
              )}\\text{ kg}$`;
              break;
          }
          break;
        case 3: // ProblÃ¨me de quantitÃ© de mouvement et d'Ã©nergie cinÃ©tique
          quidam = prenom();
          index1 = randint(0, 4);
          masse = randint(50, 80);
          vitesse_moy = randint(vitesses[index1][1], vitesses[index1][2]); // vitesse choisie pour l'exo
          texte =
            `${quidam} se dÃ©place ${vitesses[index1][0]} Ã  la ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3,
              type_aide,
              `vitesse`,
              `DÃ©finition : Vitesse (grandeur physique)`,
              `La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L'unitÃ© officielle est le mÃ¨tre par seconde ($\\text{m/s}$  ou  $\\text{m.s}^{-1}$) mais on utilise souvent le kilomÃ¨tre par heure ($\\text{km/h}$  ou  $\\text{km.h}^{-1}$)`
            ) +
            ` de ${tex_nombrec(vitesse_moy)} m/s.<br>`;
          texte += `Il pÃ¨se ${masse} kg.<br>`;
          texte +=
            num_alpha(0) +
            ` Calculer sa ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 1,
              type_aide,
              "quantitÃ© de mouvement",
              `DÃ©finition : quantitÃ© de mouvement (grandeur physique)`,
              `Câest le produit de la masse d'un corps par sa vitesse.<br>L'unitÃ© de mesure de la quantitÃ© de mouvement est le ($\\text{kg.m.s}^{-1}$)`
            ) +
            ` en $\\text{kg.m.s}^{-1}$.<br>`;
          texte +=
            num_alpha(1) +
            ` En dÃ©duire son ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 2,
              type_aide,
              "Ã©nergie cinÃ©tique",
              `DÃ©finition : Ã©nergie cinÃ©tique (grandeur physique)`,
              `L'Ã©nergie cinÃ©tique d'un corps de masse $m$ (en kg) assimilÃ© Ã  un point matÃ©riel se dÃ©plaÃ§ant Ã  la vitesse $v$ (en m/s) est donnÃ© par la formule $E=\\dfrac{1}{2}\\times m\\times v^2$.<br>L'unitÃ© de mesure de l'Ã©nergie cinÃ©tique est le Joule (J).<br>$1J=1\\text{ kg.m}^2\\text{s}^{-2}$.`
            ) +
            ` en Joules.`;
          texte_corr =
            num_alpha(0) +
            ` La quantitÃ© de mouvement de ${quidam} est : $${masse} \\text{ kg}\\times ${vitesse_moy}\\text{ m/s}=${tex_nombrec(
              masse * vitesse_moy
            )}\\text{ kg.m.s}^{-1}$<br>`;
          texte_corr +=
            num_alpha(1) +
            ` L'Ã©nergie cinÃ©tique de ${quidam} est : $\\dfrac{1}{2}\\times ${masse} \\text{ kg}\\times (${vitesse_moy}\\text{ m/s})^2=\\dfrac{${masse}\\times${vitesse_moy}^2}{2}\\text{ J}=${tex_nombrec(
              (masse * vitesse_moy ** 2) / 2
            )}\\text{ J}$`;
          break;
        case 4: // problÃ¨me de moment et de couple de forces qui s'annulent.
          quidam = prenom();
          index = randint(60, 90); //masse du pÃ¨re (recyclage de variable)
          masse = randint(20, 30); //masse de l'enfant
          distance = arrondi(randint(25, 35) / 10);
          texte =
            `${quidam} qui pÃ¨se ${masse} kg se trouve sur le siÃ¨ge d'une balanÃ§oire "` +
            katex_Popup2(
              numero_de_l_exercice + i * 3,
              2,
              `trÃ©buchet`,
              `SchÃ©ma explicatif`,
              `images/trebuchet.png`
            ) +
            `" dans un jardin d'enfant. Le siÃ¨ge est situÃ© Ã  ${tex_nombre(
              distance
            )} m du pivot central de la balanÃ§oire (bras de levier).<br>`;
          texte +=
            num_alpha(0) +
            ` Calculer le ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 1,
              type_aide,
              `moment`,
              `DÃ©finition : momnent (grandeur physique)`,
              `Le moment d'une force d'intensitÃ© F(en Newton ou kg.m.s$^{-2}$) en un point M par rapport Ã  un pivot P est le produit de F par la distance PM (appelÃ©e bras de levier) exprimÃ©e en mÃ¨tres (lorsque cette force s'exerce perpendiculairement au bras de levier). Le moment est l'energie permettant de faire tourner l'objet autour du pivot.<br>L'unitÃ© de mesure du moment est le Joule (J).<br>$1J=1\\text{ kg.m}^2\\text{s}^{-2}$.`
            ) +
            ` du ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 2,
              type_aide,
              `poids`,
              `DÃ©finition : Poids`,
              `Le poids est le produit de la masse d'un objet par l'accÃ©lÃ©ration de la pesanteur terrestre ($9,81\\text{ m.s}^{-2}$).<br>L'unitÃ© du poids est le Newton (N) : 1N=1kg.m.s$^{-2}$`
            ) +
            ` de ${quidam} sur son siÃ¨ge par rapport au pivot central du trÃ©buchet en Joules (on admettra que le bras de levier est horizontal).<br>`;
          texte +=
            num_alpha(1) +
            ` Le pÃ¨re de ${quidam} vient s'installer de l'autre cÃ´tÃ© du pivot central. Il pÃ¨se ${index} kg et s'installe de faÃ§on Ã  ce que son poids permette d'Ã©quilibrer la balanÃ§oire Ã  l'horizontale. Quelle doit Ãªtre la longueur du bras de levier de son cÃ´tÃ© ( Ã  quelle distance du pivot est-il assis ) ?<br>`;
          texte_corr =
            num_alpha(0) +
            ` Le moment du poids de ${quidam} appliquÃ© sur son siÃ¨ge par rapport au pivot central du trÃ©buchet est :<br>`;
          index1 = arrondi(masse * 9.81 * distance); //pour Ã©viter d'avoir trop de variable, je recycle
          texte_corr += `$${masse}\\text{ kg} \\times 9,81 \\text{m.s}^{-2} \\times ${tex_nombre(
            distance
          )} \\text{ m} = ${tex_nombre(
            index1
          )}\\text{ kg.m}^2\\text{.s}^{-2}=${tex_nombre(
            index1
          )}\\text{ J}$<br>`;
          texte_corr +=
            num_alpha(1) +
            ` Afin d'Ã©quilibrer le trÃ©buchet, le pÃ¨re de ${quidam} doit se placer de faÃ§on que le moment de son poids sur son point d'assise par rapport au pivot central du trÃ©buchet soit Ã©gal Ã  celui de ${quidam}, on obtient l'Ã©quation suivante oÃ¹ $${mise_en_evidence(
              `d`,
              `black`
            )}$ reprÃ©sente sa distance par rapport au pivot central :<br>`;
          texte_corr += `$ ${index}\\text{ kg}\\times 9,81 \\text{m.s}^{-2} \\times ${mise_en_evidence(
            `d`,
            `black`
          )} \\text{ m}=${tex_nombre(index1)}\\text{ J}$<br>`;
          texte_corr += `D'oÃ¹ $${mise_en_evidence(
            `d`,
            `black`
          )}\\text{ m} = \\dfrac{${tex_nombre(
            index1
          )}\\text{ J}}{${index}\\text{ kg}\\times 9,81 \\text{m.s}^{-2}}\\approx${tex_nombrec(
            arrondi(index1 / (9.81 * index))
          )}\\text{ m}.$`;
          break;
        case 5: //problÃ¨me de trafic de coyageurs.
          let d1 = randint(3, 6);
          let d2 = randint(3, 6, [d1]);
          let k = randint(5, 8);
          let n1 = k * d2;
          let n2 = k * d1;
          texte =
            num_alpha(0) +
            ` Un bus de ville transporte en moyenne ${n1} personnes Ã  la fois.<br> La longueur moyenne de dÃ©placement est de ${d1} km.<br> Calculer le ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3,
              type_aide,
              `trafic`,
              `DÃ©finition : Trafic de voyageurs`,
              `Le trafic de voyageurs est le produit du nombre de voyageurs par la distance parcourue. L'unitÃ© est le voyageur.km qui correspond au dÃ©placement d'un voyageur sur 1km`
            ) +
            ` moyen de voyageurs en voyageurs.km.<br> `;
          texte +=
            num_alpha(1) +
            ` Un autre bus de ville transporte en moyenne ${n2} personnes Ã  la fois.<br> La longueur moyenne de dÃ©placement est de ${d2} km.<br> Montrer que le trafic de voyageur est le mÃªme qu'Ã  la question ` +
            num_alpha(0);
          texte_corr =
            num_alpha(0) +
            ` Le trafic moyen de ce bus de ville est : $${n1}\\text{voyageurs}\\times${d1}\\text{km}=${
              n1 * d1
            }\\text{voyageurs.km}$.<br>`;
          texte_corr +=
            num_alpha(1) +
            ` Le trafic moyen de ce bus de ville est : $${n2}\\text{voyageurs}\\times${d2}\\text{km}=${
              n2 * d2
            }\\text{voyageurs.km}$, donc ces deux bus ont le mÃªme trafic.`;
          break;
        case 6: //problÃ¨me de puissance Ã©lectrique.
          index = randint(0, 3);
          index1 = randint(0, 3, [index]);
          let I1 = arrondi(appareils[index][1] / 230, 0) + 1;
          texte =
            num_alpha(0) +
            ` Un ${appareils[index][0]} est protÃ©gÃ© par un fusible de ${I1} ampÃ¨res, quelle est la ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 1,
              type_aide,
              `puissance`,
              `DÃ©finition : Puissance (grandeur physique)`,
              `Câest le produit de la force Ã©lectromotrice (tension) exprimÃ©e en Volt (V) par l'intensitÃ© du courant Ã©lectrique exprimÃ©e en ampÃ¨res (A).<br>L'unitÃ© de mesure de la puissance est le Watt (W)`
            ) +
            ` maximale de cet appareil si il fonctionne sur le secteur ?<br>`;
          texte +=
            num_alpha(1) +
            ` Un ${appareils[index1][0]} fonctionne Ã  une puissance maximum de ${appareils[index1][1]} W.<br>Quel est l'ampÃ©rage minimum nÃ©cessaire pour le fusible qui protÃ©gera ce ${appareils[index][0]} des court-ciruits ?<br>`;
          texte_corr =
            num_alpha(0) +
            ` La tension du secteur Ã©tant de 230V, la puissance maximale de ce ${appareils[index][0]} est de :<br>`;
          texte_corr += `$230\\text{ V}\\times${I1}\\text{ A}=${
            230 * I1
          }\\text{ W}$<br>`;
          let I2 = Math.floor(appareils[index1][1] / 230) + 1;
          texte_corr +=
            num_alpha(1) +
            ` Pour fonctionner Ã  la puissance maximum, cet appareil a besoin d'un courant d'une intensitÃ© de :<br>`;
          texte_corr += `$\\dfrac{${
            appareils[index1][1]
          }\\text{ W}}{230 \\text{ V}} \\approx ${tex_nombrec(
            arrondi(appareils[index1][1] / 230)
          )}\\text{ A}$.<br>`;
          texte_corr += `Le fusible nÃ©cessaire pour protÃ©ger cet appareil des courts-circuits devra avoir une intensitÃ© de rupture minimum de ${I2} ampÃ¨res.`;
          break;
        case 7: // problÃ¨me de vitesses
          index2 = randint(0, 2);
          quidam = prenom(); //prenom choisi
          switch (index2) {
            case 0: // problÃ¨me de dÃ©placements
              index1 = randint(0, 4);
              vitesse_moy = randint(vitesses[index1][1], vitesses[index1][2]); // vitesse choisie pour l'exo
              distance = Math.round(
                (vitesse_moy * 3.6 * vitesses[index1][3] * randint(5, 20)) / 10
              ); //distance choisie pour question b
              duree = randint(2, vitesses[index1][3]);
              texte =
                `${quidam} se dÃ©place ${vitesses[index1][0]} Ã  la ` +
                katex_Popup2(
                  numero_de_l_exercice + i * 3,
                  type_aide,
                  `vitesse`,
                  `DÃ©finition : Vitesse (grandeur physique)`,
                  `La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L'unitÃ© officielle est le mÃ¨tre par seconde ($\\text{m/s}$  ou  $\\text{m.s}^{-1}$) mais on utilise souvent le kilomÃ¨tre par heure ($\\text{km/h}$  ou  $\\text{km.h}^{-1}$)`
                ) +
                ` de ${tex_nombrec(vitesse_moy)} m/s.<br>`;
              texte +=
                num_alpha(0) +
                ` En se dÃ©plaÃ§ant Ã  cette vitesse pendant ${duree} h, quelle est la distance parcourue par ${quidam} en km ?<br>`;
              texte +=
                num_alpha(1) +
                ` Si ${quidam} veut parcourir ${nombre_avec_espace(
                  distance
                )} km Ã  cette vitesse, combien de temps durera le trajet ? Donner le rÃ©sultat en heures, minutes et secondes.`;
              texte_corr =
                num_alpha(0) +
                ` La distance parcourue par ${quidam} ${
                  vitesses[index1][0]
                } en ${duree} h Ã  la vitesse de ${tex_nombrec(
                  vitesse_moy
                )} m/s est :<br>`;
              texte_corr += `$${tex_nombrec(
                vitesse_moy
              )}\\text{ m/s}\\times${duree}\\text{ h}=\\dfrac{${tex_nombrec(
                vitesse_moy
              )}\\text{ m}}{1 \\text{ s}}\\times ${duree}\\times ${tex_nombre(
                3600
              )}\\text{ s}`;
              texte_corr += `=${tex_nombrec(
                vitesse_moy * 3600 * duree
              )}\\text{ m}=${tex_nombrec(
                vitesse_moy * 3.6 * duree
              )}\\text{ km}$<br>`;
              texte_corr +=
                num_alpha(1) +
                ` Pour parcourir ${nombre_avec_espace(
                  distance
                )} km Ã  cette vitesse, ${quidam} mettra :<br>`;
              texte_corr += ` Partons de la formule $\\mathcal{V}=\\dfrac{\\mathcal{d}}{\\mathcal{t}}$ et remplaÃ§ons : $\\dfrac{${vitesse_moy}\\text{ m}}{1 \\text{ s}}=\\dfrac{${tex_nombre(
                distance
              )}\\text{ km}}{\\mathcal{t}\\text{ h}}$<br>`;
              texte_corr += `Rendons les unitÃ©s homogÃ¨nes : $\\dfrac{${vitesse_moy}\\text{ m}}{1 \\text{ s}}=\\dfrac{${tex_nombrec(
                distance * 1000
              )}\\text{ m}}{\\mathcal{t}\\text{ h}\\times ${tex_nombre(
                3600
              )}\\text{ s/h}}$<br>`;
              texte_corr += `Appliquons l'Ã©galitÃ© des produits en croix : ${produits_en_croix(
                [
                  [`${vitesse_moy}\\text{ m}`, `1 \\text{ s}`],
                  [
                    `${tex_nombrec(distance * 1000)}\\text{ m}`,
                    `\\mathcal{t}\\times ${tex_nombre(3600)}\\text{ s/h}`,
                  ],
                ]
              )}<br>`;
              texte_corr += `D'oÃ¹ : $\\mathcal{t}=\\dfrac{1 \\text{ s}\\times${tex_nombrec(
                distance * 1000
              )}\\text{ m}}{${vitesse_moy}\\text{ m}\\times${tex_nombre(
                3600
              )}\\text{ s}}$ (t est le nombre dÃ©cimal d'heures : les mÃ¨tres et les secondes disparaissent car elles sont prÃ©sentes au numÃ©rateur et au dÃ©nominateur.)<br>`;
              texte_corr += `Soit : $\\mathcal{t}\\approx${tex_nombrec(
                (distance * 1000) / vitesse_moy / 3600
              )}\\text{ h}\\approx${tex_nombrec(
                arrondi((distance * 1000) / vitesse_moy, 0)
              )}\\text{ s}\\approx`;
              nbheures = Math.floor((distance * 1000) / vitesse_moy / 3600); //conversion en h min s
              nbminutes = Math.floor(
                (Math.floor((distance * 1000) / vitesse_moy) % 3600) / 60
              );
              nbsecondes = arrondi(
                (distance * 1000) / vitesse_moy -
                  3600 * nbheures -
                  60 * nbminutes,
                0
              );
              texte_corr += `(${tex_nombre(nbheures)}\\times ${tex_nombre(
                3600
              )}+${tex_nombre(nbminutes)}\\times 60+${tex_nombre(
                nbsecondes
              )})\\text{ s}\\approx`;
              if (nbheures != 0)
                texte_corr += `${tex_nombre(nbheures)}\\text{ h }`; //affichage de la rÃ©ponse
              if (nbminutes != 0)
                texte_corr += `${tex_nombre(nbminutes)}\\text{ min }`;
              texte_corr += `${tex_nombre(nbsecondes)}\\text{ s}$`;
              break;
            case 1: // l'orage et la vitesse du son
              duree = randint(2, 15); //durÃ©e pour question a)
              distance = randint(5, 15, [duree]) * 340; //distance de l'orage en m pour question b
              texte =
                `Le son se dÃ©place dans l'air Ã  la ` +
                katex_Popup2(
                  numero_de_l_exercice + i * 3,
                  type_aide,
                  `vitesse`,
                  `DÃ©finition : Vitesse (grandeur physique)`,
                  `La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L'unitÃ© officielle est le mÃ¨tre par seconde ($\\text{m/s}$  ou  $\\text{m.s}^{-1}$) mais on utilise souvent le kilomÃ¨tre par heure ($\\text{km/h}$  ou  $\\text{km.h}^{-1}$)`
                ) +
                ` de 340 m/s.<br>`;
              texte +=
                num_alpha(0) +
                ` ${quidam} voit un Ã©clair dans le ciel et compte dans sa tÃªte ${duree} secondes avant d'entendre le tonnerre.<br>`;
              texte += `Quelle est la distance Ã  laquelle l'Ã©clair est tombÃ© ?<br>`;
              texte +=
                num_alpha(1) +
                ` L'Ã©clair suivant tombe sur le paratonnerre situÃ© sur le clocher de l'Ã©glise du village voisin.<br>`;
              texte += `${quidam} sait que le clocher est situÃ© Ã  ${distance} m de sa position. Combien de temps se passe-t-il avant que ${quidam} n'entende le tonnerre ?`;
              texte_corr =
                num_alpha(0) +
                ` Calculons la distance Ã  laquelle le premier Ã©clair est tombÃ© en utilisant la vitesse du son (on considÃ¨re que la vitesse de la lumiÃ¨re est telle que l'Ã©clair est visible instantanÃ©ment) :<br>`;
              texte_corr += `$340\\text{ m/s}=\\dfrac{340\\text{ m}}{1\\text{ s}}=\\dfrac{${mise_en_evidence(
                duree
              )}\\times 340\\text{ m}}{${mise_en_evidence(
                duree
              )}\\times 1\\text{ s}}=\\dfrac{${tex_nombrec(
                duree * 340
              )}}{${duree}\\text{ s}}$<br>`;
              texte_corr += `La distance Ã  laquelle l'Ã©clair est tombÃ© est donc de ${nombre_avec_espace(
                duree * 340
              )} m.<br>`;
              texte_corr +=
                num_alpha(1) +
                ` Avec les donnÃ©es de l'Ã©noncÃ© nous pouvons Ã©crire :<br>`;
              texte_corr += `$\\dfrac{340\\text{ m}}{1\\text{ s}}=\\dfrac{${tex_nombre(
                distance
              )}\\text{ m}}{\\mathcal{T}\\text{ s}}$<br>`;
              texte_corr += `Soit grÃ¢ce Ã  l'Ã©galitÃ© des produits en croix : $\\mathcal{T}\\text{ s}=${quatrieme_proportionnelle(
                `340 \\text{ m}`,
                `1 \\text{ s}`,
                distance + `\\text{ m}`,
                0
              )}=${tex_nombrec(arrondi(distance / 340))}\\text{ s}$<br>`;
              texte_corr += `${quidam} entendra le tonnerre ${tex_nombrec(
                arrondi(distance / 340)
              )} secondes aprÃ¨s avoir vu l'Ã©clair tomber sur le clocher.`;
              break;
            case 2: // Le coureur
              vitesse_moy = randint(vitesses[4][1] * 5, vitesses[4][2] * 5) / 5;
              distance = randint(5, 12);
              texte =
                `${quidam} vient de courir ${distance} kilomÃ¨tres. Sa montre connectÃ©e a enregistrÃ© l'` +
                katex_Popup2(
                  numero_de_l_exercice + i,
                  type_aide,
                  `allure`,
                  `DÃ©finition : allure (grandeur physique)`,
                  `L'allure est le temps exprimÃ© en h,min,s pour parcourir un kilomÃ¨tre.<br>L'unitÃ© est alors h/km ou min/km`
                ) +
                `pour chaque kilomÃ¨tre parcouru :`;
              let allures = [];
              for (let j = 0; j < distance; j++) {
                duree = Math.round(
                  1000 / (vitesse_moy * (1 + randint(-10, 10) * 0.01))
                );
                nbsecondes = duree % 60;
                nbminutes = (duree - nbsecondes) / 60;
                allures.push([nbminutes, nbsecondes]);
              }
              texte += "$\\def\\arraystretch{1.5}\\begin{array}{|c"; // On construit le tableau des allures
              texte += "|c";
              for (let j = 0; j < allures.length; j++) texte += "|c";
              texte += "}\\hline  \\text{kilomÃ¨tre}";
              for (let j = 0; j < allures.length; j++)
                texte += "&" + tex_nombre(j + 1);
              texte +=
                "\\\\\\hline \\text{allure en minutes et secondes (par km)}";
              for (j = 0; j < allures.length; j++)
                texte +=
                  "&" +
                  allures[j][0] +
                  `\\text{ min }` +
                  allures[j][1] +
                  `\\text{ s}`;
              texte += "\\\\\\hline\\end{array}$<br>";
              texte +=
                num_alpha(0) +
                ` Calculer la durÃ©e totale de la course de ${quidam}.<br>`;
              texte +=
                num_alpha(1) +
                ` En dÃ©duire sa	` +
                katex_Popup2(
                  numero_de_l_exercice + i,
                  type_aide,
                  `vitesse`,
                  `DÃ©finition : Vitesse (grandeur physique)`,
                  `La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L'unitÃ© officielle est le mÃ¨tre par seconde ($\\text{m/s}$  ou  $\\text{m.s}^{-1}$) mais on utilise souvent le kilomÃ¨tre par heure ($\\text{km/h}$  ou  $\\text{km.h}^{-1}$)`
                ) +
                ` moyenne en km/h sur le trajet total.<br>`;
              texte +=
                num_alpha(2) +
                ` ${quidam} s'entraÃ®ne pour un semi-marathon (21,0975 km). En courant Ã  la mÃªme vitesse, combien de temps durerait son semi-marathon ?`;
              texte_corr =
                num_alpha(0) +
                ` La durÃ©e totale de la course de ${quidam} est :<br>`;
              allures.push([0, 0]);
              duree = 0;

              for (let j = 0; j < distance; j++) {
                allures[distance][1] += allures[j][1];
                if (allures[distance][1] > 59) {
                  allures[distance][0] += 1;
                  allures[distance][1] = allures[distance][1] % 60;
                }
                allures[distance][0] += allures[j][0];
                if (allures[distance][0] > 59) {
                  duree++;
                  allures[distance][0] = allures[distance][0] % 60;
                }
              }
              for (let j = 0; j < distance - 1; j++) {
                texte_corr += `${allures[j][0]} min ${allures[j][1]} s + `;
              }
              texte_corr += `${allures[distance - 1][0]} min ${
                allures[distance - 1][1]
              } s = `;
              if (duree != 0) texte_corr += `${duree} h `;
              if (allures[distance][0] != 0)
                texte_corr += `${allures[distance][0]} min `;
              if (allures[distance][1] != 0)
                texte_corr += `${allures[distance][1]} s.`;
              texte_corr +=
                `<br>` +
                num_alpha(1) +
                ` ${quidam} a effectuÃ© ${distance} km en `;
              if (duree != 0) texte_corr += `${duree} h `;
              if (allures[distance][0] != 0)
                texte_corr += `${allures[distance][0]} min `;
              if (allures[distance][1] != 0)
                texte_corr += `${allures[distance][1]} s<br>Soit `;
              if (duree != 0) texte_corr += `${duree} h `;
              if (allures[distance][0] != 0)
                texte_corr += ` $\\dfrac{${allures[distance][0]}}{60}$ h `;
              if (allures[distance][1] != 0)
                texte_corr += ` $\\dfrac{${allures[distance][1]}}{${tex_nombre(
                  3600
                )}}$ h = `;
              texte_corr += `$\\dfrac{`;
              if (duree != 0)
                texte_corr += `${duree}\\times ${tex_nombre(3600)} + `;
              texte_corr += `${allures[distance][0]}\\times 60+${
                allures[distance][1]
              }}{${tex_nombre(3600)}}$ h = `;
              texte_corr += `$\\dfrac{`;
              if (duree != 0) {
                duree =
                  duree * 3600 +
                  allures[distance][0] * 60 +
                  allures[distance][1];
                texte_corr += `${duree}}`;
              } else {
                duree = allures[distance][0] * 60 + allures[distance][1];
                texte_corr += `${duree}}`;
              }
              texte_corr += `{${tex_nombre(3600)}}$ h.<br>`;
              texte_corr += `Sa vitesse en km/h est par consÃ©quent :<br>$${distance} \\text{ km}\\div\\dfrac{${duree}}{${tex_nombre(
                3600
              )}}\\text{ h}=`;
              texte_corr += `${distance} \\text{ km}\\times\\dfrac{${tex_nombre(
                3600
              )}}{${duree}}\\text{ h}^{-1}=\\dfrac{${distance}\\times${tex_nombre(
                3600
              )}}{${duree}}\\text{km.h}^{-1}`;
              vitesse_moy = arrondi((distance * 3600) / duree);
              texte_corr += `\\approx${tex_nombrec(vitesse_moy)}$ km/h<br>`;
              texte_corr +=
                num_alpha(2) +
                ` Si elle court 21,0975 km Ã  cette vitesse de ${tex_nombre(
                  vitesse_moy
                )} km/h, ${quidam} mettra :<br>`;
              duree = arrondi(21.0975 / vitesse_moy, 4);
              texte_corr += `$\\dfrac{${tex_nombre(
                21.0975
              )} \\text{ km}}{${tex_nombre(
                vitesse_moy
              )} \\text{ km.h}^{-1}}\\approx${tex_nombre(duree)}$ h soit `;
              nbheures = Math.floor(duree);
              duree = (duree - nbheures) * 60;
              nbminutes = Math.floor(duree);
              duree = Math.round((duree - nbminutes) * 60);
              texte_corr += ` environ ${nbheures} h ${nbminutes} min ${duree} s.`;
              break;
          }
          break;
        case 8: //problÃ¨me de prix massique
          index1 = randint(0, 7);
          index2 = randint(0, 5, [index1]);
          index = randint(0, 5, [index1, index2]);
          masse = arrondi(randint(fruits[index1][2], fruits[index1][3]) / 10);
          masse2 = arrondi(randint(fruits[index2][2], fruits[index2][3]) / 10);
          masse3 = arrondi(randint(fruits[index][2], fruits[index][3]) / 10);
          prix1 = arrondi(masse * fruits[index1][1]);
          prix2 = arrondi(masse2 * fruits[index2][1]);
          prix3 = arrondi(masse3 * fruits[index][1]);
          quidam = prenomF();
          texte = `${quidam} se rends Ã  l'Ã©picerie de son quartier. Elle y achÃ¨te ${tex_nombre(
            masse
          )} kg de ${fruits[index1][0]} Ã  ${tex_prix(
            fruits[index1][1]
          )} â¬/kg et pour ${tex_prix(prix2)} â¬ de ${
            fruits[index2][0]
          } Ã  ${tex_prix(fruits[index2][1])} â¬/kg.<br>`;
          texte += `Enfin, elle achÃ¨te ${tex_nombre(masse3)} kg de ${
            fruits[index][0]
          } pour ${tex_prix(prix3)} â¬.<br>`;
          texte +=
            num_alpha(0) +
            ` Combien lui coÃ»tent les ${fruits[index1][0]} ?<br>`;
          texte +=
            num_alpha(1) +
            ` Quelle masse de ${fruits[index2][0]} a-t-elle achetÃ©e ?<br>`;
          texte +=
            num_alpha(2) +
            ` Quel est le prix au kilogramme des ${fruits[index][0]} ?`;
          texte_corr =
            num_alpha(0) +
            ` ${quidam} dÃ©pense pour les ${fruits[index1][0]} : $${tex_nombre(
              masse
            )}\\text{ kg} \\times ${tex_prix(
              fruits[index1][1]
            )}$ â¬$\\text{/kg} = ${tex_prix(prix1)}$ â¬.<br>`;
          texte_corr +=
            num_alpha(1) +
            ` La masse de ${
              fruits[index2][0]
            } qu'elle a achetÃ©e est : $${tex_prix(prix2)} $ â¬$ \\div ${tex_prix(
              fruits[index2][1]
            )}$ â¬$\\text{/kg} = ${tex_nombre(masse2)}\\text{ kg}$.<br>`;
          texte_corr +=
            num_alpha(2) +
            ` Enfin, ${quidam} a achetÃ© des ${
              fruits[index][0]
            } au prix unitaire de : $${tex_prix(prix3)}$ â¬ $\\div ${tex_nombre(
              masse3
            )}\\text{ kg} = ${tex_prix(fruits[index][1])}$ â¬$\\text{/kg}$.`;
          break;
        case 9: //problÃ¨me de prix horaire
          index1 = randint(0, 3);
          index2 = randint(0, 4);
          nbheures = randint(locations[index1][1], locations[index1][2]);
          prix1 = locations[index1][1];
          prix2 = cours[index2][1] * randint(2, 6);
          quidam = prenomF();
          texte = `${quidam} a prÃ©vu de louer ${
            locations[index1][0]
          } pendant ${tex_nombre(
            nbheures
          )} heures. L'heure de location coÃ»te ${tex_prix(prix1)} â¬.<br>`;
          texte += num_alpha(0) + ` Combien cette location va lui coÃ»ter ?<br>`;
          texte +=
            num_alpha(1) +
            ` ${quidam} a pris des leÃ§ons particuliÃ¨res ${
              cours[index2][0]
            }. En tout ce mois-ci elle a eu ${tex_nombrec(
              prix2 / cours[index2][1]
            )} heures de cours pour ${tex_prix(
              prix2
            )} â¬. Combien demande son professeur pour une heure de cours ?<br>`;
          texte_corr =
            num_alpha(0) +
            ` ${quidam} va dÃ©penser pour sa location : $${tex_nombre(
              nbheures
            )}\\text{ h} \\times ${tex_prix(prix1)}$ â¬$\\text{/h} = ${tex_prix(
              nbheures * prix1
            )}$ â¬.<br>`;
          texte_corr +=
            num_alpha(1) +
            ` L'heure de cours ${cours[index2][0]} coÃ»te : $${tex_prix(
              prix2
            )}$ â¬ $ \\div ${tex_nombre(
              prix2 / cours[index2][1]
            )}\\text{ h} = ${tex_prix(cours[index2][1])}$ â¬$\\text{/h}$.<br>`;
          break;
        case 10: //problÃ¨me de densitÃ© de population
          index1 = randint(0, 14);
          index2 = randint(0, 14, [index1]);
          let ville1 = villes[index1][0];
          let ville2 = villes[index2][0];
          texte =
            num_alpha(0) +
            ` En 2016, Ã  ${villes[index1][0]} il y avait $${tex_nombre(
              villes[index1][1]
            )}$ habitants pour une superficie de $${tex_nombre(
              villes[index1][2] * 100
            )}$ ha.<br> Calculer la densitÃ© de population en hab/km$^2$.<br>`;
          texte +=
            num_alpha(1) +
            ` La mÃªme annÃ©e, la ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 1,
              type_aide,
              `densitÃ© de population`,
              `DÃ©finition : DensitÃ© de population`,
              `Câest le quotient du nombre d'habitants par la superficie en km$^2$.<br>L'unitÃ© de la densitÃ© de population est l'habitant par km$^2$ (hab/km$^2$).`
            ) +
            ` de ${villes[index2][0]} Ã©tait de $${tex_nombrec(
              villes[index2][1] / villes[index2][2]
            )}$ hab/km$^2$ pour une superficie de $${tex_nombrec(
              villes[index2][2] * 100
            )}$ ha.<br> Calculer le nombre d'habitants de ${
              villes[index2][0]
            } Ã  cette date.<br>`;
          texte_corr =
            num_alpha(0) +
            ` En 2016, la densitÃ© de population Ã  ${
              villes[index1][0]
            } Ã©tait de :<br> $\\dfrac{${tex_nombre(
              villes[index1][1]
            )}\\text{ hab}}{${tex_nombre(
              villes[index1][2] * 100
            )}\\text{ ha}}=\\dfrac{${tex_nombre(
              villes[index1][1]
            )}\\text{ hab}}{${tex_nombre(
              villes[index1][2]
            )}\\text{ km}^2}=${tex_nombrec(
              villes[index1][1] / villes[index1][2]
            )}\\text{ hab/km}^{2}$.<br>`;
          texte_corr +=
            num_alpha(1) +
            ` A cette date, le nombre d'habitants de ${
              villes[index2][0]
            } Ã©tait de :<br> $${tex_nombrec(
              villes[index2][1] / villes[index2][2]
            )}\\text{ hab/km}^2\\times ${tex_nombrec(
              villes[index2][2] * 100
            )}\\text{ ha}=${tex_nombrec(
              villes[index2][1] / villes[index2][2]
            )}\\text{ hab/km}^2\\times ${tex_nombrec(
              villes[index2][2]
            )}\\text{ km}^{2}=${tex_nombre(villes[index2][1])}\\text{ hab}$.`;
          break;
        case 11: //problÃ¨me de masse volumique
          index1 = randint(0, 14);
          index2 = randint(0, 14, [index1]);
          let V1 = randint(50, 100);
          masse2 = randint(5, 30);
          masse = arrondi((materiaux[index1][1] * V1) / 1000000);
          let V2 = arrondi(masse2 / materiaux[index2][1], 7);
          texte =
            num_alpha(0) +
            ` La ` +
            katex_Popup2(
              numero_de_l_exercice + i * 3 + 1,
              type_aide,
              `masse volumique`,
              `DÃ©finition : Masse volumique (grandeur physique)`,
              `La masse volumique d'un Ã©lÃ©ment est le quotient de la masse de cet Ã©lÃ©ment par le volume qu'il occupe.<br>L'unitÃ© de la masse volumique dÃ©pend de la nature de l'Ã©lÃ©ment et peut s'exprimer kg/m$^3$ pour les solides g/L pour les gaz par exemple.`
            ) +
            ` du ${materiaux[index1][0]} est de $${tex_nombre(
              materiaux[index1][1]
            )}\\text{ kg/m}^3$.<br>`;
          texte += `Quelle est la masse d'une piÃ¨ce de ce mÃ©tal de $${tex_nombre(
            V1
          )}\\text{ cm}^3$ ?<br>`;
          texte +=
            num_alpha(1) +
            ` Quel est le volume d'une piÃ¨ce de ${materiaux[index2][0]} ayant une masse de `;
          texte += `$${tex_nombre(masse2)}\\text{ kg}$ (la masse volumique du ${
            materiaux[index2][0]
          } est de $${tex_nombre(materiaux[index2][1])}\\text{ kg/m}^3$)<br>`;
          texte_corr =
            num_alpha(0) +
            ` La masse de cette piÃ¨ce de ${
              materiaux[index1][0]
            } est de :<br>$${tex_nombre(
              materiaux[index1][1]
            )}\\text{ km/m}^3\\times ${tex_nombre(
              V1
            )}\\text{ cm}^3=${tex_nombre(
              materiaux[index1][1]
            )}\\text{ km/m}^3\\times ${tex_nombrec(
              V1 / 1000000
            )}\\text{ m}^3=${tex_nombre(masse)}\\text{ kg}$.<br>`;
          texte_corr +=
            num_alpha(1) +
            ` Le volume de cette piÃ¨ce de ${
              materiaux[index2][0]
            } est de :<br>$${tex_nombre(masse2)}\\text{ kg}\\div ${tex_nombre(
              materiaux[index2][1]
            )}\\text{ kg/m}^3\\approx${tex_nombre(
              V2
            )}\\text{ m}^3\\approx${tex_nombrec(
              V2 * 1000000
            )}\\text{ cm}^3$<br>`;
          break;
        case 12: //problÃ¨me de concentration massique
          index1 = randint(0, 4);
          index2 = randint(0, 4, [index1]);
          let Volume1 = arrondi(randint(2, 15, [10]) / 10);
          let Volume2 = arrondi(randint(2, 15, [10]) / 10);
          if (solutes[index1][2] < 10)
            masse = arrondi(
              (randint(11, solutes[index1][2] * 10) * Volume1) / 10
            );
          else masse = arrondi(randint(2, solutes[index1][2]) * Volume1);
          let concentration2;
          if (solutes[index2][2] < 10)
            concentration2 = arrondi(randint(11, solutes[index2][2] * 10) / 10);
          //concentration en g/L solutÃ© 2.
          else concentration2 = randint(2, solutes[index2][2]);

          texte =
            num_alpha(0) +
            ` On a dissout $${tex_nombre(masse)}\\text{ g}$ de ${
              solutes[index1][0]
            } dans $${tex_nombre(Volume1)}\\text{ litres}$ ${
              solutes[index1][1]
            }.<br>Calculer la concentration massique de cette solution.<br>`;
          texte +=
            num_alpha(1) +
            ` On dispose de $${tex_nombre(
              Volume2
            )}$ litres de solution aqueuse de ${
              solutes[index2][0]
            } Ã  $${tex_nombre(
              concentration2
            )}\\text{ g/L}$.<br>Quelle masse de ${
              solutes[index2][0]
            } a Ã©tÃ© dissoute dans l'eau ?`;
          texte_corr =
            num_alpha(0) +
            ` La concentration en ${solutes[index1][0]} de cette solution aqueuse est de :<br>`;
          texte_corr += ` $\\dfrac{${tex_nombre(masse)}\\text{ g}}{${tex_nombre(
            Volume1
          )}\\text{ litres}}=${tex_nombrec(
            arrondi(masse / Volume1)
          )}\\text{ g/L}$<br>`;
          texte_corr +=
            num_alpha(1) +
            ` La masse de ${solutes[index2][0]} dissoute est de :<br>`;
          texte_corr += `$${tex_nombre(Volume2)}\\text{ L}\\times ${tex_nombre(
            concentration2
          )}\\text{ g/L}=${tex_nombre(
            arrondi(Volume2 * concentration2)
          )}\\text{ g}$`;
          break;

        case 13: //problÃ¨me de dÃ©bit
          index2 = randint(0, 6);
          duree = randint(2, 24);
          let vmax = rivieres[index2][3] * 3600;
          texte =
            `Le ` +
            katex_Popup2(
              numero_de_l_exercice + i,
              type_aide,
              `dÃ©bit`,
              `DÃ©finition : DÃ©bit (grandeur physique)`,
              `Le dÃ©bit est le quotient d'un volume d'eau Ã©coulÃ©e dans une section de conduit par le temps d'Ã©coulement.<br>L'unitÃ© officielle est le mÃ¨tre cube par seconde ($\\text{m}^3/\\text{s}$  et dans certains cas on peut utiliser le litre par minute (L/min)`
            ) +
            ` annuel moyen ${rivieres[index2][6]}${
              rivieres[index2][0]
            } mesurÃ© Ã  ${rivieres[index2][1]} est de ${
              rivieres[index2][2]
            } m${exposant(3)}/s.<br>`;
          texte +=
            num_alpha(0) +
            ` Calculer le volume d'eau en m${exposant(
              3
            )} Ã©coulÃ© en ${duree} heures Ã  ce dÃ©bit.<br>`;
          texte +=
            num_alpha(1) +
            ` En ${rivieres[index2][4]} Ã  ${rivieres[index2][1]}, ${
              rivieres[index2][5]
            }${rivieres[index2][0]} a dÃ©bitÃ© ${nombre_avec_espace(
              vmax
            )} m${exposant(
              3
            )} en une heure. Quel a Ã©tÃ© alors le dÃ©bit en mÂ³/s ?`;
          texte_corr =
            num_alpha(0) +
            ` En ${duree} heures il s'Ã©coule en moyenne dans ${rivieres[index2][5]}${rivieres[index2][0]} Ã  ${rivieres[index2][1]} :<br>`;
          texte_corr += `$\\mathcal{V}=${duree}\\text{ h}\\times${
            rivieres[index2][2]
          }\\text{ m}^3\\text{/s}=${duree}\\times 3600\\text{ s}\\times${
            rivieres[index2][2]
          }\\text{ m}^3\\text{/s}=${tex_nombre(
            duree * 3600 * rivieres[index2][2]
          )}\\text{ m}^3$<br>`;
          texte_corr +=
            num_alpha(1) +
            ` En ${rivieres[index2][4]} lors de la crue historique ${rivieres[index2][6]}${rivieres[index2][0]} Ã  ${rivieres[index2][1]} le dÃ©bit maximal a Ã©tÃ© de :<br>`;
          texte_corr += `DÃ©bit =$${tex_nombre(
            vmax
          )}\\text{ m}^3\\text{/h}=\\dfrac{${tex_nombre(
            vmax
          )}\\text{ m}^3}{1\\text{ h}}=\\dfrac{${tex_nombre(
            vmax
          )}\\text{ m}^3}{${tex_nombre(3600)}\\text{ s}}=${tex_nombrec(
            vmax / 3600
          )}\\text{ m}^3\\text{/s}$<br>`;

          break;
        case 14: // problÃ¨me de vitesse de tÃ©lÃ©chargement
          let unites = [`ko`, `Mo`, `Go`];
          index = randint(0, 1);
          if (index == 0) vitesse_moy = randint(200, 999);
          else vitesse_moy = randint(1, 20);
          quidam = prenom();
          nbminutes = randint(3, 10);
          nbsecondes = randint(2, 59);
          masse = arrondi(randint(15, 35) / 10);
          texte =
            num_alpha(0) +
            ` ${quidam} tÃ©lÃ©charge un fichier depuis un espace de stockage en ligne. Sa ` +
            katex_Popup2(
              numero_de_l_exercice + i,
              type_aide,
              `vitesse de tÃ©lÃ©chargement`,
              `DÃ©finition : Vitesse de tÃ©lÃ©chargement`,
              `La vitesse de tÃ©lÃ©chargement est le quotient de la quantitÃ© de donnÃ©es tÃ©lÃ©chargÃ©es (en ko,Mo ou Go) par la durÃ©e de tÃ©lÃ©chargement (en seconde).<br>L'unitÃ© de cette grandeur quotient est le ko/s (ou Mo/s)`
            ) +
            ` est de ${vitesse_moy} ${unites[index]}/s.<br>`;
          texte += `Le tÃ©lÃ©chargement dure ${nbminutes} minutes et ${nbsecondes} secondes. Quelle est la taille du fichier tÃ©lÃ©chargÃ© en ${unites[index]} ?<br>`;
          texte +=
            num_alpha(1) +
            ` ${quidam} veut tÃ©lÃ©charger un fichier de ${tex_nombre(
              masse
            )} Go. Quelle sera la durÃ©e du tÃ©lÃ©chargement si sa vitesse de tÃ©lÃ©chargement est de ${vitesse_moy} ${
              unites[index]
            }/s ?<br>`;
          texte_corr =
            num_alpha(0) + ` La taille du fichier tÃ©lÃ©chargÃ© est :<br>`;
          let taille_fichier = (nbminutes * 60 + nbsecondes) * vitesse_moy;
          texte_corr += `$(${nbminutes}\\times 60 +${nbsecondes})\\text{ s}\\times ${vitesse_moy} \\text{ ${
            unites[index]
          }/s} = ${
            nbminutes * 60 + nbsecondes
          }\\text{ s}\\times ${vitesse_moy} \\text{ ${
            unites[index]
          }/s} = ${taille_fichier} \\text{ ${unites[index]} }$`;
          if (taille_fichier > 1000)
            texte_corr += `$ =${tex_nombrec(taille_fichier / 1000)} \\text{ ${
              unites[index + 1]
            }}.$<br>`;
          texte_corr +=
            num_alpha(1) + ` La durÃ©e du tÃ©lÃ©chargement sera de :<br>`;
          if (index == 0) {
            texte_corr += `$${masse}\\times ${tex_nombrec(
              10 ** 6
            )} \\text{ ko} \\div ${vitesse_moy} \\text{ ${unites[index]}/s}$`;
            taille_fichier = masse * 10 ** 6;
          } else {
            texte_corr += `$${masse}\\times ${tex_nombrec(
              10 ** 3
            )} \\text{ Mo} \\div ${vitesse_moy} \\text{ ${unites[index]}/s}$`;
            taille_fichier = masse * 10 ** 3;
          }
          texte_corr += `$=\\dfrac{${taille_fichier}}{${vitesse_moy}}\\text{ s}`;
          nbheures = Math.floor(taille_fichier / vitesse_moy / 3600);
          nbminutes = Math.floor(
            (taille_fichier / vitesse_moy - 3600 * nbheures) / 60
          );
          nbsecondes = arrondi(
            taille_fichier / vitesse_moy - 3600 * nbheures - 60 * nbminutes,
            0
          );
          if (
            taille_fichier / vitesse_moy ==
            nbsecondes + 60 * nbheures + 3600 * nbheures
          )
            texte_corr += `=`;
          else texte_corr += `\\approx`;
          if (nbheures != 0) texte_corr += `${nbheures} \\text{ h }`;
          if (nbminutes != 0) texte_corr += `${nbminutes} \\text{ min }`;
          if (nbsecondes != 0) texte_corr += `${nbsecondes} \\text { s}`;
          texte_corr += `$`;

          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  //this.besoin_formulaire_case_a_cocher =['Choix des exercices alÃ©atoire'];
  //this.besoin_formulaire2_numerique = ['Type d\'exercice', 14, '1 : Energie consommÃ©e\n 2 :  Volumes\n 3 : QuantitÃ© de mouvement & Energie cinÃ©tique\n 4 : Moment de force\n 5 : Trafic de voyageurs\n 6 : Puissance Ã©lectrique\n 7 : Vitesses\n 8 : Prix massique\n 9 : Prix horaire\n 10 : DensitÃ© de population\n 11 : Masse volumique\n 12 : Concentration massique\n 13 : DÃ©bits\n 14 : Transfert de fichiers'];
  this.besoin_formulaire_texte = [
    "Choix des grandeurs",
    "Nombres sÃ©parÃ©s par des tirets\n 1 : Energie consommÃ©e\n 2 :  Volumes\n 3 : QuantitÃ© de mouvement & Energie cinÃ©tique\n 4 : Moment de force\n 5 : Trafic de voyageurs\n 6 : Puissance Ã©lectrique\n 7 : Vitesses\n 8 : Prix massique\n 9 : Prix horaire\n 10 : DensitÃ© de population\n 11 : Masse volumique\n 12 : Concentration massique\n 13 : DÃ©bits\n 14 : Transfert de fichiers",
  ]; // Texte, tooltip
}
/**
 * type 1 : Un nombre est donnÃ© par le produit d'un dÃ©cimal par une puissance de dix, il faut l'Ã©crire en notation scientifique
 * type 2 : On donne la notation scientifique d'un nombre et on doit trouver l'exposant manquant de 10 dans le membre de gauche.
 * @Auteur Jean-Claude Lhote 
 * 4C32-1
 */
function Calculs_avec_puissances_de_dix() {
  "use strict"
  Exercice.call(this)
  this.sup = 1;
  this.sup2 =1;
  this.titre = `Calcul avec les puissances de dix`;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions=5

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 1) this.consigne = `Donner l\'Ã©criture scientifique des nombres suivants.`;
    else this.consigne = `ComplÃ©ter l'Ã©galitÃ© des nombres suivants.`;
    let type_de_questions_disponibles;
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup2==1) type_de_questions_disponibles=[0,0,0,1,1];
    else if (this.sup2==2) type_de_questions_disponibles=[0,1,1,2,2];
    else type_de_questions_disponibles=[2,2,3,3,3];

    let liste_type_de_questions=combinaison_listes(type_de_questions_disponibles,this.nb_questions);
    for (let i = 0, texte, texte_corr,nombre,mantisse1,exp1,decalage,mantisse,exp,decimalstring,scientifiquestring, cpt = 0;
      i < this.nb_questions && cpt < 50;) {
//        nombre=calcul(randint(1001,9999)/10**randint(1,6))
//      mantisse=calcul(nombre/10**(Math.floor(Math.log10(nombre))))
//        exp=Math.floor(Math.log10(nombre))
      switch (liste_type_de_questions[i]) {
        case 0 :
          decalage=randint(-1,1,0)
        mantisse = randint(1,9)
        exp=randint(1,5)
        break
        case 1: 
        decalage=randint(-2,2,0)
        mantisse=calcul(randint(11,99)/10)
          exp=randint(1,5)
        break;
        case 2:
          decalage=randint(-3,3,0)
          if (randint(0,1)==1) mantisse=calcul(randint(111,999)/100)
          else mantisse=calcul((randint(1,9)*100+randint(1,9))/100)
          exp=randint(1,7)*choice([-1,1])
        break;
        case 3:
          decalage=randint(-4,4,0)
          if (randint(0,1)==1) mantisse=calcul((randint(1,9)*1000+randint(1,19)*5)/1000)
          else mantisse=calcul(randint(1111,9999)/1000)
          exp=randint(3,7)*choice([-1,1])
        break;
      }
      nombre=calcul(mantisse*10**exp)
      mantisse1=calcul(mantisse*10**decalage)
      exp1=exp-decalage

      decimalstring=`${tex_nombrec(mantisse1)} \\times 10^{${exp1}}`
      scientifiquestring=`${tex_nombre(mantisse)} \\times 10^{${exp}}`
      if (this.sup==1) {
        texte= `$${decimalstring}$`
        texte_corr=`$${mise_en_evidence(`${tex_nombrec(mantisse1)}`,'blue')}\\times ${mise_en_evidence(`10^{${exp1}}`)} = ${mise_en_evidence(`${tex_nombre(mantisse)}\\times 10^{${decalage}}`,'blue')}\\times  ${mise_en_evidence(`10^{${exp1}}`)} = ${scientifiquestring}$`
      }
      else {
        texte_corr= `$${mise_en_evidence(tex_nombre(mantisse1),'blue')}\\times  ${mise_en_evidence(`10^{${exp1}}`)}=${mise_en_evidence(tex_nombre(mantisse)+`\\times 10^{${decalage}}`,'blue')}\\times  ${mise_en_evidence(`10^{${exp1}}`)} =${scientifiquestring}$`
        texte=`$${tex_nombre(mantisse1)}\\times 10^{${mise_en_evidence(`....`)}}=${scientifiquestring}$`

      }
      if (this.liste_questions.indexOf(texte) == -1) {
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Type d\'exercices", 2, "1 : Traduire en notation scientifique\n2 : Exercice Ã  trou"];
  this.besoin_formulaire2_numerique = ["Niveaux de difficultÃ©",3, "1 : Facile\n2 : Moyen\n3 : Difficile"];
}

/**
 * Ecrire un nombre dÃ©cimal en notation scientifique et inversement
 * @Auteur Jean-Claude Lhote
 * 4C32
 */

function Notation_scientifique() {
  "use strict"
  Exercice.call(this)
  this.sup = 1;
  this.sup2 =1;
  this.titre = `Notation scientifique`;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions=5

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 1) this.consigne = `Donner l\'Ã©criture scientifique des nombres suivants.`;
    else this.consigne = `Donner l\'Ã©criture dÃ©cimale des nombres suivants.`;
    let type_de_questions_disponibles;
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup2==1) type_de_questions_disponibles=[0,0,0,1,1];
    else if (this.sup2==2) type_de_questions_disponibles=[0,1,1,2,2];
    else type_de_questions_disponibles=[2,2,3,3,3];

    let liste_type_de_questions=combinaison_listes(type_de_questions_disponibles,this.nb_questions);
    for (let i = 0, texte, texte_corr,mantisse,exp,decimalstring,scientifiquestring, cpt = 0;
      i < this.nb_questions && cpt < 50;) {
      switch (liste_type_de_questions[i]) {
        case 0 :
        mantisse = randint(1,9)
        exp=randint(1,5)
        break
        case 1: 
          mantisse=calcul(randint(11,99)/10)
          exp=randint(1,5)
        break;
        case 2:
          if (randint(0,1)==1) mantisse=calcul(randint(111,999)/100)
          else mantisse=calcul((randint(1,9)*100+randint(1,9))/100)
          exp=randint(1,7)*choice([-1,1])
        break;
        case 3:
          if (randint(0,1)==1) mantisse=calcul((randint(1,9)*1000+randint(1,19)*5)/1000)
          else mantisse=calcul(randint(1111,9999)/1000)
          exp=randint(3,7)*choice([-1,1])
        break;
      }
      decimalstring=tex_nombrec(mantisse*10**exp)
      scientifiquestring=`${tex_nombre(mantisse)}\\times 10^{${exp}}`
      if (this.sup==1) {
        texte= `$${decimalstring}$`
        texte_corr=`$${decimalstring} = ${scientifiquestring}$`
      }
      else {
        texte_corr= `$${scientifiquestring} = ${decimalstring}$`
        texte=`$${scientifiquestring}$`

      }
      if (this.liste_questions.indexOf(texte) == -1) {
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Type d\'exercices", 2, "1 : Traduire en notation scientifique\n2 : Traduire en notation dÃ©cimale"];
  this.besoin_formulaire2_numerique = ["Niveaux de difficultÃ©",3, "1 : Facile\n2 : Moyen\n3 : Difficile"];
}
/**
 * Ã partir d'un triangle rectangle, il faut donner l'Ã©galitÃ© de Pythagore ou complÃ©ter une Ã©galitÃ©.
 * @Auteur RÃ©mi Angot
 * SVG Benjamin Angot
 */
// function Egalite_Pythagore() { // RemplacÃ©e par Pythagore2D
//   Exercice.call(this); // HÃ©ritage de la classe Exercice()
//   this.titre = "ÃgalitÃ© de Pythagore";
//   this.nb_questions = 4;
//   this.nb_cols = 2;
//   this.nb_cols_corr = 2;
//   this.pas_de_version_LaTeX = true;
//   this.sup = 1;
//   this.sup2 = false;

//   this.nouvelle_version = function (numero_de_l_exercice) {
//     // this.bouton_aide = modal_texte_court(numero_de_l_exercice,"Ajouter 9 revient Ã  ajouter 10 et Ã  soustraire 1.")
//     this.liste_questions = []; // Liste de questions
//     this.liste_corrections = []; // Liste de questions corrigÃ©es
//     let liste_type_de_questions = combinaison_listes(
//       range1(6),
//       this.nb_questions
//     );
//     if (this.sup == 1) {
//       this.consigne = "Pour chaque triangle, donner l'Ã©galitÃ© de Pythagore.";
//     } else {
//       this.consigne = "ComplÃ©ter.";
//     }

//     for (
//       let i = 0, texte, texte_corr, a, b, cpt = 0;
//       i < this.nb_questions && cpt < 50;

//     ) {
//       const triangle = new Triangles();

//       let nom = triangle.getNom();
//       let A = nom[1];
//       let B = nom[2];
//       let C = nom[3];
//       let texte_corr1 = `${nom} est rectangle en ${A}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${B}${C}^2=${A}${C}^2+${A}${B}^2$.`;
//       let texte_corr1AB = `${nom} est rectangle en ${A}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${B}${C}^2=${A}${C}^2+${A}${B}^2$ d'oÃ¹ $${A}${B}^2=${B}${C}^2-${A}${C}^2$.`;
//       let texte_corr1AC = `${nom} est rectangle en ${A}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${B}${C}^2=${A}${C}^2+${A}${B}^2$ d'oÃ¹ $${A}${C}^2=${B}${C}^2-${A}${B}^2$.`;
//       let texte_corr2 = `${nom} est rectangle en ${B}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${C}^2=${B}${C}^2+${B}${A}^2$.`;
//       let texte_corr2AB = `${nom} est rectangle en ${B}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${C}^2=${B}${C}^2+${A}${B}^2$ d'oÃ¹ $${A}${B}^2=${A}${C}^2-${B}${C}^2$.`;
//       let texte_corr2BC = `${nom} est rectangle en ${B}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${C}^2=${B}${C}^2+${A}${B}^2$ d'oÃ¹ $${B}${C}^2=${A}${C}^2-${A}${B}^2$.`;
//       let texte_corr3 = `${nom} est rectangle en ${C}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${B}^2=${C}${A}^2+${C}${B}^2$.`;
//       let texte_corr3BC = `${nom} est rectangle en ${C}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${B}^2=${A}${C}^2+${B}${C}^2$ d'oÃ¹ $${B}${C}^2=${A}${B}^2-${A}${C}^2$.`;
//       let texte_corr3AC = `${nom} est rectangle en ${C}, donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : $${A}${B}^2=${A}${C}^2+${B}${C}^2$ d'oÃ¹ $${A}${C}^2=${A}${B}^2-${B}${C}^2$.`;

//       switch (liste_type_de_questions[i]) {
//         case 1:
//           texte = `<div><svg width="400" height="200" viewBox="0 0 400 200" xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="40,40 240,40 40,140 " fill="none" stroke="black" />
// 			  <polygon points="40,40 50,40 50,50 40,50" fill="none" stroke="black" />
// 			  <text x="30" y="40" text-anchor="middle" alignment-baseline="central">${A}</text> 
// 			  <text x="250" y="40" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="30" y="140" text-anchor="middle" alignment-baseline="central">${C}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${A}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr1;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr1AB;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1AC;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1;
//             }
//           }
//           break;
//         case 2:
//           texte = `<div><svg width="400" height="200" viewBox="0 0 400 200" xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="40,40 240,40 240,140 " fill="none" stroke="black" />
// 			  <polygon points="240,40 230,40 230,50 240,50" fill="none" stroke="black" />
// 			  <text x="30" y="40" text-anchor="middle" alignment-baseline="central">${A}</text> 
// 			  <text x="250" y="40" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="250" y="140" text-anchor="middle" alignment-baseline="central">${C}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${B}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr2;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr2AB;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr2;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr2BC;
//             }
//           }
//           break;
//         case 3:
//           texte = `<div><svg width="200" height"300" viewBox="0 0 200 300" xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="40,40 140,40 40,240" fill="none" stroke="black" />
// 			  <polygon points="40,40 50,40 50,50 40,50" fill="none" stroke="black" />
// 			  <text x="30" y="240" text-anchor="middle" alignment-baseline="central">${A}</text> 
// 			  <text x="150" y="40" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="30" y="40" text-anchor="middle" alignment-baseline="central">${C}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${C}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr3;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr3;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr3AC;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr3BC;
//             }
//           }
//           break;
//         case 4:
//           texte = `<div><svg width="200" height"300" viewBox="0 0 200 300" xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="40,40 140,40 140,240" fill="none" stroke="black" />
// 			  <polygon points="140,40 140,50 130,50 130,40" fill="none" stroke="black" />
// 			  <text x="30" y="40" text-anchor="middle" alignment-baseline="central">${A}</text> 
// 			  <text x="150" y="40" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="150" y="240" text-anchor="middle" alignment-baseline="central">${C}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${B}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr2;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr2AB;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr2;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr2BC;
//             }
//           }
//           break;
//         case 5:
//           texte = `<div><svg width="400" height"200" viewBox="-40 -40 400 200" xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="0,0 200,0 40,80.6" fill="none" stroke="black" />
// 			  <polygon points="40,80.6 50,76.2 46,67.2 36,71.8" fill="none" stroke="black" />
// 			  <text x="40" y="90.6" text-anchor="middle" alignment-baseline="central">${A}</text> 
// 			  <text x="210" y="0" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="-10" y="0" text-anchor="middle" alignment-baseline="central">${C}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${A}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr1;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr1AB;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1AC;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1;
//             }
//           }
//           break;
//         case 6:
//           texte = `<div><svg width="400" height"200" viewBox="-40 -140 400 200"  xmlns="http://www.w3.org/2000/svg">
// 			  <polygon points="0,0 200,0 40,-80.6" fill="none" stroke="black" />
// 			  <polygon points="40,-80.6 50,-76.2 46,-67.2 36,-71.8" fill="none" stroke="black" />
// 			  <text x="40" y="-90.6" text-anchor="middle" alignment-baseline="central">${C}</text> 
// 			  <text x="210" y="0" text-anchor="middle" alignment-baseline="central">${B}</text>
// 			  <text x="-10" y="0" text-anchor="middle" alignment-baseline="central">${A}</text>
// 			</svg></div>`;
//           if (this.sup2) {
//             texte = `${nom} est rectangle en $${C}$.<br>`;
//           }
//           if (this.sup == 1) {
//             texte_corr = texte_corr1;
//           } else {
//             let cas = randint(1, 3);
//             if (cas == 1) {
//               texte += `$${A}${B}^2=\\ldots$`;
//               texte_corr = texte_corr1AB;
//             }
//             if (cas == 2) {
//               texte += `$${A}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1AC;
//             }
//             if (cas == 3) {
//               texte += `$${B}${C}^2=\\ldots$`;
//               texte_corr = texte_corr1;
//             }
//           }
//       }
//       if (this.liste_questions.indexOf(texte) == -1) {
//         // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
//         this.liste_questions.push(texte);
//         this.liste_corrections.push(texte_corr);
//         i++;
//       }
//       cpt++;
//     }
//     liste_de_question_to_contenu(this);
//   };
//   this.besoin_formulaire_numerique = [
//     "Type de questions",
//     2,
//     "1 : Donner l'Ã©galitÃ©\n2 : ComplÃ©ter une Ã©galitÃ© avec une addition ou une soustraction",
//   ];
//   this.besoin_formulaire2_case_a_cocher = ["Sans figures"];
// }

/**
 * Signe d'un produit ou d'on quotient de relatifs
 * Plusieurs niveaux 2, 3 ou 4 factieurs, un quotient de 2 nombres, 1  nombre sur un produit de deux nombres, un prooduit de 2 nombres sur un nombre, un quotient de produit de 2 nombres
 * 4C10-0 exercice parent  ?
 * @author SÃ©bastien Lozano
 */

function Signe_produit_quotient_relatifs() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 1;
  if (this.exo == this.beta + "4C10-1") {
    this.sup = 4;
    this.titre = `Signe d'un produit de nombres relatifs`;
  } else if (this.exo == this.beta + "4C10-2") {
    this.sup = 5;
    this.titre = `Signe d'un quotient de nombres relatifs`;
  } else {
    this.titre = `Signe d'un produit ou d'un quotient de nombres relatifs`;
  }

  this.consigne = `Donner le signe des expressions numÃ©riques.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions_modifiable = false;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.sup = Number(this.sup); // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !

    if (this.exo == this.beta + "4C10-1") {
      // signe d'un produit
      switch (this.sup) {
        case 1: // 2 facteurs
          type_de_questions_disponibles = [1, 1, 1];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 2: // 3 facteurs
          type_de_questions_disponibles = [2, 2, 2];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 3: // 4 facteurs
          type_de_questions_disponibles = [3, 3, 3];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 4: // MÃ©lange
          type_de_questions_disponibles = [1, 2, 3];
          this.nb_questions = type_de_questions_disponibles.length;
          break;
      }
    } else if (this.exo == this.beta + "4C10-2") {
      // signe d'un quotient
      switch (this.sup) {
        case 1: // quotient de 2 nombres
          type_de_questions_disponibles = [4, 4, 4];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 2: // quotient d'1 nombre sur un produit de 2 nombres
          type_de_questions_disponibles = [5, 5, 5];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 3: // quotient d'1 produit de 2 nombres sur 1 nombre
          type_de_questions_disponibles = [6, 6, 6];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 4: // quotient de 2 produits de 2 nombres
          type_de_questions_disponibles = [7, 7, 7];
          //this.nb_questions = type_de_questions_disponibles.length;
          this.nb_questions = 3;
          break;
        case 5: // MÃ©lange
          type_de_questions_disponibles = [4, 5, 6, 7];
          this.nb_questions = type_de_questions_disponibles.length;
          break;
      }
    } else {
      // signe d'un produit et/ou d'un quotient
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7];
      this.nb_questions = type_de_questions_disponibles.length;
    }

    //let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = type_de_questions_disponibles; // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // on ne choisit que des nombres compris entre 1 et 20
      let nb_max = 20;
      // Le tableau des relatifs necessaires, il m'en faut max 4 !
      let num = new Relatif(
        randint(-1, 1, [0]) * randint(1, nb_max),
        randint(-1, 1, [0]) * randint(1, nb_max),
        randint(-1, 1, [0]) * randint(1, nb_max),
        randint(-1, 1, [0]) * randint(1, nb_max)
      );

      switch (liste_type_de_questions[i]) {
        case 1: // 2 facteurs
          texte = `$ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(num.relatifs[1])} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          } et $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }.`;
          texte_corr += `<br> ${num.setRegleSigneProduit(
            num.relatifs[0],
            num.relatifs[1]
          )}`;
          texte_corr += `<br>Donc $ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(num.relatifs[0], num.relatifs[1])
          )}.`;
          break;
        case 2: // 3 facteurs
          texte = `$ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(num.relatifs[2])} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          }, $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }`;
          texte_corr += ` et $ ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} $ est ${num.getSigneString()[2]}.`;
          texte_corr += `<br> ${num.setRegleSigneProduit(
            num.relatifs[0],
            num.relatifs[1],
            num.relatifs[2]
          )}`;
          texte_corr += `<br>Donc $ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(
              num.relatifs[0],
              num.relatifs[1],
              num.relatifs[2]
            )
          )}.`;
          break;
        case 3: // 4 facteurs
          texte = `$ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} \\times ${ecriture_nombre_relatif(num.relatifs[3])} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          }, $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }, `;
          texte_corr += `$ ${ecriture_nombre_relatif(num.relatifs[2])} $ est ${
            num.getSigneString()[2]
          } et $ ${ecriture_nombre_relatif(num.relatifs[3])} $ est ${
            num.getSigneString()[3]
          }.`;
          texte_corr += `<br> ${num.setRegleSigneProduit(
            num.relatifs[0],
            num.relatifs[1],
            num.relatifs[2],
            num.relatifs[3]
          )}`;
          texte_corr += `<br>Donc $ ${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[3]
          )} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(
              num.relatifs[0],
              num.relatifs[1],
              num.relatifs[2],
              num.relatifs[3]
            )
          )}.`;
          break;
        case 4: // quotient de 2 nombres
          texte = `$ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )}}{${ecriture_nombre_relatif(num.relatifs[1])}} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          } et $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }.`;
          texte_corr += `<br> ${num.setRegleSigneQuotient(
            num.relatifs[0],
            num.relatifs[1]
          )}`;
          texte_corr += `<br>Donc $ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[1]
          )}} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(num.relatifs[0], num.relatifs[1])
          )}.`;
          break;
        case 5: // quotient d'1 nombre sur un produit de 2 nombres
          texte = `$ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(num.relatifs[2])}} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          }, $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }`;
          texte_corr += ` et $ ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} $ est ${num.getSigneString()[2]}.`;
          texte_corr += `<br> ${num.setRegleSigneQuotient(
            num.relatifs[0],
            num.relatifs[1],
            num.relatifs[2]
          )}`;
          texte_corr += `<br>Donc $ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[1]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[2]
          )}} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(
              num.relatifs[0],
              num.relatifs[1],
              num.relatifs[2]
            )
          )}.`;
          break;
        case 6: // quotient d'1 produit de 2 nombres sur 1 nombre
          texte = `$ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )}}{${ecriture_nombre_relatif(num.relatifs[2])}} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          }, $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }`;
          texte_corr += ` et $ ${ecriture_nombre_relatif(
            num.relatifs[2]
          )} $ est ${num.getSigneString()[2]}.`;
          texte_corr += `<br> ${num.setRegleSigneQuotient(
            num.relatifs[0],
            num.relatifs[1],
            num.relatifs[2]
          )}`;
          texte_corr += `<br>Donc $ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[2]
          )}} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(
              num.relatifs[0],
              num.relatifs[1],
              num.relatifs[2]
            )
          )}.`;
          break;
        case 7: // quotient de 2 produits de 2 nombres
          texte = `$ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[2]
          )} \\times ${ecriture_nombre_relatif(num.relatifs[3])}} $`;
          texte_corr = `$ ${ecriture_nombre_relatif(num.relatifs[0])} $ est ${
            num.getSigneString()[0]
          }, $ ${ecriture_nombre_relatif(num.relatifs[1])} $ est ${
            num.getSigneString()[1]
          }, `;
          texte_corr += `$ ${ecriture_nombre_relatif(num.relatifs[2])} $ est ${
            num.getSigneString()[2]
          } et $ ${ecriture_nombre_relatif(num.relatifs[3])} $ est ${
            num.getSigneString()[3]
          }.`;
          texte_corr += `<br> ${num.setRegleSigneQuotient(
            num.relatifs[0],
            num.relatifs[1],
            num.relatifs[2],
            num.relatifs[3]
          )}`;
          texte_corr += `<br>Donc $ \\dfrac{${ecriture_nombre_relatif(
            num.relatifs[0]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[1]
          )}}{${ecriture_nombre_relatif(
            num.relatifs[2]
          )} \\times ${ecriture_nombre_relatif(
            num.relatifs[3]
          )}} $ est ${texte_en_couleur_et_gras(
            num.getSigneProduitString(
              num.relatifs[0],
              num.relatifs[1],
              num.relatifs[2],
              num.relatifs[3]
            )
          )}.`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  if (this.exo == this.beta + "4C10-1") {
    this.besoin_formulaire_numerique = [
      "Niveau de difficultÃ©",
      4,
      "1 : deux facteurs\n2 : trois facteurs\n3 : quatre facteurs\n4 : MÃ©lange",
    ];
  } else if (this.exo == this.beta + "4C10-2") {
    this.besoin_formulaire_numerique = [
      "Niveau de difficultÃ©",
      5,
      "1 : quotient de deux nombres\n2 : quotient d'un nombre sur un produit de deux facteurs\n3 : quotient d'un produit de deux factueurs sur un nombre\n4 : Quotient de deux produits de deux facteurs\n5 : MÃ©lange",
    ];
  } else {
    //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : sans conversions de longueurs\n2 : avec conversions de longueurs"];
  }
}

/**
 * Signe du produit de relatifs
 * 4C10-1
 * @author SÃ©bastien Lozano
 */
function Signe_produit_relatifs() {
  this.beta = ``;
  this.exo = this.beta + `4C10-1`;
  Signe_produit_quotient_relatifs.call(this);
}

/**
 * Signe du produit de relatifs
 * 4C10-2
 * @author SÃ©bastien Lozano
 */
function Signe_quotient_relatifs() {
  this.beta = ``;
  this.exo = this.beta + `4C10-2`;
  Signe_produit_quotient_relatifs.call(this);
}

/**
 * Encadrer par des puissances de 10
 * 4C30-1
 * @author SÃ©bastien Lozano
 */
function Puissances_encadrement() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 4;
  this.nb_questions = 6;
  this.titre = `Encadrer avec des puissances de 10`;

  this.consigne = `Encadrer les nombres suivants par deux puisances de 10 d'exposants consÃ©cutifs.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.sup = Number(this.sup); // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !

    switch (this.sup) {
      case 1: // nombre enier positif
        type_de_questions_disponibles = [1, 2, 3, 4, 5, 6];
        //this.nb_questions = type_de_questions_disponibles.length;
        //this.nb_questions = 3;
        break;
      case 2: // nombre dÃ©cimal positif
        type_de_questions_disponibles = [7, 8, 9, 10];
        //this.nb_questions = type_de_questions_disponibles.length;
        //this.nb_questions = 3;
        break;
      case 3: // nombre dÃ©cimal positif infÃ©rieur Ã  1
        type_de_questions_disponibles = [11, 12, 13, 14];
        //this.nb_questions = type_de_questions_disponibles.length;
        //this.nb_questions = 3;
        break;
      case 4: // MÃ©lange
        type_de_questions_disponibles = [
          choice([1, 2, 3]),
          choice([4, 5, 6]),
          choice([7, 8]),
          choice([9, 10]),
          choice([11, 12]),
          choice([13, 14]),
        ];
        //this.nb_questions = type_de_questions_disponibles.length;
        break;
    }

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    // let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // nombre entier positif, entre 1 et 10, puis 10 et 100 puis ....100 000 et 1 000 000
      let ent_pos = [];
      for (let i = 0; i < 6; i++) {
        ent_pos.push({
          val: `$${tex_nombre(calcul(randint(10 ** i + 1, 10 ** (i + 1))))}$`,
          puissance_inf: `$10^{${i}}$`,
          puissance_sup: `$10^{${i + 1}}$`,
          puissance_inf_num: `$${tex_nombre(calcul(10 ** i))}$`,
          puissance_sup_num: `$${tex_nombre(calcul(10 ** (i + 1)))}$`,
        });
      }

      // nombre dÃ©cimal positif 1 et 10 000 avec 1,2,3 puis 4 dÃ©cimales
      let dec_pos = [];
      for (let i = 0; i < 4; i++) {
        dec_pos.push({
          val: `$${tex_nombre(calcul(randint(10000, 100000) / 10 ** (4 - i)))}$`,
          puissance_inf: `$10^{${i}}$`,
          puissance_sup: `$10^{${i + 1}}$`,
          puissance_inf_num: `$${tex_nombre(calcul(10 ** i))}$`,
          puissance_sup_num: `$${tex_nombre(calcul(10 ** (i + 1)))}$`,
        });
      }
      // nombre dÃ©cimal positif infÃ©rieur Ã  1, entre 0,1 et 1 puis entre 0,01 et 0,1 puis 0,001 et 0,0001
      let dec_pos_inf_un = [];
      for (let i = 0; i < 4; i++) {
        dec_pos_inf_un.push({
          val: `$${tex_nombre(calcul(randint(10 ** (4 - i - 1) + 1, 10 ** (4 - i)) / 10000))}$`,
          puissance_inf: `$10^{${-(i + 1)}}$`,
          puissance_sup: `$10^{${-i}}$`,
          puissance_inf_num: `$${tex_nombre(calcul(10 ** -(i + 1)))}$`,
          puissance_sup_num: `$${tex_nombre(calcul(10 ** -i))}$`,
        });
      }

      switch (liste_type_de_questions[i]) {
        case 1: // nombre enier positif
          texte = `${ent_pos[0].val}`;
          texte_corr = `${ent_pos[0].puissance_inf} $\\leqslant$ ${ent_pos[0].val} $\\leqslant$ ${ent_pos[0].puissance_sup}`;
          texte_corr += ` car ${ent_pos[0].puissance_inf} = ${ent_pos[0].puissance_inf_num} et ${ent_pos[0].puissance_sup} = ${ent_pos[0].puissance_sup_num}`;
          break;
        case 2: // nombre enier positif
          texte = `${ent_pos[1].val}`;
          texte_corr = `${ent_pos[1].puissance_inf} $\\leqslant$ ${ent_pos[1].val} $\\leqslant$ ${ent_pos[1].puissance_sup}`;
          texte_corr += ` car ${ent_pos[1].puissance_inf} = ${ent_pos[1].puissance_inf_num} et ${ent_pos[1].puissance_sup} = ${ent_pos[1].puissance_sup_num}`;
          break;
        case 3: // nombre enier positif
          texte = `${ent_pos[2].val}`;
          texte_corr = `${ent_pos[2].puissance_inf} $\\leqslant$ ${ent_pos[2].val} $\\leqslant$ ${ent_pos[2].puissance_sup}`;
          texte_corr += ` car ${ent_pos[2].puissance_inf} = ${ent_pos[2].puissance_inf_num} et ${ent_pos[2].puissance_sup} = ${ent_pos[2].puissance_sup_num}`;
          break;
        case 4: // nombre enier positif
          texte = `${ent_pos[3].val}`;
          texte_corr = `${ent_pos[3].puissance_inf} $\\leqslant$ ${ent_pos[3].val} $\\leqslant$ ${ent_pos[3].puissance_sup}`;
          texte_corr += ` car ${ent_pos[3].puissance_inf} = ${ent_pos[3].puissance_inf_num} et ${ent_pos[3].puissance_sup} = ${ent_pos[3].puissance_sup_num}`;
          break;
        case 5: // nombre enier positif
          texte = `${ent_pos[4].val}`;
          texte_corr = `${ent_pos[4].puissance_inf} $\\leqslant$ ${ent_pos[4].val} $\\leqslant$ ${ent_pos[4].puissance_sup}`;
          texte_corr += ` car ${ent_pos[4].puissance_inf} = ${ent_pos[4].puissance_inf_num} et ${ent_pos[4].puissance_sup} = ${ent_pos[4].puissance_sup_num}`;
          break;
        case 6: // nombre enier positif
          texte = `${ent_pos[5].val}`;
          texte_corr = `${ent_pos[5].puissance_inf} $\\leqslant$ ${ent_pos[5].val} $\\leqslant$ ${ent_pos[5].puissance_sup}`;
          texte_corr += ` car ${ent_pos[5].puissance_inf} = ${ent_pos[5].puissance_inf_num} et ${ent_pos[5].puissance_sup} = ${ent_pos[5].puissance_sup_num}`;
          break;
        case 7: // nombre dÃ©cimal positif
          texte = `${dec_pos[0].val}`;
          texte_corr = `${dec_pos[0].puissance_inf} $\\leqslant$ ${dec_pos[0].val} $\\leqslant$ ${dec_pos[0].puissance_sup}`;
          texte_corr += ` car ${dec_pos[0].puissance_inf} = ${dec_pos[0].puissance_inf_num} et ${dec_pos[0].puissance_sup} = ${dec_pos[0].puissance_sup_num}`;
          break;
        case 8: // nombre dÃ©cimal positif
          texte = `${dec_pos[1].val}`;
          texte_corr = `${dec_pos[1].puissance_inf} $\\leqslant$ ${dec_pos[1].val} $\\leqslant$ ${dec_pos[1].puissance_sup}`;
          texte_corr += ` car ${dec_pos[1].puissance_inf} = ${dec_pos[1].puissance_inf_num} et ${dec_pos[1].puissance_sup} = ${dec_pos[1].puissance_sup_num}`;
          break;
        case 9: // nombre dÃ©cimal positif
          texte = `${dec_pos[2].val}`;
          texte_corr = `${dec_pos[2].puissance_inf} $\\leqslant$ ${dec_pos[2].val} $\\leqslant$ ${dec_pos[2].puissance_sup}`;
          texte_corr += ` car ${dec_pos[2].puissance_inf} = ${dec_pos[2].puissance_inf_num} et ${dec_pos[2].puissance_sup} = ${dec_pos[2].puissance_sup_num}`;
          break;
        case 10: // nombre dÃ©cimal positif
          texte = `${dec_pos[3].val}`;
          texte_corr = `${dec_pos[3].puissance_inf} $\\leqslant$ ${dec_pos[3].val} $\\leqslant$ ${dec_pos[3].puissance_sup}`;
          texte_corr += ` car ${dec_pos[3].puissance_inf} = ${dec_pos[3].puissance_inf_num} et ${dec_pos[3].puissance_sup} = ${dec_pos[3].puissance_sup_num}`;
          break;
        case 11: // nombre dÃ©cimal positif inferieur Ã  1
          texte = `${dec_pos_inf_un[0].val}`;
          texte_corr = `${dec_pos_inf_un[0].puissance_inf} $\\leqslant$ ${dec_pos_inf_un[0].val} $\\leqslant$ ${dec_pos_inf_un[0].puissance_sup}`;
          texte_corr += ` car ${dec_pos_inf_un[0].puissance_inf} = ${dec_pos_inf_un[0].puissance_inf_num} et ${dec_pos_inf_un[0].puissance_sup} = ${dec_pos_inf_un[0].puissance_sup_num}`;
          break;
        case 12: // nombre dÃ©cimal positif inferieur Ã  1
          texte = `${dec_pos_inf_un[1].val}`;
          texte_corr = `${dec_pos_inf_un[1].puissance_inf} $\\leqslant$ ${dec_pos_inf_un[1].val} $\\leqslant$ ${dec_pos_inf_un[1].puissance_sup}`;
          texte_corr += ` car ${dec_pos_inf_un[1].puissance_inf} = ${dec_pos_inf_un[1].puissance_inf_num} et ${dec_pos_inf_un[1].puissance_sup} = ${dec_pos_inf_un[1].puissance_sup_num}`;
          break;
        case 13: // nombre dÃ©cimal positif inferieur Ã  1
          texte = `${dec_pos_inf_un[2].val}`;
          texte_corr = `${dec_pos_inf_un[2].puissance_inf} $\\leqslant$ ${dec_pos_inf_un[2].val} $\\leqslant$ ${dec_pos_inf_un[2].puissance_sup}`;
          texte_corr += ` car ${dec_pos_inf_un[2].puissance_inf} = ${dec_pos_inf_un[2].puissance_inf_num} et ${dec_pos_inf_un[2].puissance_sup} = ${dec_pos_inf_un[2].puissance_sup_num}`;
          break;
        case 14: // nombre dÃ©cimal positif inferieur Ã  1
          texte = `${dec_pos_inf_un[3].val}`;
          texte_corr = `${dec_pos_inf_un[3].puissance_inf} $\\leqslant$ ${dec_pos_inf_un[3].val} $\\leqslant$ ${dec_pos_inf_un[3].puissance_sup}`;
          texte_corr += ` car ${dec_pos_inf_un[3].puissance_inf} = ${dec_pos_inf_un[3].puissance_inf_num} et ${dec_pos_inf_un[3].puissance_sup} = ${dec_pos_inf_un[3].puissance_sup_num}`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : nombre entier positif\n2 : nombre dÃ©cimal positif\n3 : nombre entier positif infÃ©rieur Ã  un\n4 : MÃ©lange",
  ];
}

/**
 * ProblÃ¨mes additifs et de comparaion sur les rationnels
 * 4C25-0
 * @author SÃ©bastien Lozano
 */
function Problemes_additifs_fractions() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 5;
  } else {
    this.nb_questions = 2;
  }
  this.titre = `ProblÃ¨mes additifs et de comparaison sur les rationnels`;
  this.consigne = `Justifier vos rÃ©ponses aux problÃ¨mes suivants.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? (this.spacing = 2) : (this.spacing = 1.5);
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 1.15);

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [1, 2, 3, 4, 5];
    } else {
      type_de_questions_disponibles = [choice([1, 2]), choice([3, 4, 5])];
    }

    //let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // on aura besoin des mÃ©thodes de la classe Fraction()
      let frac = new ListeFraction();
      // on rÃ©cupÃ¨re les dÃ©nominateurs qui vont bien
      //let denoms_amis = frac.denominateurs_amis;
      //C'est mieux avec ceux lÃ , l'algo trouve plus rapidement une solution avec les contraintes Ã  ajouter dans mathsalea_outils.js quand Ã§a sera possible.
      let denoms_amis = [
        [40, 2, 20, 4, 10, 5, 8],
        [60, 2, 30, 3, 20, 4, 15, 5, 12, 6, 10],
        [80, 2, 40, 4, 20, 5, 16, 8, 10],
      ];
      // on aura besoin de ranger tout Ã§a !
      let frac_rangees, frac_meme_denom_rangees;

      //======================================================
      //======== 		AVEC 3 FRACTIONS			  	========
      //======================================================

      // le tableau d'objets contenant tout le necesssaire, fractions, Ã©noncÃ©, question ... pour les problÃ¨me avec 3 fractions
      let pb_3_f = [];
      // les numÃ©rateurs et dÃ©nominateurs des 3 fractions attention les deux premiÃ¨res doivent Ãªtre infÃ©rieures Ã  1/2 si on veut qu'elles soient toutes positives !
      // et on veut des fractions distinctes !
      let nt1, nt2, nt3, dt1, dt2, dt3;
      let n1, n2, n3, d1, d2, d3;
      // on choisit un tableau de dÃ©nominateurs qui vont bien
      let denoms_cool_3 = denoms_amis[randint(0, denoms_amis.length - 1)];
      while (
        nt1 == nt2 ||
        nt1 == nt3 ||
        nt2 == nt3 ||
        nt1 / dt1 >= 1 / 2 ||
        nt2 / dt2 >= 1 / 2
      ) {
        n1 = randint(1, 6);
        d1 = choice(denoms_cool_3);
        n2 = randint(2, 10, [n1]); //on Ã©vite n1 pour pouvoir retrouver le texte de la plus grande fraction
        d2 = choice(denoms_cool_3, [d1]);
        n3 = d1 * d2 - n1 * d2 - n2 * d1; //la somme des trois vaut 1 !
        d3 = d1 * d2;

        nt1 = frac.fraction_simplifiee(n1, d1)[0];
        dt1 = frac.fraction_simplifiee(n1, d1)[1];
        nt2 = frac.fraction_simplifiee(n2, d2)[0];
        dt2 = frac.fraction_simplifiee(n2, d2)[1];
        nt3 = frac.fraction_simplifiee(n3, d3)[0];
        dt3 = frac.fraction_simplifiee(n3, d3)[1];
      }

      //======================================================
      //========= indice 0 le triathlon des neiges  ==========
      //======================================================
      pb_3_f.push({
        prenoms: [prenomM()],
        fractionsSimp: [
          nt1,
          dt1,
          "VTT",
          nt2,
          dt2,
          "ski de fond",
          nt3,
          dt3,
          "pied",
        ],
        fractionsB: {
          f1: [nt1, dt1],
          cat1: "VTT",
          f2: [nt2, dt2],
          cat2: "ski de fond",
          f3: [nt3, dt3],
          cat3: "pied",
        },
        enonce: ``,
        question: `Pour quelle discipline, la distance est-elle la plus grande ?`,
        correction: ``,
      });

      // les 3 prÃ©nomns doivent Ãªtre distincts
      let p1, p2, p3; // les 3 prÃ©noms
      while (p1 == p2 || p1 == p3 || p2 == p3) {
        p1 = prenomF();
        p2 = prenomF();
        p3 = prenomF();
      }

      //======================================================
      //=========== 		indice 1 Miss Math		 ===========
      //======================================================
      pb_3_f.push({
        prenoms: [],
        fractionsSimp: [nt1, dt1, p1, nt2, dt2, p2, nt3, dt3, p3],
        fractionsB: {
          f1: [nt1, dt1],
          cat1: p1,
          f2: [nt2, dt2],
          cat2: p2,
          f3: [nt3, dt3],
          cat3: p3,
        },
        enonce: ``,
        question: `Qui a Ã©tÃ© Ã©lue ?`,
        correction: ``,
      });
      let currentDate = new Date();
      let currentAnnee = currentDate.getFullYear();

      //======================================================
      //====== Ã©noncÃ© indice 0 le triathlon des neiges  ======
      //======================================================
      pb_3_f[0].enonce += `Le triathlon des neiges de la vallÃ©e des loups comprend trois Ã©preuves qui s'enchaÃ®nent : VTT, ski de fond et course Ã  pied.`;
      pb_3_f[0].enonce += `<br>${pb_3_f[0].prenoms[0]}, un passionnÃ© de cette Ã©preuve, s'entraÃ®ne rÃ©guliÃ¨rement sur le mÃªme circuit. `;
      pb_3_f[0].enonce += `<br>Ã chaque entraÃ®nement, il parcourt le circuit de la faÃ§on suivante : $\\dfrac{${pb_3_f[0].fractionsB.f1[0]}}{${pb_3_f[0].fractionsB.f1[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat1}, `;
      pb_3_f[0].enonce += `$\\dfrac{${pb_3_f[0].fractionsB.f2[0]}}{${pb_3_f[0].fractionsB.f2[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat2} et le reste Ã  ${pb_3_f[0].fractionsB.cat3}.`;

      //======================================================
      //=========== Ã©noncÃ© indice 1 Miss Math		 ===========
      //======================================================
      pb_3_f[1].enonce = `Ã l'Ã©lection de Miss Math ${currentAnnee}, ${pb_3_f[1].fractionsB.cat1} a remportÃ© $\\dfrac{${pb_3_f[1].fractionsB.f1[0]}}{${pb_3_f[1].fractionsB.f1[1]}}$ des suffrages, `;
      pb_3_f[1].enonce += `${pb_3_f[1].fractionsB.cat2} $\\dfrac{${pb_3_f[1].fractionsB.f2[0]}}{${pb_3_f[1].fractionsB.f2[1]}}$ et `;
      pb_3_f[1].enonce += `${pb_3_f[1].fractionsB.cat3} tous les autres.`;

      //======================================================
      //=========== 		Correction Commune  	 ===========
      //======================================================
      let frac_meme_denom;
      for (let i = 0; i < 2; i++) {
        pb_3_f[
          i
        ].correction = `Il s'agit d'un problÃ¨me additif. Il va Ãªtre necessaire de rÃ©duire les fractions au mÃªme dÃ©nominateur pour les additionner, les soustraire ou les comparer.<br>`;

        if (!(dt1 == dt2)) {
          pb_3_f[
            i
          ].correction += `RÃ©duisons les fractions de l'Ã©noncÃ© au mÃªme dÃ©nominateur :  `;
          frac_meme_denom = frac.reduceSameDenominateur(
            pb_3_f[i].fractionsB.f1[0],
            pb_3_f[i].fractionsB.f1[1],
            pb_3_f[i].fractionsB.f2[0],
            pb_3_f[i].fractionsB.f2[1],
            pb_3_f[i].fractionsB.f3[0],
            pb_3_f[i].fractionsB.f3[1]
          );
          if (frac_meme_denom[1] == dt1) {
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f1[0]}}{${pb_3_f[i].fractionsB.f1[1]}}$ et `;
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f2[0]}}{${pb_3_f[i].fractionsB.f2[1]}} = \\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$.<br>`;
          } else if (frac_meme_denom[1] == dt2) {
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f1[0]}}{${pb_3_f[i].fractionsB.f1[1]}} = \\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ et `;
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f2[0]}}{${pb_3_f[i].fractionsB.f2[1]}}$<br>`;
          } else {
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f1[0]}}{${pb_3_f[i].fractionsB.f1[1]}} = \\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ et `;
            pb_3_f[
              i
            ].correction += `$\\dfrac{${pb_3_f[i].fractionsB.f2[0]}}{${pb_3_f[i].fractionsB.f2[1]}} = \\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$.<br>`;
          }
        } else {
          frac_meme_denom = frac.reduceSameDenominateur(
            pb_3_f[i].fractionsB.f1[0],
            pb_3_f[i].fractionsB.f1[1],
            pb_3_f[i].fractionsB.f2[0],
            pb_3_f[i].fractionsB.f2[1],
            pb_3_f[i].fractionsB.f3[0],
            pb_3_f[i].fractionsB.f3[1]
          );
          pb_3_f[
            i
          ].correction += `Les fractions de l'Ã©noncÃ© ont dÃ©jÃ  le mÃªme dÃ©nominateur.`;
        }
      }

      //======================================================
      //==== Correction indice 0 le triathlon des neiges  ====
      //======================================================
      pb_3_f[0].correction += `Calculons alors la distance Ã  `;

      //======================================================
      //======== 		Correction indice 1 Miss Math  	========
      //======================================================
      pb_3_f[1].correction += `Calculons d'abord la fraction des suffrages remportÃ©s par `;

      //======================================================
      //=========== 		Correction Commune  	 ===========
      //======================================================
      for (let i = 0; i < 2; i++) {
        pb_3_f[i].correction += `${pb_3_f[i].fractionsB.cat3} : <br>`;
        pb_3_f[
          i
        ].correction += `$1-\\dfrac{${pb_3_f[i].fractionsB.f1[0]}}{${pb_3_f[i].fractionsB.f1[1]}}-\\dfrac{${pb_3_f[i].fractionsB.f2[0]}}{${pb_3_f[i].fractionsB.f2[1]}} = `;
        pb_3_f[
          i
        ].correction += `\\dfrac{${frac_meme_denom[1]}}{${frac_meme_denom[1]}}-\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}-\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}} = `;
        pb_3_f[
          i
        ].correction += `\\dfrac{${frac_meme_denom[1]}-${frac_meme_denom[0]}-${frac_meme_denom[2]}}{${frac_meme_denom[3]}} = `;
        pb_3_f[i].correction += `\\dfrac{${
          frac_meme_denom[1] - frac_meme_denom[0] - frac_meme_denom[2]
        }}{${frac_meme_denom[1]}}`;
        if (!(frac_meme_denom[1] == pb_3_f[0].fractionsB.f3[1])) {
          pb_3_f[
            i
          ].correction += ` = \\dfrac{${pb_3_f[i].fractionsB.f3[0]}}{${pb_3_f[i].fractionsB.f3[1]}}$`;
        } else {
          pb_3_f[i].correction += `$`;
        }
      }

      //======================================================
      //==== Conclusion indice 0 le triathlon des neiges  ====
      //======================================================
      pb_3_f[0].correction += `<br>${pb_3_f[0].prenoms[0]} fait donc $\\dfrac{${pb_3_f[0].fractionsB.f1[0]}}{${pb_3_f[0].fractionsB.f1[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat1}, `;
      pb_3_f[0].correction += `$\\dfrac{${pb_3_f[0].fractionsB.f2[0]}}{${pb_3_f[0].fractionsB.f2[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat2} et `;
      pb_3_f[0].correction += `$\\dfrac{${pb_3_f[0].fractionsB.f3[0]}}{${pb_3_f[0].fractionsB.f3[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat3}.`;

      pb_3_f[0].correction += `<br> Avec les mÃªmes dÃ©nominateurs pour pouvoir comparer, `;
      pb_3_f[0].correction += `${pb_3_f[0].prenoms[0]} fait donc $\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ Ã  ${pb_3_f[0].fractionsB.cat1}, `;
      pb_3_f[0].correction += `$\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ Ã  ${pb_3_f[0].fractionsB.cat2} et `;
      pb_3_f[0].correction += `$\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$ Ã  ${pb_3_f[0].fractionsB.cat3}.`;

      //let frac_rangees,frac_meme_denom_rangees;
      if (
        calcul(nt1 / dt1) == calcul(nt2 / dt2) &&
        calcul(nt1 / dt1) == calcul(nt3 / dt3)
      ) {
        pb_3_f[0].correction += `<br> ${texte_en_couleur_et_gras(
          `Les trois fractions sont Ã©quivalentes, ${pb_3_f[0].prenoms[0]} parcours donc la mÃªme distance dans les trois disciplines.`
        )}`;
      } else {
        frac_meme_denom_rangees = frac.sortFractions(
          frac_meme_denom[0],
          frac_meme_denom[1],
          frac_meme_denom[2],
          frac_meme_denom[3],
          frac_meme_denom[4],
          frac_meme_denom[5]
        );
        pb_3_f[0].correction += `<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $\\dfrac{${frac_meme_denom_rangees[0]}}{${frac_meme_denom_rangees[1]}}$, $\\dfrac{${frac_meme_denom_rangees[2]}}{${frac_meme_denom_rangees[3]}}$, $\\dfrac{${frac_meme_denom_rangees[4]}}{${frac_meme_denom_rangees[5]}}$.`;

        frac_rangees = frac.sortFractions(
          pb_3_f[0].fractionsB.f1[0],
          pb_3_f[0].fractionsB.f1[1],
          pb_3_f[0].fractionsB.f2[0],
          pb_3_f[0].fractionsB.f2[1],
          pb_3_f[0].fractionsB.f3[0],
          pb_3_f[0].fractionsB.f3[1]
        );

        pb_3_f[0].correction += `<br>Enfin, nous pouvons ranger les fractions de l'Ã©noncÃ© et la fraction calculÃ©e dans l'ordre croissant : $\\dfrac{${frac_rangees[0]}}{${frac_rangees[1]}}$, $\\dfrac{${frac_rangees[2]}}{${frac_rangees[3]}}$, $\\dfrac{${frac_rangees[4]}}{${frac_rangees[5]}}$.`;

        pb_3_f[0].correction += `<br> ${texte_en_couleur_et_gras(
          `C'est donc Ã  ${
            pb_3_f[0].fractionsSimp[
              pb_3_f[0].fractionsSimp.indexOf(frac_rangees[4]) + 2
            ]
          } que ${pb_3_f[0].prenoms[0]} fait la plus grande distance.`
        )}`;
      }

      //======================================================
      //======== 		Conclusion indice 1 Miss Math  	========
      //======================================================
      pb_3_f[1].correction += `<br>${pb_3_f[1].fractionsB.cat1} a donc remportÃ© $\\dfrac{${pb_3_f[1].fractionsB.f1[0]}}{${pb_3_f[1].fractionsB.f1[1]}}$, `;
      pb_3_f[1].correction += `${pb_3_f[1].fractionsB.cat2} a remportÃ© $\\dfrac{${pb_3_f[1].fractionsB.f2[0]}}{${pb_3_f[1].fractionsB.f2[1]}}$ et `;
      pb_3_f[1].correction += `${pb_3_f[1].fractionsB.cat3} $\\dfrac{${pb_3_f[1].fractionsB.f3[0]}}{${pb_3_f[1].fractionsB.f3[1]}}$.`;

      pb_3_f[1].correction += `<br> Avec les mÃªmes dÃ©nominateurs pour pouvoir comparer, `;
      pb_3_f[1].correction += `${pb_3_f[1].fractionsB.cat1} remporte donc $\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$, `;
      pb_3_f[1].correction += `${pb_3_f[1].fractionsB.cat2} $\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ et `;
      pb_3_f[1].correction += `${pb_3_f[1].fractionsB.cat3} $\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$.`;

      if (
        calcul(nt1 / dt1) == calcul(nt2 / dt2) &&
        calcul(nt1 / dt1) == calcul(nt3 / dt3)
      ) {
        pb_3_f[1].correction += `<br> ${texte_en_couleur_et_gras(
          `Les trois fractions sont Ã©quivalentes, les trois candidates ont donc remportÃ© le mÃªme nombre de suffrages.`
        )}`;
      } else {
        frac_meme_denom_rangees = frac.sortFractions(
          frac_meme_denom[0],
          frac_meme_denom[1],
          frac_meme_denom[2],
          frac_meme_denom[3],
          frac_meme_denom[4],
          frac_meme_denom[5]
        );
        pb_3_f[1].correction += `<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $\\dfrac{${frac_meme_denom_rangees[0]}}{${frac_meme_denom_rangees[1]}}$, $\\dfrac{${frac_meme_denom_rangees[2]}}{${frac_meme_denom_rangees[3]}}$, $\\dfrac{${frac_meme_denom_rangees[4]}}{${frac_meme_denom_rangees[5]}}$.`;

        frac_rangees = frac.sortFractions(
          pb_3_f[1].fractionsB.f1[0],
          pb_3_f[1].fractionsB.f1[1],
          pb_3_f[1].fractionsB.f2[0],
          pb_3_f[1].fractionsB.f2[1],
          pb_3_f[1].fractionsB.f3[0],
          pb_3_f[1].fractionsB.f3[1]
        );

        pb_3_f[1].correction += `<br>Enfin, nous pouvons ranger les fractions de l'Ã©noncÃ© et la fraction calculÃ©e dans l'ordre croissant : $\\dfrac{${frac_rangees[0]}}{${frac_rangees[1]}}$, $\\dfrac{${frac_rangees[2]}}{${frac_rangees[3]}}$, $\\dfrac{${frac_rangees[4]}}{${frac_rangees[5]}}$.`;

        pb_3_f[1].correction += `<br> ${texte_en_couleur_et_gras(
          `C'est donc ${
            pb_3_f[1].fractionsSimp[
              pb_3_f[1].fractionsSimp.indexOf(frac_rangees[4]) + 2
            ]
          } qui a Ã©tÃ© Ã©lue.`
        )}`;
      }

      //======================================================
      //======== 		AVEC 4 FRACTIONS			  	========
      //======================================================

      // le tableau d'objets contenant tout le necesssaire, fractions, Ã©noncÃ©, question ... pour les problÃ¨me avec 4 fractions
      let pb_4_f = [];
      // les numÃ©rateurs et dÃ©nominateurs des 4 fractions attention les trois premiÃ¨res doivent Ãªtre infÃ©rieures Ã  1/3 si on veut qu'elles soient toutes positives !
      // et on veut des fractions distinctes
      let nq1, nq2, nq3, nq4, dq1, dq2, dq3, dq4;
      let n4, d4; // en plus parce qu'il y a 4 fractions
      // on choisit un tableau de dÃ©nominateurs qui vont bien
      let denoms_cool_4 = denoms_amis[randint(2, denoms_amis.length - 1)];
      while (
        nq1 == nq2 ||
        nq1 == nq3 ||
        nq1 == nq4 ||
        nq2 == nq3 ||
        nq2 == nq4 ||
        nq3 == nq4 ||
        nq1 / dq1 >= 1 / 3 ||
        nq2 / dq2 >= 1 / 3 ||
        nq3 / dq3 >= 1 / 3
      ) {
        n1 = randint(1, 5);
        d1 = choice(denoms_cool_4);
        n2 = randint(1, 11, [n1]); //on Ã©vite n1 pour pouvoir retrouver le texte de la plus grande fraction
        d2 = choice(denoms_cool_4);
        n3 = randint(1, 17, [n1, n2]); //on Ã©vite n1 et n2 pour pouvoir retrouver le texte de la plus grande fraction
        d3 = choice(denoms_cool_4);
        n4 = d1 * d2 * d3 - n1 * d2 * d3 - n2 * d1 * d3 - n3 * d1 * d2; //la somme des quatre vaut 1 !
        d4 = d1 * d2 * d3;

        nq1 = frac.fraction_simplifiee(n1, d1)[0];
        dq1 = frac.fraction_simplifiee(n1, d1)[1];
        nq2 = frac.fraction_simplifiee(n2, d2)[0];
        dq2 = frac.fraction_simplifiee(n2, d2)[1];
        nq3 = frac.fraction_simplifiee(n3, d3)[0];
        dq3 = frac.fraction_simplifiee(n3, d3)[1];
        nq4 = frac.fraction_simplifiee(n4, d4)[0];
        dq4 = frac.fraction_simplifiee(n4, d4)[1];
      }

      //======================================================
      //=========== 		indice 0 le mandala		 ===========
      //======================================================
      pb_4_f.push({
        //
        prenoms: [prenom()],
        fractionsSimp: [
          nq1,
          dq1,
          "carmin",
          nq2,
          dq2,
          "ocre jaune",
          nq3,
          dq3,
          "turquoise",
          nq4,
          dq4,
          "pourpre",
        ],
        fractionsB: {
          f1: [nq1, dq1],
          cat1: "carmin",
          f2: [nq2, dq2],
          cat2: "ocre jaune",
          f3: [nq3, dq3],
          cat3: "turquoise",
          f4: [nq4, dq4],
          cat4: "pourpre",
        },
        enonce: ``,
        question: `Quelle est elle la couleur qui recouvre le plus de surface ?`,
        correction: ``,
      });

      //======================================================
      //===========		indice 1 le jardin	 	 ===========
      //======================================================
      pb_4_f.push({
        // indice 1 le jardin
        prenoms: [],
        fractionsSimp: [
          nq1,
          dq1,
          "la culture des lÃ©gumes",
          nq2,
          dq2,
          "la culture des plantes aromatiques",
          nq3,
          dq3,
          "une serre servant aux semis",
          nq4,
          dq4,
          "la culture des fraisiers",
        ],
        fractionsB: {
          f1: [nq1, dq1],
          cat1: "la culture des lÃ©gumes",
          f2: [nq2, dq2],
          cat2: "la culture des plantes aromatiques",
          f3: [nq3, dq3],
          cat3: "une serre servant aux semis",
          f4: [nq4, dq4],
          cat4: "la culture des fraisiers",
        },
        enonce: ``,
        question: `Quelle est la culture qui occupe le plus de surface ?`,
        correction: ``,
      });

      //======================================================
      //===========	indice 2 le stade		 	 ===========
      //======================================================
      pb_4_f.push({
        // indice 2 le stade
        prenoms: [],
        fractionsSimp: [
          nq1,
          dq1,
          "le pays organisateur",
          nq2,
          dq2,
          "l'ensemble des supporters des deux Ã©quipes en jeu",
          nq3,
          dq3,
          "les sponsors et officiels",
          nq4,
          dq4,
          "les places en vente libre",
        ],
        fractionsB: {
          f1: [nq1, dq1],
          cat1: "le pays organisateur",
          f2: [nq2, dq2],
          cat2: "l'ensemble des supporters des deux Ã©quipes en jeu",
          f3: [nq3, dq3],
          cat3: "les sponsors et officiels",
          f4: [nq4, dq4],
          cat4: "les places en vente libre",
        },
        enonce: ``,
        question: `Quelle est la catÃ©gorie la plus importante dans le stade ?`,
        correction: ``,
      });

      //======================================================
      //===========	Ã©noncÃ© indice 0 le mandala 	 ===========
      //======================================================
      pb_4_f[0].enonce = `${pb_4_f[0].prenoms[0]} colorie un mandala selon les proportions suivantes :  $\\dfrac{${pb_4_f[0].fractionsB.f1[0]}}{${pb_4_f[0].fractionsB.f1[1]}}$ en ${pb_4_f[0].fractionsB.cat1}, `;
      pb_4_f[0].enonce += `$\\dfrac{${pb_4_f[0].fractionsB.f2[0]}}{${pb_4_f[0].fractionsB.f2[1]}}$ en  ${pb_4_f[0].fractionsB.cat2}, `;
      pb_4_f[0].enonce += `$\\dfrac{${pb_4_f[0].fractionsB.f3[0]}}{${pb_4_f[0].fractionsB.f3[1]}}$ en  ${pb_4_f[0].fractionsB.cat3} et `;
      pb_4_f[0].enonce += `le reste en ${pb_4_f[0].fractionsB.cat4}.`;

      //======================================================
      //===========	Ã©noncÃ© indice 1 le jardin 	 ===========
      //======================================================
      pb_4_f[1].enonce = `Un jardin est amÃ©nagÃ© selon les proportions suivantes :  $\\dfrac{${pb_4_f[1].fractionsB.f1[0]}}{${pb_4_f[1].fractionsB.f1[1]}}$ par ${pb_4_f[1].fractionsB.cat1}, `;
      pb_4_f[1].enonce += `$\\dfrac{${pb_4_f[1].fractionsB.f2[0]}}{${pb_4_f[1].fractionsB.f2[1]}}$ par  ${pb_4_f[1].fractionsB.cat2}, `;
      pb_4_f[1].enonce += `$\\dfrac{${pb_4_f[1].fractionsB.f3[0]}}{${pb_4_f[1].fractionsB.f3[1]}}$ par  ${pb_4_f[1].fractionsB.cat3} et `;
      pb_4_f[1].enonce += `le reste par ${pb_4_f[1].fractionsB.cat4}.`;

      //======================================================
      //===========	Ã©noncÃ© indice 2 le stade 	 ===========
      //======================================================
      pb_4_f[2].enonce = `Pour chaque match, les places du stade sont mises en vente dans les proportions suivantes :  $\\dfrac{${pb_4_f[2].fractionsB.f1[0]}}{${pb_4_f[2].fractionsB.f1[1]}}$ pour ${pb_4_f[2].fractionsB.cat1}, `;
      pb_4_f[2].enonce += `$\\dfrac{${pb_4_f[2].fractionsB.f2[0]}}{${pb_4_f[2].fractionsB.f2[1]}}$ pour  ${pb_4_f[2].fractionsB.cat2}, `;
      pb_4_f[2].enonce += `$\\dfrac{${pb_4_f[2].fractionsB.f3[0]}}{${pb_4_f[2].fractionsB.f3[1]}}$ pour  ${pb_4_f[2].fractionsB.cat3} et `;
      pb_4_f[2].enonce += `le reste pour ${pb_4_f[2].fractionsB.cat4}.`;

      //======================================================
      //=========== 		Correction Commune  	 ===========
      //======================================================

      //let frac_meme_denom;
      for (let i = 0; i < 3; i++) {
        pb_4_f[
          i
        ].correction = `Il s'agit d'un problÃ¨me additif. Il va Ãªtre necessaire de rÃ©duire les fractions au mÃªme dÃ©nominateur pour les additionner, les soustraire ou les comparer.<br>`;

        if (!(dq1 == dq2 && dq1 == dq3)) {
          pb_4_f[i].correction += `${!(
            dq1 == dq2 && dq1 == dq3
          )} - ${dq1} - ${dq2} - ${dq3} - RÃ©duisons les fractions de l'Ã©noncÃ© au mÃªme dÃ©nominateur :  `;
          frac_meme_denom = frac.reduceSameDenominateur(
            pb_4_f[i].fractionsB.f1[0],
            pb_4_f[i].fractionsB.f1[1],
            pb_4_f[i].fractionsB.f2[0],
            pb_4_f[i].fractionsB.f2[1],
            pb_4_f[i].fractionsB.f3[0],
            pb_4_f[i].fractionsB.f3[1],
            pb_4_f[i].fractionsB.f4[0],
            pb_4_f[i].fractionsB.f4[1]
          );
          if (frac_meme_denom[1] == dq1) {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f1[0]}}{${pb_4_f[i].fractionsB.f1[1]}}$, `;
          } else {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f1[0]}}{${pb_4_f[i].fractionsB.f1[1]}} = \\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$, `;
          }
          if (frac_meme_denom[1] == dq2) {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f2[0]}}{${pb_4_f[i].fractionsB.f2[1]}}$ et `;
          } else {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f2[0]}}{${pb_4_f[i].fractionsB.f2[1]}} = \\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ et `;
          }
          if (frac_meme_denom[1] == dq3) {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f3[0]}}{${pb_4_f[i].fractionsB.f3[1]}}$.<br>`;
          } else {
            pb_4_f[
              i
            ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f3[0]}}{${pb_4_f[i].fractionsB.f3[1]}} = \\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$.<br>`;
          }
        } else {
          frac_meme_denom = frac.reduceSameDenominateur(
            pb_4_f[i].fractionsB.f1[0],
            pb_4_f[i].fractionsB.f1[1],
            pb_4_f[i].fractionsB.f2[0],
            pb_4_f[i].fractionsB.f2[1],
            pb_4_f[i].fractionsB.f3[0],
            pb_4_f[i].fractionsB.f3[1],
            pb_4_f[i].fractionsB.f4[0],
            pb_4_f[i].fractionsB.f4[1]
          );
          pb_4_f[
            i
          ].correction += `Les fractions de l'Ã©noncÃ© ont dÃ©jÃ  le mÃªme dÃ©nominateur : `;
          pb_4_f[
            i
          ].correction += `$\\dfrac{${pb_4_f[i].fractionsB.f1[0]}}{${pb_4_f[i].fractionsB.f1[1]}}$, $\\dfrac{${pb_4_f[i].fractionsB.f2[0]}}{${pb_4_f[i].fractionsB.f2[1]}}$ et $\\dfrac{${pb_4_f[i].fractionsB.f3[0]}}{${pb_4_f[i].fractionsB.f3[1]}}$.<br>`;
        }
      }

      //======================================================
      //===========	Correction indice 0 le mandala==========
      //======================================================
      pb_4_f[0].correction += `Calculons alors la fraction du mandala recouverte en `;

      //======================================================
      //===========	Correction indice 1 le jardin===========
      //======================================================
      pb_4_f[1].correction += `Calculons d'abord la fraction du jardin occupÃ©e par `;

      //======================================================
      //===========	Ã©noncÃ© indice 2 le stade 	 ===========
      //======================================================
      pb_4_f[2].correction += `Calculons d'abord la fraction du stade occupÃ©e par `;

      //======================================================
      //=========== 		Correction Commune  	 ===========
      //======================================================
      for (let i = 0; i < 3; i++) {
        pb_4_f[i].correction += `${pb_4_f[i].fractionsB.cat3} : <br>`;
        pb_4_f[
          i
        ].correction += `$1-\\dfrac{${pb_4_f[i].fractionsB.f1[0]}}{${pb_4_f[i].fractionsB.f1[1]}}-\\dfrac{${pb_4_f[i].fractionsB.f2[0]}}{${pb_4_f[i].fractionsB.f2[1]}}-\\dfrac{${pb_4_f[i].fractionsB.f3[0]}}{${pb_4_f[i].fractionsB.f3[1]}} = `;
        pb_4_f[
          i
        ].correction += `\\dfrac{${frac_meme_denom[1]}}{${frac_meme_denom[1]}}-\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}-\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}-\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}} = `;
        pb_4_f[
          i
        ].correction += `\\dfrac{${frac_meme_denom[1]}-${frac_meme_denom[0]}-${frac_meme_denom[2]}-${frac_meme_denom[4]}}{${frac_meme_denom[1]}} = `;
        pb_4_f[i].correction += `\\dfrac{${
          frac_meme_denom[1] -
          frac_meme_denom[0] -
          frac_meme_denom[2] -
          frac_meme_denom[4]
        }}{${frac_meme_denom[1]}}`;
        if (!(frac_meme_denom[1] == pb_4_f[0].fractionsB.f4[1])) {
          pb_4_f[
            i
          ].correction += ` = \\dfrac{${pb_4_f[i].fractionsB.f4[0]}}{${pb_4_f[i].fractionsB.f4[1]}}$`;
        } else {
          pb_4_f[i].correction += `$`;
        }
      }

      //======================================================
      //=========== Conclusion indice 0 le mandala ===========
      //======================================================

      pb_4_f[0].correction += `<br>Le mandala est donc coloriÃ© de la faÃ§on suivante : $\\dfrac{${pb_4_f[0].fractionsB.f1[0]}}{${pb_4_f[0].fractionsB.f1[1]}}$ en ${pb_4_f[0].fractionsB.cat1}, `;
      pb_4_f[0].correction += `$\\dfrac{${pb_4_f[0].fractionsB.f2[0]}}{${pb_4_f[0].fractionsB.f2[1]}}$ en ${pb_4_f[0].fractionsB.cat2}, `;
      pb_4_f[0].correction += `$\\dfrac{${pb_4_f[0].fractionsB.f3[0]}}{${pb_4_f[0].fractionsB.f3[1]}}$ en ${pb_4_f[0].fractionsB.cat3} et `;
      pb_4_f[0].correction += `$\\dfrac{${pb_4_f[0].fractionsB.f4[0]}}{${pb_4_f[0].fractionsB.f4[1]}}$ en ${pb_4_f[0].fractionsB.cat4}.`;

      pb_4_f[0].correction += `<br> Avec les mÃªmes dÃ©nominateurs pour pouvoir comparer, `;
      pb_4_f[0].correction += `le mandala est donc coloriÃ© de la faÃ§on suivante : $\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ en ${pb_4_f[0].fractionsB.cat1}, `;
      pb_4_f[0].correction += `$\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ en ${pb_4_f[0].fractionsB.cat2}, `;
      pb_4_f[0].correction += `$\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$ en ${pb_4_f[0].fractionsB.cat3} et `;
      pb_4_f[0].correction += `$\\dfrac{${frac_meme_denom[6]}}{${frac_meme_denom[7]}}$ en ${pb_4_f[0].fractionsB.cat4}.`;

      //let frac_rangees,frac_meme_denom_rangees;
      if (
        calcul(nq1 / dq1) == calcul(nq2 / dq2) &&
        calcul(nq1 / dq1) == calcul(nq3 / dq3) &&
        calcul(nq1 / dq1) == calcul(nq4 / dq4)
      ) {
        pb_4_f[0].correction += `<br> ${texte_en_couleur_et_gras(
          `Les quatre fractions sont Ã©quivalentes, ${pb_4_f[0].prenoms[0]} colorie donc la mÃªme surface avec les quatre couleurs.`
        )}`;
      } else {
        frac_meme_denom_rangees = frac.sortFractions(
          frac_meme_denom[0],
          frac_meme_denom[1],
          frac_meme_denom[2],
          frac_meme_denom[3],
          frac_meme_denom[4],
          frac_meme_denom[5],
          frac_meme_denom[6],
          frac_meme_denom[7]
        );
        pb_4_f[0].correction += `<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $\\dfrac{${frac_meme_denom_rangees[0]}}{${frac_meme_denom_rangees[1]}}$, $\\dfrac{${frac_meme_denom_rangees[2]}}{${frac_meme_denom_rangees[3]}}$, $\\dfrac{${frac_meme_denom_rangees[4]}}{${frac_meme_denom_rangees[5]}}$, $\\dfrac{${frac_meme_denom_rangees[6]}}{${frac_meme_denom_rangees[7]}}$.`;

        frac_rangees = frac.sortFractions(
          pb_4_f[0].fractionsB.f1[0],
          pb_4_f[0].fractionsB.f1[1],
          pb_4_f[0].fractionsB.f2[0],
          pb_4_f[0].fractionsB.f2[1],
          pb_4_f[0].fractionsB.f3[0],
          pb_4_f[0].fractionsB.f3[1],
          pb_4_f[0].fractionsB.f4[0],
          pb_4_f[0].fractionsB.f4[1]
        );

        pb_4_f[0].correction += `<br>Enfin, nous pouvons ranger les fractions de l'Ã©noncÃ© et la fraction calculÃ©e dans l'ordre croissant : $\\dfrac{${frac_rangees[0]}}{${frac_rangees[1]}}$, $\\dfrac{${frac_rangees[2]}}{${frac_rangees[3]}}$, $\\dfrac{${frac_rangees[4]}}{${frac_rangees[5]}}$, $\\dfrac{${frac_rangees[6]}}{${frac_rangees[7]}}$.`;

        pb_4_f[0].correction += `<br> ${texte_en_couleur_et_gras(
          `C'est donc en ${
            pb_4_f[0].fractionsSimp[
              pb_4_f[0].fractionsSimp.indexOf(frac_rangees[6]) + 2
            ]
          } que le mandala est le plus recouvert.`
        )}`;
      }

      //======================================================
      //=========== Conclusion indice 1 le jardin	 ===========
      //======================================================
      pb_4_f[1].correction += `<br>Le jardin est donc occupÃ© de la faÃ§on suivante : $\\dfrac{${pb_4_f[1].fractionsB.f1[0]}}{${pb_4_f[1].fractionsB.f1[1]}}$ par ${pb_4_f[1].fractionsB.cat1}, `;
      pb_4_f[1].correction += `$\\dfrac{${pb_4_f[1].fractionsB.f2[0]}}{${pb_4_f[1].fractionsB.f2[1]}}$ par ${pb_4_f[1].fractionsB.cat2}, `;
      pb_4_f[1].correction += `$\\dfrac{${pb_4_f[1].fractionsB.f3[0]}}{${pb_4_f[1].fractionsB.f3[1]}}$ par ${pb_4_f[1].fractionsB.cat3} et `;
      pb_4_f[1].correction += `$\\dfrac{${pb_4_f[1].fractionsB.f4[0]}}{${pb_4_f[1].fractionsB.f4[1]}}$ par ${pb_4_f[1].fractionsB.cat4}.`;

      pb_4_f[1].correction += `<br> Avec les mÃªmes dÃ©nominateurs pour pouvoir comparer, `;
      pb_4_f[1].correction += `le jardin est donc occupÃ© de la faÃ§on suivante : $\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ par ${pb_4_f[1].fractionsB.cat1}, `;
      pb_4_f[1].correction += `$\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ par ${pb_4_f[1].fractionsB.cat2}, `;
      pb_4_f[1].correction += `$\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$ par ${pb_4_f[1].fractionsB.cat3} et `;
      pb_4_f[1].correction += `$\\dfrac{${frac_meme_denom[6]}}{${frac_meme_denom[7]}}$ par ${pb_4_f[1].fractionsB.cat4}.`;

      //let frac_rangees,frac_meme_denom_rangees;
      if (
        calcul(nq1 / dq1) == calcul(nq2 / dq2) &&
        calcul(nq1 / dq1) == calcul(nq3 / dq3) &&
        calcul(nq1 / dq1) == calcul(nq4 / dq4)
      ) {
        pb_4_f[1].correction += `<br> ${texte_en_couleur_et_gras(
          `Les quatre fractions sont Ã©quivalentes, la mÃªme surface du jardin est donc occupÃ©e par les quatre cultures.`
        )}`;
      } else {
        frac_meme_denom_rangees = frac.sortFractions(
          frac_meme_denom[0],
          frac_meme_denom[1],
          frac_meme_denom[2],
          frac_meme_denom[3],
          frac_meme_denom[4],
          frac_meme_denom[5],
          frac_meme_denom[6],
          frac_meme_denom[7]
        );
        pb_4_f[1].correction += `<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $\\dfrac{${frac_meme_denom_rangees[0]}}{${frac_meme_denom_rangees[1]}}$, $\\dfrac{${frac_meme_denom_rangees[2]}}{${frac_meme_denom_rangees[3]}}$, $\\dfrac{${frac_meme_denom_rangees[4]}}{${frac_meme_denom_rangees[5]}}$, $\\dfrac{${frac_meme_denom_rangees[6]}}{${frac_meme_denom_rangees[7]}}$.`;

        frac_rangees = frac.sortFractions(
          pb_4_f[1].fractionsB.f1[0],
          pb_4_f[1].fractionsB.f1[1],
          pb_4_f[1].fractionsB.f2[0],
          pb_4_f[1].fractionsB.f2[1],
          pb_4_f[1].fractionsB.f3[0],
          pb_4_f[1].fractionsB.f3[1],
          pb_4_f[1].fractionsB.f4[0],
          pb_4_f[1].fractionsB.f4[1]
        );

        pb_4_f[1].correction += `<br>Enfin, nous pouvons ranger les fractions de l'Ã©noncÃ© et la fraction calculÃ©e dans l'ordre croissant : $\\dfrac{${frac_rangees[0]}}{${frac_rangees[1]}}$, $\\dfrac{${frac_rangees[2]}}{${frac_rangees[3]}}$, $\\dfrac{${frac_rangees[4]}}{${frac_rangees[5]}}$, $\\dfrac{${frac_rangees[6]}}{${frac_rangees[7]}}$.`;

        pb_4_f[1].correction += `<br> ${texte_en_couleur_et_gras(
          `C'est donc par ${
            pb_4_f[1].fractionsSimp[
              pb_4_f[1].fractionsSimp.indexOf(frac_rangees[6]) + 2
            ]
          } que le jardin est le plus occupÃ©.`
        )}`;
      }

      //======================================================
      //=========== Conclusion indice 2 le stade	 ===========
      //======================================================
      pb_4_f[2].correction += `<br>Le stade est donc occupÃ© de la faÃ§on suivante : $\\dfrac{${pb_4_f[2].fractionsB.f1[0]}}{${pb_4_f[2].fractionsB.f1[1]}}$ pour ${pb_4_f[2].fractionsB.cat1}, `;
      pb_4_f[2].correction += `$\\dfrac{${pb_4_f[2].fractionsB.f2[0]}}{${pb_4_f[2].fractionsB.f2[1]}}$ pour ${pb_4_f[2].fractionsB.cat2}, `;
      pb_4_f[2].correction += `$\\dfrac{${pb_4_f[2].fractionsB.f3[0]}}{${pb_4_f[2].fractionsB.f3[1]}}$ pour ${pb_4_f[2].fractionsB.cat3} et `;
      pb_4_f[2].correction += `$\\dfrac{${pb_4_f[2].fractionsB.f4[0]}}{${pb_4_f[2].fractionsB.f4[1]}}$ pour ${pb_4_f[2].fractionsB.cat4}.`;

      pb_4_f[2].correction += `<br> Avec les mÃªmes dÃ©nominateurs pour pouvoir comparer, `;
      pb_4_f[2].correction += `le stade est donc occupÃ© de la faÃ§on suivante : $\\dfrac{${frac_meme_denom[0]}}{${frac_meme_denom[1]}}$ pour ${pb_4_f[2].fractionsB.cat1}, `;
      pb_4_f[2].correction += `$\\dfrac{${frac_meme_denom[2]}}{${frac_meme_denom[3]}}$ pour ${pb_4_f[2].fractionsB.cat2}, `;
      pb_4_f[2].correction += `$\\dfrac{${frac_meme_denom[4]}}{${frac_meme_denom[5]}}$ pour ${pb_4_f[2].fractionsB.cat3} et `;
      pb_4_f[2].correction += `$\\dfrac{${frac_meme_denom[6]}}{${frac_meme_denom[7]}}$ pour ${pb_4_f[2].fractionsB.cat4}.`;

      //let frac_rangees,frac_meme_denom_rangees;
      if (
        calcul(nq1 / dq1) == calcul(nq2 / dq2) &&
        calcul(nq1 / dq1) == calcul(nq3 / dq3) &&
        calcul(nq1 / dq1) == calcul(nq4 / dq4)
      ) {
        pb_4_f[2].correction += `<br> ${texte_en_couleur_et_gras(
          `Les quatre fractions sont Ã©quivalentes, chaque catÃ©gorie a donc la mÃªme importance dans le stade.`
        )}`;
      } else {
        frac_meme_denom_rangees = frac.sortFractions(
          frac_meme_denom[0],
          frac_meme_denom[1],
          frac_meme_denom[2],
          frac_meme_denom[3],
          frac_meme_denom[4],
          frac_meme_denom[5],
          frac_meme_denom[6],
          frac_meme_denom[7]
        );
        pb_4_f[2].correction += `<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $\\dfrac{${frac_meme_denom_rangees[0]}}{${frac_meme_denom_rangees[1]}}$, $\\dfrac{${frac_meme_denom_rangees[2]}}{${frac_meme_denom_rangees[3]}}$, $\\dfrac{${frac_meme_denom_rangees[4]}}{${frac_meme_denom_rangees[5]}}$, $\\dfrac{${frac_meme_denom_rangees[6]}}{${frac_meme_denom_rangees[7]}}$.`;

        frac_rangees = frac.sortFractions(
          pb_4_f[2].fractionsB.f1[0],
          pb_4_f[2].fractionsB.f1[1],
          pb_4_f[2].fractionsB.f2[0],
          pb_4_f[2].fractionsB.f2[1],
          pb_4_f[2].fractionsB.f3[0],
          pb_4_f[2].fractionsB.f3[1],
          pb_4_f[2].fractionsB.f4[0],
          pb_4_f[2].fractionsB.f4[1]
        );

        pb_4_f[2].correction += `<br>Enfin, nous pouvons ranger les fractions de l'Ã©noncÃ© et la fraction calculÃ©e dans l'ordre croissant : $\\dfrac{${frac_rangees[0]}}{${frac_rangees[1]}}$, $\\dfrac{${frac_rangees[2]}}{${frac_rangees[3]}}$, $\\dfrac{${frac_rangees[4]}}{${frac_rangees[5]}}$, $\\dfrac{${frac_rangees[6]}}{${frac_rangees[7]}}$.`;

        pb_4_f[2].correction += `<br> ${texte_en_couleur_et_gras(
          `C'est donc pour ${
            pb_4_f[2].fractionsSimp[
              pb_4_f[2].fractionsSimp.indexOf(frac_rangees[6]) + 2
            ]
          } que le nombre de places est le plus important.`
        )}`;
      }

      switch (liste_type_de_questions[i]) {
        case 1: // Triathlon des neiges --> VTT, ski de fond, course
          texte = `${pb_3_f[0].enonce} <br> ${pb_3_f[0].question}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> ${pb_3_f[0].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${pb_3_f[0].correction}`;
          }
          break;
        case 2: //Miss Math --> NoÃ©mie, Samia, Alexia
          texte = `${pb_3_f[1].enonce} <br> ${pb_3_f[1].question}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> ${pb_3_f[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${pb_3_f[1].correction}`;
          }
          break;
        case 3: // Mandala --> carmin, ocre jaune, turquoise, pourpre
          texte = `${pb_4_f[0].enonce} <br> ${pb_4_f[0].question}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> ${pb_4_f[0].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${pb_4_f[0].correction}`;
          }
          break;
        case 4: // Jardin --> lÃ©gumes, plantes aromatiques, semis, fraisiers
          texte = `${pb_4_f[1].enonce} <br> ${pb_4_f[1].question}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> ${pb_4_f[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${pb_4_f[1].correction}`;
          }
          break;
        case 5: // Stade --> pays organisatuers, supporters, sponsors, vente libre
          texte = `${pb_4_f[2].enonce} <br> ${pb_4_f[2].question}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> ${pb_4_f[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${pb_4_f[2].correction}`;
          }
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',4,"1 : nombre enier positif\n2 : nombre dÃ©cimal positif\n3 : nombre enier positif infÃ©rieur Ã  un\n4 : MÃ©lange"];
}

/**
 * ProblÃ¨me avec lecture de reprÃ©sentation graphique d'une fonction
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 4F12
 */
function Exploiter_representation_graphique() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "ProblÃ¨me s'appuyant sur la lecture d'une reprÃ©sentation graphique";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions_modifiable = false;
  this.sup = 4;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_probleme
    if (this.sup==1){
      type_de_probleme = "projectile"
    }
    if (this.sup==2){
      type_de_probleme = "velo"
    }
    if (this.sup==3){
      type_de_probleme = "temperature"
    }
    if (this.sup==4){
      type_de_probleme = choice(["temperature","projectile","velo"]);
    }
    let a, b, c, d, f, t1, t2, l1, l2, l3, g1, g2, r, graphique, texte1, texte2;
    switch (type_de_probleme) {
      case "projectile":
        // Parabole qui a pour zÃ©ro, 0 et 6,8 ou 10
        // Et qui a pour maximum un multiple de 5
        t1 = choice([6, 8, 10]);
        a = (1 / ((-t1 / 2) * (t1 / 2 - t1))) * choice([10, 15, 20, 25, 30]); // on divise par l'image du max et on multiplie par la valeur souhaitÃ©e
        f = (x) => calcul(-a * x * (x - t1));

        // Mettre des dixiÃ¨mes de secondes Ã  la place des secondes
        let xscale = choice([1, 0.1]);
        g1 = grille(-1, -1, t1 + 2, 8);
        g1.color = "black";
        g1.opacite = 1;
        g2 = grille(-1, -1, t1 + 2, 8, "gray", 0.2, 0.2);
        g3 = axes(0, 0, t1 + 1, 8);
        texte1 = texteParPosition("hauteur (en mÃ¨tre)", 0.2, 7.3, "droite");
        l1 = labelX(0, calcul((t1 + 1)*xscale), 1, "black", -0.6, xscale);
        l2 = labelY(5, 35, 1, "black", -0.6, 5);
        graphique = courbe(f, 0, t1, "blue", 2, [1,5]);
        texte2 = texteParPosition("temps (en s)", t1 + 0.5, 0.4, "droite");

        this.introduction =
          "On a reprÃ©sentÃ© ci-dessous lâÃ©volution de la hauteur dâun projectile lancÃ© depuis le sol (en mÃ¨tre) en fonction du temps (en seconde).";

        this.introduction +=
          "<br><br>" +
          mathalea2d(
            {
              xmin: -1,
              ymin: -1,
              xmax: t1 + 3,
              ymax: 8,
              pixelsParCm: 30,
              scale : .6,
            },
            g1,
            g2,
            g3,
            graphique,
            texte1,
            texte2,
            l1,
            l2
          );

        this.introduction +=
          "<br><br>" +
          "Ã lâaide de ce graphique, rÃ©pondre aux questions suivantes :";

        this.liste_questions.push(
          "Au bout de combien de temps le projectile retombe-t-il au sol ?"
        );
        this.liste_corrections.push(
          `Au bout de ${tex_nombrec(
            t1 * xscale
          )} s, le projectile retombe au sol car la courbe passe par le point de coordonnÃ©es $(${tex_nombrec(
            t1 * xscale
          )}~;~0)$.`
        );

        this.liste_questions.push(
          "Quelle est la hauteur maximale atteinte par le projectile ?"
        );
        this.liste_corrections.push(
          `Le point le plus haut de la courbe a pour abscisse $${tex_nombrec(
            (t1 / 2) * xscale
          )}$ et pour ordonnÃ©e $${f(
            t1 / 2
          )}$ donc la hauteur maximale est de $${f(t1 / 2)}$ m.`
        );

        break;
        case 'velo' : 
				let v1 = randint(1,4)
				let v2 = randint(1,3,v1)
				let v3 = v1+v2
				g1 = grille(-1,-1,6,8)
				g1.color = 'black'
				g1.opacite = 1
				g2 = grille(-1,-1,6,8,'gray',.2,.2)
				g3 = axes(0,0,6,7)
				texte1 = texteParPosition('distance (en km)',0.2,7.3,'droite')
				l1 = labelX(0,50,1,'black',-.6,10)
        l2 = labelY(1,6,1,'black',-.6,1)
				texte2 = texteParPosition('temps (en min)',6.5,0.4,'droite')
				let situation = randint(1,3)
				let tempsPause
				let periodeRapide
				if (situation==1){
					l = polyline(point(0,0),point(1,v1),point(2,v1+v2),point(3,v1+v2),point(4,0))
					tempsPause = 20
					periodeRapide = 'de la 20e Ã  la 30e minute'
				}
				if (situation==2){
					l = polyline(point(0,0),point(1,v3),point(2,v3),point(3,v2),point(4,0))
					tempsPause = 10
					periodeRapide = 'durant les 10 premiÃ¨res minutes'

				}
				if (situation==3){
					l = polyline(point(0,0),point(1,v3),point(2,v2),point(3,v2),point(4,0))
					tempsPause = 20
					periodeRapide = 'durant les 10 premiÃ¨res minutes'
				}
				l.epaisseur=2
				l.color = 'blue'

				fille = prenomF()
				this.introduction = `${fille} fait du vÃ©lo avec son smartphone sur une voie-verte rectiligne qui part de chez elle. Une application lui permet de voir Ã  quelle distance de chez elle, elle se trouve.`

				this.introduction += '<br><br>' + mathalea2d({
					xmin : -1,
					ymin : -1,
					xmax : 9,
					ymax : 8,
					pixelsParCm : 40,
				},g1,g2,g3,l,texte1,texte2,l1,l2)

				this.introduction += '<br><br>' + 'Ã lâaide de ce graphique, rÃ©pondre aux questions suivantes :'

				this.liste_questions.push('Pendant combien de temps a-t-elle fait du vÃ©lo ?')
				this.liste_corrections.push(`Elle a fait du vÃ©lo pendant 40 minutes.`)

				this.liste_questions.push('Quelle distance a-t-elle parcourue au total ?')
				this.liste_corrections.push(`Le point le plus loin de sa maison est Ã  ${v3} km et ensuite elle revient chez elle, donc la distance totale est de ${2*v3} km.`)

				this.liste_questions.push(`Que se passe-t-il aprÃ¨s ${tempsPause} minutes de vÃ©lo ?`)
				this.liste_corrections.push(`La distance reste constante alors qu'elle est sur un chemin rectiligne. Elle a donc fait une pause.`)
			
				this.liste_questions.push('Ã quel moment a-t-elle Ã©tÃ© la plus rapide ?')
				this.liste_corrections.push(`Elle a Ã©tÃ© la plus rapide ${periodeRapide} oÃ¹ elle a effectuÃ© ${v3} km en 10 minutes.`)
			

			break;
      case "temperature":
        let hmin = randint(2,4)
        let hmax = randint(12,16)
        let tmin = randint(-5,15)
        let tmax = tmin + randint(5,12)

        r = repere({
          xmin: 0,
          ymin: tmin-1,
          ymax: tmax+2,
          xmax: 24,
          xscale: 2,
          legendeX: "Heure",
          legendeY: "TempÃ©rature (en Â°C)",
        });
        graphique = courbeInterpolee(
          [
            [-2, tmin+2],
            [hmin, tmin],
            [hmax, tmax],
            [26, tmin+2],
          ],
          "blue",
          2,
          r,
          0,
          24
        );
        this.introduction =
          "On a reprÃ©sentÃ© ci-dessous lâÃ©volution de la tempÃ©rature sur une journÃ©e.";
        this.introduction +=
          "<br><br>" +
          mathalea2d(
            {
              xmin: -1,
              ymin: tmin-2.5,
              xmax: 16,
              ymax: tmax+3,
              pixelsParCm: 40,
            },
            r,
            graphique
          );

        this.introduction +=
          "<br><br>" +
          "Ã lâaide de ce graphique, rÃ©pondre aux questions suivantes :";

        this.liste_questions.push(
          "Quelle est la tempÃ©rature la plus froide de la journÃ©e ?"
        );
        this.liste_corrections.push(`La tempÃ©rature la plus basse est ${tmin}Â°C.`)

        this.liste_questions.push(
          "Quelle est la tempÃ©rature la plus chaude de la journÃ©e ?"
        );
        this.liste_corrections.push(`La tempÃ©rature la plus Ã©levÃ©e de la journÃ©e est ${tmax}Â°C.`)
        this.liste_questions.push(
          "Ã quelle heure fait-il le plus chaud ?"
        );
        this.liste_corrections.push(`C'est Ã  ${hmax} h qu'il fait le plus chaud.`)
        this.liste_questions.push(
          "Ã quelle heure fait-il le plus froid ?"
        );
        this.liste_corrections.push(`C'est Ã  ${hmin} h qu'il fait le plus froid.`)


        break;
    }

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Choix du problÃ¨me',3, "1 : Projectile\n2 : Trajet Ã  vÃ©lo\n3 : TempÃ©rature\n4 : Au hasard"];
}

/**
 * Tester si un nombre est solution d'une Ã©quation
 * * 4L14-0
 * * adaptation de l'exo 5L14 de RÃ©mi Angot
 * @author SÃ©bastien Lozano
 */
function Tester_si_un_nombre_est_solution_d_une_equation() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tester si un nombre est solution d'une Ã©quation";
  this.consigne = "";
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  //this.sup2=false;
  if (this.exo == "4L14-1") {
    this.nb_questions = 4;
  } else if (this.exo == "4L14-2") {
    this.nb_questions = 3;
  } else {
    this.nb_questions = 9;
  }

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles;
    if (this.exo == "4L14-1") {
      //type_de_questions_disponibles = [1, 2, 3, 4, 5, 8];
      type_de_questions_disponibles = [choice([1, 2]), 3,choice([4,5]), 8];
    } else if (this.exo == "4L14-2") {
      type_de_questions_disponibles = [9, 6, 7];
    } else {
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 8, 6, 7, 9];
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    //let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus
    this.consigne = `Justifier si les nombres proposÃ©s sont des solutions de l'Ã©quation donnÃ©e ou non.`;

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let a, b, c, d, x1, x2, x3;
      switch (liste_type_de_questions[i]) {
        case 1: // 3x-a=2x+b   x=a+b
          if (this.sup == 1) {
            a = randint(1, 6);
            b = randint(1, 6, [a]);
            x2 = a + b;
            x1 = randint(2, 10, [x2]);
          } else {
            a = randint(-6, 6, [0]);
            b = randint(-6, 6, [a, 0]);
            x2 = a + b;
            x1 = randint(-10, 10, [0, x2]);
          }

          texte = `$3x-${ecriture_parenthese_si_negatif(
            a
          )}=2x+${ecriture_parenthese_si_negatif(
            b
          )}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$3x-${ecriture_parenthese_si_negatif(
            a
          )}=3\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(a)}=${
            3 * x1 - a
          }$ <br> $2x+${ecriture_parenthese_si_negatif(
            b
          )}=2\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(b)}=${2 * x1 + b}$<br>`;
          texte_corr += `$${3 * x1 - a}\\not=${
            2 * x1 + b
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $3x-${ecriture_parenthese_si_negatif(
              a
            )}=2x+${ecriture_parenthese_si_negatif(b)}~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${ecriture_parenthese_si_negatif(x2)}$ : <br>`;
          texte_corr += `$3x-${ecriture_parenthese_si_negatif(
            a
          )}=3\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(a)}=${
            3 * x2 - a
          }$ <br> $2x+${ecriture_parenthese_si_negatif(
            b
          )}=2\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(b)}=${2 * x2 + b}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ est donc solution de l'Ã©quation $3x-${ecriture_parenthese_si_negatif(
              a
            )}=2x+${ecriture_parenthese_si_negatif(b)}~$`
          )}`;
          break;
        case 2: // 3x+a=5x-b   x=(a+b)/2 donc a et b impairs pour une solution entiÃ¨re
          if (this.sup == 1) {
            a = randint(1, 9);
            b = randint(0, 4) * 2 + (a % 2);
            x1 = parseInt(Algebrite.eval((a + b) / 2));
            x2 = randint(1, 9, x1);
          } else {
            a = randint(-9, 9, [0]);
            b = randint(-4, 4, [a, 0]) * 2 + (a % 2);
            x1 = parseInt(Algebrite.eval((a + b) / 2));
            x2 = randint(-9, 9, [0, x1]);
          }

          texte = `$3x+${ecriture_parenthese_si_negatif(
            a
          )}=5x-${ecriture_parenthese_si_negatif(
            b
          )}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$3x+${ecriture_parenthese_si_negatif(
            a
          )}=3\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(a)}=${
            3 * x1 + a
          }$ <br> $5x-${ecriture_parenthese_si_negatif(
            b
          )}=5\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(b)}=${5 * x1 - b}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $3x+${ecriture_parenthese_si_negatif(
              a
            )}=5x-${ecriture_parenthese_si_negatif(b)}~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$3x+${ecriture_parenthese_si_negatif(
            a
          )}=3\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(a)}=${
            3 * x2 + a
          }$ <br> $5x-${ecriture_parenthese_si_negatif(
            b
          )}=5\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(b)}=${5 * x2 - b}$<br>`;
          texte_corr += `$${3 * x2 + a}\\not=${
            5 * x2 - b
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ n'est donc pas solution de l'Ã©quation $3x+${ecriture_parenthese_si_negatif(
              a
            )}=5x-${ecriture_parenthese_si_negatif(b)}~$`
          )}`;
          break;
        case 3: // 10(x-a)=4(2x+b) x=(10a+4b)/2
          if (this.sup == 1) {
            a = randint(1, 3);
            b = randint(1, 3);
            x2 = parseInt(Algebrite.eval((10 * a + 4 * b) / 2));
            x1 = randint(1, 9, x2);
          } else {
            a = randint(-3, 3, [0]);
            b = randint(-3, 3, [0]);
            x2 = parseInt(Algebrite.eval((10 * a + 4 * b) / 2));
            x1 = randint(-9, 9, [0, x2]);
          }

          texte = `$10(x-${ecriture_parenthese_si_negatif(
            a
          )})=4(2x+${ecriture_parenthese_si_negatif(
            b
          )})~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$10(x-${ecriture_parenthese_si_negatif(
            a
          )})=10\\times (${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(a)})=10\\times ${x1 - a}=${
            10 * (x1 - a)
          }$ <br> $4(2x+${ecriture_parenthese_si_negatif(
            b
          )})=4\\times (2\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2 * x1 + b}=${
            4 * (2 * x1 + b)
          }$<br>`;
          texte_corr += `$${10 * (x1 - a)}\\not=${
            4 * (2 * x1 + b)
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $10(x-${ecriture_parenthese_si_negatif(
              a
            )})=4(2x+${ecriture_parenthese_si_negatif(b)})~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$10(x-${ecriture_parenthese_si_negatif(
            a
          )})=10\\times (${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(a)})=10\\times ${x2 - a}=${
            10 * (x2 - a)
          }$ <br> $4(2x+${ecriture_parenthese_si_negatif(
            b
          )})=4\\times (2\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2 * x2 + b}=${
            4 * (2 * x2 + b)
          }$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ est donc solution de l'Ã©quation $10(x-${ecriture_parenthese_si_negatif(
              a
            )})=4(2x+${ecriture_parenthese_si_negatif(b)})~$`
          )}`;
          break;
        case 4: // ax+b=(a+1)x-c x=b+c
          if (this.sup == 1) {
            a = randint(2, 9);
            b = randint(2, 9);
            c = randint(1, 3);
            x1 = b + c;
            x2 = randint(2, 10, x1);
          } else {
            a = randint(2, 9);
            b = randint(2, 9) * randint(-1, 1, 0);
            c = randint(1, 3) * randint(-1, 1, 0);
            x1 = b + c;
            x2 = randint(2, 10, x1) * randint(-1, 1, 0);
          }

          texte = `$${ecriture_parenthese_si_negatif(
            a
          )}x+${ecriture_parenthese_si_negatif(b)}=${
            a + 1
          }x-${ecriture_parenthese_si_negatif(
            c
          )}~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$${a}x+${ecriture_parenthese_si_negatif(
            b
          )}=${ecriture_parenthese_si_negatif(
            a
          )}\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(b)}=${a * x1 + b}$ <br> $${
            a + 1
          }x-${ecriture_parenthese_si_negatif(c)}=${
            a + 1
          }\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(c)}=${(a + 1) * x1 - c}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $${ecriture_parenthese_si_negatif(
              a
            )}x+${ecriture_parenthese_si_negatif(b)}=${
              a + 1
            }x-${ecriture_parenthese_si_negatif(c)}~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$${a}x+${ecriture_parenthese_si_negatif(
            b
          )}=${ecriture_parenthese_si_negatif(
            a
          )}\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(b)}=${a * x2 + b}$ <br> $${
            a + 1
          }x-${ecriture_parenthese_si_negatif(c)}=${
            a + 1
          }\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(c)}=${(a + 1) * x2 - c}$<br>`;
          texte_corr += `$${a * x2 + b}\\not=${
            (a + 1) * x2 - c
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $${ecriture_parenthese_si_negatif(
              a
            )}x+${ecriture_parenthese_si_negatif(b)}=${
              a + 1
            }x-${ecriture_parenthese_si_negatif(c)}~$`
          )}<br><br>`;
          break;
        case 5: // a-2x=b+2x x=(a-b)/4
          if (this.sup == 1) {
            x1 = randint(1, 9);
            b = randint(1, 9);
            a = b + 4 * x1;
            x2 = randint(1, 11, x1);
          } else {
            x1 = randint(-9, 9);
            b = randint(-9, 9, 0);
            a = b + 4 * x1;
            x2 = randint(1, 11, x1);
          }

          texte = `$${a}-2x=${b}+2x~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$${a}-2x=${a}-2\\times ${ecriture_parenthese_si_negatif(
            x1
          )}=${
            a - 2 * x1
          }$ <br> $${b}+2x=${b}+2\\times ${ecriture_parenthese_si_negatif(
            x1
          )}=${b + 2 * x1}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $${a}-2x=${b}+2x~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$${a}-2x=${a}-2\\times ${ecriture_parenthese_si_negatif(
            x2
          )}=${
            a - 2 * x2
          }$ <br> $${b}+2x=${b}+2\\times ${ecriture_parenthese_si_negatif(
            x2
          )}=${b + 2 * x2}$<br>`;
          texte_corr += `$${a - 2 * x2}\\not=${
            b + 2 * x2
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $${a}-2x=${b}+2x~$`
          )}<br><br>`;
          break;
        case 6: // ax-ab=xÂ²-bx (a-x)(x-b)=0 solutions a et b.
          if (this.sup == 1) {
            b = randint(2, 9);
            a = randint(2, 9, [b]);
            x3 = b;
            x1 = a;
            x2 = randint(1, 9, [x1, x3]);
          } else {
            a = randint(-9, 9, [0, 1]);
            b = randint(-9, 9, [0, a]);
            x1 = a;
            x3 = b;
            x2 = randint(-9, 9, [x1, x3]);
          }
          texte = `$${a}x-${ecriture_parenthese_si_negatif(
            a * b
          )}=x^2-${ecriture_parenthese_si_negatif(
            b
          )}x~$ pour $~x=${x1}~$ , pour $~x=${x2}~$ puis pour $~x=${x3}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(
            a * b
          )}=${a}\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(a * b)}=${
            a * x1 - a * b
          }$ <br> $x^2-${ecriture_parenthese_si_negatif(
            b
          )}\\times  x=${ecriture_parenthese_si_negatif(
            x1
          )}^2-${ecriture_parenthese_si_negatif(
            b
          )}\\times ${ecriture_parenthese_si_negatif(x1)}=${
            x1 * x1
          }-${ecriture_parenthese_si_negatif(b * x1)}=${x1 * x1 - b * x1}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $${a}x-${ecriture_parenthese_si_negatif(
              a * b
            )}=x^2-${ecriture_parenthese_si_negatif(b)}x~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(
            a * b
          )}=${a}\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(a * b)}=${
            a * x2 - a * b
          }$ <br> $x^2-${b}\\times  x=${ecriture_parenthese_si_negatif(
            x2
          )}^2-${ecriture_parenthese_si_negatif(
            b
          )}\\times ${ecriture_parenthese_si_negatif(x2)}=${
            x2 * x2
          }-${ecriture_parenthese_si_negatif(b * x2)}=${x2 * x2 - b * x2}$<br>`;
          texte_corr += `$${a * x2 - a * b}\\not=${
            x2 * x2 - b * x2
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ n'est donc pas solution de l'Ã©quation $${a}x-${ecriture_parenthese_si_negatif(
              a * b
            )}=x^2-${ecriture_parenthese_si_negatif(b)}x~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x3}$ : <br>`;
          texte_corr += `$${a}x-${ecriture_parenthese_si_negatif(
            a * b
          )}=${a}\\times ${ecriture_parenthese_si_negatif(
            x3
          )}-${ecriture_parenthese_si_negatif(a * b)}=${
            a * x3 - a * b
          }$ <br> $x^2-${b}\\times  x=${ecriture_parenthese_si_negatif(
            x3
          )}^2-${ecriture_parenthese_si_negatif(
            b
          )}\\times ${ecriture_parenthese_si_negatif(x3)}=${
            x3 * x3
          }-${ecriture_parenthese_si_negatif(b * x3)}=${x3 * x3 - b * x3}$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x3}$ est donc solution de l'Ã©quation $${a}x-${ecriture_parenthese_si_negatif(
              a * b
            )}=x^2-${ecriture_parenthese_si_negatif(b)}x~$`
          )}`;
          break;
        case 7: // adx-bd=acxÂ²-bcx  --- (ax-b)(d-cx)=0 solutions b/a et d/c.
          if (this.sup == 1) {
            c = randint(2, 5);
            a = randint(2, 5);
            x2 = randint(2, 6);
            x3 = randint(2, 6, x2);
            x1 = randint(1, 7, [x2, x3]);
            b = a * x2;
            d = c * x3;
          } else {
            c = randint(2, 5) * randint(-1, 1, 0);
            a = randint(2, 5) * randint(-1, 1, 0);
            x2 = randint(1, 6) * randint(-1, 1, 0);
            x3 = randint(1, 6, x2) * randint(-1, 1, 0);
            x1 = randint(1, 7, [x2, x3]) * randint(-1, 1, 0);
            b = a * x2;
            d = c * x3;
          }
          texte = `$${a * d}x-${ecriture_parenthese_si_negatif(b * d)}=${
            a * c
          }x^2-${ecriture_parenthese_si_negatif(
            b * c
          )}x~$ pour $~x=${x1}~$, pour $~x=${x2}~$ puis pour $~x=${x3}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$${a * d}x-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d
          }\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d * x1 - d * b
          }$ <br> $${a * c}x^2-${ecriture_parenthese_si_negatif(b * c)}x=${
            a * c
          }\\times ${ecriture_parenthese_si_negatif(
            x1
          )}^2-${ecriture_parenthese_si_negatif(
            b * c
          )}\\times ${ecriture_parenthese_si_negatif(x1)}=${
            a * c * x1 * x1
          }-${ecriture_parenthese_si_negatif(b * c * x1)}=${
            a * c * x1 * x1 - b * c * x1
          }$<br>`;
          texte_corr += `$${a * d * x1 - d * b}\\not=${
            a * c * x1 * x1 - b * c * x1
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $${
              a * d
            }x-${ecriture_parenthese_si_negatif(b * d)}=${
              a * c
            }x^2-${ecriture_parenthese_si_negatif(b * c)}x~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$${a * d}x-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d
          }\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d * x2 - d * b
          }$ <br> $${a * c}x^2-${ecriture_parenthese_si_negatif(b * c)}x=${
            a * c
          }\\times ${ecriture_parenthese_si_negatif(
            x2
          )}^2-${ecriture_parenthese_si_negatif(
            b * c
          )}\\times ${ecriture_parenthese_si_negatif(x2)}=${
            a * c * x2 * x2
          }-${ecriture_parenthese_si_negatif(b * c * x2)}=${
            a * c * x2 * x2 - b * c * x2
          }$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ est donc solution de l'Ã©quation $${
              a * d
            }x-${ecriture_parenthese_si_negatif(b * d)}=${
              a * c
            }x^2-${ecriture_parenthese_si_negatif(b * c)}x~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x3}$ : <br>`;
          texte_corr += `$${a * d}x-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d
          }\\times ${ecriture_parenthese_si_negatif(
            x3
          )}-${ecriture_parenthese_si_negatif(b * d)}=${
            a * d * x3 - d * b
          }$ <br> $${a * c}x^2-${ecriture_parenthese_si_negatif(b * c)}x=${
            a * c
          }\\times ${ecriture_parenthese_si_negatif(
            x3
          )}^2-${ecriture_parenthese_si_negatif(
            b * c
          )}\\times ${ecriture_parenthese_si_negatif(x3)}=${
            a * c * x3 * x3
          }-${ecriture_parenthese_si_negatif(b * c * x3)}=${
            a * c * x3 * x3 - b * c * x3
          }$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x3}$ est donc solution de l'Ã©quation $${
              a * d
            }x-${ecriture_parenthese_si_negatif(b * d)}=${
              a * c
            }x^2-${ecriture_parenthese_si_negatif(b * c)}x~$`
          )}`;
          break;
        case 8: // 12x-4a=4(2x+b) x=(4a+4b)/4
          if (this.sup == 1) {
            a = randint(1, 3);
            b = randint(1, 3);
            x2 = parseInt(Algebrite.eval((4 * a + 4 * b) / 4));
            x1 = randint(9, x2);
          } else {
            a = randint(-3, 3, [0]);
            b = randint(-3, 3, [0]);
            x2 = parseInt(Algebrite.eval((4 * a + 4 * b) / 4));
            x1 = randint(-9, 9, [0, x2]);
          }

          texte = `$12x-${ecriture_parenthese_si_negatif(
            4 * a
          )}=4(2x+${ecriture_parenthese_si_negatif(
            b
          )})~$ pour $~x=${x1}~$ puis pour $~x=${x2}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$12x-${ecriture_parenthese_si_negatif(
            4 * a
          )}=12\\times ${ecriture_parenthese_si_negatif(
            x1
          )}-${ecriture_parenthese_si_negatif(4 * a)}=${
            12 * x1 - 4 * a
          }$ <br> $4(2x+${ecriture_parenthese_si_negatif(
            b
          )})=4\\times (2\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2 * x1 + b}=${
            4 * (2 * x1 + b)
          }$<br>`;
          texte_corr += `$${12 * x1 - 4 * a}\\not=${
            4 * (2 * x1 + b)
          }$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ n'est donc pas solution de l'Ã©quation $12x-${ecriture_parenthese_si_negatif(
              4 * a
            )}=4(2x+${ecriture_parenthese_si_negatif(b)})~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$12x-${ecriture_parenthese_si_negatif(
            4 * a
          )}=12\\times ${ecriture_parenthese_si_negatif(
            x2
          )}-${ecriture_parenthese_si_negatif(4 * a)}=${
            12 * x2 - 4 * a
          }$ <br> $4(2x+${ecriture_parenthese_si_negatif(
            b
          )})=4\\times (2\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(b)})=4\\times ${2 * x2 + b}=${
            4 * (2 * x2 + b)
          }$<br>`;
          texte_corr += `On trouve le mÃªme rÃ©sultat pour le membre de gauche et pour le membre de droite donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $12x-${ecriture_parenthese_si_negatif(
              4 * a
            )}=4(2x+${ecriture_parenthese_si_negatif(b)})~$`
          )}<br><br>`;
          break;
        case 9: // xÂ²-bx-ax+ab=0 (a-x)(x-b)=0 solutions a et b.
          if (this.sup == 1) {
            b = randint(2, 9);
            a = randint(2, 9);
            x3 = b;
            x1 = a;
            x2 = randint(1, 9, [x1, x3]);
          } else {
            do {
              a = randint(-9, 9, [0, 1]);
              b = randint(-9, 9, [0, a]);
              x1 = a;
              x3 = b;
              x2 = randint(-9, 9, [x1, x3]);
            } while (a + b == 0 || a + b == 1);
          }
          texte = `$x^2-${ecriture_parenthese_si_negatif(
            b + a
          )}x-${ecriture_parenthese_si_negatif(
            a * b
          )}=0~$ pour $~x=${x1}~$ , pour $~x=${x2}~$ puis pour $~x=${x3}$`;
          texte_corr = `Pour $x=${x1}$ : <br>`;
          texte_corr += `$x^2-${ecriture_parenthese_si_negatif(
            b + a
          )}\\times  x+${ecriture_parenthese_si_negatif(
            a * b
          )}=${ecriture_parenthese_si_negatif(
            x1
          )}^2-${ecriture_parenthese_si_negatif(
            a + b
          )}\\times ${ecriture_parenthese_si_negatif(
            x1
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x1 * x1
          }-${ecriture_parenthese_si_negatif(
            (a + b) * x1
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x1 * x1 - (a + b) * x1 + a * b
          }$<br>`;
          texte_corr += `On trouve bien $0$ pour le membre de gauche donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x1}$ est donc solution de l'Ã©quation $x^2-${ecriture_parenthese_si_negatif(
              b + a
            )}x-${ecriture_parenthese_si_negatif(a * b)}=0~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x2}$ : <br>`;
          texte_corr += `$x^2-${ecriture_parenthese_si_negatif(
            b + a
          )}\\times  x+${ecriture_parenthese_si_negatif(
            a * b
          )}=${ecriture_parenthese_si_negatif(
            x2
          )}^2-${ecriture_parenthese_si_negatif(
            a + b
          )}\\times ${ecriture_parenthese_si_negatif(
            x2
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x2 * x2
          }-${ecriture_parenthese_si_negatif(
            (a + b) * x2
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x2 * x2 - (a + b) * x2 + a * b
          }$<br>`;
          texte_corr += `$${
            x2 * x2 - (a + b) * x2 + a * b
          }\\not=0$ donc l'Ã©galitÃ© n'est pas vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x2}$ n'est donc pas solution de l'Ã©quation $x^2-${ecriture_parenthese_si_negatif(
              b + a
            )}x-${ecriture_parenthese_si_negatif(a * b)}=0~$`
          )}<br><br>`;
          texte_corr += `Pour $x=${x3}$ : <br>`;
          texte_corr += `$x^2-${ecriture_parenthese_si_negatif(
            b + a
          )}\\times  x+${ecriture_parenthese_si_negatif(
            a * b
          )}=${ecriture_parenthese_si_negatif(
            x3
          )}^2-${ecriture_parenthese_si_negatif(
            a + b
          )}\\times ${ecriture_parenthese_si_negatif(
            x3
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x3 * x3
          }-${ecriture_parenthese_si_negatif(
            (a + b) * x3
          )}+${ecriture_parenthese_si_negatif(a * b)}=${
            x3 * x3 - (a + b) * x3 + a * b
          }$<br>`;
          texte_corr += `On trouve bien $0$ pour le membre de gauche donc l'Ã©galitÃ© est vraie.<br>`;
          texte_corr += `${texte_en_couleur(
            `$x=${x3}$ est donc solution de l'Ã©quation $x^2-${ecriture_parenthese_si_negatif(
              b + a
            )}x-${ecriture_parenthese_si_negatif(a * b)}=0~$`
          )}`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Entiers naturels\n2 : Entiers relatifs",
  ];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];
}

/**
 * Tester si un nombre est solution d'une Ã©quation degrÃ© 1
 * * 4L14-1
 * * adaptation de l'exo 5L14 de RÃ©mi Angot
 * @author SÃ©bastien Lozano
 */
function Tester_si_un_nombre_est_solution_d_une_equation_deg1() {
  this.exo = "4L14-1";
  Tester_si_un_nombre_est_solution_d_une_equation.call(this);
  this.titre = `Tester si un nombre est solution d'une Ã©quation du premier degrÃ©`;
}

/**
 * Tester si un nombre est solution d'une Ã©quation degrÃ© 2
 * * 4L14-2
 * * adaptation de l'exo 5L14 de RÃ©mi Angot
 * @author SÃ©bastien Lozano
 */
function Tester_si_un_nombre_est_solution_d_une_equation_deg2() {
  this.exo = "4L14-2";
  Tester_si_un_nombre_est_solution_d_une_equation.call(this);
  this.titre = `Tester si un nombre est solution d'une Ã©quation du second degrÃ©`;
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];
}

/**
 * Produire une forme littÃ©rale en introduisant une lettre pour dÃ©signer une valeur inconnue
 * * 4L13-1
 * @author SÃ©bastien Lozano
 */
function Forme_litterale_introduire_une_lettre(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 3;
	} else {
		this.nb_questions = 2;
	};	

	this.titre = "Produire une forme littÃ©rale en introduisant une lettre pour dÃ©signer une valeur inconnue";
	this.consigne = "Exprimer le prix total de l'achat, en fonction des lettres introduites dans l'Ã©noncÃ©.";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	//sortie_html? this.spacing = 3 : this.spacing = 2; 
	//sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		type_de_questions_disponibles=[1];			
		let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		//let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			
			// une fonction pour gÃ©rer le pluriel 
			function pluriel(n,obj) {
				if (n>1) {
					return obj.plur
				} else {
					return obj.sing
				};
			};
			
			// une fonction pour gÃ©rer la chaine de sortie et supprimer le coeff 1 !
			function sliceUn(n) {
				if (n==1) {
					return ``;
				} else {
					return `${n}`;
				};
			};

			// on definit un tableau de couples possibles			
			let situations = [
				{prenom:prenom(),elt1:{lettre:'c',article:'un',sing:'crayon',plur:'crayons'},elt2:{lettre:'g',article:'une',sing:'gomme',plur:'gommes'}},
				{prenom:prenom(),elt1:{lettre:'r',article:'une',sing:'rÃ¨gle',plur:'rÃ¨gles'},elt2:{lettre:'e',article:'une',sing:'Ã©querre',plur:'Ã©querres'}},
				{prenom:prenom(),elt1:{lettre:'p',article:'une',sing:'poire',plur:'poires'},elt2:{lettre:'b',article:'une',sing:'banane',plur:'bananes'}},
				{prenom:prenom(),elt1:{lettre:'c',article:'un',sing:'couteau',plur:'couteaux'},elt2:{lettre:'f',article:'une',sing:'fourchette',plur:'fourchettes'}},
				{prenom:prenom(),elt1:{lettre:'m',article:'un',sing:'marteau',plur:'marteaux'},elt2:{lettre:'e',article:'une',sing:'enclume',plur:'enclumes'}},
			]
			let enonces = [];
			let n = randint(1,6);
			let p = randint(1,6);
			let situation = situations[randint(0,situations.length-1)];
			enonces.push({
				enonce:`${situation.prenom} veut acheter ${n} ${pluriel(n,situation.elt1)} et ${p} ${pluriel(p,situation.elt2)}.
				<br>On note $${situation.elt1.lettre}$	le prix d'${situation.elt1.article} ${situation.elt1.sing} et $${situation.elt2.lettre}$	le prix d'${situation.elt2.article} ${situation.elt2.sing}.`,
				question:``,
        correction:`
        ${situation.prenom} va payer $${n}$ fois le prix d'${situation.elt1.article} ${situation.elt1.sing} et $${p}$ fois le prix d'${situation.elt2.article} ${situation.elt2.sing}.
        <br> C'est Ã  dire $${n}\\times ${situation.elt1.lettre} + ${p}\\times ${situation.elt2.lettre} = ${sliceUn(n)}${situation.elt1.lettre} + ${sliceUn(p)}${situation.elt2.lettre}$.
        <br>${texte_en_couleur(`Donc le prix total de l'achat est  $${sliceUn(n)}${situation.elt1.lettre} + ${sliceUn(p)}${situation.elt2.lettre}$.`)}
        `
			})
			switch (liste_type_de_questions[i]){
				case 1 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
					break;				
			}
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/**
 * Produire une forme littÃ©rale en introduisant une lettre pour dÃ©signer une valeur inconnue afin de mettre en Ã©quation un problÃ¨me
 * Ã  partir de figure gÃ©omÃ©triques Ã©lÃ©mentaires
 * * 4L13-0
 * @author SÃ©bastien Lozano
 */
function Mettre_en_equation_sans_resoudre(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 9;
	} else {
		this.nb_questions = 2;
	};	

	this.titre = "Mettre en Ã©quation un problÃ¨me sans objectif de rÃ©solution";
	this.consigne = "Donner une Ã©quation qui permet de rÃ©soudre le problÃ¨me.<br>On ne demande pas de rÃ©soudre l'Ã©quation.";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	//sortie_html? this.spacing = 3 : this.spacing = 2; 
	//sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1,2];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		type_de_questions_disponibles=[1];			

		let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		//let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
			
      // une fonction pour dire le nom du polygone
      function myPolyName(n) {
        let sortie = {
          article:``,
          name: ``,
          nameParSommets: ``,
        };
        switch (n) {
          case 3:
            sortie.article = `du `;
            sortie.name = `triangle Ã©quilatÃ©ral`;
            sortie.nameParSommets = `ABC`;
            break;
          case 4:
            sortie.article = `du `;
            sortie.name = `carrÃ©`;
            sortie.nameParSommets = `ABCD`;
            break;
          case 5:
            sortie.article = `du `;
            sortie.name = `pentagone rÃ©gulier`;
            sortie.nameParSommets = `ABCDE`;
            break;
          case 6:
            sortie.article = `de l'`;
            sortie.name = `hexagone rÃ©gulier`;
            sortie.nameParSommets = `ABCDEF`;
            break;
          case 7:
            sortie.article = `de l'`;
            sortie.name = `heptagone rÃ©gulier`;
            sortie.nameParSommets = `ABCDEFG`;
            break;
          case 8:
            sortie.article = `de l'`;
            sortie.name = `octogone rÃ©gulier`;
            sortie.nameParSommets = `ABCDEFGH`;
            break;
        }
        return sortie;
      }

      // on choisit le nombre de cÃ´tÃ©s su polygone
      let n = randint(3, 8);
      //on choisit un nom pour la variable
      let variables = ['t','u','v','w','y','z'];
      let inc = variables[randint(0,variables.length-1)];
      //on choisit une unitÃ©
      let unites = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
      let unite = unites[randint(0, unites.length - 1)];
      //on prÃ©pare le polygone
      let po = polygoneRegulierParCentreEtRayon(point(0, 0), 4, n);
      po.opacite = 0.5;
      po.epaisseur = 2;
      //on pÃ©pare la cÃ´te
      let s = segment(po.listePoints[0], po.listePoints[1]);
      s.styleExtremites = `<->`;
      // on fait un test pour coder les angles droits du carrÃ©
      let anglesDroitsIfIsCarre;
      if (n==4) {
        anglesDroitsIfIsCarre = codageCarre(po)
      } else {
         anglesDroitsIfIsCarre= {}
      };
      // on finit les appels
      let mesAppels = [
        po,       
        codeSegments('X','blue',po.listePoints),        
        afficheCoteSegment(s,`${inc}`,1,'red',2,0.5,'black'),
        nommePolygone(po,myPolyName(n).nameParSommets),
        anglesDroitsIfIsCarre  
      ];
      // on prÃ©pare l'objet polygone
      let polygone = {
        nb_cotes: n,
        unite: unite,
        article:myPolyName(n).article,
        nom: myPolyName(n).name,
        let_cote: inc,
        perimetre: randint(200, 500),
        fig: mathalea2d(
          {
          xmin : -7,
          ymin : -5,
          xmax : 7,
          ymax : 5,
          pixelsParCm : 20,
          scale:0.5//0.7
          },
          mesAppels          
        )};      
      
			let enonces = [];
			enonces.push({
				enonce:`On considÃ¨re la figure suivante oÃ¹ l'unitÃ© est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimÃ©e en $${polygone.unite}$, le pÃ©rimÃ¨tre ${polygone.article}${polygone.nom} est Ã©gal Ã  $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,
				question:``,
        correction:`La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} cÃ´tÃ©s de mÃªme longueur.<br>
        Cette longueur est notÃ©e ${polygone.let_cote}, le pÃ©rimÃ¨tre de la figure, exprimÃ© en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\times$ ${polygone.let_cote}.<br>
        D'aprÃ¨s l'Ã©noncÃ©, ce pÃ©rimÃ¨tre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>
        L'Ã©quation suivante permet donc de rÃ©soudre le problÃ¨me : <br>
        ${texte_en_couleur(`$${polygone.nb_cotes}\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`
      });
      // pour Ãªtre sÃ»r d'avoir deux figures diffÃ©rentes
      let p = randint(3, 8,[n]);
      polygone.nb_cotes = p;
			enonces.push({
				enonce:`On considÃ¨re la figure suivante oÃ¹ l'unitÃ© est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimÃ©e en $${polygone.unite}$, le pÃ©rimÃ¨tre ${polygone.article}${polygone.nom} est Ã©gal Ã  $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,
				question:``,
        correction:`La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} cÃ´tÃ©s de mÃªme longueur.<br>
        Cette longueur est notÃ©e ${polygone.let_cote}, le pÃ©rimÃ¨tre de la figure, exprimÃ© en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\times$ ${polygone.let_cote}.<br>
        D'aprÃ¨s l'Ã©noncÃ©, ce pÃ©rimÃ¨tre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>
        L'Ã©quation suivante permet donc de rÃ©soudre le problÃ¨me : <br>
        ${texte_en_couleur(`$${polygone.nb_cotes}\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`
      })

			switch (liste_type_de_questions[i]){
				case 1 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          break;	
        case 2 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
					break;				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/**
 * Graphiques_et_proportionnalite
 * 4P10-1
 * @author SÃ©bastien Lozano
 */
function Graphiques_et_proportionnalite() {
  'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 2;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "RÃ©soudre un problÃ¨me de proportionnalitÃ© Ã  l'aide d'un graphique";
	this.consigne = "";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 1.5 : this.spacing = 1; 
	//sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//type_de_questions_disponibles=[1];			

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      // on prÃ©voit un peu d'alÃ©atoire pour les prix unitaires
      let pu_oranges = choice([1.2,1.4,1.6,1.8]);
      let pu_baguettes = choice([0.6,0.8,1.2]);
      // on prÃ©voit un tableau avec des situations
      let situations = [
        {lieu:`l'Ã©picerie`,prenom:prenom(),articles:`oranges`,art_articles:`d'oranges`,prix_unitaire:pu_oranges,qte:`poids`,qte_max:10,qte2:3,unite:`kg d'`,legendeX:`poids en kg`,legendeY:`prix en â¬`,fig:{},fig_corr:{}},
        {lieu:`la boulangerie`,prenom:prenom(),articles:`baguettes`,art_articles:`de baguettes`,prix_unitaire:pu_baguettes,qte:`nombre`,qte_max:10,qte2:3,unite:``,legendeX:`quantitÃ©`,legendeY:`prix en â¬`,fig:{},fig_corr:{}}
      ]
      // on en choisit une
      let situation = situations[randint(0,situations.length-1)];    
      let r;
      let xscale=1;
      let yscale=2;
      // on finit les appels
      let mesAppels = [        
        r = repere({
          xmin: 0,
          ymin: 0,
          ymax: situation.qte_max*situation.prix_unitaire+4,
          xmax: situation.qte_max,
          xscale: xscale,
          yscale:yscale,
          legendeX: situation.legendeX,
          legendeY: situation.legendeY,
          grilleSecondaireVisible: true,
          grilleSecondaireDistance : 0.2,
          positionLegendeY:[0.3,situation.qte_max*situation.prix_unitaire+4+0.4]
        }),
      ];
      let f = x => calcul(situation.prix_unitaire*x);
      mesAppels.push(f,courbe(f,0,situation.qte_max,'black',1.5,r));
      // on prÃ©pare l'objet figure
      let  fig = mathalea2d(
          {
          xmin : -xscale,
          ymin : -yscale,
          xmax : situation.qte_max/xscale+3,
          ymax : (situation.qte_max*situation.prix_unitaire+4)/2+1,
          pixelsParCm : 40
          },
          mesAppels          
      );
      situation.fig = fig;      

      // on prÃ©pare les appels supplÃ©mentaires pour la correction
      let mesAppels_corr=mesAppels;
      let A = point(situation.qte_max,0);
      let B = point(situation.qte_max,calcul(situation.qte_max*situation.prix_unitaire/yscale));
      let s1 = segment(A,B,"red");
      s1.epaisseur = 2;
      s1.pointilles = true;
      s1.styleExtremites = `->`;
      let C = point(0,calcul(situation.qte_max*situation.prix_unitaire/yscale));
      let s2 = segment(B,C,"red");
      s2.epaisseur = 2;
      s2.pointilles = true;
      s2.styleExtremites = `->`;

      let D = point(situation.qte2,0);
      let E = point(situation.qte2,calcul(situation.qte2*situation.prix_unitaire/yscale));
      let s3 = segment(D,E,"blue");
      s3.epaisseur = 2;
      s3.pointilles = true;
      s3.styleExtremites = `->`;
      let F = point(0,calcul(situation.qte2*situation.prix_unitaire/yscale));
      let s4 = segment(E,F,"blue");
      s4.epaisseur = 2;
      s4.pointilles = true;
      s4.styleExtremites = `->`;

      // on ajoute les appels pour la correction
      mesAppels_corr.push(
        s1,
        s2,
        s3,
        s4        
      )

      // on prÃ©pare l'objet figure correction
      let  fig_corr = mathalea2d(
        {
        xmin : -xscale,
        ymin : -yscale,
        xmax : situation.qte_max/xscale+3,
        ymax : (situation.qte_max*situation.prix_unitaire+4)/2+1,
        pixelsParCm : 40
        },
        mesAppels_corr          
      );
      situation.fig_corr = fig_corr;

   

      // un compteur pour les sous-questions
      let k=0;
      let k_corr=0;

			let enonces = [];
			enonces.push({
        enonce:`
          Ã ${situation.lieu}, ${situation.prenom} utilise le graphique ci-dessous pour indiquer le prix de ses ${situation.articles} en fonction du ${situation.qte} ${situation.art_articles}.
          <br>${situation.fig}
          <br> ${num_alpha(k++)} Justifier que c'est une situation de proportionnalitÃ© Ã  l'aide du graphique.
          <br> ${num_alpha(k++)} Quel est le prix de $${situation.qte_max}$ ${situation.unite}  ${situation.articles}?
          <br> ${num_alpha(k++)} Quel est le prix de $${situation.qte2}$ ${situation.unite}  ${situation.articles}?
          `,
				//question:``,
        correction:`
        <br> ${num_alpha(k_corr++)} Ce graphique est une droite qui passe par l'origine.
        <br> ${texte_en_couleur(`C'est donc bien le graphique d'une situation de proportionnalitÃ©.`)}

        <br> ${num_alpha(k_corr++)} Par lecture graphique, en utilisant les pointillÃ©s rouges du graphe ci-dessous, ${texte_en_couleur(`$${situation.qte_max}$ ${situation.unite}  ${situation.articles} coÃ»tent $${tex_prix(calcul(situation.qte_max*situation.prix_unitaire))}$ â¬.`)}
        <br> ${situation.fig_corr}
        <br> ${num_alpha(k_corr++)} Pour $${situation.qte2}$ ${situation.unite}  ${situation.articles}, la lecture graphique est moins facile, nous allons dÃ©tailler deux mÃ©thodes.
        <br><br> ${texte_gras(`PremiÃ¨re mÃ©thode par lecture graphique :`)} 
        <br> Il faut prendre en compte que chaque petit carreau reprÃ©sente $${tex_prix(0.4)}$ â¬ et utiliser les pointillÃ©s bleus.
        <br><br> ${texte_gras(`Seconde mÃ©thode en calculant une quatriÃ¨me proportionnelle :`)}
        <br> $${situation.qte_max}$ ${situation.unite}  ${situation.articles} coÃ»tent $${tex_prix(calcul(situation.qte_max*situation.prix_unitaire))}$ â¬
        donc $${situation.qte2}$ ${situation.unite}  ${situation.articles} coÃ»tent : <br> $(${tex_prix(calcul(situation.qte_max*situation.prix_unitaire))}$ â¬ $\\div ${situation.qte_max}$ ${situation.articles} $)\\times (${situation.qte2}$ ${situation.articles})  $= ${tex_prix(calcul(situation.qte2*situation.prix_unitaire))}$ â¬
        <br><br>${texte_en_couleur(`Quelle que soit la mÃ©thode utilisÃ©e, ${situation.qte2} ${situation.unite}  ${situation.articles} coÃ»tent $${tex_prix(calcul(situation.qte2*situation.prix_unitaire))}$ â¬.`)}
        `
			})
			switch (liste_type_de_questions[i]){
				case 1 : 
          texte = `${enonces[0].enonce}`;
          //texte = `${fig}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
					break;				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	  
}

/** 
 * * Trouver l'erreur dans une equation
 * * 4L15-0
 * @author SÃ©bastien Lozano
 */
function Trouver_erreur_resol_eq_deg1(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 5;
	} else {
		this.nb_questions = 3;
	};	

	this.titre = "Trouver l'erreur dans une rÃ©solution d'Ã©quation du premier degrÃ©";
	this.consigne = "Trouver l'erreur dans les rÃ©solutions suivantes.<br>On ne demande pas de rÃ©soudre l'Ã©quation.";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	sortie_html? this.spacing = 2.5 : this.spacing = 1.5; 
	sortie_html? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1,2,3,4,5];			
		} else {
      type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),5]);
      			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//type_de_questions_disponibles=[1];			

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      //on choisit un nom pour l'inconnue
      let variables = ['x','t','u','v','w','y','z'];
      let inc = variables[randint(0,variables.length-1)];
      
      // on choisit les paramÃ¨tres
      let a = randint(-9,9,[-1,0,1]);
      let b = randint(-9,9,[-1,0,1]);
      let c = randint(-9,9,[-1,0,1,a,-a]);
      let d = randint(-9,9,[-1,0,1]);

      // une fonction pour gÃ©rer le signe
      function signeDansEq(nb) {
        if (nb > 0) {
          return {signe:`+`,operation:`soustraire`,chgt_signe:nb};
        } else {
          return {signe:``,operation:`ajouter`,chgt_signe:nb*(-1)};
        };
      };

      // une fonction pour gÃ©rer le genre du prÃ©nom et le pronom associÃ©
      function genreEtPrenom() {
        let n = randint(0,1);
        if (n==0) {
          return {prenom:prenomM(),pronom:`il`};
        } else {
          return {prenom:prenomF(),pronom:`elle`};
        };
      };

      // deux fonctionx pour conditionner la simplification d'une fraction
      function isSimp(n,d){
        if (fraction_simplifiee(n,d)[0]!=n) {
          return true;
        } else {
          return false;
        };
      };

      function simpFrac(n,d) {  
        if (isSimp(n,d)) {
          if (fraction_simplifiee(n,d)[1]==1) {
            return `$= ${fraction_simplifiee(n,d)[0]}$`;
          } else if (fraction_simplifiee(n,d)[0]==0) {  
            return `$ = 0`;
          } else {         
            return `$= \\dfrac{${fraction_simplifiee(n,d)[0]}}{${fraction_simplifiee(n,d)[1]}}$`;
          };
        } else {
          if (fraction_simplifiee(n,d)[1]==1) {
            return `$= ${fraction_simplifiee(n,d)[0]}$`;
          } else if (fraction_simplifiee(n,d)[0]==0) {  
            return `$ = 0$`;
          } else {         
            return ` `; 
          };          
        }  
      };


      let currentGenreEtPrenom = genreEtPrenom();



      // pour les situations
      let situations = [
        {//case 1 --> ax+b=d+cx  erreur Ã  l'Ã©tape 1 on passe cx de l'autre cÃ´tÃ©
          pronom:currentGenreEtPrenom.pronom,
          prenom:currentGenreEtPrenom.prenom,
          a:a,
          b:b,
          c:c,
          d:d,
          inc:inc,
          eq:`$${a}${inc} ${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc}$`,
          et1:`${texte_gras(`Ãtape 1 :`)} $${a}${inc} ${signeDansEq(c).signe} ${c}${inc} ${signeDansEq(b).signe} ${b} = ${d} $`,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          et2:`${texte_gras(`Ãtape 2 :`)} $${a}${inc} ${signeDansEq(c).signe} ${c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b} $`,
          et3:`${texte_gras(`Ãtape 3 :`)} $${a+c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b} $`,
          et4:`${texte_gras(`Ãtape 4 :`)} $${inc} = \\dfrac{${d} ${signeDansEq(-b).signe} ${-b}}{${a+c}} $`,
          et_fin:`${texte_gras(`Ãtape 5 :`)} $${inc} = \\dfrac{${d-b}}{${a+c}}$ ${simpFrac(d-b,a+c)}`,
          err:`
            L'erreur se situe Ã  l'Ã©tape 1.
            <br>${currentGenreEtPrenom.prenom} "a fait passer" le terme $${signeDansEq(c).signe} ${c}${inc}$ "de l'autre cÃ´tÃ©"
            or pour obtenir une Ã©quation Ã©quivalente, il s'agit d'opÃ©rer de la mÃªme maniÃ¨re sur les deux membres de l'Ã©quation.
            <br>Ici il faut ${signeDansEq(c).operation} $${signeDansEq(c).chgt_signe}${inc}$ aux deux membres.            
            `,
          eq_corr:`${texte_gras(`Ãquation d'origine : `)} $${a}${inc} ${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc}$`,          
          eq_corr_et1:`
          ${texte_gras(`Ãtape 1 : `)} $${mise_en_evidence(signeDansEq(c).operation)}$ $${mise_en_evidence(signeDansEq(c).chgt_signe)}$${texte_en_couleur(`$${inc}$`)} aux deux membres. 
          <br> $${a}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} $${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} 
          <br>${texte_gras(`Ãtape 2 : `)} On rÃ©duit.
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$
          `,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          eq_corr_et2:`
          ${texte_gras(`Ãtape 3 :`)} $${mise_en_evidence(signeDansEq(b).operation)}$ $${mise_en_evidence(signeDansEq(b).chgt_signe)}$ aux deux membres. 
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)} = ${d} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)}$
          <br>${texte_gras(`Ãtape 4 : `)} RÃ©duction Ã  nouveau.
          <br> $${a-c}${inc} = ${d-b}$
          `,
          eq_corr_et3:`
          ${texte_gras(`Ãtape 5 :`)} $${mise_en_evidence(`\\textbf{diviser par}`)}$ $${mise_en_evidence(a-c)}$ les deux membres.
          <br> $\\dfrac{${a-c}${inc}}{${mise_en_evidence(a-c)}} = \\dfrac{${d-b}}{${mise_en_evidence(a-c)}}$
          <br>$${inc} = \\dfrac{${d-b}}{${a-c}}$ ${simpFrac(d-b,a-c)}
          `,
        },
        {//case 2 --> ax+b=d+cx  erreur Ã  l'Ã©tape 2 on passe b de l'autre cÃ´tÃ©
          pronom:currentGenreEtPrenom.pronom,
          prenom:currentGenreEtPrenom.prenom,
          a:a,
          b:b,
          c:c,
          d:d,
          inc:inc,
          eq:`$${a}${inc} ${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc}$`,
          et1:`${texte_gras(`Ãtape 1 :`)} $${a}${inc} ${signeDansEq(-c).signe} ${-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$`,
          et2:`${texte_gras(`Ãtape 2 :`)} $${a}${inc} ${signeDansEq(-c).signe} ${-c}${inc} = ${d} ${signeDansEq(b).signe} ${b}$`,// l'erreur est lÃ  on passe de l'autre cÃ´tÃ©
          et3:`${texte_gras(`Ãtape 3 :`)} $${a-c}${inc} = ${d} ${signeDansEq(b).signe} ${b}$`,
          et4:`${texte_gras(`Ãtape 4 :`)} $${inc} = \\dfrac{${d} ${signeDansEq(b).signe} ${b}}{${a-c}} $`,
          et_fin:`${texte_gras(`Ãtape 5 :`)} $${inc} = \\dfrac{${d+b}}{${a-c}}$ ${simpFrac(d+b,a-c)}`,
          err:`
            L'erreur se situe Ã  l'Ã©tape 2.
            <br>${currentGenreEtPrenom.prenom} "a fait passer" le terme $${signeDansEq(b).signe} ${b}$ "de l'autre cÃ´tÃ©"
            or pour obtenir une Ã©quation Ã©quivalente, il s'agit d'opÃ©rer de la mÃªme maniÃ¨re sur les deux membres de l'Ã©quation.
            <br>Ici il faut ${signeDansEq(b).operation} $${signeDansEq(b).chgt_signe}$ aux deux membres.            
            `,
          eq_corr:`${texte_gras(`Ãquation d'origine : `)} $${a}${inc} ${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc}$`,          
          eq_corr_et1:`
          ${texte_gras(`Ãtape 1 :`)} $${mise_en_evidence(signeDansEq(c).operation)}$ $${mise_en_evidence(signeDansEq(c).chgt_signe)}$${texte_en_couleur(`$${inc}$`)} aux deux membres 
          <br> $${a}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} $ ${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} 
          <br>${texte_gras(`Ãtape 2 : `)} On rÃ©duit.
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$
          `,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          eq_corr_et2:`
          ${texte_gras(`Ãtape 3 :`)} $${mise_en_evidence(signeDansEq(b).operation)}$ $${mise_en_evidence(signeDansEq(b).chgt_signe)}$ aux deux membres 
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)} = ${d} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)}$
          <br>${texte_gras(`Ãtape 4 : `)} RÃ©duction Ã  nouveau.
          <br> $${a-c}${inc} = ${d-b}$
          `,
          eq_corr_et3:`
          ${texte_gras(`Ãtape 5 :`)} $${mise_en_evidence(`\\textbf{diviser par}`)}$ $${mise_en_evidence(a-c)}$ les deux membres
          <br> $\\dfrac{${a-c}${inc}}{${mise_en_evidence(a-c)}} = \\dfrac{${d-b}}{${mise_en_evidence(a-c)}}$
          <br>$${inc} = \\dfrac{${d-b}}{${a-c}}$ ${simpFrac(d-b,a-c)}
          `,
        },
        {//case 3 --> ax+b=cx+d  erreur Ã  l'Ã©tape 2 on passe cx de l'autre cÃ´tÃ©
          pronom:currentGenreEtPrenom.pronom,
          prenom:currentGenreEtPrenom.prenom,
          a:a,
          b:b,
          c:c,
          d:d,
          inc:inc,
          eq:`$${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          et1:`${texte_gras(`Ãtape 1 :`)} $${a}${inc} = ${c}${inc} ${signeDansEq(d).signe} ${d} ${signeDansEq(-b).signe} ${-b}$`,
          et2:`${texte_gras(`Ãtape 2 :`)} $${a}${inc} ${signeDansEq(c).signe} ${c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b}$`,// l'erreur est lÃ  on passe de l'autre cÃ´tÃ©
          et3:`${texte_gras(`Ãtape 3 :`)} $${a+c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b}$`,
          et4:`${texte_gras(`Ãtape 4 :`)} $${inc} = \\dfrac{${d} ${signeDansEq(-b).signe} ${-b}}{${a+c}} $`,
          et_fin:`${texte_gras(`Ãtape 5 :`)} $${inc} = \\dfrac{${d-b}}{${a+c}}$ ${simpFrac(d-b,a+c)}`,
          err:`
            L'erreur se situe Ã  l'Ã©tape 2.
            <br>${currentGenreEtPrenom.prenom} "a fait passer" le terme $${signeDansEq(c).signe} ${c}${inc}$ "de l'autre cÃ´tÃ©"
            or pour obtenir une Ã©quation Ã©quivalente, il s'agit d'opÃ©rer de la mÃªme maniÃ¨re sur les deux membres de l'Ã©quation.
            <br>Ici il faut ${signeDansEq(c).operation} $${signeDansEq(c).chgt_signe}${inc}$ aux deux membres.            
            `,
          eq_corr:`${texte_gras(`Ãquation d'origine : `)} $${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          eq_corr_et1:`
          ${texte_gras(`Ãtape 1 :`)} $${mise_en_evidence(signeDansEq(c).operation)}$ $${mise_en_evidence(signeDansEq(c).chgt_signe)}$${texte_en_couleur(`$${inc}$`)} aux deux membres 
          <br> $${a}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} $${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)}
          <br>${texte_gras(`Ãtape 2 : `)} On rÃ©duit.
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$
          `,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          eq_corr_et2:`
          ${texte_gras(`Ãtape 3 :`)} $${mise_en_evidence(signeDansEq(b).operation)}$ $${mise_en_evidence(signeDansEq(b).chgt_signe)}$ aux deux membres 
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)} = ${d} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)}$
          <br>${texte_gras(`Ãtape 4 : `)} RÃ©duction Ã  nouveau.
          <br> $${a-c}${inc} = ${d-b}$
          `,
          eq_corr_et3:`
          ${texte_gras(`Ãtape 5 :`)} $${mise_en_evidence(`\\textbf{diviser par}`)}$ $${mise_en_evidence(a-c)}$ les deux membres
          <br> $\\dfrac{${a-c}${inc}}{${mise_en_evidence(a-c)}} = \\dfrac{${d-b}}{${mise_en_evidence(a-c)}}$
          <br>$${inc} = \\dfrac{${d-b}}{${a-c}}$ ${simpFrac(d-b,a-c)}
          `,
        },
        {//case 4 --> ax+b=cx+d  erreur Ã  l'Ã©tape 1 on passe b de l'autre cÃ´tÃ©
          pronom:currentGenreEtPrenom.pronom,
          prenom:currentGenreEtPrenom.prenom,
          a:a,
          b:b,
          c:c,
          d:d,
          inc:inc,
          eq:`$${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          et1:`${texte_gras(`Ãtape 1 :`)} $${a}${inc} = ${c}${inc} ${signeDansEq(d).signe} ${d} ${signeDansEq(b).signe} ${b}$`,// l'erreur est lÃ  on passe de l'autre cÃ´tÃ©
          et2:`${texte_gras(`Ãtape 2 :`)} $${a}${inc} ${signeDansEq(-c).signe} ${-c}${inc} = ${d} ${signeDansEq(b).signe} ${b}$`,
          et3:`${texte_gras(`Ãtape 3 :`)} $${a-c}${inc} = ${d} ${signeDansEq(b).signe} ${b}$`,
          et4:`${texte_gras(`Ãtape 4 :`)} $${inc} = \\dfrac{${d} ${signeDansEq(b).signe} ${b}}{${a-c}} $`,
          et_fin:`${texte_gras(`Ãtape 5 :`)} $${inc} = \\dfrac{${d+b}}{${a-c}}$ ${simpFrac(d+b,a-c)}`,
          err:`
            L'erreur se situe Ã  l'Ã©tape 1.
            <br>${currentGenreEtPrenom.prenom} "a fait passer" le terme $${signeDansEq(b).signe} ${b}$ "de l'autre cÃ´tÃ©"
            or pour obtenir une Ã©quation Ã©quivalente, il s'agit d'opÃ©rer de la mÃªme maniÃ¨re sur les deux membres de l'Ã©quation.
            <br>Ici il faut ${signeDansEq(b).operation} $${signeDansEq(b).chgt_signe}$ aux deux membres.            
            `,
          eq_corr:`${texte_gras(`Ãquation d'origine : `)} $${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          eq_corr_et1:`
          ${texte_gras(`Ãtape 1 :`)} $${mise_en_evidence(signeDansEq(c).operation)}$ $${mise_en_evidence(signeDansEq(c).chgt_signe)}$${texte_en_couleur(`$${inc}$`)} aux deux membres 
          <br> $${a}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} $${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)}
          <br>${texte_gras(`Ãtape 2 : `)} On rÃ©duit.
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$
          `,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          eq_corr_et2:`
          ${texte_gras(`Ãtape 3 :`)} $${mise_en_evidence(signeDansEq(b).operation)}$ $${mise_en_evidence(signeDansEq(b).chgt_signe)}$ aux deux membres 
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)} = ${d} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)}$
          <br>${texte_gras(`Ãtape 4 : `)} RÃ©duction Ã  nouveau.
          <br> $${a-c}${inc} = ${d-b}$
          `,
          eq_corr_et3:`
          ${texte_gras(`Ãtape 5 :`)} $${mise_en_evidence(`\\textbf{diviser par}`)}$ $${mise_en_evidence(a-c)}$ les deux membres
          <br> $\\dfrac{${a-c}${inc}}{${mise_en_evidence(a-c)}} = \\dfrac{${d-b}}{${mise_en_evidence(a-c)}}$
          <br>$${inc} = \\dfrac{${d-b}}{${a-c}}$ ${simpFrac(d-b,a-c)}
          `,
        },
        {//case 5 --> ax+b=cx+d  erreur Ã  l'Ã©tape 4 on soustrait au lieu de diviser
          pronom:currentGenreEtPrenom.pronom,
          prenom:currentGenreEtPrenom.prenom,
          a:a,
          b:b,
          c:c,
          d:d,
          inc:inc,
          eq:`$${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          et1:`${texte_gras(`Ãtape 1 :`)} $${a}${inc} = ${c}${inc} ${signeDansEq(d).signe} ${d} ${signeDansEq(-b).signe} ${-b}$`,
          et2:`${texte_gras(`Ãtape 2 :`)} $${a}${inc} ${signeDansEq(-c).signe} ${-c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b}$`,
          et3:`${texte_gras(`Ãtape 3 :`)} $${a-c}${inc} = ${d} ${signeDansEq(-b).signe} ${-b}$`,
          et4:`${texte_gras(`Ãtape 4 :`)} $${inc} = ${d} ${signeDansEq(-b).signe} ${-b} - ${ecriture_parenthese_si_negatif(a-c)} $`,
          et_fin:`${texte_gras(`Ãtape 5 :`)} $${inc} = ${d-b-a+c}$`,
          err:`
            L'erreur se situe Ã  l'Ã©tape 4.
            <br>${currentGenreEtPrenom.prenom} soustrait le coefficient de ${inc} au lieu de diviser par ce coefficient.
            <br>Or $${a-c}${inc}$ reprÃ©sente la multiplication $${a-c}\\times ${inc}$, et l'opÃ©ration inverse de la multiplication c'est la division et non la soustraction.
            <br>Ici il faut diviser les deux membres par $${a-c}$.            
            `,
          eq_corr:`${texte_gras(`Ãquation d'origine : `)} $${a}${inc} ${signeDansEq(b).signe} ${b} = ${c}${inc} ${signeDansEq(d).signe} ${d} $`,
          eq_corr_et1:`
          ${texte_gras(`Ãtape 1 :`)} $${mise_en_evidence(signeDansEq(c).operation)}$ $${mise_en_evidence(signeDansEq(c).chgt_signe)}$${texte_en_couleur(`$${inc}$`)} aux deux membres 
          <br> $${a}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)} $${signeDansEq(b).signe} ${b} = ${d} ${signeDansEq(c).signe} ${c}${inc} ${mise_en_evidence(signeDansEq(-c).signe)} ${mise_en_evidence(-c)}$${texte_en_couleur(`$${inc}$`)}
          <br>${texte_gras(`Ãtape 2 : `)} On rÃ©duit.
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} = ${d}$
          `,// l'erreur est lÃ , on passe de l'autre cÃ´tÃ© d'oÃ¹ l'oubli du chgt de signe
          eq_corr_et2:`
          ${texte_gras(`Ãtape 3 :`)} $${mise_en_evidence(signeDansEq(b).operation)}$ $${mise_en_evidence(signeDansEq(b).chgt_signe)}$ aux deux membres 
          <br> $${a-c}${inc} ${signeDansEq(b).signe} ${b} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)} = ${d} ${mise_en_evidence(signeDansEq(-b).signe)} ${mise_en_evidence(-b)}$
          <br>${texte_gras(`Ãtape 4 : `)} RÃ©duction Ã  nouveau.
          <br> $${a-c}${inc} = ${d-b}$
          `,
          eq_corr_et3:`
          ${texte_gras(`Ãtape 5 :`)} $${mise_en_evidence(`\\textbf{diviser par}`)}$ $${mise_en_evidence(a-c)}$ les deux membres
          <br> $\\dfrac{${a-c}${inc}}{${mise_en_evidence(a-c)}} = \\dfrac{${d-b}}{${mise_en_evidence(a-c)}}$
          <br>$${inc} = \\dfrac{${d-b}}{${a-c}}$ ${simpFrac(d-b,a-c)}
          `,
        },
  
      ];



      let enonces = [];
      for (let k=0;k<5;k++) {
        enonces.push({
        enonce:`
          ${situations[k].prenom} doit rÃ©soudre l'Ã©quation suivante : ${situations[k].eq}.
          <br> VoilÃ  ce qu'${situations[k].pronom} Ã©crit :
          <br>${situations[k].et1}
          <br>${situations[k].et2}
          <br>${situations[k].et3}
          <br>${situations[k].et4}
          <br>${situations[k].et_fin}
        `,
				question:``,
        correction:`
        ${situations[k].err}
        <br>
        ${texte_gras(`=== Voici une proposition de rÃ©solution dÃ©taillÃ©e : ===`)}         
        <br>${situations[k].eq_corr}
        <br>${situations[k].eq_corr_et1}
        <br>${situations[k].eq_corr_et2}
        <br>${situations[k].eq_corr_et3}
        `
      });
    };
		
			switch (liste_type_de_questions[i]){
				case 1 : 
					texte = `${enonces[0].enonce}`;
					if (this.beta) {
						texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `
             `
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[0].correction}`;
					};
          break;	
        case 2 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
          break;
        case 3 : 
					texte = `${enonces[2].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[2].correction}`;
					};
          break;				
        case 4 : 
					texte = `${enonces[3].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[3].correction}`;
					};
					break;				
         case 5 : 
					texte = `${enonces[4].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[4].correction}`;
					};
					break;				

			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/** 
 * * Dessiner selon un programme scratch
 * * 4Algo1-0
 * @author SÃ©bastien Lozano
 */
function Tracer_avec_scratch(){
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.beta = false;	
	this.sup=1;
	if (this.beta) {
		this.nb_questions = 1;
	} else {
		this.nb_questions = 1;
	};	

	this.titre = "Dessiner avec scratch";
  //this.consigne = "Dessiner la figure qui va Ãªtre tracÃ©e avec le script fourni.";
  this.consigne = "Laquelle des 4 figures ci-dessous va Ãªtre tracÃ©e avec le script fourni ?";
	
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	//this.nb_questions_modifiable = false;
	//sortie_html? this.spacing = 3 : this.spacing = 2; 
  //sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;
  
  this.liste_packages = "scratch3";

	let type_de_questions_disponibles;	

	this.nouvelle_version = function(numero_de_l_exercice){
		if (this.beta) {
			type_de_questions_disponibles = [1];			
		} else {
			type_de_questions_disponibles = [1];			
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		
		//type_de_questions_disponibles=[1];			

		//let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		
		
		for (let i = 0, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
      // une fonction pour gÃ©rer la sortie HTML/LaTeX
      // code est un string contenant le code svg ou tikz
      function scratchblocks_Tikz(code_svg,code_tikz) {
        if (sortie_html) {
          return code_svg;
        } else {
          return code_tikz;
        };
      };

    // une fonction pour dire le nom du polygone
    function myPolyName(n) {
      let sortie = {
        name: ``,
        nameParSommets: ``,
        nb_pas:``
      };
      switch (n) {
        case 2:
          sortie.name=`segment`;
          sortie.nameParSommets = `AB`;
          sortie.nb_pas = 400;
        case 3:
          sortie.name = `triangle Ã©quilatÃ©ral`;
          sortie.nameParSommets = `ABC`;
          sortie.nb_pas = 400;
          break;
        case 4:
          sortie.name = `carrÃ©`;
          sortie.nameParSommets = `ABCD`;
          sortie.nb_pas = 400;
          break;
        case 5:
          sortie.name = `pentagone rÃ©gulier`;
          sortie.nameParSommets = `ABCDE`;
          sortie.nb_pas = 300;
          break;
        case 6:
          sortie.name = `hexagone rÃ©gulier`;
          sortie.nameParSommets = `ABCDEF`;
          sortie.nb_pas = 250;
          break;
        case 7:
          sortie.name = `heptagone rÃ©gulier`;
          sortie.nameParSommets = `ABCDEFG`;
          sortie.nb_pas = 200;
          break;
        case 8:
          sortie.name = `octogone rÃ©gulier`;
          sortie.nameParSommets = `ABCDEFGH`;
          sortie.nb_pas = 200;
          break;
        case 9:
          sortie.name = `ennÃ©agone rÃ©gulier`;
          sortie.nameParSommets = `ABCDEFGHI`;
          sortie.nb_pas = 200;
          break;

      }
      return sortie;
    }


      // on dÃ©finit le nombre de cÃ´tÃ©s du polygone rÃ©gulier
      let n = randint(3,8,[7]);

      let situations = [
        {//polygones rÃ©guliers
          nb_cotes:n,
          nom:myPolyName(n).name,
          code_svg:`
          <pre class='blocks'>
          quand le drapeau vert pressÃ©
          stylo en position d'Ã©criture
          rÃ©pÃ©ter (${n}) fois
            avancer de (${myPolyName(n).nb_pas}) pas
            tourner droite de ((360)/(${n})) degrÃ©s
          fin                  
          </pre>          
          `,
          code_tikz:`
          \\begin{scratch}
            \\blockinit{quand \\greenflag est cliquÃ©}
            \\blockpen{stylo en position dâÃ©criture}
            \\blockrepeat{rÃ©pÃ©ter \\ovalnum{${n}} fois}
              {
                \\blockmove{avancer de \\ovalnum{${myPolyName(n).nb_pas}}}
                \\blockmove{tourner \\turnright{} de \\ovaloperator{\\ovalnum{360}/\\ovalnum{${n}}} degrÃ©s}
              }
          \\end{scratch}
          `,
          fig:``,
          fig_corr:``,
        },
      ];
      // on prÃ©pare la fenetre mathalea2d
      let fenetreMathalea2D = {xmin:-4,ymin:-10,xmax:30,ymax:2,pixelsParCm:20,scale:0.5}
  //    if (sortie_html) {
        pixelsParCm = 100;
        unitesLutinParCm = 100;
      // } else {
      //   pixelsParCm = 200;
      //   unitesLutinParCm = 200;  
      // }
      // on prÃ©pare un tableau avec l'abscisse de dÃ©marrage du lutin pour tracer le figures
      // ce tableau permettra de placer alÃ©atoirement la bonne figure et de la refaire en rouge ?
      let tab_abs_dem_lutin2; 
      if (n==6) {
        tab_abs_dem_lutin2 = [0,3*myPolyName(n).nb_pas,6*myPolyName(n).nb_pas,9*myPolyName(n).nb_pas]       
      } else if (n==8) {
        tab_abs_dem_lutin2 = [0,4*myPolyName(n).nb_pas,8*myPolyName(n).nb_pas,12*myPolyName(n).nb_pas]       
      } else {
        tab_abs_dem_lutin2 = [0,2*myPolyName(n).nb_pas,4*myPolyName(n).nb_pas,6*myPolyName(n).nb_pas]       
      };
      // on mÃ©lange tout Ã§a !
      tab_abs_dem_lutin2 = shuffle(tab_abs_dem_lutin2);
      // Les figures de l'Ã©noncÃ©         
      // le lutin2  trace le cadre en pointillÃ©s
      let lutin2=creerLutin();
      lutin2.color="black";
      lutin2.pointilles=true;
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin2);
      baisseCrayon(lutin2);
      allerA(fenetreMathalea2D.xmax*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin2);
      allerA(fenetreMathalea2D.xmax*pixelsParCm,fenetreMathalea2D.ymin*pixelsParCm,lutin2);
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymin*pixelsParCm,lutin2);
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin2);
      leveCrayon(lutin2);
      //le lutin2 fait la bonne figure
      lutin2.pointilles = false;
      lutin2.color="blue";
      allerA(tab_abs_dem_lutin2[0],0,lutin2);
      baisseCrayon(lutin2);      
      for (let k=1;k<n+1; k++) {
        avance(myPolyName(n).nb_pas,lutin2);
        tournerD(calcul(360/n),lutin2);
      };
      // le lutin2 fait un polygone rÃ©gulier avec un cÃ´tÃ© de plus 
      leveCrayon(lutin2);
      allerA(tab_abs_dem_lutin2[1],0,lutin2);
      baisseCrayon(lutin2);
      for (let k=1;k<n+1+1; k++) {
        avance(myPolyName(n+1).nb_pas,lutin2);
        tournerD(calcul(360/(n+1)),lutin2);
      };

      // le lutin2 fait un polygone rÃ©gulier avec un cÃ´tÃ© de moins 
      leveCrayon(lutin2);
      allerA(tab_abs_dem_lutin2[2],0,lutin2);
      baisseCrayon(lutin2);
      for (let k=1;k<n; k++) {
        avance(myPolyName(n-1).nb_pas,lutin2);
        tournerD(calcul(360/(n-1)),lutin2);
      };

      // le lutin2 fait une figure ouverte Ã  n cÃ´tÃ©s
      leveCrayon(lutin2);
      allerA(tab_abs_dem_lutin2[3],0,lutin2);
      baisseCrayon(lutin2);
      for (let k=1;k<n+1; k++) {
        avance(myPolyName(n).nb_pas,lutin2);
        tournerD(calcul((360/n)-10),lutin2);
      };
      allerA(tab_abs_dem_lutin2[3],0,lutin2);

      let mesAppels_enonce = [
        lutin2,
      ]
      situations[0].fig = mathalea2d(
        fenetreMathalea2D,
        mesAppels_enonce
        );

      // les figures de la correction
      // le lutin3  trace le cadre
      let lutin3=creerLutin();
      lutin3.color="black";
      lutin3.pointilles=true;
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin3);
      baisseCrayon(lutin3);
      allerA(fenetreMathalea2D.xmax*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin3);
      allerA(fenetreMathalea2D.xmax*pixelsParCm,fenetreMathalea2D.ymin*pixelsParCm,lutin3);
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymin*pixelsParCm,lutin3);
      allerA(fenetreMathalea2D.xmin*pixelsParCm,fenetreMathalea2D.ymax*pixelsParCm,lutin3);
      leveCrayon(lutin3);
      // le lutin3 fait la bonne figure      
      lutin3.pointilles = false;
      lutin3.color="green"
      allerA(tab_abs_dem_lutin2[0],0,lutin3);
      baisseCrayon(lutin3);      
      for (let k=1;k<n+1; k++) {
        avance(myPolyName(n).nb_pas,lutin3);
        tournerD(calcul(360/n),lutin3);
      };
      // le lutin3 fait un polygone rÃ©gulier avec un cÃ´tÃ© de plus 
      lutin3.color="red";
      leveCrayon(lutin3);
      allerA(tab_abs_dem_lutin2[1],0,lutin3);
      baisseCrayon(lutin3);
      for (let k=1;k<n+1+1; k++) {
        avance(myPolyName(n+1).nb_pas,lutin3);
        tournerD(calcul(360/(n+1)),lutin3);
      };

      // le lutin3 fait un polygone rÃ©gulier avec un cÃ´tÃ© de moins 
      leveCrayon(lutin3);
      allerA(tab_abs_dem_lutin2[2],0,lutin3);
      baisseCrayon(lutin3);
      for (let k=1;k<n; k++) {
        avance(myPolyName(n-1).nb_pas,lutin3);
        tournerD(calcul(360/(n-1)),lutin3);
      };

      // le lutin3 fait une figure ouverte Ã  n cÃ´tÃ©s
      leveCrayon(lutin3);
      allerA(tab_abs_dem_lutin2[3],0,lutin3);
      baisseCrayon(lutin3);
      for (let k=1;k<n+1; k++) {
        avance(myPolyName(n).nb_pas,lutin3);
        tournerD(calcul((360/n)-10),lutin3);
      };
      allerA(tab_abs_dem_lutin2[3],0,lutin3);
      
      let mesAppels_corr = [
        lutin3,
      ]
      situations[0].fig_corr = mathalea2d(
        fenetreMathalea2D,
        mesAppels_corr
        );


			let enonces = [];
			enonces.push({
        enonce:`
        ${scratchblocks_Tikz(situations[0].code_svg,situations[0].code_tikz)}
        <br> 
        ${situations[0].fig}
        `,
				question:``,
        correction:`
        <br> Les figures rouges sont erronÃ©es.
        <br> La figure tracÃ©e par le programme a ${situations[0].nb_cotes} cÃ´tÃ©s de mÃªme longueur et ${situations[0].nb_cotes} angles de mÃªme mesure, c'est un ${situations[0].nom}.
        <br>${texte_en_couleur(`La bonne figure est donc la figure verte.`)}
        <br><br>
        ${situations[0].fig_corr}
        `
      });
      enonces.push({
				enonce:`Ã©noncÃ© type 2`,
				question:``,
        correction:`${texte_en_couleur(`correction type2`)}`
      });

			switch (liste_type_de_questions[i]){
				case 1 : 
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte_corr = ``;	
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;	
        case 2 : 
					texte = `${enonces[1].enonce}`;
					if (this.beta) {
						texte += `<br>`;
						texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
						texte_corr = ``;	
					} else {
						texte_corr = `${enonces[1].correction}`;
					};
					break;				
			}
			
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;	
		}
		liste_de_question_to_contenu(this);

	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
	//this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
}

/**
* Effectuer une division entre 2 nombres relatifs Ã©crite sous la forme d'une fraction.
*
* * On peut choisir de n'avoir que des tables de multiplications, par dÃ©faut il y a aussi des divisions simples par 2, 3 ou 4
* @Auteur RÃ©mi Angot
* 4C10-4
*/
function Exercice_quotients_relatifs(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = false ;
	this.titre = "Quotient de deux entiers relatifs"
	this.consigne = 'Calculer'
  this.spacing = 2;
  this.nb_questions = 6;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = combinaison_listes(['-+','+-','--','++'],this.nb_questions);
    let liste_type_de_nombres = combinaison_listes(['tables','horstables'],this.nb_questions);
    if (this.sup){
      liste_type_de_nombres = combinaison_listes(['tables'],this.nb_questions);
    }
		for (let i = 0, a, b, q, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (liste_type_de_nombres[i]=='tables'){
        b = randint(2,9);
        a = b * randint(2,9);
      } else {
        b = choice([11,12,13,14,15,16,20,60,80]);
        a = b * randint(2,4)
      }
      switch (liste_type_de_questions[i]) {
        case '-+':
          a *= -1;
          break;
        case '+-':
          b *= -1;
          break;
        case '--':
          a *= -1;
          b *= -1;
        default:
          break;
      }
      texte = `$\\dfrac{${a}}{${b}}$`
      texte_corr = `$\\dfrac{${a}}{${b}}=${calcul(a/b)}$`
				
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_case_a_cocher = ['Utiliser seulement les tables de multiplications de 2 Ã  9'];		
}

/**
* Effectuer des multiplications de relatifs dans un tableau Ã  double entrÃ©e
*
* @Auteur RÃ©mi Angot
* 4C10-5
*/
function Exercice_tableau_multiplications_relatifs (){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = false ;
	this.titre = "Multiplications de deux entiers relatifs dans un tableau Ã  double entrÃ©e"
	this.consigne = 'Calculer'
  this.spacing = 1;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_signes1 = combinaison_listes([-1,1],4);
    let liste_signes2 = combinaison_listes([-1,1],4);
    let a1 = randint(2,9);
    let a2 = randint(2,9,a1);
    let a3 = randint(2,9,[a1,a2]);
    let a4 = randint(2,9,[a1,a2,a3]);
    let b1 = randint(2,9);
    let b2 = randint(2,9,b1);
    let b3 = randint(2,9,[b1,b2]);
    let b4 = randint(2,9,[b1,b2,b3]);
    a1 *= liste_signes1[0]
    a2 *= liste_signes1[1]
    a3 *= liste_signes1[2]
    a4 *= liste_signes1[3]
    b1 *= liste_signes1[0]
    b2 *= liste_signes1[1]
    b3 *= liste_signes1[2]
    b4 *= liste_signes1[3]

    let texte = `$\\def\\arraystretch{1.5}\\begin{array}{|c|c|c|c|c|}
    \\hline
    \\times & ${ecriture_algebrique(a1)} & ${ecriture_algebrique(a2)} & ${ecriture_algebrique(a3)} & ${ecriture_algebrique(a4)} \\\\
    \\hline
    ${ecriture_algebrique(b1)} &  &  & &  \\\\
    \\hline
    ${ecriture_algebrique(b2)} & & & & \\\\
    \\hline
    ${ecriture_algebrique(b3)} & & & & \\\\
    \\hline
    ${ecriture_algebrique(b4)} & & & & \\\\
    \\hline
    \\end{array}$`

    let texte_corr = `$\\def\\arraystretch{1.5}\\begin{array}{|c|c|c|c|c|}
    \\hline
    \\times & ${ecriture_algebrique(a1)} & ${ecriture_algebrique(a2)} & ${ecriture_algebrique(a3)} & ${ecriture_algebrique(a4)} \\\\
    \\hline
    ${ecriture_algebrique(b1)} & ${ecriture_algebrique(a1*b1)} & ${ecriture_algebrique(a2*b1)} & ${ecriture_algebrique(a3*b1)} & ${ecriture_algebrique(a4*b1)} \\\\
    \\hline
    ${ecriture_algebrique(b2)} & ${ecriture_algebrique(a1*b2)} & ${ecriture_algebrique(a2*b2)} & ${ecriture_algebrique(a3*b2)} & ${ecriture_algebrique(a4*b2)} \\\\
    \\hline
    ${ecriture_algebrique(b3)} & ${ecriture_algebrique(a1*b3)} & ${ecriture_algebrique(a2*b3)} & ${ecriture_algebrique(a3*b3)} & ${ecriture_algebrique(a4*b3)} \\\\
    \\hline
    ${ecriture_algebrique(b4)} & ${ecriture_algebrique(a1*b4)} & ${ecriture_algebrique(a2*b4)} & ${ecriture_algebrique(a3*b4)} & ${ecriture_algebrique(a4*b4)} \\\\
    \\hline
    \\end{array}$`
    this.liste_questions.push(texte);
	  this.liste_corrections.push(texte_corr);
	  liste_de_question_to_contenu(this);
    
	}
}


/**
 * Plusieurs type de calcul avec des entiers.
 *
 * Sans parenthÃ¨ses :
 * * a+b*c
 * * a+bÃ·c
 * * a/b*c
 * * a*bÃ·c
 * * a*b+c
 * * a-b+c
 * * a+b+c*d
 * * a*b+c*d
 * * a*b*c+d
 * * a*b-cÃ·d
 * * a*b+cÃ·d
 *
 * Avec parenthÃ¨ses :
 * * a*(b-c)
 * * (a-b)*c
 * * (a-b)Ã·c
 * * aÃ·(b+c)
 * * (a-b)Ã·c
 * * a*(b-c)*d
 * * a*b*(c-d)
 * * a*(b-c*d)
 * * (a+b*c)Ã·d
 * * a*(b-c*d)
 * * a*bÃ·(c+d)
 * * a*(bÃ·c+d)
 * * a-(b+c)
 * * (a+b+c)*d
 * @Auteur RÃ©mi Angot
 * 4C11
 */
function Priorites_et_relatifs() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculs utilisant les prioritÃ©s opÃ©ratoires";
  this.consigne = "Calculer";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup == 1) {
      liste_questions_disponibles = range1(11);
    } else if (this.sup == 2) {
      liste_questions_disponibles = range1(20, range1(11));
    } else {
      liste_questions_disponibles = range1(20);
    }
    let liste_type_de_questions = combinaison_listes(
      liste_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, a, b, c, d, signes, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: //a+b*c
          a = randint(2, 11)*choice([-1,1]);
          b = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0) {
            a = randint(2, 11)*choice([-1,1]);
            b = randint(2, 11)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]); 
          }
          texte = `$${a}${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$${a}${mise_en_evidence('~' + ecriture_algebrique(b) + "\\times" + ecriture_parenthese_si_negatif(c))}=${a}${ecriture_algebrique(b * c)
          }=${a + b * c}$`;
          break;
        case 2: //a+b/c
          a = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          b = c * randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0) {
            a = randint(2, 11)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
            b = c * randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}${ecriture_algebrique(b)}\\div${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$${a}${mise_en_evidence('~' + ecriture_algebrique(b) + "\\div" + ecriture_parenthese_si_negatif(c))}=${a}${
            ecriture_algebrique(b/c)
          }=${a + b / c}$`;
          break;
        case 3: //a/b*c
          b = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          a = b * randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0) {
            b = randint(2, 11)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
            a = b * randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}\\div${ecriture_parenthese_si_negatif(b)}\\times${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$${mise_en_evidence(a + "\\div" + ecriture_parenthese_si_negatif(b))}\\times${ecriture_parenthese_si_negatif(c)}=${
            a / b
          }\\times${ecriture_parenthese_si_negatif(c)}=${(a / b) * c}$`;
          break;
        case 4: // a*b/c
          if (choice([true, false])) {
            //a est un multiple de c
            c = randint(2, 6)*choice([-1,1]);
            a = c * randint(2, 5)*choice([-1,1]);
            b = randint(2, 6)*choice([-1,1]);
            while (a>0 && b>0 && c>0) {
              c = randint(2, 6)*choice([-1,1]);
              a = c * randint(2, 5)*choice([-1,1]);
              b = randint(2, 6)*choice([-1,1]);
            }
          } else {
            // b est un multiple de c
            c = randint(2, 6)*choice([-1,1]);
            b = c * randint(2, 5)*choice([-1,1]);
            a = randint(2, 6)*choice([-1,1]);
            while (a>0 && b>0 && c>0) {
              c = randint(2, 6)*choice([-1,1]);
              b = c * randint(2, 5)*choice([-1,1]);
              a = randint(2, 6)*choice([-1,1]);
            }
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\div${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + ecriture_parenthese_si_negatif(b))}\\div${ecriture_parenthese_si_negatif(c)}=${
            a * b
          }\\div${ecriture_parenthese_si_negatif(c)}=${(a * b) / c}$`;
          break;
        case 5: //a*b+c
          a = randint(2, 11)*choice([-1,1]);
          b = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0) {
            a = randint(2, 11)*choice([-1,1]);
            b = randint(2, 11)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}${ecriture_algebrique(c)}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + ecriture_parenthese_si_negatif(b))}${ecriture_algebrique(c)}=${
            a * b
          }${ecriture_algebrique(c)}=${a * b + c}$`;
          break;
        case 6: //a-b+c
          a = randint(2, 11)*choice([-1,1]);
          b = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0) {
            a = randint(2, 11)*choice([-1,1]);
            b = randint(2, 11)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}-(${ecriture_algebrique(b)})${ecriture_algebrique(c)}$`;
          texte_corr = `$${a}${mise_en_evidence(ecriture_algebrique(-b))}${ecriture_algebrique(c)}=${a - b}${ecriture_algebrique(c)}=${
            a - b + c
          }$`;
          break;
        case 7: //a+b+c*d
          a = randint(2, 20)*choice([-1,1]);
          b = randint(2, 20)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          d = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0 && d>0) {
            a = randint(2, 20)*choice([-1,1]);
            b = randint(2, 20)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
            d = randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}${ecriture_algebrique(b)}${ecriture_algebrique(c)}\\times${ecriture_parenthese_si_negatif(d)}$`;
          texte_corr = `$${a}${ecriture_algebrique(b)}${mise_en_evidence(
            ecriture_algebrique(c) + "\\times" + ecriture_parenthese_si_negatif(d)
          )}=${a}${ecriture_algebrique(b)}${ecriture_algebrique(c * d)}=${a + b + c * d}$`;
          break;
        case 8: //a*b+c*d
          a = randint(2, 11)*choice([-1,1]);
          b = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          d = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0 && d>0) {
            a = randint(2, 20)*choice([-1,1]);
            b = randint(2, 20)*choice([-1,1]);
            c = randint(2, 11)*choice([-1,1]);
            d = randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}${ecriture_algebrique(c)}\\times${ecriture_parenthese_si_negatif(d)}$`;
          texte_corr = `$${
            a + mise_en_evidence("\\times") + ecriture_parenthese_si_negatif(b)
          }${ecriture_algebrique(c) + mise_en_evidence("\\times") + ecriture_parenthese_si_negatif(d)}=${a * b}${ecriture_algebrique(c * d)}=${
            a * b + c * d
          }$`;
          break;
        case 9:  //a*b*c+d
          a = randint(2, 5)*choice([-1,1]);
          b = randint(2, 5)*choice([-1,1]);
          c = randint(2, 5)*choice([-1,1]);
          d = randint(2, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0 && d>0) {
            a = randint(2, 5)*choice([-1,1]);
            b = randint(2, 5)*choice([-1,1]);
            c = randint(2, 5)*choice([-1,1]);
            d = randint(2, 11)*choice([-1,1]);
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\times${ecriture_parenthese_si_negatif(c)}${ecriture_algebrique(d)}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + ecriture_parenthese_si_negatif(b)
          )}\\times${ecriture_parenthese_si_negatif(c)}${ecriture_algebrique(d)}=${mise_en_evidence(a * b + "\\times" + ecriture_parenthese_si_negatif(c))}${ecriture_algebrique(d)}
          =${a * b * c}${ecriture_algebrique(d)}
          =${a * b * c + d}$`;
          break;
        case 10: 
          a = randint(2, 11)*choice([-1,1]);
          b = randint(2, 11)*choice([-1,1]);
          d = randint(2, 11)*choice([-1,1]);
          c = d * randint(2, 8)*choice([-1,1]);
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}${ecriture_algebrique(c)}\\div${ecriture_parenthese_si_negatif(d)}$`;
          texte_corr = `$${
            a + mise_en_evidence("\\times") + ecriture_parenthese_si_negatif(b)
          + ecriture_algebrique(c) + mise_en_evidence("\\div") + ecriture_parenthese_si_negatif(d)}=${a * b}${ecriture_algebrique(c/d)}=${
            a * b + c / d
          }$`;
          break;
        case 11: // a*(b+c)
          a = randint(2, 11)*choice([-1,1]);
          b = randint(1, 11)*choice([-1,1]);
          c = randint(1, 11)*choice([-1,1]);
          while (a>0 && b>0 && c>0){
            a = randint(2, 11)*choice([-1,1]);
            b = randint(1, 11)*choice([-1,1]);
            c = randint(1, 11)*choice([-1,1]);
          }
          texte = `$${a}\\times(${b}${ecriture_algebrique(c)})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(b + ecriture_algebrique(c))})=${a}\\times${ecriture_parenthese_si_negatif(b+c)}=${a * (b + c)}$`;
          break;
        case 12: // (a+b)*c
        a = randint(1, 11)*choice([-1,1]);
        b = randint(1, 11)*choice([-1,1]);
        c = randint(2, 11)*choice([-1,1]);
        while (a>0 && b>0 && c>0){
          a = randint(1, 11)*choice([-1,1]);
          b = randint(1, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
        }
          texte = `$(${a}${ecriture_algebrique(b)})\\times${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$(${mise_en_evidence(a + ecriture_algebrique(b))})\\times${ecriture_parenthese_si_negatif(c)}=${
            a + b }\\times${ecriture_parenthese_si_negatif(c)}=${(a + b) * c}$`;
          break;
        case 13: // (a+b)/c
          c = randint(2, 11)*choice([-1,1]);
          b = randint(11, 39)*choice([-1,1]);
          a = c * randint(2, 9)*[choice([-1,1])] - b;
          while (a>0 && b>0 && c>0) {
            c = randint(2, 11)*choice([-1,1]);
            b = randint(11, 39)*choice([-1,1]);
            a = c * randint(2, 9)*[choice([-1,1])] - b;
          }
          texte = `$(${a}${ecriture_algebrique(b)})\\div${ecriture_parenthese_si_negatif(c)}$`;
          texte_corr = `$(${mise_en_evidence(a  + ecriture_algebrique(b))})\\div${ecriture_parenthese_si_negatif(c)}=${
            a + b
          }\\div${ecriture_parenthese_si_negatif(c)}=${(a + b) / c}$`;
          break;
        case 14: // a/(b+c)
          b = randint(2, 5)*choice([-1,1]);
          c = randint(2, 6)*choice([-1,1]);
          a = (b + c) * randint(2, 9)*choice([-1,1]);
          while (a>0 && b>0 && c>0){
            b = randint(2, 5)*choice([-1,1]);
            c = randint(2, 6)*choice([-1,1]);
            a = (b + c) * randint(2, 9)*choice([-1,1]);
          }
          texte = `$${a}\\div(${b}${ecriture_algebrique(c)})$`;
          texte_corr = `$${a}\\div(${mise_en_evidence(b + ecriture_algebrique(c))})=${a}\\div${
            ecriture_parenthese_si_negatif(b + c)}=${a / (b + c)}$`;
          break;
        case 15: // a(b+c)*d
          c = randint(11, 39)*choice([-1,1]);
          b = randint(2, 5)*choice([-1,1]) - c;
          a = randint(2, 5)*choice([-1,1]);
          d = randint(2, 5)*choice([-1,1]);
          while (a>0 && b>0 && c>0 && d>0){
            c = randint(11, 39)*choice([-1,1]);
            b = (randint(2, 5) - c)*choice([-1,1]);
            a = randint(2, 5)*choice([-1,1]);
            d = randint(2, 5)*choice([-1,1]);
          }
          texte = `$${a}\\times(${b}${ecriture_algebrique(c)})\\times${ecriture_parenthese_si_negatif(d)}$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(b + ecriture_algebrique(c))})\\times${ecriture_parenthese_si_negatif(d)}=${a}\\times${ecriture_parenthese_si_negatif(b + c)}\\times${ecriture_parenthese_si_negatif(d)}=${a * (b + c) * d}$`;
          break;
        case 16: //a*b*(c+d)
          d = randint(11, 39)*choice([-1,1]);
          c = randint(2, 5)*choice([-1,1])-d;
          a = randint(2, 5)*choice([-1,1]);
          b = randint(2, 5)*choice([-1,1]);
          while (a>0 && b>0 && c>0 && d>0) {
            d = randint(11, 39)*choice([-1,1]);
            c = randint(2, 5)*choice([-1,1])-d;
            a = randint(2, 5)*choice([-1,1]);
            b = randint(2, 5)*choice([-1,1]);
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\times(${c}${ecriture_algebrique(d)})$`;
          texte_corr = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\times(${mise_en_evidence(
            c + ecriture_algebrique(d))})=${a}\\times${ecriture_parenthese_si_negatif(b)}\\times${ecriture_parenthese_si_negatif(c+d)}=${a * b * (c + d)}$`;
          break;
        case 17: // a*(b/c+d)
          a = randint(2, 11)*choice([-1,1]);
          c = randint(2, 11)*choice([-1,1]);
          b = c * randint(2, 5)*choice([-1,1]);
          d = randint(2, 6)*choice([-1,1]);
          texte = `$${a}\\times(${b}\\div${ecriture_parenthese_si_negatif(c)}${ecriture_algebrique(d)})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `\\div` + ecriture_parenthese_si_negatif(c)
          )}${ecriture_algebrique(d)})=${a}\\times(${mise_en_evidence(
            b / c + ecriture_algebrique(d)
          )})=${a}\\times${ecriture_parenthese_si_negatif(b / c + d)}=${a * (b / c + d)}$`;
          break;
          case 18: //a*b/(c+d)
          a = randint(2, 11);
          b = randint(2, 11);
          while (liste_des_diviseurs(a * b).length < 5) {
            a = randint(2, 11);
            b = randint(2, 11);
          }
          let liste = liste_des_diviseurs(a * b);
          if (liste.length > 2) {
            liste.pop(); //on supprime le plus grand diviseur qui est le produit
            enleve_element(liste, a); //on supprime a
            enleve_element(liste, b); //on supprime b

          }
          let somme = choice(liste, [1])*choice([-1,1]); // la somme doit Ãªtre un diviseur diffÃ©rent de 1
          c = randint(-30, 30,[0]);
          d = somme - c;
          
          while (a>0 && b>0 && c>0 && d>0) {
            a *= choice([-1,1]);
            b *= choice([-1,1]);
          }
          texte = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\div(${c}${ecriture_algebrique(d)})$`;
          texte_corr = `$${a}\\times${ecriture_parenthese_si_negatif(b)}\\div(${mise_en_evidence(
            c + ecriture_algebrique(d))})=${mise_en_evidence(a + "\\times" + ecriture_parenthese_si_negatif(b))}\\div${ecriture_parenthese_si_negatif(c+d)}=${
            a * b
          }\\div${ecriture_parenthese_si_negatif(c + d)}=${(a * b) / (c + d)}$`;
          break;
        case 19: // a-(b+c)
          a = randint(1, 9)*choice([-1,1]);
          b = randint(1, 9)*choice([-1,1]);
          c = randint(1, 9)*choice([-1,1]);
          while (a>0 && b>0 && c>0){
            a = randint(1, 9)*choice([-1,1]);
            b = randint(1, 9)*choice([-1,1]);
            c = randint(1, 9)*choice([-1,1]);
          }
          texte = `$${a}-(${b}${ecriture_algebrique(c)})$`;
          texte_corr = `$${a}-(${mise_en_evidence(b + ecriture_algebrique(c))})=${a}-(${ecriture_algebrique(b+c)})=${a+ecriture_algebrique(-b-c)}=${a-b-c}$`;
          break;
        case 20: // (a+b+c)*d
          a = randint(1, 9)*choice([-1,1]);
          b = randint(1, 9)*choice([-1,1]);
          c = randint(1, 9)*choice([-1,1]);
          d = randint(2,5)*choice([-1,1])
          while (a>0 && b>0 && c>0){
            a = randint(1, 9)*choice([-1,1]);
            b = randint(1, 9)*choice([-1,1]);
            c = randint(1, 9)*choice([-1,1]);
          }
          texte = `$(${a+ecriture_algebrique(b)+ecriture_algebrique(c)})\\times${ecriture_parenthese_si_negatif(d)}$`;
          texte_corr = `$(${mise_en_evidence(a+ecriture_algebrique(b)+ecriture_algebrique(c))})\\times${ecriture_parenthese_si_negatif(d)}=${a+b+c}\\times${ecriture_parenthese_si_negatif(d)}=${(a+b+c)*d} $`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de calculs",
    3,
    "1 : Sans opÃ©rations entre parenthÃ¨ses\n2: Avec des opÃ©rations entre parenthÃ¨ses\n3: Avec ou sans opÃ©rations entre parenthÃ¨ses",
  ];
}

/**
 * Exercices sur le thÃ©orÃ¨me de Pythagore avec MathALEA2D
 * @Auteur RÃ©mi Angot
 * 4G20
 */
function Pythagore2D() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer une longueur avec le thÃ©orÃ¨me de Pythagore";
  this.nb_questions = 3;
  this.nb_cols = 3;
  this.nb_cols_corr = 1;
  type_exercice = 'Calculer'

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = [];
    if (this.sup==1) {
      this.consigne = "Dans chaque cas, donner l'Ã©galitÃ© de Pythagore."
    } else if (this.sup==2){
      this.consigne = "Dans chaque cas, complÃ©ter l'Ã©galitÃ© en utilisant le thÃ©orÃ¨me de Pythagore."
    } else {
         this.consigne = "Dans chaque cas, calculer la longueur manquante."
    }
    if (this.sup == 2 || type_exercice == 'Calculer' ){
      liste_type_de_questions = combinaison_listes(['AB','BC','AC'],this.nb_questions) 
    }
    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;)
     {
      texte = '';
      texte_corr = '';
      let A1 = point(0,0)
      let B1 = point(calcul(randint(22,50)/10),0)
      let C1 = similitude(B1,A1,90,calcul(randint(22,50)/10)/longueur(A1,B1))
      let p1 = polygone(A1,B1,C1)
      p1.isVisible = false
      let p2 = rotation(p1,A1,randint(0,360))
      let A = p2.listePoints[0]
      let B = p2.listePoints[1]
      let C = p2.listePoints[2]
      let codage = codageAngleDroit(B,A,C)
      let xmin = Math.min(A.x,B.x,C.x)-1
      let ymin = Math.min(A.y,B.y,C.y)-1
      let xmax = Math.max(A.x,B.x,C.x)+1
      let ymax = Math.max(A.y,B.y,C.y)+1
      let nomDuPolygone = creerNomDePolygone(3)
      let nomme = nommePolygone(p2,nomDuPolygone)
      let affAB = afficheLongueurSegment(B,A)
      let affAC = afficheLongueurSegment(A,C)
      let affBC = afficheLongueurSegment(C,B)
      let longueurAB = longueur(A,B,1)
      let longueurAC = longueur(A,C,1)
      let longueurBC = longueur(B,C,1)
      let mesObjetsATracer = [codage,p2,nomme]

      if (type_exercice == 'Calculer' && liste_type_de_questions[i]=='AB'){
        mesObjetsATracer.push(affAC,affBC)
      }
      if (type_exercice == 'Calculer' && liste_type_de_questions[i]=='BC'){
        mesObjetsATracer.push(affAC,affAB)
      }
      if (type_exercice == 'Calculer' && liste_type_de_questions[i]=='AC'){
        mesObjetsATracer.push(affAB,affBC)
      }

      if (!sortie_html) {texte = '~\\\\'}
      texte += mathalea2d({xmin:xmin, xmax:xmax, ymin:ymin, ymax:ymax, scale:.6},mesObjetsATracer) ;
      if (this.sup==2){
        if (liste_type_de_questions[i]=='AB'){
          texte += `<br>$${A.nom+B.nom}^2=\\ldots$`
        }
        if (liste_type_de_questions[i]=='BC'){
          texte += `<br>$${B.nom+C.nom}^2=\\ldots$`
        }
        if (liste_type_de_questions[i]=='AC'){
          texte += `<br>$${A.nom+C.nom}^2=\\ldots$`
        }
      }
      if (!sortie_html && i!=this.nb_questions-1) {texte += '\\columnbreak'} //pour la sortie LaTeX sauf la derniÃ¨re question
      
      texte_corr = `Le triangle $${nomDuPolygone}$ est rectangle en $${A.nom}$ donc d'aprÃ¨s le thÃ©orÃ¨me de Pythagore, on a : `;
      texte_corr += `$${B.nom+C.nom}^2=${A.nom+B.nom}^2+${A.nom+C.nom}^2$`
      if (this.sup==2){
        if (liste_type_de_questions[i]=='AB'){
          texte_corr += ` d'oÃ¹ $${A.nom+B.nom}^2=${B.nom+C.nom}^2-${A.nom+C.nom}^2$.`
        }
        if (liste_type_de_questions[i]=='BC'){
          texte_corr += `.`
        }
        if (liste_type_de_questions[i]=='AC'){
          texte_corr += ` d'oÃ¹ $${A.nom+C.nom}^2=${B.nom+C.nom}^2-${A.nom+B.nom}^2$.`
        }
      }
      if (type_exercice == "Calculer"){
        if (liste_type_de_questions[i]=='AB'){
          texte_corr += ` donc $${A.nom+B.nom}^2=${B.nom+C.nom}^2-${A.nom+C.nom}^2$`
          texte_corr += `<br> $${A.nom+B.nom}^2=${tex_nombre(longueurBC)}^2-${tex_nombre(longueurAC)}^2=${tex_nombrec(longueurBC**2-longueurAC**2)}$`
          if (calcul(Math.sqrt(longueurBC**2-longueurAC**2),1)==calcul(Math.sqrt(longueurBC**2-longueurAC**2),2)){
            texte_corr += `<br> $${A.nom+B.nom}=${tex_nombre(calcul(Math.sqrt(longueurBC**2-longueurAC**2),1))}$ cm.`
          } else {
            texte_corr += `<br> $${A.nom+B.nom}\\approx${tex_nombre(calcul(Math.sqrt(longueurBC**2-longueurAC**2),1))}$ cm.`
          }
        }
        if (liste_type_de_questions[i]=='BC'){
          texte_corr += `<br> $${B.nom+C.nom}^2=${tex_nombre(longueurAB)}^2+${tex_nombre(longueurAC)}^2=${tex_nombrec(longueurAB**2+longueurAC**2)}$`
          if (calcul(Math.sqrt(longueurAB**2+longueurAC**2),1)==calcul(Math.sqrt(longueurAB**2+longueurAC**2),2)){
            texte_corr += `<br> $${B.nom+C.nom}=${tex_nombre(calcul(Math.sqrt(longueurAB**2+longueurAC**2),1))}$ cm.`
          } else {
            texte_corr += `<br> $${B.nom+C.nom}\\approx${tex_nombre(calcul(Math.sqrt(longueurAB**2+longueurAC**2),1))}$ cm.`
          }
        }
        if (liste_type_de_questions[i]=='AC'){
          texte_corr += ` donc $${A.nom+C.nom}^2=${B.nom+C.nom}^2-${A.nom+B.nom}^2$`
          texte_corr += `<br> $${A.nom+C.nom}^2=${tex_nombre(longueurBC)}^2-${tex_nombre(longueurAB)}^2=${tex_nombrec(longueurBC**2-longueurAB**2)}$`
          if (calcul(Math.sqrt(longueurBC**2-longueurAB**2),1)==calcul(Math.sqrt(longueurBC**2-longueurAB**2),2)){
            texte_corr += `<br> $${A.nom+C.nom}=${tex_nombre(calcul(Math.sqrt(longueurBC**2-longueurAB**2),1))}$ cm.`
          } else {
            texte_corr += `<br> $${A.nom+C.nom}\\approx${tex_nombre(calcul(Math.sqrt(longueurBC**2-longueurAB**2),1))}$ cm.`
          }
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : Donner l'Ã©galitÃ© de Pythagore\n2 : ComplÃ©ter l'Ã©galitÃ© de Pythagore\n3 : Calculer une longueur manquante"];
}
// 4G20-1
function Egalite_Pythagore2D(){
  Pythagore2D.call(this);
  this.titre = "Donner ou complÃ©ter une Ã©galitÃ© de Pythagore"
  this.sup = 1;
  type_exercice = ''
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Donner l'Ã©galitÃ© de Pythagore\n2 : ComplÃ©ter l'Ã©galitÃ© de Pythagore"];

}

/**
 * Calculs de probabilitÃ©s sur une expÃ©rience alÃ©atoire Ã  deux Ã©preuves
 * @Auteur Jean-Claude Lhote
 * 3S20
 */
function fonctions_probabilite2() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Calculer des probabilitÃ©s dans une expÃ©rience alÃ©atoire Ã  deux Ã©preuves";
	this.consigne = "";
	this.nb_questions = 2;
	this.nb_questions_modifiable = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	sortie_html ? this.spacing = 2 : this.spacing = 1.5;
	sortie_html ? this.spacing_corr = 3 : this.spacing_corr = 2;
	this.sup = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_index_disponibles = [0, 1, 2, 3];
		let liste_index = combinaison_listes(liste_index_disponibles, this.nb_questions)
		let qualites = [[]];
		let Initiale = [];
		let Couleurs = [`red`, `green`, `blue`, `gray`, `brown`, `orange`, `magenta`, `pink`, `black`, `lightgray`];
		qualites[0] = ['Ã  la fraise', 'Ã  la vanille', 'Ã  l\'abricot', 'Ã  la cerise', 'Ã  la banane'];
		qualites[1] = ['trÃ¨fle', 'carreau', 'coeur', 'pique'];
		qualites[2] = ['rouges', 'vertes', 'bleues', 'noires', 'blanches'];
		qualites[3] = ['gris', 'cyans', 'roses', 'jaunes', 'violets'];
		qualites[4] = ['rouges', 'verts', 'bleus', 'noirs', 'jaunes'];
		qualites[5] = ['rouges', 'verts', 'bleus', 'noirs', 'blancs'];
		qualites[6] = ['rouges', 'verts', 'bleus', 'noirs', 'jaunes'];
		for (let i = 0, p, q, r, somme1, somme2, quidame, quidam, n = [], m = [], fra1 = [], fra2 = [], p1 = [], p2 = [], p3 = [], den, trouve, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			quidame = prenomF();
			quidam = prenomM();
			switch (liste_index[i]) {
				case 0:
					Initiale[0] = `F`;
					Initiale[1] = `V`;
					Initiale[2] = `A`;
					Initiale[3] = `C`;
					Initiale[4] = `B`;
					p = randint(0, 4);
					q = randint(0, 4, [p]);
					r = randint(0, 4, [p, q]);
					n[p] = randint(2, 5);
					n[q] = randint(1, 6) + 2;
					n[r] = randint(1, 3) * 2;

					// n[3]=randint(1,4)+2;
					// n[4]=randint(2,5);
					somme1 = n[p] + n[q] + n[r];// +n[3]+n[4];
					texte = `Dans le frigo il y a ${somme1} yaourts. ${n[p]} sont ${qualites[0][p]}, ${n[q]} sont ${qualites[0][q]} et ${n[r]} sont ${qualites[0][r]}.<br>`;//  ${n[3]} sont ${qualites[index1][3]} et ${n[4]} sont ${qualites[index1][4]}.<br> `;
					texte += `${quidame} en choisit un au hasard. Son frÃ¨re ${quidam} en choisit un au hasard Ã  son tour.<br>`;
					texte += num_alpha(0) + ` Combien d'issues possÃ¨de cette experience alÃ©atoire ? donne un exemple d'issue.<br>`
					texte += num_alpha(1) + ` Est-ce une expÃ©rience en situation d'Ã©quiprobabilitÃ© ? Justifie.<br>`
					texte += num_alpha(2) + ` Calcule la probabilitÃ© que ${quidame} et ${quidam} aient choisi tous les deux un yaourt ${qualites[0][p]}.<br>`;
					texte += num_alpha(3) + ` Calcule la probabilitÃ© qu'ils aient choisi des yaourts aux parfums identiques.<br>`;
					texte += num_alpha(4) + ` Calcule la probabilitÃ© qu'ils aient choisi des yaourts aux parfums diffÃ©rents.<br>`;
					texte_corr = ``;
					texte_corr += num_alpha(0) + ` ${quidame} peut avoir choisi un yaourt ${qualites[0][p]}, ${qualites[0][q]} ou ${qualites[0][r]}. Une fois qu'elle a choisi, et comme il y a au moins 2 yaourts de chaque sorte, ${quidam} a les mÃªmes 3 possibilitÃ©s. Il y a donc $3\\times3=9$ issues possibles.<br>`
					texte_corr += `Par exemple : ${quidame} a pris un yaourt ${qualites[0][p]} et ${quidam} un yaourt ${qualites[0][q]}. Ce qu'on peut noter (${Initiale[p]},${Initiale[q]}).<br>`;
					texte_corr += `Les 9 issues sont : `;
					for (const j of [p, q, r])
						for (const k of [p, q, r])
							texte_corr += `(${Initiale[j]},${Initiale[k]}) `;
					texte_corr += `<br>`
					if (n[0] == n[1] && n[1] == n[2]) {
						texte_corr += num_alpha(1) + ` Comme le nombre de yaourts de chaque sorte est le mÃªme, alors ${quidame} a la mÃªme probabilitÃ© de choisir n'importe quel parfum, mais ensuite son frÃ¨re aura un yaourt de moins de l'un des parfums. Il est donc moins probable qu'il choisisse le mÃªme parfum que sa soeur que l'un des deux autres parfums.<br>`;
						texte_corr += `l\'issue (${Initiale[p]},${Initiale[p]}) est donc moins probable que l'issue (${Initiale[p]},${Initiale[q]}). Ce n'est donc pas une situation d'Ã©quiprobabilitÃ©.`;
					}
					else {
						texte_corr += num_alpha(1) + ` Comme le nombre de yaourt est diffÃ©rent d'un parfum Ã  l'autre, ${quidame} n'a pas la mÃªme probabilitÃ© de choisir n'importe quel parfum. On en dÃ©duit qu' il est impossible que les issues (${Initiale[p]},${Initiale[p]}), (${Initiale[q]},${Initiale[q]}) et (${Initiale[r]},${Initiale[r]}) aient la mÃªme probabilitÃ©.<br>`;
					}
					texte_corr += num_alpha(2) + ` Il y a ${n[p]} yaourts ${qualites[0][p]}, et ${somme1} yaourts en tout, la probabilitÃ© que ${quidame} choisisse un yaourt ${qualites[0][p]} est de : $${tex_fraction(n[p], somme1)}${simplification_de_fraction_avec_etapes(n[p], somme1)}$.<br>`;
					texte_corr += `Ensuite il reste ${n[p] - 1} yaourts ${qualites[0][p]} pour ${quidam} sur un total de ${somme1 - 1} yaourts.<br> La probabilitÃ© qu'il choisisse Ã  son tour et dans ces conditions ce parfum est de $${tex_fraction(n[p] - 1, somme1 - 1)}${simplification_de_fraction_avec_etapes(n[p] - 1, somme1 - 1)}$.<br>`;
					texte_corr += `La probabilitÃ© de l'issue (${Initiale[p]},${Initiale[p]}) est le produit de ces deux probabilitÃ©s, donc : $${tex_fraction(n[p], somme1)}\\times${tex_fraction(n[p] - 1, somme1 - 1)}=${tex_fraction(n[p] * (n[p] - 1), somme1 * (somme1 - 1))}${simplification_de_fraction_avec_etapes(n[p] * (n[p] - 1), somme1 * (somme1 - 1))}$.<br>`;
					texte_corr += num_alpha(3) + ` a probabilitÃ© des issues (${Initiale[q]},${Initiale[q]}) et (${Initiale[r]},${Initiale[r]}) peuvent Ãªtre calculÃ©es de la mÃªme faÃ§on qu'au 3) :<br>`;
					texte_corr += `$${tex_fraction(n[q], somme1)}\\times${tex_fraction(n[q] - 1, somme1 - 1)}=${tex_fraction(n[q] * (n[q] - 1), somme1 * (somme1 - 1))}$.<br>`;
					texte_corr += `$${tex_fraction(n[r], somme1)}\\times${tex_fraction(n[r] - 1, somme1 - 1)}=${tex_fraction(n[r] * (n[r] - 1), somme1 * (somme1 - 1))}$.<br>`;
					texte_corr += `La probabilitÃ© qu'ils choisissent le mÃªme parfum est la somme des probabilitÃ©s des issues (${Initiale[p]},${Initiale[p]}), (${Initiale[q]},${Initiale[q]}) et (${Initiale[r]},${Initiale[r]}), soit :<br>`;
					texte_corr += `$${tex_fraction(n[p] * (n[p] - 1), somme1 * (somme1 - 1))}+${tex_fraction(n[q] * (n[q] - 1), somme1 * (somme1 - 1))}+${tex_fraction(n[r] * (n[r] - 1), somme1 * (somme1 - 1))}=${tex_fraction(n[p] * (n[p] - 1) + n[q] * (n[q] - 1) + n[r] * (n[r] - 1), somme1 * (somme1 - 1))}${simplification_de_fraction_avec_etapes(n[p] * (n[p] - 1) + n[q] * (n[q] - 1) + n[r] * (n[r] - 1), somme1 * (somme1 - 1))}$<br>`;
					texte_corr += num_alpha(4) + ` choisir des parfums diffÃ©rents est l'Ã©vÃ©nement contraire de l'Ã©vÃ©nement dont on a calculÃ© la probabilitÃ© Ã  la question 4).<br>`;
					fra1 = fraction_simplifiee(n[p] * (n[p] - 1) + n[q] * (n[q] - 1) + n[r] * (n[r] - 1), somme1 * (somme1 - 1));
					texte_corr += `La probabilitÃ© de cet Ã©vÃ©nement est donc : $1-${tex_fraction(fra1[0], fra1[1])}=${tex_fraction(fra1[1], fra1[1])}-${tex_fraction(fra1[0], fra1[1])}=${tex_fraction(fra1[1] - fra1[0], fra1[1])}${simplification_de_fraction_avec_etapes(fra1[1] - fra1[0], fra1[1])}$`;
					break;
				case 1:
					p = randint(0, 3);
					if (randint(0, 1) == 0) q = 32;
					else q = 52;
					r = Math.floor(q / 33);
					Initiale[0] = choice([`sept`, `huit`, `neuf`, `dix`, `valet`, `roi`, `as`]);
					Initiale[1] = choice([`deux`, `trois`, `quatre`, `cinq`, `six`, `sept`, `huit`, `neuf`, `dix`, `valet`, `roi`, `as`]);
					texte = `On considÃ¨re l'expÃ©rience consistant Ã  tirer deux cartes dans un jeu de ${q} cartes.<br>`;
					texte += `Partie 1 : On effectue le tirage de la deuxiÃ¨me carte aprÃ¨s remise de la premiÃ¨re dans le jeu.<br>`;
					texte += num_alpha(0) + ` Quelle est la probabilitÃ© de tirer 2 cartes de la mÃªme couleur (Rouge/Rouge ou Noire/Noire)?<br>`;
					texte += num_alpha(1) + ` Quelle est la probabilitÃ© de tirer 2 ${Initiale[r]}`;
					if (Initiale[r] == `valet` || Initiale[r] == `roi`) texte += `s`;
					texte += ` ?<br>`;
					texte += num_alpha(2) + ` Quelle est la probabilitÃ© de tirer 2 carte de ${qualites[1][p]} ?<br>`;
					texte += `Partie 2 : On effectue le tirage de la deuxiÃ¨me carte sans remise de la premiÃ¨re dans le jeu.<br>`;
					texte += `	Reprendre les 3 questions de la partie 1 dans cette nouvelle expÃ©rience.`
					texte_corr = `Partie 1.<br>	`;
					texte_corr += num_alpha(0) + ` On ne s'intÃ©resse ici qu'au tirage de la deuxiÃ¨me carte. En effet pour rÃ©aliser l'Ã©vÃ©nement, il faudra que cette carte soit de la mÃªme couleur que la premiÃ¨re. Il y a deux couleurs rouge et noire et le nombre de carte rouge est le mÃªme que le nombre de carte noire : ${q / 2}.<br>`;
					texte_corr += `	La probabilitÃ© que la deuxiÃ¨me carte soit de la mÃªme couleur que la premiÃ¨re est donc : $${tex_fraction(q / 2, q)}=${tex_fraction(1, 2)}$.<br>`;
					texte_corr += num_alpha(1) + ` Il y a 4 ${Initiale[r]}`;
					if (Initiale[r] == `valet` || Initiale[r] == `roi`) texte += `s`;
					texte_corr += ` dans le jeu sur ${q} cartes possibles. La probabilitÃ© de tirer un ${Initiale[r]} est donc de $${tex_fraction(4, q)}=${tex_fraction_reduite(4, q)}$.<br>`;
					texte_corr += `	Comme la deuxiÃ¨me carte est tirÃ©e dans le jeu complet (aprÃ¨s remise de la premiÃ¨re) la probabilitÃ© de tirer un ${Initiale[r]} est la mÃªme pour cette carte.<br>`;
					texte_corr += `	La probabilitÃ© de tirer 2 ${Initiale[r]}`;
					if (Initiale[r] == `valet` || Initiale[r] == `roi`) texte += `s`;
					texte_corr += ` est donc : $${tex_fraction_reduite(4, q)}\\times${tex_fraction_reduite(4, q)}=${tex_fraction_reduite(16, q * q)}$.<br>`;
					texte_corr += num_alpha(2) + ` Il y a ${q / 4} cartes de ${qualites[1][p]} dans le jeu sur ${q} cartes possibles. La probabilitÃ© de tirer un ${qualites[1][p]} est donc de $${tex_fraction(q / 4, q)}=${tex_fraction(1, 4)}$.<br>`;
					texte_corr += `	Comme la deuxiÃ¨me carte est tirÃ©e dans le jeu complet (aprÃ¨s remise de la premiÃ¨re) la probabilitÃ© de tirer un ${qualites[1][p]} est la mÃªme pour cette carte.<br>`;
					texte_corr += `	La probabilitÃ© de tirer 2 ${qualites[1][p]}s est donc $${tex_fraction(1, 4)}\\times${tex_fraction(1, 4)}=${tex_fraction(1, 16)}$.<br>`;
					texte_corr += `Partie 2.<br>`;
					texte_corr += num_alpha(0) + ` On ne s'intÃ©resse ici qu'au tirage de la deuxiÃ¨me carte. En effet pour rÃ©aliser l'Ã©vÃ©nement, il faudra que cette carte soit de la mÃªme couleur que la premiÃ¨re. Il y a maintenant une carte en moins dans la couleur dÃ©sirÃ©e soit  ${q / 2 - 1} et il y a une carte en moins dans le jeu soit ${q - 1}.<br>`;
					texte_corr += `	La probabilitÃ© que la deuxiÃ¨me carte soit de la mÃªme couleur que la premiÃ¨re est donc : $${tex_fraction(q / 2 - 1, q - 1)}$.<br>`;
					texte_corr += num_alpha(1) + ` Il y a 4 ${Initiale[r]}`;
					if (Initiale[r] == `valet` || Initiale[r] == `roi`) texte += `s`;
					texte_corr += ` dans le jeu sur ${q} cartes possibles. La probabilitÃ© de tirer un ${Initiale[r]} est donc de $${tex_fraction(4, q)}=${tex_fraction_reduite(4, q)}$.<br>`;
					texte_corr += `	Pour que l'Ã©vÃ©nement se rÃ©alise la deuxiÃ¨me carte est tirÃ©e dans les ${q - 1} cartes restantes dans lesquelles il manque un ${Initiale[r]}.<br>`;
					texte_corr += `	La probabilitÃ© de tirer un deuxiÃ¨me ${Initiale[r]} est donc : $${tex_fraction(3, q - 1)}$`;
					if (q == 52) texte_corr += `$=${tex_fraction(1, 17)}$.`
					texte_corr += `<br> La probabilitÃ© de tirer 2 ${Initiale[r]}`;
					if (Initiale[r] == `valet` || Initiale[r] == `roi`) texte += `s`;
					texte_corr += ` est donc : $${tex_fraction_reduite(4, q)}\\times${tex_fraction_reduite(3, q - 1)}=${tex_fraction_reduite(12, q * (q - 1))}$.<br>`;
					texte_corr += num_alpha(2) + ` Il y a ${q / 4} cartes de ${qualites[1][p]} dans le jeu sur ${q} cartes possibles. La probabilitÃ© de tirer un ${qualites[1][p]} est donc de $${tex_fraction(q / 4, q)}=${tex_fraction(1, 4)}$.<br>`;
					texte_corr += `	Pour que l'Ã©vÃ©nement se rÃ©alise la deuxiÃ¨me carte est tirÃ©e dans les ${q - 1} cartes restantes dans lesquelles il manque un ${qualites[1][p]}.<br>`;
					texte_corr += `	La probabilitÃ© de tirer un deuxiÃ¨me ${qualites[1][p]} est donc : $${tex_fraction(q / 4 - 1, q - 1)}$`;
					if (q == 52) texte_corr += `$=${tex_fraction(4, 17)}$<br>La probabilitÃ© de tirer 2 ${qualites[1][p]}s est donc $${tex_fraction(1, 4)}\\times${tex_fraction(4, 17)}=${tex_fraction(1, 17)}$.`;
					else texte_corr += `<br>La probabilitÃ© de tirer 2 ${qualites[1][p]}s est donc $${tex_fraction(1, 4)}\\times${tex_fraction_reduite(7, 31)}=${tex_fraction(7, 124)}$`;
					break;
				case 2:
					n[0] = randint(2, 5); m[0] = randint(2, 5);
					n[1] = randint(1, 6) + 1; m[1] = randint(1, 6) + 1;
					n[2] = randint(1, 3) * 2; m[2] = randint(1, 3) * 2;
					n[3] = randint(1, 4) + 2; m[3] = randint(1, 4) + 2;
					n[4] = randint(2, 5); m[4] = randint(2, 5);
					somme1 = n[0] + n[1] + n[2] + n[3] + n[4];
					somme2 = m[0] + m[1] + m[2] + m[3] + m[4];
					r = randint(0, 4);
					p = randint(0, 4, [r]);
					q = randint(0, 4, [p, r]);
					texte = `Dans sa commode, ${quidam} a mis dans le premier tiroir des paires de chaussettes. Il y a `;
					for (let j = 0; j < 3; j++) {
						texte += `${n[j]} paires de chaussettes ${qualites[2][j]}, `;
					}
					texte += `${n[3]} paires de chaussettes ${qualites[2][3]} et ${n[4]} paires de chaussettes ${qualites[2][4]}.<br>`;
					texte += `Dans le deuxiÃ¨me tiroir, ${quidam} a mis des T-shirt. Il y a `;
					for (let j = 0; j < 3; j++) {
						texte += `${m[j]} T-shirts ${qualites[5][j]}, `;
					}
					texte += `${m[3]} T-shirts ${qualites[5][3]} et ${m[4]} T-shirts ${qualites[5][4]}.<br>`;
					texte += `Un matin, il y a une panne de courant et ${quidam} prend au hasard une paire de chaussettes dans le premier tiroir et un T-shirt dans le deuxiÃ¨me.<br>`;
					texte += num_alpha(0) + ` Quelle est la probabilitÃ© que ${quidam} ait choisi des chaussettes et un T-shirt ${qualites[2][r]} ?<br>`;
					texte += num_alpha(1) + ` Quelle est la probabilitÃ© que ${quidam} ait choisi des chaussettes et un T-shirt de la mÃªme couleur ?<br>`;
					texte += num_alpha(2) + ` Quelle est la probabilitÃ© que ${quidam} ait choisi des chaussettes et un T-shirt de couleurs diffÃ©rentes ?`;
					texte_corr = num_alpha(0) + ` Il y a ${n[r]} paires de chaussettes ${qualites[2][r]} et il y a ${somme1} paires de chaussettes possibles. `;
					texte_corr += `La probabilitÃ© de chosir une paire de chaussettes ${qualites[2][r]} est de : $${tex_fraction(n[r], somme1)}${simplification_de_fraction_avec_etapes(n[r], somme1)}$.<br>`;
					texte_corr += `Il y a ${m[r]} T-shirts ${qualites[5][r]} et il y a ${somme2} T-shirts possibles. `;
					texte_corr += `La probabilitÃ© de chosir un des T-shirt ${qualites[5][r]} est de : $${tex_fraction(m[r], somme2)}${simplification_de_fraction_avec_etapes(m[r], somme2)}$.<br>`;
					texte_corr += `${quidam} a donc $${tex_fraction_reduite(m[r], somme2)}$ de `;
					fra1 = fraction_simplifiee(n[r], somme1);
					fra2 = fraction_simplifiee(m[r], somme2);
					if (fra1[0] == 1) texte_corr += `une chance `;
					else texte_corr += `$${fra1[0]}$ chances `;
					texte_corr += `sur $${fra1[1]}$ de choisir des chaussettes et un T-shirt ${qualites[5][r]}.<br>`;
					texte_corr += `Soit $${tex_fraction_reduite(m[r], somme2)}\\times${tex_fraction_reduite(n[r], somme1)}=\\dfrac{${fra2[0]}\\times${fra1[0]}}{${fra2[1]}\\times${fra1[1]}}=${tex_fraction(fra1[0] * fra2[0], fra1[1] * fra2[1])}${simplification_de_fraction_avec_etapes(fra1[0] * fra2[0], fra1[1] * fra2[1])}$.<br>`;
					p1 = fraction_simplifiee(fra1[0] * fra2[0], fra1[1] * fra2[1]);
					fra1 = fraction_simplifiee(n[p], somme1);
					fra2 = fraction_simplifiee(m[p], somme2);
					texte_corr += num_alpha(1) + ` La probabilitÃ© de chosir une paire de chaussettes ${qualites[2][p]} est de : $${tex_fraction(n[p], somme1)}${simplification_de_fraction_avec_etapes(n[p], somme1)}$ et `;
					texte_corr += `la probabilitÃ© de chosir l'un des T-shirt ${qualites[5][p]} est de : $${tex_fraction(m[p], somme2)}${simplification_de_fraction_avec_etapes(m[p], somme2)}$.<br>`;
					texte_corr += `Donc la probabilitÃ© de chosir des chaussettes un T-shirt ${qualites[5][p]} est de : $${tex_fraction_reduite(m[p], somme2)}\\times${tex_fraction_reduite(n[p], somme1)}=\\dfrac{${fra2[0]}\\times${fra1[0]}}{${fra2[1]}\\times${fra1[1]}}=${tex_fraction(fra1[0] * fra2[0], fra1[1] * fra2[1])}${simplification_de_fraction_avec_etapes(fra1[0] * fra2[0], fra1[1] * fra2[1])}$.<br>`;
					p2 = fraction_simplifiee(fra1[0] * fra2[0], fra1[1] * fra2[1]);
					fra1 = fraction_simplifiee(n[q], somme1);
					fra2 = fraction_simplifiee(m[q], somme2);
					texte_corr += `La probabilitÃ© de chosir une paire de chaussettes ${qualites[2][q]} est de : $${tex_fraction(n[q], somme1)}${simplification_de_fraction_avec_etapes(n[q], somme1)}$ et `;
					texte_corr += `la probabilitÃ© de chosir l'un des T-shirt ${qualites[5][q]} est de : $${tex_fraction(m[q], somme2)}${simplification_de_fraction_avec_etapes(m[q], somme2)}$.<br>`;
					texte_corr += `Donc la probabilitÃ© de chosir des chaussettes un T-shirt ${qualites[5][q]} est de : $${tex_fraction_reduite(m[q], somme2)}\\times${tex_fraction_reduite(n[q], somme1)}=\\dfrac{${fra2[0]}\\times${fra1[0]}}{${fra2[1]}\\times${fra1[1]}}=${tex_fraction(fra1[0] * fra2[0], fra1[1] * fra2[1])}${simplification_de_fraction_avec_etapes(fra1[0] * fra2[0], fra1[1] * fra2[1])}$.<br>`;
					p3 = fraction_simplifiee(fra1[0] * fra2[0], fra1[1] * fra2[1]);
					texte_corr += `On en dÃ©duit que la probabilitÃ© de choisir des chaussettes et un T-shirt de la mÃªme couleur est :<br>`;
					texte_corr += `$${tex_fraction(p1[0], p1[1])}+${tex_fraction(p2[0], p2[1])}+${tex_fraction(p3[0], p3[1])}=`;
					if (p1[1] == p2[1] && p2[1] == p3[1]) {
						texte_corr += `\\dfrac{${p1[0]}+${p2[0]}+${p3[0]}}{${p1[1]}}=${tex_fraction(p1[0] + p2[0] + p3[0], p1[1])}${simplification_de_fraction_avec_etapes(p1[0] + p2[0] + p3[0], p1[1])}$<br>`;
						fra1 = fraction_simplifiee(p1[0] + p2[0] + p3[0], p1[1]);
					}
					else {
						den = ppcm(p1[1], ppcm(p2[1], p3[1]));
						let e = den / p1[1], f = den / p2[1], g = den / p3[1];
						texte_corr += `${tex_fraction(p1[0] * e, den)}+${tex_fraction(p2[0] * f, den)}+${tex_fraction(p3[0] * g, den)}=${tex_fraction(p1[0] * e + p2[0] * f + p3[0] * g, den)}${simplification_de_fraction_avec_etapes(p1[0] * e + p2[0] * f + p3[0] * g, den)}$<br>`;
						fra1 = fraction_simplifiee(p1[0] * e + p2[0] * f + p3[0] * g, den);
					}
					texte_corr += num_alpha(2) + ` L'Ã©vÃ©nement \"choisir des chaussettes et un T-shirt de couleurs diffÃ©rentes\" est l'Ã©vÃ©nement contraire de l'Ã©vÃ©nement \"choisir des chaussettes et un T-shirt de mÃªme couleur\".<br>`;
					texte_corr += `Donc sa probabilitÃ© est : $1-${tex_fraction(fra1[0], fra1[1])}=\\dfrac{${fra1[1]}-${fra1[0]}}{${fra1[1]}}=${tex_fraction(fra1[1] - fra1[0], fra1[1])}${simplification_de_fraction_avec_etapes(fra1[1] - fra1[0], fra1[1])}$<br>`;
					break;
				case 3:
					quidam = prenomM();
					quidame = prenomF();
					p = choice([4, 6, 8, 10, 12]);
					q = choice([4, 6, 8, 10, 12], [p]);
					n[0] = Math.min(p, q); // petit dÃ© de quidam
					m[0] = Math.max(p, q); // grand dÃ© de quidam
					p1[0] = n[0] * m[0]; // nombre de couples pour quidam
					p = choice([4, 6, 8, 12]);
					q = choice([4, 6, 8, 12], [p]);
					n[1] = Math.min(p, q); // petit dÃ© de quidame
					m[1] = Math.max(p, q); // grand dÃ© de quidame
					p1[1] = n[1] * m[1] // nombre de couples pour quidame
					somme1 = n[0] + m[0]; // maximum pour quidam
					somme2 = n[1] + m[1]; // maximum pour quidame
					r = Math.min(somme1, somme2) // Plus grand rÃ©sultat commun.
					for (let j = 0; j < n[0] + m[0] - 1; j++) fra1[j] = 0;
					for (let j = 1; j <= n[0]; j++) {
						for (let k = 1; k <= m[0]; k++) {
							fra1[j + k - 2]++; // numÃ©rateurs de probas pour quidam = nombre d'occurences des diffÃ©rents rÃ©sultats possibles
						}
					}
					for (let j = 0; j < n[1] + m[1] - 1; j++) fra2[j] = 0;
					for (let j = 1; j <= n[1]; j++) {
						for (let k = 1; k <= m[1]; k++) {
							fra2[j + k - 2]++; // numÃ©rateurs de probas pour quidame = nombre d'occurences des diffÃ©rents rÃ©sultats possibles
						}
					}
					for (let j = 0; j < r - 1; j++) {
						p2[j] = fra2[j] / p1[1] - fra1[j] / p1[0]; // diffÃ©rence entre les probas de l'un et de l'autre (positif si Quidame a plus de chance...)
					}

					texte = `${quidam} dispose d'un dÃ© Ã  ${n[0]} faces numÃ©rotÃ©es de 1 Ã  ${n[0]} et d'un dÃ© Ã  ${m[0]} faces numÃ©rotÃ©es de 1 Ã  ${m[0]}.<br>`;
					texte += `Il lance ses deux dÃ©s et en fait la somme.<br>`;
					texte += num_alpha(0) + ` Reporte dans un tableau les issues possibles de cette expÃ©rience alÃ©atoire et leurs probabilitÃ©s respectives.<br>`;
					texte += num_alpha(1) + ` ${quidame} dispose d'un dÃ© Ã  ${n[1]} faces numÃ©rotÃ©es de 1 Ã  ${n[1]} et d'un dÃ© Ã  ${m[1]} faces numÃ©rotÃ©es de 1 Ã  ${m[1]}.<br>`;
					texte += `Elle dÃ©cide de proposer un dÃ©fi Ã  ${quidam} : \"On choisit un nombre cible entre 2 et ${r}, on lance nos deux dÃ©s en mÃªme temps. Le premier dont la somme des dÃ©s est la cible a gagnÃ©.\"<br>`;
					texte += num_alpha(2) + ` ${quidam} qui connaÃ®t les probabilitÃ©s calculÃ©es au 1) propose alors de choisir ${n[0] + 1} comme nombre cible. Il pense avoir plus de chances de gagner que ${quidame}. A-t-il raison ?<br>`;
					texte += `Si oui, quel nombre doit choisir ${quidame} pour avoir un dÃ©fi qui lui soit favorable et si non, y a-t-il un meilleur choix pour ${quidam} ?<br>`;
					texte += num_alpha(3) + ` Y a-t-il un nombre cible qui donne un jeu Ã©quitable oÃ¹ chacun aura la mÃªme probabilitÃ© de gagner ?<br>`;
					texte += `$\\textit {Exercice inspirÃ© des problÃ¨mes DuDu (mathix.org)}$`;
					texte_corr = num_alpha(0) + ` les diffÃ©rents rÃ©sultats de l\'Ã©xpÃ©rience de ${quidam} sont prÃ©sentÃ©s dans cette table :<br>`;
					// tableau d'addition des dÃ©
					texte_corr += '$\\def\\arraystretch{1.5}\\begin{array}{|c';
					for (let j = 0; j <= m[0]; j++)	texte_corr += `|c`;
					texte_corr += '} \\hline  \\text{DÃ© 1/DÃ© 2}';
					for (let j = 1; j <= m[0]; j++) 	texte_corr += `&` + j;
					for (let k = 1; k <= n[0]; k++) {
						texte_corr += ` \\\\\\hline ` + k;
						for (let j = 1; j <= m[0]; j++) texte_corr += `& \\textcolor {${Couleurs[(j + k) % 10]}}{${j + k}}`;
					}
					texte_corr += `\\\\\\hline\\end{array}$<br>`
					// fin du tableau
					texte_corr += `Les probabilitÃ©s de chaque issue sont donnÃ©es par ce tableau :<br>`;
					// tableau des probas
					texte_corr += '$\\def\\arraystretch{2.5}\\begin{array}{|c';
					for (let j = 1; j <= somme1; j++)	texte_corr += `|c`;
					texte_corr += '} \\hline  \\text{rÃ©sultats}';
					for (let j = 2; j <= somme1; j++) 	texte_corr += `&` + j;
					texte_corr += ` \\\\\\hline \\text{ProbabilitÃ©}`;
					for (let j = 2; j <= somme1; j++) texte_corr += `& \\textcolor {${Couleurs[j % 10]}}` + `{\\dfrac{${fra1[j - 2]}}{${p1[0]}}}`;

					texte_corr += `\\\\\\hline\\end{array}$<br>`
					// fin du tableau
					texte_corr += num_alpha(1) + ` Les probabilitÃ©s en ce qui concerne ${quidame} sont donnÃ©es par le tableau ci-dessous :<br>`;
					// tableau des probas pour quidame
					texte_corr += '$\\def\\arraystretch{2.5}\\begin{array}{|c';
					for (let j = 1; j <= somme2; j++)	texte_corr += `|c`;
					texte_corr += '} \\hline  \\text{RÃ©sultats}';
					for (let j = 2; j <= somme2; j++) 	texte_corr += `&` + j;
					texte_corr += ` \\\\\\hline \\text{ProbabilitÃ©}`;
					for (let j = 2; j <= somme2; j++) texte_corr += `& \\textcolor {${Couleurs[j % 10]}}` + `{\\dfrac{${fra2[j - 2]}}{${p1[1]}}}`;
					texte_corr += `\\\\\\hline\\end{array}$<br>`

					texte_corr += `La probabilitÃ© qu'a ${quidame} de faire ${n[0] + 1} est : $\\textcolor {${Couleurs[(n[0] + 1) % 10]}}{${tex_fraction(fra2[n[0] - 1], p1[1])}}${simplification_de_fraction_avec_etapes(fra2[n[0] - 1], p1[1])}$.<br>`;
					texte_corr += `La probabilitÃ© qu'a ${quidam} de faire ${n[0] + 1} est : $\\textcolor {${Couleurs[(n[0] + 1) % 10]}}{${tex_fraction(fra1[n[0] - 1], p1[0])}}${simplification_de_fraction_avec_etapes(fra1[n[0] - 1], p1[0])}$.<br>`;
					if (p2[n[0] - 1] > 0) {// Si quidame a plus de chance de gagner avec le choix de quidam
						texte_corr += `${quidam} se trompe en croyant avoir plus de chances de gagner car $${tex_fraction_reduite(fra2[n[0] - 1], p1[1])}>${tex_fraction_reduite(fra1[n[0] - 1], p1[0])}$.<br>`
						// choix du nombre cible qui favorise quidam
						trouve = false;
						for (let j = r - 2; j >= 0; j--) {
							if (p2[j] < 0) {
								texte_corr += num_alpha(2) + ` ${quidam} aurait du choisir ${j + 2} comme nombre cible.<br> Sa probabilitÃ© de rÃ©ussir serait alors de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra1[j], p1[0])}}${simplification_de_fraction_avec_etapes(fra1[j], p1[0])}$ et celle de ${quidame} serait de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra2[j], p1[1])}}${simplification_de_fraction_avec_etapes(fra2[j], p1[1])}$.<br>`
								trouve = true;
							}
							if (trouve == true) break;
						}
						if (trouve == false) {
							texte_corr += num_alpha(2) + ` Il n'existe pas de choix qui permette Ã  ${quidam} d'avoir plus de chance que ${quidame} de gagner.`
						}
					}
					else // quidam a plus de chances de gagner
						if (p2[n[0] - 1] < 0) {
							texte_corr += `${quidam} a raison de penser avoir plus de chances de gagner car $${tex_fraction_reduite(fra2[n[0] - 1], p1[1])}<${tex_fraction_reduite(fra1[n[0] - 1], p1[0])}$.<br>`
							// choix du nombre cible qui favorise quidame
							trouve = false;
							for (let j = r - 2; j >= 0; j--) {
								if (p2[j] > 0) {
									texte_corr += num_alpha(2) + ` ${quidame} devrait choisir ${j + 2} comme nombre cible.<br>Sa probabilitÃ© de rÃ©ussir serait alors de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra2[j], p1[1])}}${simplification_de_fraction_avec_etapes(fra2[j], p1[1])}$<br>Celle de ${quidam} serait de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra1[j], p1[0])}}${simplification_de_fraction_avec_etapes(fra1[j], p1[0])}$ et $${tex_fraction_reduite(fra1[j], p1[0])}<${tex_fraction(fra2[j], p1[1])}.$<br>`
									trouve = true;
								}
								if (trouve == true) break;
							}
							if (trouve == false) {
								texte_corr += num_alpha(2) + ` Il n'existe pas de choix qui permette Ã  ${quidame} d'avoir plus de chance que ${quidam} de gagner.<br>`
							}
						}

						// Ils ont autant de chances de gagner l'un que l'autre
						else {
							texte_corr += `${quidam} et ${quidame} ont autant de chances de gagner car ils ont tous deux la mÃªme probabilitÃ© de faire ${n[0] + 1}, ce qui rÃ©pond Ã  la question ${num_alpha(3)}.<br>`
							// choix du nombre cible qui favorise quidam
							trouve = false;
							for (let j = r - 2; j >= 0; j--) {
								if (p2[j] < 0) {
									texte_corr += num_alpha(2) + ` ${quidam} aurait du choisir ${j + 2} comme nombre cible.<br> Sa probabilitÃ© de rÃ©ussir serait alors de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra1[j], p1[0])}}${simplification_de_fraction_avec_etapes(fra1[j], p1[0])}$ et celle de ${quidame} serait de $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra2[j], p1[1])}}${simplification_de_fraction_avec_etapes(fra2[j], p1[1])}$.<br>`
									trouve = true;
								}
								if (trouve == true) break;
							}
							if (trouve == false) {
								texte_corr += num_alpha(2) + ` Il n'existe pas de choix qui permette Ã  ${quidam} d'avoir plus de chance que ${quidame} de gagner.<br>`
							}
						}
					if (p2[n[0] - 1] == 0) {
						texte_corr += num_alpha(3) + ` Il a Ã©tÃ© dÃ©jÃ  rÃ©pondu Ã  cette question Ã  la question ${num_alpha(1)}.<br>`;
					}
					else { // choix de la cible pour un jeu Ã©quitable
						trouve = false;
						for (let j = r - 2; j >= 0; j--) {
							if (p2[j] == 0) {
								texte_corr += num_alpha(3) + ` En choisissant ${j + 2} comme cible, ${quidam} et ${quidame} ont la mÃªme probabilitÃ© de gagner.<br>
								Pour ${quidam} la probabilitÃ© est : $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra1[j], p1[0])}}${simplification_de_fraction_avec_etapes(fra1[j], p1[0])}$ tout comme pour ${quidame} : $\\textcolor {${Couleurs[(j + 2) % 10]}}{${tex_fraction(fra2[j], p1[1])}}${simplification_de_fraction_avec_etapes(fra2[j], p1[1])}$.<br>`
								trouve = true;
							}
							if (trouve == true) break;
						}
						if (trouve == false) {
							texte_corr += num_alpha(3) + ` Il n'existe pas de choix qui permette Ã  ${quidam}et Ã  ${quidame} d'avoir la mÃªme probabilitÃ© de gagner car : <br>`;
							for (let j = 2; j < r / 2; j++) {
								texte_corr += `$\\textcolor {${Couleurs[(j) % 10]}}{${tex_fraction(fra1[j - 2], p1[0])}}\\ne \\textcolor {${Couleurs[(j) % 10]}}{${tex_fraction(fra2[j - 2], p1[1])}}$ ; `;
							}
							texte_corr += `et $\\textcolor {${Couleurs[(r / 2) % 10]}}{${tex_fraction(fra1[r / 2], p1[0])}}\\ne \\textcolor {${Couleurs[(r / 2) % 10]}}{${tex_fraction(fra2[r / 2], p1[1])}}$.`;
						}
					}
					break;
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
	}
};


/**
 * Trace 5 droites et demande l'expression de la fonction affine ou linÃ©aire correspondante
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence : 3F21
 */
function Lecture_expression_fonctions_affines() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©terminer une fonction affine";
	this.consigne = "Donner l'expression des fonctions reprÃ©sentÃ©es";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	sortie_html ? this.spacing = 2 : this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.sup = 1;
	this.sup2 =3
	this.lineaire = false;
	this.liste_packages = 'tkz-euclide';


	this.nouvelle_version = function (numero_de_l_exercice) { // numero_de_l_exercice est 0 pour l'exercice 1
		let k = Math.pow(2, parseInt(this.sup) - 1);
		let nb_droites=parseInt(this.sup2)
		this.liste_questions = [];
		this.liste_corrections = [];
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es
		let h = Math.round(window.innerHeight * 0.7) //pour dÃ©terminer la hauteur du div 
		let liste_droites = [];
		let OrdX0;
		let Pente = [];
		if (!this.lineaire) {
			Pente.push(randint(-2 * k, 2 * k));
			Pente.push(randint(-2 * k, 2 * k, [Pente[0]]));
			Pente.push(randint(-2 * k, 2 * k, [Pente[0], Pente[1]]));
			Pente.push(randint(-2 * k, 2 * k, [Pente[0], Pente[1], Pente[2]]));
			Pente.push(randint(-2 * k, 2 * k, [Pente[0], Pente[1], Pente[2], Pente[3]]));
		}
		else {
			Pente.push(randint(-3 * k, 3 * k, [0]));
			Pente.push(randint(-3 * k, 3 * k, [Pente[0], 0]));
			Pente.push(randint(-3 * k, 3 * k, [Pente[0], Pente[1], 0]));
			Pente.push(randint(-3 * k, 3 * k, [Pente[0], Pente[1], Pente[2], 0]));
			Pente.push(randint(-3 * k, 3 * k, [Pente[0], Pente[1], Pente[2], Pente[3], 0]));
		}

		for (let i = 0; i < 5; i++) {
			if (this.lineaire) OrdX0 = 0;
			else OrdX0 = randint(-1 + Pente[i] / k, 1 + Pente[i] / k)
			liste_droites.push([OrdX0, Pente[i] / k])
		}

		if (sortie_html) {
			const mon_svg = SVG().viewbox(0, 0, 500, 500).size('100%', '100%')
			SVG_repere(mon_svg, -5, 5, -5, 5, k, k, 500, 500, true);
			SVG_Tracer_droite(mon_svg, 500, 500, -5, 5, -5, 5, liste_droites[0][0], liste_droites[0][1], 'blue', 'd1');
			if (nb_droites>1) SVG_Tracer_droite(mon_svg, 500, 500, -5, 5, -5, 5, liste_droites[1][0], liste_droites[1][1], 'red', 'd2');
			if (nb_droites>2) SVG_Tracer_droite(mon_svg, 500, 500, -5, 5, -5, 5, liste_droites[2][0], liste_droites[2][1], 'green', 'd3');
			if (nb_droites>3) SVG_Tracer_droite(mon_svg, 500, 500, -5, 5, -5, 5, liste_droites[3][0], liste_droites[3][1], 'brown', 'd4');
			if (nb_droites>4) SVG_Tracer_droite(mon_svg, 500, 500, -5, 5, -5, 5, liste_droites[4][0], liste_droites[4][1], 'purple', 'd5');
			this.consigne = `<div style="width: 50%; display : table ">${mon_svg.svg()}</div>`;



		}
		else { //sortie Latex 
			let texte = `\\begin{tikzpicture}`;
			texte += Latex_repere(-5, 5, -5, 5, k, k, true);
			texte += Latex_Tracer_droite(-5, 5, -5, 5, liste_droites[0][0], liste_droites[0][1], 'blue', 'd_1');
			if (nb_droites>1) texte += Latex_Tracer_droite(-5, 5, -5, 5, liste_droites[1][0], liste_droites[1][1], 'red', 'd_2');
			if (nb_droites>2) texte += Latex_Tracer_droite(-5, 5, -5, 5, liste_droites[2][0], liste_droites[2][1], 'green', 'd_3');
			if (nb_droites>3) texte += Latex_Tracer_droite(-5, 5, -5, 5, liste_droites[3][0], liste_droites[3][1], 'brown', 'd_4');
			if (nb_droites>4) texte += Latex_Tracer_droite(-5, 5, -5, 5, liste_droites[4][0], liste_droites[4][1], 'purple', 'd_5');
			texte += `\n\t \\end{tikzpicture}`;
			this.liste_questions.push(texte);
		}
		for (i = 0; i < nb_droites; i++) {
			this.liste_questions.push(`DÃ©terminer l'expression de la fonction $f_${i + 1}$ reprÃ©sentÃ©e par la droite $d_${i + 1}$.`)
			if (this.lineaire || liste_droites[i][0] == 0) this.liste_corrections.push(`La droite $d_${i + 1}$ passe par l'origine et son coefficient directeur est $${tex_nombre(liste_droites[i][1])}$.<br>Elle reprÃ©sente la fonction linÃ©aire $f_${i + 1}(x)=${reduire_ax_plus_b(liste_droites[i][1], 0)}$.`)
			else this.liste_corrections.push(`La droite $d_${i + 1}$ passe par le point de coordonnÃ©es $(0;${liste_droites[i][0]})$ et son coefficient directeur est $${tex_nombre(liste_droites[i][1])}$.<br>Elle reprÃ©sente la fonction affine $f_${i + 1}(x)=${reduire_ax_plus_b(liste_droites[i][1], liste_droites[i][0])}$.`)

		}

		liste_de_question_to_contenu_sans_numero(this);
		if (!this.lineaire) this.contenu_correction = `Il sâagit de fonctions affines, elles sont donc de la forme $f(x)=ax+b$, $b$ Ã©tant lâordonnÃ©e Ã  lâorigine et $a$ la pente de la droite.\n` + this.contenu_correction;
		else this.contenu_correction = `Il sâagit de fonctions linÃ©aires, elles sont donc de la forme $f(x)=ax$, $a$ Ã©tant la `+katex_Popup2(numero_de_l_exercice,1,`pente`,`pente d'une droite`,`La pente (le a de y=ax ou y=ax+b) d'une droite donne le taux d'accroissement de y par rapport Ã  x : lorsque x augmente de 1, alors y augmente de a.`)+` de la droite.\n` + this.contenu_correction ;
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, "1 : Coefficient directeur entier\n2 : Coefficient directeur 'en demis'\n3 : Coefficient directeur 'en quarts'"];
	this.besoin_formulaire2_numerique =['Nombre de droites (1 Ã  5)',5];
}


/**
* DÃ©terminer l'image d'un nombre par une fonction d'aprÃ¨s sa forme algÃ©brique
*
* * Niveau 1 : Fonctions affines
* * Niveau 2 : PolynÃ´me du second degrÃ©
* * Niveau 3 : Quotients de fonctions affines
* * Niveau 4 : (ax+b)(cx+d)
* * Niveau 5 : MÃ©lange 
* @Auteur RÃ©mi Angot
* 3F12-2
*/
function Image_fonction_algebrique() {
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©terminer l'image d'un nombre par une fonction d'aprÃ¨s sa forme algÃ©brique";
	this.consigne = "";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 4; // niveau de difficultÃ©

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [];
		if (this.sup == 1) {
			type_de_questions_disponibles = ['ax+b', 'ax-b', '-ax+b', '-ax-b'];
		}
		if (this.sup == 2) {
			type_de_questions_disponibles = ['ax2+bx+c', 'ax2+c', 'ax2+bx', '-ax2+bx-c', '-ax2-bx-c', '-ax2-bx+c', '-ax2-bx'];
		}
		if (this.sup == 3) {
			type_de_questions_disponibles = ['a/cx+d', 'ax+b/cx+d'];
		}
		if (this.sup == 4) {
			type_de_questions_disponibles = ['(ax+b)(cx+d)', '(ax+b)2'];
		}
		if (this.sup == 5) {
			type_de_questions_disponibles = ['ax+b', 'ax-b', '-ax+b', 'ax2+bx+c', '-ax2+bx-c', '-ax2-bx', 'a/cx+d', 'ax+b/cx+d', '(ax+b)(cx+d)', '(ax+b)2'];
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_de_signes_de_x = combinaison_listes([true, false], this.nb_questions);
		for (let i = 0, texte, texte_corr, a, b, c, d, expression, nomdef, x, cpt = 0; i < this.nb_questions && cpt < 50;) {
			x = randint(1, 12);
			if (liste_de_signes_de_x[i]) {
				x = -1 * x;
			}
			a = randint(2, 11);
			b = randint(2, 11);
			c = randint(2, 11);
			nomdef = lettre_minuscule_depuis_chiffre(6 + i) // on commence par f puis on continue dans l'ordre alphabÃ©tique
			switch (liste_type_de_questions[i]) {
				case 'ax+b':
					expression = `${a}x+${b}`
					texte_corr = `$${nomdef}(${x})=${a}\\times ${ecriture_parenthese_si_negatif(x)}+${b}=${a * x}+${b}=${a * x + b}$`
					break;
				case 'ax-b':
					expression = `${a}x-${b}`
					texte_corr = `$${nomdef}(${x})=${a}\\times ${ecriture_parenthese_si_negatif(x)}-${b}=${a * x}-${b}=${a * x - b}$`
					break;
				case '-ax+b':
					expression = `-${a}x+${b}`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}+${b}=${-1 * a * x}+${b}=${-1 * a * x + b}$`
					break;
				case '-ax-b':
					expression = `-${a}x-${b}`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}-${b}=${-1 * a * x}-${b}=${-1 * a * x - b}$`
					break;
				case 'ax2+bx+c':
					expression = `${a}x^2+${b}x+${c}`
					texte_corr = `$${nomdef}(${x})=${a}\\times ${ecriture_parenthese_si_negatif(x)}^2+${b}\\times ${ecriture_parenthese_si_negatif(x)}+${c}=${a}\\times${x * x}${ecriture_algebrique(b * x)}+${c}=${a * x * x}${ecriture_algebrique(b * x)}+${c}=${a * x * x + b * x + c}$`
					break;
				case 'ax2+c':
					expression = `${a}x^2+${c}`
					texte_corr = `$${nomdef}(${x})=${a}\\times ${ecriture_parenthese_si_negatif(x)}^2+${c}=${a}\\times${x * x}+${c}=${a * x * x}+${c}=${a * x * x + c}$`
					break;
				case 'ax2+bx':
					expression = `${a}x^2+${b}x`
					texte_corr = `$${nomdef}(${x})=${a}\\times ${ecriture_parenthese_si_negatif(x)}^2+${b}\\times ${ecriture_parenthese_si_negatif(x)}=${a}\\times${x * x}${ecriture_algebrique(b * x)}=${a * x * x}${ecriture_algebrique(b * x)}=${a * x * x + b * x}$`
					break;
				case '-ax2+bx-c':
					expression = `-${a}x^2+${b}x-${c}`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}^2+${b}\\times ${ecriture_parenthese_si_negatif(x)}-${c}=-${a}\\times${x * x}${ecriture_algebrique(b * x)}-${c}=${-1 * a * x * x}${ecriture_algebrique(b * x)}-${c}=${-1 * a * x * x + b * x - c}$`
					break;
				case '-ax2-bx-c':
					expression = `-${a}x^2-${b}x-${c}`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}^2-${b}\\times ${ecriture_parenthese_si_negatif(x)}-${c}=-${a}\\times${x * x}${ecriture_algebrique(-1 * b * x)}-${c}=${-1 * a * x * x}${ecriture_algebrique(-1 * b * x)}-${c}=${-1 * a * x * x - b * x - c}$`
					break;
				case '-ax2-bx+c':
					expression = `-${a}x^2-${b}x+${c}`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}^2-${b}\\times ${ecriture_parenthese_si_negatif(x)}+${c}=-${a}\\times${x * x}${ecriture_algebrique(-1 * b * x)}+${c}=${-1 * a * x * x}${ecriture_algebrique(-1 * b * x)}+${c}=${-1 * a * x * x - b * x + c}$`
					break;
				case '-ax2-bx':
					expression = `-${a}x^2-${b}x`
					texte_corr = `$${nomdef}(${x})=-${a}\\times ${ecriture_parenthese_si_negatif(x)}^2-${b}\\times ${ecriture_parenthese_si_negatif(x)}=-${a}\\times${x * x}${ecriture_algebrique(-1 * b * x)}=${-1 * a * x * x}${ecriture_algebrique(-1 * b * x)}=${-1 * a * x * x - b * x}$`
					break;
				case 'a/cx+d':
					d = randint(1, 11)
					while (c * x + d == 0) {
						c = randint(2, 11)
					}
					expression = `\\dfrac{${a}}{${c}x+${d}}`
					texte_corr = `$${nomdef}(${x})=\\dfrac{${a}}{${c}\\times${ecriture_parenthese_si_negatif(x)}+${d}}=\\dfrac{${a}}{${c * x}+${d}}=\\dfrac{${a}}{${c * x + d}}=${tex_fraction_reduite(a, c * x + d)}$`
					break;
				case 'ax+b/cx+d':
					d = randint(1, 11)
					while (c * x + d == 0) {
						c = randint(2, 11)
					}
					while (a * x + b == 0) {
						a = randint(2, 11)
					}
					expression = `\\dfrac{${a}x+${b}}{${c}x+${d}}`
					texte_corr = `$${nomdef}(${x})=\\dfrac{${a}\\times${ecriture_parenthese_si_negatif(x)}+${b}}{${c}\\times${ecriture_parenthese_si_negatif(x)}+${d}}=\\dfrac{${a * x}+${b}}{${c * x}+${d}}=\\dfrac{${a * x + b}}{${c * x + d}}=${tex_fraction_reduite(a * x + b, c * x + d)}$`
					break;
				case '(ax+b)(cx+d)':
					a = randint(-4, 4, [0, 1, -1])
					b = randint(-4, 4, [0])
					c = randint(-4, 4, [0, 1, -1])
					d = randint(-4, 4, [0])
					x = randint(-2, 2, [0])

					expression = `(${a}x${ecriture_algebrique(b)})(${c}x${ecriture_algebrique(d)})`
					texte_corr = `$${nomdef}(${x})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x)}${ecriture_algebrique(b)}\\right)\\left(${c}\\times${ecriture_parenthese_si_negatif(x)}${ecriture_algebrique(d)}\\right)=(${a * x}${ecriture_algebrique(b)})(${c * x}${ecriture_algebrique(d)})=${a * x + b}\\times${ecriture_parenthese_si_negatif(c * x + d)}=${(a * x + b) * (c * x + d)}$`
					break;
				case '(ax+b)2':
					a = randint(-4, 4, [0, -1, 1])
					b = randint(-4, 4, [0])
					c = randint(-4, 4, [0, -1, 1])
					d = randint(-4, 4, [0])
					x = randint(-2, 2, [0])

					expression = `(${a}x${ecriture_algebrique(b)})^2`
					texte_corr = `$${nomdef}(${x})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x)}${ecriture_algebrique(b)}\\right)^2=(${a * x}${ecriture_algebrique(b)})^2=${ecriture_parenthese_si_negatif(a * x + b)}^2=${(a * x + b) * (a * x + b)}$`
					break;
			}

			texte = `On considÃ¨re la fonction $${nomdef}$ dÃ©finie par $${nomdef}:x\\mapsto ${expression}$. Calculer $${nomdef}(${x})$.`


			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 5, '1 : Fonctions affines\n2 : Polynome du second degrÃ©\n3 : Quotient\n4 : Produit \n5 : MÃ©lange'];
}



/**
* RÃ©duire des expressions lorsque c'est possible
*
* @Auteur RÃ©mi Angot
* 3L11-2
*/
function Reduction_si_possible() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "RÃ©duire une expression";
	this.consigne = "RÃ©duire les expressions suivantes, si cela est possible.";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = ['ax+b', 'ax+bx', 'ax+bx2', 'ax*b','b*ax','ax+b+cx+d','b+ax+d+cx','ax+b+x'];
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, a, b, c, d, cpt = 0; i < this.nb_questions && cpt < 50;) {
			a = randint(-11,11,0);
			b = randint(-11,11,[0,a]);
			c = randint(-11,11,[0]);
			d = randint(-11,11,0)
			switch (liste_type_de_questions[i]) {
				case 'ax+b':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b})`)}$`;
					texte_corr = texte
					break;
				case 'ax+bx':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b}*x)`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b}*x)`)}=${printlatex(`${a+b}x`)}$`;
					break;
				case 'ax+bx2':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b}*x^2)`)}$`;
					texte_corr = texte
					break;
				case 'ax*b':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x`)}\\times${ecriture_parenthese_si_negatif(b)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x`)}\\times${ecriture_parenthese_si_negatif(b)}=${printlatex(`${a*b}*x`)}$`;
					break;
				case 'b*ax':
					a = randint(1,11);
					texte = `$${lettre_depuis_chiffre(i+1)}=${b}\\times${printlatex(`${a}*x`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${b}\\times${printlatex(`${a}*x`)}=${printlatex(`${b*a}*x`)}$`;
					break;
				case 'ax+b+cx+d':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b})+(${c})*x+(${d})`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b})+(${c})*x+(${d})`)}`;
					if (b+d==0) {
						if (a+c==0) {
							texte_corr += `=0$`
						} else {
							texte_corr += `=${printlatex(`${a+c}*x`)}$`
						}
					} else {
						if (a+c==0) {
							texte_corr += `=${b+d}$`	
						} else {
							texte_corr += `=${printlatex(`${a+c}*x+(${b+d})`)}$`	
						}
					}
					break;
				case 'b+ax+d+cx':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${b}+(${a})*x+(${d})+(${c})*x`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${b}+(${a})*x+(${d})+(${c})*x`)}`;
					if (b+d==0) {
						if (a+c==0) {
							texte_corr += `=0$`
						} else {
							texte_corr += `=${printlatex(`${a+c}*x`)}$`
						}
					} else {
						if (a+c==0) {
							texte_corr += `=${b+d}$`	
						} else {
							texte_corr += `=${printlatex(`${a+c}*x+(${b+d})`)}$`	
						}
					}
					break;
					case 'ax+b+x':
					a = randint(-11,11,[0,-1])
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b})+x`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${a}*x+(${b})+x`)}=${printlatex(`${a+1}*x+(${b})`)}$`
					break;
				
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}


/**
* Utiliser la simple ou la double distributivitÃ© et rÃ©duire l'expression
*
* @Auteur RÃ©mi Angot
* 3L11-3
*/
function Distributivite_simple_double_reduction() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Utiliser la distributivitÃ© (simple ou double) et rÃ©duire";
	this.consigne = "DÃ©velopper et rÃ©duire les expressions suivantes.";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = ['cx+e(ax+b)','ex+(ax+b)(cx+d)','e+(ax+b)(cx+d)','e-(ax+b)(cx+d)','(ax*b)(cx+d)','e(ax+b)-(d+cx)'];
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, a, b, c, d, e, cpt = 0; i < this.nb_questions && cpt < 50;) {
			a = randint(-11,11,0);
			b = randint(-11,11,0);
			c = randint(-11,11,0);
			d = randint(-11,11,0);
			e = randint(-11,11,0);
			switch (liste_type_de_questions[i]) {
				case 'cx+e(ax+b)':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${c}*x+(${e})*(${a}*x+(${b}))`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${c}*x+(${e})*(${a}*x+(${b}))`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${c}*x+(${e*a})*x+(${e*b})`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${c+e*a}*x+(${e*b})`)}$`;
					break;
				case 'ex+(ax+b)(cx+d)':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${e}*x+(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${e}*x+(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${e}*x+(${a*c})*x^2+(${a*d})*x+(${b*c})*x+(${b*d})`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${a*c}*x^2+(${e+b*c+a*d})*x+(${b*d})`)}$`;
					break;
				case 'e+(ax+b)(cx+d)':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${e}+(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${e}+(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${e}+(${a*c})*x^2+(${a*d})*x+(${b*c})*x+(${b*d})`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${a*c}*x^2+(${b*c+a*d})*x+(${e+b*d})`)}$`;
					break;
				case 'e-(ax+b)(cx+d)':
					texte = `$${lettre_depuis_chiffre(i+1)}=${e}-${printlatex(`(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=${e}-${printlatex(`(${a}*x+(${b}))*(${c}x+(${d}))`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${e}-(${printlatex(`(${a*c})*x^2+(${a*d})*x+(${b*c})*x+(${b*d})`)})$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${e}+(${-1*a*c})*x^2+(${-1*a*d})*x+(${-1*b*c})*x+(${-1*b*d})`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${-1*a*c}*x^2+(${-1*b*c-a*d})*x+(${e-b*d})`)}$`;
					break;
				case '(ax*b)(cx+d)':
					a = randint (-3,3,[0]);
					b = randint (2,3);
					texte = `$${lettre_depuis_chiffre(i+1)}=(${printlatex(`${a}*x`)}\\times${b})(${printlatex(`${c}*x+(${d})`)})$`;
					texte_corr = `$${lettre_depuis_chiffre(i+1)}=(${printlatex(`${a}*x`)}\\times${b})(${printlatex(`${c}*x+(${d})`)})$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${a*b}*x`)}\\times(${printlatex(`${c}*x+(${d})`)})$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`${a*b*c}*x^2+(${a*b*d})*x`)}$`;
					break;
				case 'e(ax+b)-(d+cx)':
					texte = `$${lettre_depuis_chiffre(i+1)}=${e}(${printlatex(`${a}*x+(${b})`)})-(${printlatex(`${d}+(${c})*x`)})$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`(${e*a})*x+(${e*b})`)}-(${printlatex(`${d}+(${c})*x`)})$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`(${e*a})*x+(${e*b})+(${-d})+(${-c})*x`)}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${printlatex(`(${e*a-c})*x+(${e*b-d})`)}$`;
					break;
				
				
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}

/**
* Utiliser la simple ou la double distributivitÃ© et rÃ©duire l'expression
*
* @Auteur RÃ©mi Angot
* 3L11-4
*/
function Factoriser_par_nombre_ou_x() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Factoriser une expression";
	this.consigne = "Factoriser les expressions suivantes.";
	this.nb_questions = 8;
	this.nb_cols = 2;
	this.nb_cols_corr = 2;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = ['ka+nkb','-ka+nkb','nka+mkb','nka-mkb','nkx+mkx2','nkx-mkx2','nx2+x','nx2+mx'];
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, n, m, couplenm, k, cpt = 0; i < this.nb_questions && cpt < 50;) {
			k = choice([2,3,5,7,11]);
			couplenm=choice([[2,3],[3,4],[2,5],[3,5],[4,5],[5,6],[2,7],[3,7],[4,7],[5,7],[6,7],[3,8],[5,8],[7,8],[2,9],[4,9],[5,9],[7,9],[8,9],[3,10],[7,10],[9,10]]); // n et m sont premiers entre eux
			n = couplenm[0];
			m = couplenm[1];
			switch (liste_type_de_questions[i]) {
				case 'ka+nkb':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${k}*a+(${n*k})*b`)}$`;
					texte_corr = texte;
					if (n>0) {
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}a+${k}\\times${n}b$`;
					} else {
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}a-${k}\\times${abs(n)}b$`;
					}
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}(${printlatex(`a+(${n})*b`)})$`;
					break;
				case '-ka+nkb':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${-k}*a+(${n*k})*b`)}$`;
					texte_corr = texte;
					if (n>0) {
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${-k}a+${k}\\times${n}b$`;
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}(${printlatex(`-a+${n}*b`)})$`;
					} else {
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${-k}a+(${-k})\\times${-n}b$`;
						texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${-k}(${printlatex(`a+(${-n})*b`)})$`;
					}
					break;
				case 'nka+mkb':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${n*k}*a+(${m*k})*b`)}$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}\\times${n}a+${k}\\times${m}b$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}(${n}a+${m}b)$`;
					break;
				case 'nka-mkb':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${n*k}*a-(${m*k})*b`)}$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}\\times${n}a-${k}\\times${m}b$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}(${n}a-${m}b)$`;
					break;
				case 'nkx+mkx2':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${n*k}*x+(${m*k})*x^2`)}$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}x\\times${n}+${k}x\\times${m}x$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}x(${n}+${m}x)$`;
					break;
				case 'nkx-mkx2':
					texte = `$${lettre_depuis_chiffre(i+1)}=${printlatex(`${n*k}*x-(${m*k})*x^2`)}$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}x\\times${n}-${k}x\\times${m}x$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=${k}x(${n}-${m}x)$`;
					break;
				case 'nx2+x':
					texte = `$${lettre_depuis_chiffre(i+1)}=${n}x^2+x$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=x\\times ${n}x+x\\times 1$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=x(${n}x+1)$`;
					break;
				case 'nx2+mx':
					texte = `$${lettre_depuis_chiffre(i+1)}=${n}x^2+${m}x$`;
					texte_corr = texte;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=x\\times ${n}x+x\\times ${m}$`;
					texte_corr += `<br>$\\phantom{${lettre_depuis_chiffre(i+1)}}=x(${n}x+${m})$`;
					break;
				
				
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}

/**
* DÃ©terminer l'image d'un nombre par une fonction d'aprÃ¨s sa forme algÃ©brique
*
* * Niveau 1 : Fonctions affines
* * Niveau 2 : PolynÃ´me du second degrÃ©
* * Niveau 3 : Quotients de fonctions affines
* * Niveau 4 : (ax+b)(cx+d)
* * Niveau 5 : MÃ©lange 
* @Auteur RÃ©mi Angot
* 3F12-3
*/
function Tableau_de_valeurs() {
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "ComplÃ©ter un tableau de valeurs";
	this.consigne = "";
	this.nb_questions = 1;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	this.sup = 5; // niveau de difficultÃ©
	this.correction_detaillee_disponible = true;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [];
		if (this.sup == 1) {
			type_de_questions_disponibles = ['ax+b', 'ax'];
		}
		if (this.sup == 2) {
			type_de_questions_disponibles = ['ax2+bx+c', 'ax2+c', 'ax2+bx'];
		}
		if (this.sup == 3) {
			type_de_questions_disponibles = ['a/cx+d', 'ax+b/cx+d'];
		}
		if (this.sup == 4) {
			type_de_questions_disponibles = ['(ax+b)(cx+d)', '(ax+b)2'];
		}
		if (this.sup == 5) {
			type_de_questions_disponibles = ['ax+b', 'ax', 'ax2+bx+c', 'ax2+c', 'ax2+bx', 'a/cx+d', 'ax+b/cx+d', '(ax+b)(cx+d)', '(ax+b)2']
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_de_x = combinaison_listes([[-3, 0, 3], [-2, 0, 2], [1, 2, 5], [-3, 6, 9]], this.nb_questions);
		for (let i = 0, texte, texte_corr, a, b, c, d, x1, x2, x3, expression, nomdef, ligne2, calculs = "", cpt = 0; i < this.nb_questions && cpt < 50;) {
			nomdef = lettre_minuscule_depuis_chiffre(6 + i) // on commence par f puis on continue dans l'ordre alphabÃ©tique
			x1 = liste_de_x[i][0];
			x2 = liste_de_x[i][1];
			x3 = liste_de_x[i][2];
			switch (liste_type_de_questions[i]) {
				case 'ax+b':
					a = randint(-10, 10, [0, -1, 1])
					b = randint(-10, 10, [0])
					expression = `${a}x${ecriture_algebrique(b)}`
					ligne2 = `${nomdef}(x) & ${a * liste_de_x[i][0] + b} & ${a * liste_de_x[i][1] + b} & ${a * liste_de_x[i][2] + b} \\\\\n`
					calculs = `$${nomdef}(${x1})=${a}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(b)}=${a * x1}${ecriture_algebrique(b)}=${a * x1 + b}$<br>`
					calculs += `$${nomdef}(${x2})=${a}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(b)}=${a * x2}${ecriture_algebrique(b)}=${a * x2 + b}$<br>`
					calculs += `$${nomdef}(${x3})=${a}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(b)}=${a * x3}${ecriture_algebrique(b)}=${a * x3 + b}$<br>`
					break;
				case 'ax':
					a = randint(-10, 10, [0, -1, 1])
					expression = `${a}x`
					ligne2 = `${nomdef}(x) & ${a * liste_de_x[i][0]} & ${a * liste_de_x[i][1]} & ${a * liste_de_x[i][2]} \\\\\n`
					calculs = `$${nomdef}(${x1})=${a}\\times${ecriture_parenthese_si_negatif(x1)}=${a * x1}$<br>`
					calculs += `$${nomdef}(${x2})=${a}\\times${ecriture_parenthese_si_negatif(x2)}=${a * x2}$<br>`
					calculs += `$${nomdef}(${x3})=${a}\\times${ecriture_parenthese_si_negatif(x3)}=${a * x3}$<br>`
					break;
				case 'ax2+bx+c':
					a = randint(-3, 3, [0, -1, 1])
					b = randint(-5, 5, [0, -1, 1])
					c = randint(-10, 10, [0])
					expression = `${a}x^2${ecriture_algebrique(b)}x${ecriture_algebrique(c)}`
					ligne2 = `${nomdef}(x) & ${a * liste_de_x[i][0] ** 2 + b * liste_de_x[i][0] + c} & ${a * liste_de_x[i][1] ** 2 + b * liste_de_x[i][1] + c} & ${a * liste_de_x[i][2] ** 2 + b * liste_de_x[i][2] + c} \\\\\n`
					calculs = `$${nomdef}(${x1})=${a}\\times${ecriture_parenthese_si_negatif(x1)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(c)}=${a}\\times${x1 ** 2}${ecriture_algebrique(b * x1)}${ecriture_algebrique(c)}=${a * x1 ** 2 + b * x1 + c}$<br>`
					calculs += `$${nomdef}(${x2})=${a}\\times${ecriture_parenthese_si_negatif(x2)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(c)}=${a}\\times${x2 ** 2}${ecriture_algebrique(b * x2)}${ecriture_algebrique(c)}=${a * x2 ** 2 + b * x2 + c}$<br>`
					calculs += `$${nomdef}(${x3})=${a}\\times${ecriture_parenthese_si_negatif(x3)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(c)}=${a}\\times${x3 ** 2}${ecriture_algebrique(b * x3)}${ecriture_algebrique(c)}=${a * x3 ** 2 + b * x3 + c}$<br>`
					break;
				case 'ax2+c':
					a = randint(-4, 4, [0, -1, 1])
					c = randint(-10, 10, [0])
					expression = `${a}x^2${ecriture_algebrique(c)}`
					ligne2 = `${nomdef}(x) & ${a * liste_de_x[i][0] ** 2 + c} & ${a * liste_de_x[i][1] ** 2 + c} & ${a * liste_de_x[i][2] ** 2 + c} \\\\\n`
					calculs = `$${nomdef}(${x1})=${a}\\times${ecriture_parenthese_si_negatif(x1)}^2${ecriture_algebrique(c)}=${a}\\times${x1 ** 2}${ecriture_algebrique(c)}=${a * x1 ** 2 + c}$<br>`
					calculs += `$${nomdef}(${x2})=${a}\\times${ecriture_parenthese_si_negatif(x2)}^2${ecriture_algebrique(c)}=${a}\\times${x2 ** 2}${ecriture_algebrique(c)}=${a * x2 ** 2 + c}$<br>`
					calculs += `$${nomdef}(${x3})=${a}\\times${ecriture_parenthese_si_negatif(x3)}^2${ecriture_algebrique(c)}=${a}\\times${x3 ** 2}${ecriture_algebrique(c)}=${a * x3 ** 2 + c}$<br>`
					break;
				case 'ax2+bx':
					a = randint(-3, 3, [0, -1, 1])
					b = randint(-5, 5, [0, -1, 1])
					c = randint(-10, 10, [0])
					expression = `${a}x^2${ecriture_algebrique(b)}x`
					ligne2 = `${nomdef}(x) & ${a * liste_de_x[i][0] ** 2 + b * liste_de_x[i][0]} & ${a * liste_de_x[i][1] ** 2 + b * liste_de_x[i][1]} & ${a * liste_de_x[i][2] ** 2 + b * liste_de_x[i][2]} \\\\\n`
					calculs = `$${nomdef}(${x1})=${a}\\times${ecriture_parenthese_si_negatif(x1)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x1)}=${a}\\times${x1 ** 2}${ecriture_algebrique(b * x1)}=${a * x1 ** 2 + b * x1}$<br>`
					calculs += `$${nomdef}(${x2})=${a}\\times${ecriture_parenthese_si_negatif(x2)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x2)}=${a}\\times${x2 ** 2}${ecriture_algebrique(b * x2)}=${a * x2 ** 2 + b * x2}$<br>`
					calculs += `$${nomdef}(${x3})=${a}\\times${ecriture_parenthese_si_negatif(x3)}^2${ecriture_algebrique(b)}\\times${ecriture_parenthese_si_negatif(x3)}=${a}\\times${x3 ** 2}${ecriture_algebrique(b * x3)}=${a * x3 ** 2 + b * x3}$<br>`
					break;
				case 'a/cx+d':
					a = randint(-10, 10, [0])
					c = randint(-10, 10, [0, -1, 1])
					d = randint(-10, 10, [0])
					while (c * x1 + d == 0 || c * x2 + d == 0 || c * x3 + d == 0) {
						c = randint(-10, 10, [0, -1, 1])
					}
					expression = `\\dfrac{${a}}{${c}x${ecriture_algebrique(d)}}`
					ligne2 = `${nomdef}(x) & ${tex_fraction_reduite(a, c * liste_de_x[i][0] + d)} & ${tex_fraction_reduite(a, c * liste_de_x[i][1] + d)} & ${tex_fraction_reduite(a, c * liste_de_x[i][2] + d)} \\\\\n`
					calculs = `$${nomdef}(${x1})=\\dfrac{${a}}{${c}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x1}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x1 + d}}`
					if (pgcd(a, c * x1 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a, c * x1 + d) + '$<br><br>'
					}
					calculs += `$${nomdef}(${x2})=\\dfrac{${a}}{${c}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x2}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x2 + d}}`
					if (pgcd(a, c * x2 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a, c * x2 + d) + '$<br><br>'
					}
					calculs += `$${nomdef}(${x3})=\\dfrac{${a}}{${c}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x3}${ecriture_algebrique(d)}}=\\dfrac{${a}}{${c * x3 + d}}`
					if (pgcd(a, c * x3 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a, c * x3 + d) + '$<br><br>'
					}
					break;
				case 'ax+b/cx+d':
					a = randint(-10, 10, [0, 1, -1])
					b = randint(-10, 10, [0])
					c = randint(-10, 10, [0, -1, 1])
					d = randint(-10, 10, [0])
					while (c * x1 + d == 0 || c * x2 + d == 0 || c * x3 + d == 0) {
						c = randint(-10, 10, [0, -1, 1])
					}
					expression = `\\dfrac{${a}x${ecriture_algebrique(b)}}{${c}x${ecriture_algebrique(d)}}`
					ligne2 = `${nomdef}(x) & ${tex_fraction_reduite(a * liste_de_x[i][0] + b, c * liste_de_x[i][0] + d)} & ${tex_fraction_reduite(a * liste_de_x[i][1] + b, c * liste_de_x[i][1] + d)} & ${tex_fraction_reduite(a * liste_de_x[i][2] + b, c * liste_de_x[i][2] + d)} \\\\\n`
					calculs = `$${nomdef}(${x1})=\\dfrac{${a}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(b)}}{${c}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(d)}}=\\dfrac{${a * x1}${ecriture_algebrique(b)}}{${c * x1}${ecriture_algebrique(d)}}=\\dfrac{${a * x1 + b}}{${c * x1 + d}}`
					if (pgcd(a * x1 + b, c * x1 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a * x1 + b, c * x1 + d) + '$<br><br>'
					}
					calculs += `$${nomdef}(${x2})=\\dfrac{${a}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(b)}}{${c}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(d)}}=\\dfrac{${a * x2}${ecriture_algebrique(b)}}{${c * x2}${ecriture_algebrique(d)}}=\\dfrac{${a * x2 + b}}{${c * x2 + d}}`
					if (pgcd(a * x2 + b, c * x2 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a * x2 + b, c * x2 + d) + '$<br><br>'
					}
					calculs += `$${nomdef}(${x3})=\\dfrac{${a}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(b)}}{${c}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(d)}}=\\dfrac{${a * x3}${ecriture_algebrique(b)}}{${c * x3}${ecriture_algebrique(d)}}=\\dfrac{${a * x3 + b}}{${c * x3 + d}}`
					if (pgcd(a * x3 + b, c * x3 + d) == 1) {
						calculs += '$<br><br>'
					} else {
						calculs += '=' + tex_fraction_reduite(a * x3 + b, c * x3 + d) + '$<br><br>'
					}
					break;
				case '(ax+b)(cx+d)':
					a = randint(-5, 5, [0, 1, -1])
					b = randint(-5, 5, [0])
					c = randint(-3, 3, [0, -1, 1])
					d = randint(-3, 3, [0])
					if (a < 0 && b < 0 && c < 0 && d < 0) {
						d = randint(1, 3)
					}
					expression = `(${a}x${ecriture_algebrique(b)})(${c}x${ecriture_algebrique(d)})`
					ligne2 = `${nomdef}(x) & ${(a * liste_de_x[i][0] + b) * (c * liste_de_x[i][0] + d)} & ${(a * liste_de_x[i][1] + b) * (c * liste_de_x[i][1] + d)} & ${(a * liste_de_x[i][2] + b) * (c * liste_de_x[i][2] + d)} \\\\\n`
					calculs = `$${nomdef}(${x1})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(b)}\\right)\\left(${c}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(d)}\\right)=(${a * x1}${ecriture_algebrique(b)})(${c * x1}${ecriture_algebrique(d)})=${a * x1 + b}\\times ${ecriture_parenthese_si_negatif(c * x1 + d)}=${(a * x1 + b) * (c * x1 + d)}$<br>`
					calculs += `$${nomdef}(${x2})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(b)}\\right)\\left(${c}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(d)}\\right)=(${a * x2}${ecriture_algebrique(b)})(${c * x2}${ecriture_algebrique(d)})=${a * x2 + b}\\times ${ecriture_parenthese_si_negatif(c * x2 + d)}=${(a * x2 + b) * (c * x2 + d)}$<br>`
					calculs += `$${nomdef}(${x3})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(b)}\\right)\\left(${c}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(d)}\\right)=(${a * x3}${ecriture_algebrique(b)})(${c * x3}${ecriture_algebrique(d)})=${a * x3 + b}\\times ${ecriture_parenthese_si_negatif(c * x3 + d)}=${(a * x3 + b) * (c * x3 + d)}$<br>`
					break;
				case '(ax+b)2':
					a = randint(-3, 3, [0, 1, -1])
					b = randint(-3, 3, [0])
					expression = `(${a}x${ecriture_algebrique(b)})^2`
					ligne2 = `${nomdef}(x) & ${(a * liste_de_x[i][0] + b) ** 2} & ${(a * liste_de_x[i][1] + b) ** 2} & ${(a * liste_de_x[i][2] + b) ** 2} \\\\\n`
					calculs = `$${nomdef}(${x1})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x1)}${ecriture_algebrique(b)}\\right)^2=(${a * x1}${ecriture_algebrique(b)})^2=${ecriture_parenthese_si_negatif(a * x1 + b)}^2=${(a * x1 + b) ** 2}$<br>`
					calculs += `$${nomdef}(${x2})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x2)}${ecriture_algebrique(b)}\\right)^2=(${a * x2}${ecriture_algebrique(b)})^2=${ecriture_parenthese_si_negatif(a * x2 + b)}^2=${(a * x2 + b) ** 2}$<br>`
					calculs += `$${nomdef}(${x3})=\\left(${a}\\times${ecriture_parenthese_si_negatif(x3)}${ecriture_algebrique(b)}\\right)^2=(${a * x3}${ecriture_algebrique(b)})^2=${ecriture_parenthese_si_negatif(a * x3 + b)}^2=${(a * x3 + b) ** 2}$<br>`

					break;
			}


			texte = `On considÃ¨re la fonction $${nomdef}$ dÃ©finie par $${nomdef}:x\\mapsto ${expression}$. ComplÃ©ter le tableau de valeurs suivant.`
			texte_corr = ''
			texte += `<br><br>`
			if (sortie_html) {
				texte += `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|}\n`
			} else {
				texte += `$\\begin{array}{|l|c|c|c|}\n`
			}

			texte += `\\hline\n`
			texte += `x & ${liste_de_x[i][0]} & ${liste_de_x[i][1]} & ${liste_de_x[i][2]} \\\\\n`
			texte += `\\hline\n`
			texte += `${nomdef}(x) & \\phantom{-10} & \\phantom{-10} & \\phantom{-10} \\\\\n`
			texte += `\\hline\n`
			texte += `\\end{array}\n$`


			if (sortie_html) {
				texte_corr = `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|}\n`
			} else {
				texte_corr = `$\\begin{array}{|l|c|c|c|}\n`
			}

			texte_corr += `\\hline\n`;
			texte_corr += `x & ${liste_de_x[i][0]} & ${liste_de_x[i][1]} & ${liste_de_x[i][2]} \\\\\n`;
			texte_corr += `\\hline\n`;
			texte_corr += ligne2;
			texte_corr += `\\hline\n`;
			texte_corr += `\\end{array}\n$`;
			if (this.correction_detaillee) {
				texte_corr += '<br><br>';
				texte_corr += calculs;
			}




			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		this.nb_questions == 1 ? liste_de_question_to_contenu_sans_numero(this) : liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 5, '1 : Fonctions affines\n2 : Polynome du second degrÃ©\n3 : Quotient\n4 : Produit \n5 : MÃ©lange'];
}

/**
 * DÃ©velopper des expressions de la forme(ax+ou-b)(cx+ou-d)
* @auteur Jean-Claude Lhote
* 3L11-1
*/
function Double_distributivite() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Utiliser la double distributivitÃ©";
	this.consigne = "DÃ©velopper et rÃ©duire les expressions suivantes.";
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	this.spacing_corr = 1;
	this.nb_questions = 5;
	this.sup = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let type_de_questions_disponibles = [1, 2];
		if (this.sup == 2) {
			type_de_questions_disponibles = [3, 4]
		}
		if (this.sup == 3) {
			type_de_questions_disponibles = [1, 2, 3, 4]
		}


		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
		for (let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, type_de_questions; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];
			a = randint(2, 9);
			b = randint(2, 9);
			c = randint(2, 9, [a]);
			d = randint(2, 9, [b]);
			switch (type_de_questions) {
				case 1: //(x+b)(x+d)
					b = randint(2, 10)
					d = randint(2, 12)
					texte = `$(x+${b})(x+${d})$`
					texte_corr = `$(x+${b})(x+${d})=x^2+${b}x+${d}x+${b * d}=x^2+${b + d}x+${b * d}$`
					break;
				case 2: //(ax+b)(cx+d)
					texte = `$(${a}x+${b})(${c}x+${d})$`
					texte_corr = `$(${a}x+${b})(${c}x+${d})=${a * c}x^2+${a * d}x+${b * c}x+${b * d}=${a * c}x^2+${a * d + b * c}x+${b * d}$`
					break;
				case 3://(ax-b)(cx+d)
					texte = `$(${a}x-${b})(${c}x+${d})$`
					if (egal(a*d-b*c,0)) 
					texte_corr = `$(${a}x-${b})(${c}x+${d})=${a * c}x^2+${d * a}x-${b * c}x-${b * d}=${printlatex(`${a * c}*x^2-${b * d}`)}$`;
					else texte_corr = `$(${a}x-${b})(${c}x+${d})=${a * c}x^2+${d * a}x-${b * c}x-${b * d}=${printlatex(`${a * c}*x^2+(${d * a-b * c})*x-${b * d}`)}$`;
					break;
				case 4://(ax-b)(cx-d)
					texte = `$(${a}x-${b})(${c}x-${d})$`
					texte_corr = `$(${a}x-${b})(${c}x-${d})=${a * c}x^2-${a * d}x-${b * c}x+${b * d}=${a * c}x^2-${a * d + b * c}x+${b * d}$`
					break;
			}
			if (this.liste_questions.indexOf(texte) == -1) {
				// Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : (x+a)(x+b) et (ax+b)(cx+d)\n 2 : (ax-b)(cx+d) et (ax-b)(cx-d)\n 3 : Tous les types'];
}

/**
 * DÃ©velopper (ax-b)(ax+b)
* @auteur Jean-Claude Lhote
* 3L12-1
*/
function Developper_Identites_remarquables3() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©velopper (a-b)(a+b)";
	this.consigne = "DÃ©velopper les expressions suivantes.";
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	this.spacing_corr = 1;
	this.nb_questions = 5;
	this.sup = 2;


	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
		[1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
		[1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
		for (let i = 0, ns, ds, texte, texte_corr, cpt = 0, a, b, fraction = []; i < this.nb_questions && cpt < 50;) {
			if (this.sup == 1) {
				a = randint(1, 9);	 // coef de x est Ã©gal Ã  1
				texte = `$(x-${a})(x+${a})$`    // (x-a)(x+a)
				texte_corr = `$(x-${a})(x+${a})=x^2-${a}^2=x^2-${a * a}$`;
			}
			else if (this.sup == 2) {
				a = randint(1, 9)  // (bx-a)(bx+a) avec a et b entier positifs entre 1 et 9,  b diffÃ©rent de 1
				b = randint(2, 9);
				texte = `$(${b}x-${a})(${b}x+${a})$`; // b>1
				texte_corr = `$(${b}x-${a})(${b}x+${a})=(${b}x)^2-${a}^2=${b * b}x^2-${a * a}$`;
			}
			else {   //  (bx-a)(bx+a) avec a entier et b rationnel simple
				a = randint(1, 9);
				fraction = choice(liste_fractions);
				ns = fraction[0]
				ds = fraction[1]
				texte = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)$`; // b>1
				texte_corr = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)=\\left(${tex_fraction(ns, ds)}x\\right)^2-${a}^2=${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}$`;
			}

			if (this.liste_questions.indexOf(texte) == -1) {
				// Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Coefficient de x Ã©gal Ã  1\n 2 : Coefficient de x supÃ©rieur Ã  1\n 3 : Coefficient de x rationnel'];
}

/**
 * Factoriser aÂ²-bÂ²
* @auteur Jean-Claude Lhote
* 3L12
*/
function Factoriser_Identites_remarquables3() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Factoriser aÂ²-bÂ²";
	this.consigne = "Factoriser les expressions suivantes.";
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	this.spacing_corr = 1;
	this.nb_questions = 5;
	this.sup = 2;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
		[1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
		[1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
		for (let i = 0, texte, texte_corr, cpt = 0, a, b, ns, ds, fraction = []; i < this.nb_questions && cpt < 50;) {
			if (this.sup == 1) {
				a = randint(1, 9);	 // coef de x est Ã©gal Ã  1
				texte = `$x^2-${a * a}$`    // (x-a)(x+a)
				texte_corr = `$x^2-${a * a}=x^2-${a}^2=(x-${a})(x+${a})$`;
			}
			else if (this.sup == 2) {
				a = randint(1, 9)  // (bx-a)(bx+a) avec a et b entier positifs entre 1 et 9,  b diffÃ©rent de 1
				b = randint(2, 9);
				texte = `$${b * b}x^2-${a * a}$`; // b>1
				texte_corr = `$${b * b}x^2-${a * a}=(${b}x)^2-${a}^2=(${b}x-${a})(${b}x+${a})$`;
			}
			else {   //  (bx-a)(bx+a) avec a entier et b rationnel simple
				a = randint(1, 9);
				fraction = choice(liste_fractions);
				ns = fraction[0]
				ds = fraction[1]
				texte = `$${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}$`; // b>1
				texte_corr = `$${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}=\\left(${tex_fraction(ns, ds)}x\\right)^2-${a}^2=\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)$`;

			}

			if (this.liste_questions.indexOf(texte) == -1) {
				// Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Coefficient de x Ã©gal Ã  1\n 2 : Coefficient de x supÃ©rieur Ã  1\n 3 : Coefficient de x rationnel'];
}



/**
* Ãquation du premier degrÃ©
* * Type 1 : ax+b=cx+d
* * Type 2 : k(ax+b)=cx+d
* * Type 3 : k-(ax+b)=cx+d
* * Tous les types
* @Auteur RÃ©mi Angot
* 3L13-1
*/
function Exercice_equation1_2(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Ãquation du premier degrÃ© (utilisant la distributivitÃ©)"
	this.consigne = 'RÃ©soudre les Ã©quations suivantes'
	this.spacing = 2;
	sortie_html ? this.spacing_corr = 3 : this.spacing_corr = 2;
	this.correction_detaillee_disponible = true;
	if (!sortie_html) {
		this.correction_detaillee = false;
	}
	this.nb_questions = 3;

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_type_de_questions = ['ax+b=cx+d','k(ax+b)=cx+d','k-(ax+b)=cx+d'];
		liste_type_de_questions = combinaison_listes(liste_type_de_questions,this.nb_questions)
		for (let i = 0, a, b, c, d, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50;) { // On limite le nombre d'essais pour chercher des valeurs nouvelles
			a = randint(-9,9,0);
			b = randint(-9,9,0);
			c = randint(-9,9,0);
			d = randint(-9,9,0);
			k = randint(2,9)
			if (liste_type_de_questions[i]=='ax+b=cx+d') {
				if (c==a) {c = randint(1,9,[a])} // sinon on arrive Ã  une division par 0
				if (!this.sup && a<c) {
					c = randint(1,9)
					a = randint(c+1,15) // a sera plus grand que c pour que a-c>0
				}
				texte = `$${rien_si_1(a)}x${ecriture_algebrique(b)}=${rien_si_1(c)}x${ecriture_algebrique(d)}$`;
				texte_corr = texte+'<br>';
				if (this.correction_detaillee) {
					if (c>0) {
						texte_corr += `On soustrait $${rien_si_1(c)}x$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${rien_si_1(-1*c)}x$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${rien_si_1(a)}x${ecriture_algebrique(b)}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}=${c}x+${d}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}$<br>`;
				texte_corr += `$${rien_si_1(a-c)}x${ecriture_algebrique(b)}=${d}$<br>`
				if (this.correction_detaillee) {
					if (b>0) {
						texte_corr += `On soustrait $${b}$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${-1*b}$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${rien_si_1(a-c)}x${ecriture_algebrique(b)}${mise_en_evidence(ecriture_algebrique(-1*b))}=${d}${mise_en_evidence(ecriture_algebrique(-1*b))}$<br>`
				texte_corr += `$${rien_si_1(a-c)}x=${d-b}$<br>`

				if (this.correction_detaillee) {texte_corr += `On divise les deux membres par $${a-c}$.<br>`}
				texte_corr += `$${rien_si_1(a-c)}x${mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(a-c))}=${d-b+mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(a-c))}$<br>`
				texte_corr += `$x=${tex_fraction(d-b,a-c)}$`
				if (pgcd(abs(d-b),abs(a-c))>1 || (a-c)<0){
					texte_corr += `<br>$x=${tex_fraction_reduite(d-b,a-c)}$`
				}
				texte_corr += `<br> La solution est $${tex_fraction_reduite(d-b,a-c)}$.`
			}

			if (liste_type_de_questions[i]=='k(ax+b)=cx+d') {
				if (c==k*a) {c = randint(1,9,[a])} // sinon on arrive Ã  une division par 0
				texte = `$${k}(${rien_si_1(a)}x${ecriture_algebrique(b)})=${rien_si_1(c)}x${ecriture_algebrique(d)}$`;
				texte_corr = texte+'<br>';
				if (this.correction_detaillee) {
					texte_corr += 'On dÃ©veloppe le membre de gauche.<br>'
				}
				texte_corr += `$${k*a}x${ecriture_algebrique(k*b)}=${rien_si_1(c)}x${ecriture_algebrique(d)}$<br>`;
				if (this.correction_detaillee) {
					if (c>0) {
						texte_corr += `On soustrait $${rien_si_1(c)}x$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${rien_si_1(-1*c)}x$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${k*a}x${ecriture_algebrique(k*b)}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}=${c}x${ecriture_algebrique(d)}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}$<br>`;
				texte_corr += `$${rien_si_1(k*a-c)}x${ecriture_algebrique(k*b)}=${d}$<br>`
				if (this.correction_detaillee) {
					if (k*b>0) {
						texte_corr += `On soustrait $${k*b}$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${-k*b}$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${rien_si_1(k*a-c)}x${ecriture_algebrique(k*b)}${mise_en_evidence(ecriture_algebrique(-k*b))}=${d}${mise_en_evidence(ecriture_algebrique(-k*b))}$<br>`
				texte_corr += `$${rien_si_1(k*a-c)}x=${d-k*b}$<br>`

				if (this.correction_detaillee) {texte_corr += `On divise les deux membres par $${k*a-c}$.<br>`}
				texte_corr += `$${rien_si_1(k*a-c)}x${mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(k*a-c))}=${d-k*b+mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(k*a-c))}$<br>`
				texte_corr += `$x=${tex_fraction(d-k*b,k*a-c)}$`
				if (pgcd(abs(d-k*b),abs(k*a-c))>1 || (k*a-c)<0){
					texte_corr += `<br>$x=${tex_fraction_reduite(d-k*b,k*a-c)}$`
				}
				texte_corr += `<br> La solution est $${tex_fraction_reduite(d-k*b,k*a-c)}$.`
			}

			if (liste_type_de_questions[i]=='k-(ax+b)=cx+d') {
				if (c==-a) {c = randint(-9,9,[0,a])} // sinon on arrive Ã  une division par 0
				texte = `$${k}-(${rien_si_1(a)}x${ecriture_algebrique(b)})=${rien_si_1(c)}x${ecriture_algebrique(d)}$`;
				texte_corr = texte+'<br>';
				if (this.correction_detaillee) {
					texte_corr += 'On dÃ©veloppe le membre de gauche.<br>'
				}
				texte_corr += `$${k}${ecriture_algebrique(-a)}x${ecriture_algebrique(-b)}=${rien_si_1(c)}x${ecriture_algebrique(d)}$<br>`;
				texte_corr += `$${rien_si_1(-a)}x${ecriture_algebrique(k-b)}=${rien_si_1(c)}x${ecriture_algebrique(d)}$<br>`;
				
				//On reprend le cas ax+b=cx+d en changeant les valeurs de a et b
				a = -a;
				b = k-b;

				if (this.correction_detaillee) {
					if (c>0) {
						texte_corr += `On soustrait $${rien_si_1(c)}x$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${rien_si_1(-1*c)}x$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${rien_si_1(a)}x${ecriture_algebrique(b)}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}=${c}x+${d}${mise_en_evidence(signe(-1*c)+rien_si_1(abs(c))+'x')}$<br>`;
				texte_corr += `$${rien_si_1(a-c)}x${ecriture_algebrique(b)}=${d}$<br>`
				if (this.correction_detaillee) {
					if (b>0) {
						texte_corr += `On soustrait $${b}$ aux deux membres.<br>`	
					} else {
						texte_corr += `On ajoute $${-1*b}$ aux deux membres.<br>`
					}
				}
				texte_corr += `$${rien_si_1(a-c)}x${ecriture_algebrique(b)}${mise_en_evidence(ecriture_algebrique(-1*b))}=${d}${mise_en_evidence(ecriture_algebrique(-1*b))}$<br>`
				texte_corr += `$${rien_si_1(a-c)}x=${d-b}$<br>`

				if (this.correction_detaillee) {texte_corr += `On divise les deux membres par $${a-c}$.<br>`}
				texte_corr += `$${rien_si_1(a-c)}x${mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(a-c))}=${d-b+mise_en_evidence('\\div'+ecriture_parenthese_si_negatif(a-c))}$<br>`
				texte_corr += `$x=${tex_fraction(d-b,a-c)}$`
				if (pgcd(abs(d-b),abs(a-c))>1 || (a-c)<0){
					texte_corr += `<br>$x=${tex_fraction_reduite(d-b,a-c)}$`
				}
				texte_corr += `<br> La solution est $${tex_fraction_reduite(d-b,a-c)}$.`
			}
				
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte)//replace(/1x/g,'x')); //remplace 1x par x
				this.liste_corrections.push(texte_corr) //.replace(/1x/g,'x')); //remplace 1x par x
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}


/**
 * RÃ©solution d'Ã©quations de type (ax+b)(cx+d)=0
* @auteur Jean-Claude Lhote
* Tout est dans le nom de la fonction.
* 3L14
*/
function Resoudre_une_equation_produit_nul() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "RÃ©soudre une Ã©quation produit nul";
	this.consigne = "RÃ©soudre les Ã©quations suivantes";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1.5
	this.spacing = 1


	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
		[1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
		[1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
		let liste_type_de_questions = []
		switch (parseInt(this.sup)) {
			case 1: liste_type_de_questions = combinaison_listes([1, 2], this.nb_questions);
				break;
			case 2: liste_type_de_questions = combinaison_listes([3, 4], this.nb_questions);
				break;
			case 3: liste_type_de_questions = combinaison_listes([5, 6], this.nb_questions);
				break;
			case 4: liste_type_de_questions = combinaison_listes([1, 2, 3, 4, 5, 6], this.nb_questions);

		}
		for (let i = 0, a, b, c, d, fraction1, fraction2, ns1, ns2, ds1, ds2, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			fraction1 = choice(liste_fractions);
			ns1 = fraction1[0]
			ds1 = fraction1[1]
			fraction2 = choice(liste_fractions);
			ns2 = fraction2[0]
			ds2 = fraction2[1]
			switch (liste_type_de_questions[i]) {
				case 1: b = randint(1, 20); // (x+a)(x+b)=0 avec a et b entiers
					d = randint(1, 20, [b])
					texte = `$(x+${b})(x+${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(x+${b})(x+${d})=0$`
					texte_corr += '<br> Soit ' + `$x+${b}=0$` + ' ou ' + `$x+${d}=0$`
					texte_corr += '<br> Donc ' + `$x=${0 - b}$` + ' ou ' + `$x=${0 - d}$`
					break;
				case 2: b = randint(1, 20); // (x-a)(x+b)=0 avec a et b entiers
					d = randint(1, 20, [b])
					texte = `$(x-${b})(x+${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(x-${b})(x+${d})=0$`
					texte_corr += '<br> Soit ' + `$x-${b}=0$` + ' ou  ' + `$x+${d}=0$`
					texte_corr += '<br> Donc ' + `$x=${b}$` + ' ou ' + `$x=${0 - d}$`
					break;

				case 3: a = randint(2, 6); 	//(ax+b)(cx+d)=0  avec b/a et d/c entiers.
					b = Math.round(randint(1, 5) * a);
					c = randint(2, 6, [a]);
					d = Math.round(randint(1, 5) * c);
					texte = `$(${a}x+${b})(${c}x+${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(${a}x+${b})(${c}x+${d})=0$`
					texte_corr += '<br> Soit ' + `$${a}x+${b}=0$` + ' ou ' + `$${c}x+${d}=0$`
					texte_corr += '<br> Donc ' + `$${a}x=${0 - b}$` + ' ou ' + `$${c}x=${0 - d}$`
					texte_corr += '<br> Donc ' + `$x=-${tex_fraction(b, a)}$` + ' ou ' + `$x=-${tex_fraction(d, c)}$`
					texte_corr += '<br> Donc ' + `$x=${0 - b / a}$` + ' ou ' + `$x=${0 - d / c}$`
					break;
				case 4: a = randint(2, 6); 	//(ax+b)(cx-d)=0  avec b/a et d/c entiers.
					b = Math.round(randint(1, 5) * a);
					c = randint(2, 6, [a]);
					d = Math.round(randint(1, 5) * c);
					texte = `$(${a}x+${b})(${c}x-${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(${a}x+${b})(${c}x-${d})=0$`
					texte_corr += '<br> Soit ' + `$${a}x+${b}=0$` + ' ou ' + `$${c}x-${d}=0$`
					texte_corr += '<br> Donc ' + `$${a}x=${0 - b}$` + ' ou ' + `$${c}x=${d}$`
					texte_corr += '<br> Donc ' + `$x=-${tex_fraction(b, a)}$` + ' ou ' + `$x=${tex_fraction(d, c)}$`
					texte_corr += '<br> Donc ' + `$x=${0 - b / a}$` + ' ou ' + `$x=${d / c}$`
					break;
				case 5:
					a = randint(2, 9);	//(ax+b)(cx+d)=0 	avec b/a et d/c quelconques.
					b = randint(1, 20, [a]);
					c = randint(2, 9, [a]);
					d = randint(1, 20, [b, c]);
					texte = `$(${a}x+${b})(${c}x+${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(${a}x+${b})(${c}x+${d})=0$`
					texte_corr += '<br> Soit ' + `$${a}x+${b}=0$` + ' ou ' + `$${c}x+${d}=0$`
					texte_corr += '<br> Donc ' + `$${a}x=${0 - b}$` + ' ou ' + `$${c}x=${0 - d}$`
					texte_corr += '<br> Donc ' + `$x=-${tex_fraction(b, a)}$`
					if (tex_fraction(b, a) != tex_fraction_reduite(b, a)) { texte_corr += `$=-${tex_fraction_reduite(b, a)}$` }
					texte_corr += ' ou ' + `$x=-${tex_fraction(d, c)}$`
					if (tex_fraction(d, c) != tex_fraction_reduite(d, c)) { texte_corr += `$=-${tex_fraction_reduite(d, c)}$` }
					break;
				case 6:
					a = randint(2, 9);	//(ax+b)(cx-d)=0 	avec b/a et d/c quelconques.
					b = randint(1, 20, [a]);
					c = randint(2, 9, [a]);
					d = randint(1, 20, [b, c]);
					texte = `$(${a}x+${b})(${c}x+${d})=0$`
					texte_corr = 'Un produit est nul si l\'un au moins de ses facteurs est nul.'
					texte_corr += '<br>' + `$(${a}x+${b})(${c}x-${d})=0$`
					texte_corr += '<br> Soit ' + `$${a}x+${b}=0$` + ' ou ' + `$${c}x-${d}=0$`
					texte_corr += '<br> Donc ' + `$${a}x=${0 - b}$` + ' ou ' + `$${c}x=${d}$`
					texte_corr += '<br> Donc ' + `$x=-${tex_fraction(b, a)}$`
					if (tex_fraction(b, a) != tex_fraction_reduite(b, a)) { texte_corr += `$=-${tex_fraction_reduite(b, a)}$` }
					texte_corr += ' ou ' + `$x=${tex_fraction(d, c)}$`
					if (tex_fraction(d, c) != tex_fraction_reduite(d, c)) { texte_corr += `$=${tex_fraction_reduite(d, c)}$` }

					break;
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				// alert(this.liste_questions)
				// alert(this.liste_corrections)
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 4, '1 : Coefficient de x = 1\n 2 : Coefficient de x>1 et solutions entiÃ¨res\n 3 : Solutions rationnelles\n 4 : MÃ©lange des 3 autres niveaux'];
}

/**
 * RÃ©soudre une Ã©quation de type xÂ²=a
* @auteur Jean-Claude Lhote
* 3L15
*/

function Resoudre_une_equation_x2_egal_A() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "RÃ©soudre une Ã©quation du second degrÃ©";
	this.consigne = "RÃ©soudre les Ã©quations suivantes";
	this.nb_questions = 5;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1.5
	this.spacing = 1


	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
		[1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
		[1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
		let liste_type_de_questions = []
		switch (parseInt(this.sup)) {
			case 1: liste_type_de_questions = combinaison_listes([1], this.nb_questions);
				break;
			case 2: liste_type_de_questions = combinaison_listes([2], this.nb_questions);
				break;
			case 3: liste_type_de_questions = combinaison_listes([3], this.nb_questions);
				break;
			case 4: liste_type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);

		}
		for (let i = 0, fraction, ns, ds, a, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

			switch (liste_type_de_questions[i]) {
				case 1: a = randint(1, 20); // xÂ²=a*a donc x=a ou -a.
					texte = `$x^2=${a * a}$`
					texte_corr = `$x^2=${a * a}$ Ã©quivaut Ã  $x = \\sqrt{${a * a}}$ ou $x = -\\sqrt{${a * a}}$<br>Soit $x = ${a}$ ou $x = -${a}$<br>`
					texte_corr += `Il est Ã©quivalent de rÃ©soudre $x^2 - ${a * a}=0$ c'est Ã  dire $x^2 - ${a}^{2}=0$ <br>Soit $(x - ${a})(x + ${a})=0$ qui donne les deux solutions ci-dessus. `
					break;
				case 2: // xÂ²=(ns*ns)/(ds*ds) solutions rationnelles
					fraction = choice(liste_fractions);
					ns = fraction[0]
					ds = fraction[1]
					texte = `$x^2=\\dfrac{${ns * ns}}{${ds * ds}}$`
					texte_corr = `$x^2=\\dfrac{${ns * ns}}{${ds * ds}}$ Ã©quivaut Ã  $x = \\sqrt{\\dfrac{${ns * ns}}{${ds * ds}}}$ ou $x = -\\sqrt{\\dfrac{${ns * ns}}{${ds * ds}}}$<br>Soit $x = \\dfrac{${ns}}{${ds}}$ ou $x = -\\dfrac{${ns}}{${ds}}$<br>`
					texte_corr += `Il est Ã©quivalent de rÃ©soudre $x^2 - \\dfrac{${ns * ns}}{${ds * ds}}=0$ c'est Ã  dire $x^2 - (\\dfrac{${ns}}{${ds}})^{2}=0$<br>Soit $(x - \\dfrac{${ns}}{${ds}})(x + \\dfrac{${ns}}{${ds}})=0$ qui donne les deux solutions ci-dessus. `
					break;

				case 3: a = randint(2, 50, [4, 9, 16, 25, 36, 49]); 	//solution irrationnelles
					texte = `$x^2=${a}$`
					texte_corr = `$x^2=${a}$ Ã©quivaut Ã  $x = \\sqrt{${a}}$ ou $x = -\\sqrt{${a}}$<br>`
					texte_corr += `Il est Ã©quivalent de rÃ©soudre $x^2 - ${a}=0$  c'est Ã  dire $x^2 - (\\sqrt{${a}})^{2}=0$<br>Soit $(x - \\sqrt{${a}})(x + \\sqrt{${a}})=0$ qui donne les deux solutions ci-dessus. `
					break;

			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				// alert(this.liste_questions)
				// alert(this.liste_corrections)
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 4, '1 : solutions entiÃ¨res\n 2 : solutions rationnelles\n 3 : Solutions irrationnelles\n 4 : MÃ©lange des 3 autres niveaux'];
}

/**
 * 3F1-act - Notion de fonction - vocabulaire
 * Lâobjectif de revenir sur l'introduction de la notion de fonction et son vocabulaire
 * On base l'exercice sur des calculs simples de type pÃ©rimÃ¨tres, aires, double, triple, nombre de diviseurs
 * ATTENTION BUG SVG DONC LES ANIMATIONS SONT FILMEES A PARTIR DE CELLES GENEREES PAR LA FONCTION SVG_machine_maths() SOUS FIREFOX
 * DE FACON A AVOIR UN RENDU UNIFORME QUEL QUE SOIT LE NAVIGATEUR ON REND LES ANIMATIONS PAR DES VIDEOS
 * ON LAISSE LA PIROUETTE DE DETECTION DU USERAGENT EN COMMENTAIRE EN ATTENDANT DE TROUVER UNE SOLUTION DE RENDU LATEX DANS SVG UNIVERSELLE
 * @Auteur SÃ©bastien Lozano
 */

function fonction_notion_vocabulaire() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Fonctions : Notion et vocabulaire";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Ãtudier diffÃ©rents procÃ©dÃ©s de calcul.`;
	// this.consigne += "Lorsqu'un nombre $\\textit{x}$ entre dans une machine mathÃ©matique , celle-ci renvoie Ã  la sortie un nombre appelÃ© $\\textit{image de x}$.<br>";
	// this.consigne += "On dit que le nombre de dÃ©part est un $\\textit{antÃ©cÃ©dent}$ du nombre qu'on trouve Ã  la sortie.<br>";
	// this.consigne += "Ces machines sont appelÃ©es $\\textit{fonctions}$, on a l'habitude de leur donner des noms $\\textit{f}$ ou $\\textit{g}$ ou $\\textit{h} \\ldots$";
	// this.consigne += `<br>`;
	sortie_html ? this.spacing = 3 : this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 4;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	var num_ex = '3F1-act'; // pour rendre unique les id des SVG, en cas d'utilisation dans plusieurs exercices y faisant appel

	if (sortie_html) {
		var pourcentage = '100%'; // pour l'affichage des svg. On a besoin d'une variable globale
		var hauteur_svg = 100;
	} else { // sortie LaTeX

	};
	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3, 4];
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		this.introduction = lampe_message({
			titre : `Introduction`,
			texte : `Lorsqu'un nombre $\\textit{x}$ entre dans une machine mathÃ©matique , celle-ci renvoie Ã  la sortie un nombre appelÃ© $\\textit{image de x}$.<br>
				On dit que le nombre de dÃ©part est un $\\textit{antÃ©cÃ©dent}$ du nombre qu'on trouve Ã  la sortie.<br>
				Ces machines sont appelÃ©es $\\textit{fonctions}$, on a l'habitude de leur donner des noms $\\textit{f}$ ou $\\textit{g}$ ou $\\textit{h} \\ldots$
				<br>`,
			couleur : `nombres`
		});

		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheFonctions-3F1-act.pdf", "Aide mÃ©moire sur les fonctions (SÃ©bastien Lozano)", "Aide mÃ©moire")
			this.bouton_aide += modal_video('conteMathsFonctions', 'videos/Fonctions.mp4', 'Petit conte mathÃ©matique', 'Intro VidÃ©o');
			this.introduction += machine_maths_video(`videos/machineMathsIntro.mp4`);
		} else { // sortie LaTeX
			this.introduction += tikz_machine_maths('maths', '---', `Proc\\acute{e}d\\acute{e}`, 'de\\,calcul', `ant\\acute{e}c\\acute{e}dent`, `\\textit{x}`, `image`, `\\textit{y}`);
		};
		for (let i = 0, x, y, z, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			if (sortie_html) {
				var id_unique = `${num_ex}_${i}_${Date.now()}`
				var id_du_div = `div_svg${numero_de_l_exercice}${id_unique}`;
				var id_du_div_diag = `div_svg_diag${numero_de_l_exercice}${id_unique}`;
				var id_du_div_corr = `div_svg_corr${numero_de_l_exercice}${id_unique}`;
			}
			let txt_info;

			switch (type_de_questions) {
				case 1: // pÃ©rimÃ¨tre d'un carrÃ© de cÃ´tÃ© x			
					var j = 0; // pour la sous-numÃ©rotation
					// question
					if (sortie_html) {
						texte = `La $\\mathbf{machine\\,f}$ renvoie le ` + katex_Popup(`pÃ©rimÃ¨tre`, `Rappel`, `Le pÃ©rimÃ¨tre d'un polygone est Ã©gal Ã  la somme des longueurs de ses cÃ´tÃ©s`) + ` d'un carrÃ© de cÃ´tÃ© $x$`;
					} else {
						texte = `La $\\mathbf{machine\\,f}$ renvoie le \\textbf{pÃ©rimÃ¨tre} \\footnote{\\textbf{Rappel :} Le pÃ©rimÃ¨tre d'un polygone est Ã©gal Ã  la somme des longueurs de ses cÃ´tÃ©s} d'un carrÃ© de cÃ´tÃ© $x$`;
					}
					texte += `<br>`;
					// machine						
					x = randint(2, 99);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += machine_maths_video(`videos/machineMaths-f.mp4`);
					} else { // sortie Latex avec Tikz
						texte += tikz_machine_maths('f', '---', `P\\acute{e}rim\\grave{e}tre`, `d'un\\,carr\\acute{e}`, `carr\\acute{e}\\,de`, `c\\hat{o}t\\acute{e}\\,${x}\\,cm`, `P\\acute{e}rim\\grave{e}tre`, `???\\,cm`);
					};
					// sous question a/						
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le cÃ´tÃ© vaut  ${x}  cm ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot image', 'Image', 'La valeur du pÃ©rimÃ¨tre est l\'image de la valeur du cÃ´tÃ©') + `<br>`;
						texte_corr = num_alpha(j) + ` Si le cÃ´tÃ© vaut ${x} cm alors la machine renvoie le pÃ©rimÃ¨tre d'un carrÃ© de cÃ´tÃ© ${x} cm, c'est Ã  dire $${x}+${x}+${x}+${x} = 4\\times ${x} = ${4 * x}$ cm.<br>`;
						texte_corr += `On dit que ${4 * x} est l'image de ${x} par la fonction f.<br>`;
						j++;//incrÃ©mente la sous question	
					} else { //sortie LaTeX
						texte += `\\begin{enumerate}[itemsep=1em]`;
						texte += `\\item Que renvoie la machine si le cÃ´tÃ© vaut  ${x}  cm ? Formuler la rÃ©ponse avec le mot \\textbf{image} \\footnote{\\textbf{Image :} La valeur du pÃ©rimÃ¨tre est l\'image de la valeur du cÃ´tÃ©}`;
						texte_corr = `\\begin{enumerate}[itemsep=1em]`;
						texte_corr += `\\item Si le cÃ´tÃ© vaut ${x} cm alors la machine renvoie le pÃ©rimÃ¨tre d'un carrÃ© de cÃ´tÃ© ${x} cm, c'est Ã  dire $${x}+${x}+${x}+${x} = 4\\times ${x} = ${4 * x}$ cm.<br>`;
						texte_corr += `On dit que ${4 * x} est l'image de ${x} par la fonction f.`;
					};

					// sous question b/	
					y = randint(2, 99, [x]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += num_alpha(j) + ` Combien vaut le cÃ´tÃ© si la machine renvoie  ${4 * y} cm ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot antÃ©cÃ©dent', 'AntÃ©cÃ©dent', 'un antÃ©cÃ©dent de la valeur d\'un pÃ©rimÃ¨tre est une valeur du cÃ´tÃ© qui a pour image ce pÃ©rimÃ¨tre') + `<br>`;
						texte_corr += num_alpha(j) + ` Si la machine renvoie un pÃ©rimÃ¨tre de ${4 * y} cm alors le cÃ´tÃ© du carrÃ© vaut $${4 * y}\\div 4 = ${y}$ cm.<br>`;
						texte_corr += `On dit que ${y} est <b>un</b> antÃ©cÃ©dent de ${4 * y} par la fonction f.<br>`;
						j++;//incrÃ©mente la sous question
					} else { //sortie LaTeX
						texte += `\\item Combien vaut la longueur du cÃ´tÃ© si la machine renvoie  ${4 * y} cm ? Formuler la rÃ©ponse avec le mot \\textbf{antÃ©cÃ©dent} \\footnote{\\textbf{AntÃ©cÃ©dent :} Un antÃ©cÃ©dent de la valeur d\'un pÃ©rimÃ¨tre est une valeur du cÃ´tÃ© qui a pour image ce pÃ©rimÃ¨tre}`;
						texte_corr += `\\item Si la machine renvoie un pÃ©rimÃ¨tre de ${4 * y} cm alors le cÃ´tÃ© du carrÃ© vaut $${4 * y}\\div 4 = ${y}$ cm.<br>`;
						texte_corr += `On dit que ${y} est \\textbf{un} antÃ©cÃ©dent de ${4 * y} par la fonction f.`;
					};

					// sous question c/
					z = randint(2, 99, [x, y]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?						
					if (sortie_html) {
						texte += num_alpha(j) + ` Quelle est l'image de ${z} par la `;
						texte += katex_Popup('fonction', 'Vocabulaire', '<b>fonction</b> est le nom que l\'on donne Ã  ces machines mathÃ©matiques');
						texte += ` $f$ ? &Eacute;crire la rÃ©ponse sous la forme `;
						texte += katex_Popup('$\\mathbf{f(' + z + ')=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction f peut s\'Ã©crire <b>f(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de ${z} par la fonction f vaut $f(${z})=4\\times ${z}=${4 * z}$.<br>`;
						j++;//incrÃ©mente la sous question	
					} else { // sortie LaTeX
						texte += `\\item Quelle est l'image de ${z} par la \\textbf{fonction f} \\footnote{\\textbf{Vocabulaire :} \\textit{fonction} est le nom que l\'on donne Ã  ces machines mathÃ©matiques}`;
						texte += ` ? \\'{E}crire la rÃ©ponse sous la forme $\\mathbf{f(${z})=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction f peut s\'Ã©crire $\\mathbf{f(4)=16}$}`;
						texte_corr += `\\ item L'image de ${z} par la fonction f vaut $f(${z})=4\\times ${z}=${4 * z}$.`;
					};

					// sous question d/
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le cÃ´tÃ© vaut $x$ cm ?<br>`;
						texte_corr += num_alpha(j) + ` Si le cÃ´tÃ© vaut $x$ la machine renvoie $x+x+x+x$ ce qui est Ã©quivalent Ã  $4\\times x$ .<br>`;
						j++;//incrÃ©mente la sous question	
					} else { // sortie LaTeX
						texte += `\\item   Que renvoie la machine si le cÃ´tÃ© vaut $x$ cm ?`;
						texte_corr += `\\item  Si le cÃ´tÃ© vaut $x$ la machine renvoie $x+x+x+x$ ce qui est Ã©quivalent Ã  $4\\times x$ .`;
					};

					// sous question e/
					txt_info =  `Voici le diagramme d'une machine qui triple `;
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 1) + ` sous forme de diagramme.<br>`;
						//texte += `Voici le diagramme d'une machine qui triple `;
						//texte += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						txt_info += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F1_act_mono(id_du_div_diag, 800, 100, 'f', 'x', [['3', '3x']]);
						texte_corr += num_alpha(j) + ` C'est une machine qui quadruple, donc sous forme de diagramme.<br>`;
						texte_corr += `<div id="${id_du_div_corr}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F1_act_mono(id_du_div_corr, 800, 100, 'f', 'x', [['4', '4x']]);
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item   \\'{E}crire la rÃ©ponse Ã  la question d/ sous forme de diagramme.<br>`;
						//texte += `Voici le diagramme d'une machine qui triple <br> `;
						//texte += tikz_machine_diag(`f`, `x`, [[`\\times 3`, `3x`]]);
						txt_info += '<br>'+tikz_machine_diag(`f`, `x`, [[`\\times 3`, `3x`]]);
						texte_corr += `\\item  C'est une machine qui quadruple, donc sous forme de diagramme.<br>`;
						texte_corr += tikz_machine_diag(`f`, `x`, [[`\\times 4`, `4x`]]);
					};
					texte += info_message({
						titre:'Exemple',
						texte:txt_info,
						couleur:'nombres'
					});

					// sous question f/
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 2) + ` sous la forme `;
						texte += katex_Popup('$\\mathbf{f(\\textbf{\\textit{x}})=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction f peut s\'Ã©crire <b>f(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction f vaut $4\\times x$ donc $f(x)=4\\times x$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item   \\'{E}crire la rÃ©ponse Ã  la question d/ sous la forme $\\mathbf{f(\\textbf{\\textit{x}})=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction f peut s\'Ã©crire $\\mathbf{f(4)=16}$}`;
						texte_corr += `\\item  L'image de $x$ par la fonction f vaut $4\\times x$ donc $f(x)=4\\times x$.`;
					};

					// sous question g/
					if (sortie_html) {
						texte += num_alpha(j) + ` En utilisant la forme `;
						texte += katex_Popup('$\\mathbf{f:\\textbf{\\textit{x}}\\longmapsto \\ldots}$', 'Notation', '4 a pour image 16 par la fonction f peut s\'Ã©crire $\\mathbf{f:4\\longmapsto 16}$');
						texte += `Ã©crire la rÃ©ponse Ã  la question ` + num_alpha(j - 3) + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction f vaut $4\\times x$ donc $f:x\\longmapsto 4\\times x$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item   En utilisant la forme $\\mathbf{f:\\textbf{\\textit{x}}\\longmapsto \\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction f peut s\'Ã©crire $\\mathbf{f:4\\longmapsto 16}$},`;
						texte += ` Ã©crire la rÃ©ponse Ã  la question d/`;
						texte_corr += `\\item  L'image de $x$ par la fonction f vaut $4\\times x$ donc $f:x\\longmapsto 4\\times x$.`;
						texte += `\\end{enumerate}`;
						texte_corr += `\\end{enumerate}`;
					};
					break;
				case 2: // aire d'un carrÃ© de cÃ´tÃ© x
					var j = 0; // pour la sous-numÃ©rotation
					if (sortie_html) {
						texte = `La $\\textbf{machine\\,g}$ renvoie ` + katex_Popup('l\'aire', 'Rappel', 'L\'aire d\'un carrÃ© est Ã©gale au produit de la longueur de son cÃ´tÃ© par lui-mÃªme.') + ` d'un carrÃ© de cÃ´tÃ© $x$`;
					} else {
						texte = `La $\\textbf{machine\\,g}$ renvoie \\textbf{l\'aire} \\footnote{\\textbf{Rappel :} L\'aire d\'un carrÃ© est Ã©gale au produit de la longueur de son cÃ´tÃ© par lui-mÃªme.} d'un carrÃ© de cÃ´tÃ© $x$`;
					}
					texte += `<br>`;
					// machine
					x = randint(2, 99);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += machine_maths_video(`videos/machineMaths-g.mp4`);
					} else { // sortie Latex avec Tikz
						texte += tikz_machine_maths('g', '---', `Aire`, `d'un\\,carr\\acute{e}`, `carr\\acute{e}\\,de`, `c\\hat{o}t\\acute{e}\\,${x}\\,cm`, `Aire`, `???\\,cm^2`);
					};
					// sous question a/	
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le cÃ´tÃ© vaut  ${x}  cm ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot image', 'Image', 'la valeur de l\'aire est l\'image de la valeur du cÃ´tÃ©') + `<br>`;
						texte_corr = num_alpha(j) + ` Si le cÃ´tÃ© vaut ${x} cm alors la machine renvoie l'aire d'un carrÃ© de cÃ´tÃ© ${x} cm, c'est Ã  dire $${x}\\times ${x}=${tex_nombre(x * x)}\\,cm^2$.<br>`;
						texte_corr += `On dit que ${nombre_avec_espace(x * x)} est l'image de ${x} par la fonction g.<br>`;
						j++;//incrÃ©mente la sous question
					} else { //sortie LaTeX
						texte += `\\begin{enumerate}[itemsep=1em]`;
						texte += `\\item  Que renvoie la machine si le cÃ´tÃ© vaut  ${x}  cm ? Formuler la rÃ©ponse `;
						texte += `avec le mot \\textbf{image} \\footnote{\\textbf{Image :} La valeur de l\'aire est l\'image de la valeur du cÃ´tÃ©.}`;
						texte_corr = `\\begin{enumerate}[itemsep=1em]`;
						texte_corr += `\\item Si le cÃ´tÃ© vaut ${x} cm alors la machine renvoie l'aire d'un carrÃ© de cÃ´tÃ© ${x} cm, c'est Ã  dire $${x}\\times ${x}=${tex_nombre(x * x)}\\,cm^2$.<br>`;
						texte_corr += `On dit que ${nombre_avec_espace(x * x)} est l'image de ${x} par la fonction g.`;
					};

					// sous question b/	
					y = randint(2, 99, [x]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += num_alpha(j) + ` Combien vaut le cÃ´tÃ© si la machine renvoie  ${nombre_avec_espace(y * y)} cm<sup>2</sup> ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot antÃ©cÃ©dent', 'AntÃ©cÃ©dent', 'un antÃ©cÃ©dent de la valeur d\'une aire est une valeur du cÃ´tÃ© qui a pour image cette aire') + `<br>`;
						texte_corr += num_alpha(j) + ` Si la machine renvoie une aire de $${tex_nombre(y * y)}\\,cm^2$ alors le cÃ´tÃ© du carrÃ© vaut $\\sqrt{${tex_nombre(y * y)}}=${y}\\,cm$.<br>`;
						texte_corr += `On dit que ${y} est <b>un</b> antÃ©cÃ©dent de ${y * y} par la fonction g.<br>`;
						j++;//incrÃ©mente la sous question	
					} else { //sortie LaTeX
						texte += `\\item  Combien vaut la longueur du cÃ´tÃ© si la machine renvoie  ${nombre_avec_espace(y * y)} $cm^2$ ? Formuler la rÃ©ponse `;
						texte += `avec le mot \\textbf{antÃ©cÃ©dent} \\footnote{\\textbf{AntÃ©cÃ©dent :} Un antÃ©cÃ©dent de la valeur d\'une aire est une valeur du cÃ´tÃ© qui a pour image cette aire}`;
						texte_corr += `\\item Si la machine renvoie une aire de $${tex_nombre(y * y)}\\,cm^2$ alors le cÃ´tÃ© du carrÃ© vaut $\\sqrt{${tex_nombre(y * y)}}=${y}\\,cm$.<br>`;
						texte_corr += `On dit que ${y} est \\textbf{un} antÃ©cÃ©dent de ${nombre_avec_espace(y * y)} par la fonction g.`;
					};

					// sous question c/
					z = randint(2, 99, [x, y]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?							
					if (sortie_html) {
						texte += num_alpha(j) + ` Quelle est l'image de ${z} par la `;
						texte += katex_Popup('fonction', 'Vocabulaire', '<b>fonction</b> est le nom que l\'on donne Ã  ces machines mathÃ©matiques');
						texte += ` $g$ ? &Eacute;crire la rÃ©ponse sous la forme `;
						texte += katex_Popup('$\\mathbf{g(' + z + ')=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction g peut s\'Ã©crire <b>g(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de ${z} par la fonction g vaut $g(${z})=${z}\\times ${z}=${tex_nombre(z * z)}$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  Quelle est l'image de ${z} par la `;
						texte += `\\textbf{fonction g} \\footnote{\\textbf{Vocabulaire :} \\textit{fonction} est le nom que l\'on donne Ã  ces machines mathÃ©matiques.}`;
						texte += ` ? \\'{E}crire la rÃ©ponse sous la forme `;
						texte += `$\\mathbf{g(${z})=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction g peut s\'Ã©crire \\textbf{g(4)=16}}`;
						texte_corr += `\\item L'image de ${z} par la fonction g vaut $g(${z})=${z}\\times ${z}=${tex_nombre(z * z)}$.`;
					};

					// sous question d/
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le cÃ´tÃ© vaut $x$ cm ?<br>`;
						texte_corr += num_alpha(j) + ` Si le cÃ´tÃ© vaut $x$ la machine renvoie $x\\times x$ ce qui est Ã©quivalent Ã  $x^2$ .<br>`;
						j++;//incrÃ©mente la sous question	
					} else {
						texte += `\\item  Que renvoie la machine si le cÃ´tÃ© vaut $x$ cm ?`;
						texte_corr += `\\item Si le cÃ´tÃ© vaut $x$ la machine renvoie $x\\times x$ ce qui est Ã©quivalent Ã  $x^2$ .`;
					};

					// sous question e/
					txt_info =  `Voici le diagramme d'une machine qui double `;
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 1) + ` sous forme de diagramme.<br>`;
						// texte += `Voici le diagramme d'une machine qui double `;
						// texte += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						txt_info += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F1_act_mono(id_du_div_diag, 800, 100, 'g', 'x', [['2', '2x']]);
						texte_corr += num_alpha(j) + ` C'est une machine qui multiplie un nombre par lui-mÃªme, donc sous forme de diagramme.<br>`;
						texte_corr += `<div id="${id_du_div_corr}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F1_act_mono(id_du_div_corr, 800, 100, 'g', 'x', [['x', 'xÂ²']]);
						j++;//incrÃ©mente la sous question
					} else {
						texte += `\\item  \\'{E}crire la rÃ©ponse Ã  la question d/ sous forme de diagramme.<br>`;
						// texte += `Voici le diagramme d'une machine qui double <br>`;
						// texte += tikz_machine_diag(`g`, `x`, [[`\\times 2`, `2x`]]);
						txt_info += '<br>'+tikz_machine_diag(`g`, `x`, [[`\\times 2`, `2x`]]);
						texte_corr += `\\item C'est une machine qui multiplie un nombre par lui-mÃªme, donc sous forme de diagramme.<br>`;
						texte_corr += tikz_machine_diag(`g`, `x`, [[`\\times x`, `x^2`]]);
					};
					texte += info_message({
						titre:'Exemple',
						texte:txt_info,
						couleur:'nombres'
					});

					// sous question f/
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 2) + ` sous la forme `;
						texte += katex_Popup('$\\mathbf{g(\\textbf{\\textit{x}})=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction g peut s\'Ã©crire <b>g(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction g vaut $x\\times x = x^2$ donc $g(x)=x\\times x=x^2$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  \\'{E}crire la rÃ©ponse Ã  la question d/ sous la forme `;
						texte += `$\\mathbf{g(\\textbf{\\textit{x}})=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction g peut s\'Ã©crire \\textbf{g(4)=16}}`;
						texte_corr += `\\item L'image de $x$ par la fonction g vaut $x\\times x = x^2$ donc $g(x)=x\\times x=x^2$.`;
					};

					// sous question g/
					if (sortie_html) {
						texte += num_alpha(j) + ` En utilisant la forme `;
						texte += katex_Popup('$\\mathbf{g:\\textbf{\\textit{x}} \\longmapsto \\ldots}$', 'Notation', '4 a pour image 16 par la fonction g peut s\'Ã©crire $\\mathbf{g:4\\longmapsto 16}$');
						texte += ` Ã©crire la rÃ©ponse Ã  la question ` + num_alpha(j - 3) + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction g vaut $x\\times x=x^2$ donc $g:x\\longmapsto x\\times x=x^2$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  En utilisant la forme `;
						texte += `$\\mathbf{g:\\textbf{\\textit{x}} \\longmapsto \\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction g peut s\'Ã©crire $\\mathbf{g:4\\longmapsto 16}$'}`;
						texte += ` Ã©crire la rÃ©ponse Ã  la question d/ `;
						texte_corr += `\\item L'image de $x$ par la fonction g vaut $x\\times x=x^2$ donc $g:x\\longmapsto x\\times x=x^2$.`;
						texte += `\\end{enumerate}`;
						texte_corr += `\\end{enumerate}`;
					};
					break;
				case 3: // somme de 1 et du triple de x
					var j = 0; // pour la sous-numÃ©rotation
					// consigne
					texte = `La $\\mathbf{machine\\,h}$ renvoie la somme du triple du nombre de dÃ©part et de 1.`;
					texte += `<br>`;
					// machine
					x = randint(2, 99);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += machine_maths_video(`videos/machineMaths-h.mp4`);
					} else { // sortie Latex avec Tikz
						texte += tikz_machine_maths('h', '---', `Multiplier\\,par\\,3`, `Ajouter\\,1`, `nombre\\,de`, `d\\acute{e}part\\,${x}`, `nombre\\,de`, `sortie\\,?`);
					};
					// sous question a/
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le nombre de dÃ©part vaut  ${x} ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot image', 'Image', 'l\'image de la valeur Ã  la sortie de la machine') + `<br>`;
						texte_corr = num_alpha(j) + ` Si le nombre de dÃ©part vaut ${x} alors la machine renvoie $3\\times${x} + 1 = ${3 * x + 1}$<br>`;
						texte_corr += `On dit que ${3 * x + 1} est l'image de ${x} par la fonction g.<br>`;
						j++;//incrÃ©mente la sous question
					} else { //sortie LaTeX
						texte += `\\begin{enumerate}[itemsep=1em]`;
						texte += `\\item  Que renvoie la machine si le nombre de dÃ©part vaut  ${x} ? Formuler la rÃ©ponse `;
						texte += `avec le mot \\textbf{image} \\footnote{\\textbf{Image :} L\'image de la valeur Ã  la sortie de la machine.}`;
						texte_corr = `\\begin{enumerate}[itemsep=1em]`;
						texte_corr += `\\item Si le nombre de dÃ©part vaut ${x} alors la machine renvoie $3\\times${x} + 1 = ${3 * x + 1}$<br>`;
						texte_corr += `On dit que ${3 * x + 1} est l'image de ${x} par la fonction g.`;
					};

					// sous question b/
					y = randint(2, 99, [x]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += num_alpha(j) + ` Combien vaut le nombre de dÃ©part si la machine renvoie  ${3 * y + 1} ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot antÃ©cÃ©dent', 'AntÃ©cÃ©dent', 'un antÃ©cÃ©dent d\'une valeur de sortie est une valeur du nombre de dÃ©part dont l\'image est ce nombre de sortie') + `<br>`;
						texte_corr += num_alpha(j) + ` Si la machine renvoie $${3 * y + 1}$ alors le nombre de dÃ©part vaut $(${3 * y + 1}-1)\\div 3=${y}$<br>`;
						texte_corr += `On dit que ${y} est <b>un</b> antÃ©cÃ©dent de ${3 * y + 1} par la fonction g.<br>`;
						j++;//incrÃ©mente la sous question
					} else { //sortie LaTeX
						texte += `\\item  Combien vaut le nombre de dÃ©part si la machine renvoie  ${3 * y + 1} ? Formuler la rÃ©ponse `;
						texte += `avec le mot \\textbf{antÃ©cÃ©dent} \\footnote{\\textbf{AntÃ©cÃ©dent :} Un antÃ©cÃ©dent d\'une valeur de sortie est une valeur du nombre de dÃ©part dont l\'image est ce nombre de sortie.}`;
						texte_corr += `\\item Si la machine renvoie $${3 * y + 1}$ alors le nombre de dÃ©part vaut $(${3 * y + 1}-1)\\div 3=${y}$<br>`;
						texte_corr += `On dit que ${y} est \\textbf{un} antÃ©cÃ©dent de ${3 * y + 1} par la fonction g.`;
					};

					// sous question c/
					z = randint(2, 99, [x, y]);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += num_alpha(j) + ` Quelle est l'image de ${-z} par la `;
						texte += katex_Popup('fonction', 'Vocabulaire', '<b>fonction</b> est le nom que l\'on donne Ã  ces machines mathÃ©matiques');
						texte += ` $h$ ? &Eacute;crire la rÃ©ponse sous la forme `;
						texte += katex_Popup('$\\mathbf{h(' + (-z) + ')=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction h peut s\'Ã©crire <b>h(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de ${-z} par la fonction h vaut $h(${-z})=3\\times (${-z})+1=${-3 * z + 1}$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  Quelle est l'image de ${-z} par la `;
						texte += `\\textbf{fonction h} \\footnote{\\textbf{Vocabulaire :} \\textit{fonction} est le nom que l\'on donne Ã  ces machines mathÃ©matiques}`;
						texte += ` ? \\'{E}crire la rÃ©ponse sous la forme `;
						texte += `$\\mathbf{h(${-z})=\\ldots}$ \\footnote{\\textbf{Notation : } 4 a pour image 16 par la fonction h peut s\'Ã©crire \\textbf{h(4)=16}}`;
						texte_corr += `\\item L'image de ${-z} par la fonction h vaut $h(${-z})=3\\times (${-z})+1=${-3 * z + 1}$.`;
					};

					// sous question d/
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le cÃ´tÃ© vaut $x$ ?<br>`;
						texte_corr += num_alpha(j) + ` Si le cÃ´tÃ© vaut $x$ la machine renvoie $3\\times x + 1$ ce qui est Ã©quivalent Ã  $3x + 1$ .<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  Que renvoie la machine si le cÃ´tÃ© vaut $x$ ?`;
						texte_corr += `\\item Si le cÃ´tÃ© vaut $x$ la machine renvoie $3\\times x + 1$ ce qui est Ã©quivalent Ã  $3x + 1$ .`;
						j++;//incrÃ©mente la sous question
					};

					// sous question e/
					txt_info = `Voici le diagramme d'une machine qui double puis qui ajoute 5 `;
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 1) + ` sous forme de diagramme.<br>`;
						// texte += `Voici le diagramme d'une machine qui double puis qui ajoute 5 `;
						// texte += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						txt_info += `<div id="${id_du_div_diag}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F12(id_du_div_diag, 800, 100, 'h', 'x', [['2', '2x'], ['5', '2x+5']]);
						texte_corr += num_alpha(j) + ` C'est une machine qui triple un nombre et ajoute 1, donc sous forme de diagramme.<br>`;
						texte_corr += `<div id="${id_du_div_corr}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F12(id_du_div_corr, 800, 100, 'h', 'x', [['3', '3x'], ['1', '3x+1']]);
						j++;//incrÃ©mente la sous question
					} else {
						texte += `\\item  \\'{E}crire la rÃ©ponse Ã  la question d/ sous forme de diagramme.<br>`;
						// texte += `Voici le diagramme d'une machine qui double puis qui ajoute 5 <br>`;
						// texte += tikz_machine_diag(`h`, `x`, [[`\\times 2`, `2x`], [`+5`, `2x+5`]]);
						txt_info +='<br>'+tikz_machine_diag(`h`, `x`, [[`\\times 2`, `2x`], [`+5`, `2x+5`]]);
						texte_corr += `\\item C'est une machine qui triple un nombre et ajoute 1, donc sous forme de diagramme.<br>`;
						texte_corr += tikz_machine_diag(`h`, `x`, [[`\\times 3`, `3x`], [`+1`, `3x+1`]]);
					};
					texte += info_message({
						titre:'Exemple',
						texte:txt_info,
						couleur:'nombres'
					});

					// sous question f/
					if (sortie_html) {
						texte += num_alpha(j) + ` &Eacute;crire la rÃ©ponse Ã  la question ` + num_alpha(j - 2) + ` sous la forme `;
						texte += katex_Popup('$\\mathbf{h(\\textbf{\\textit{x}})=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction h peut s\'Ã©crire <b>h(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction h vaut $3\\times x + 1 = 3x + 1$ donc $h(x)=3\\times x + 1$ soit $h(x) = 3x + 1$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  \\'{E}crire la rÃ©ponse Ã  la question d/ sous la forme `;
						texte += `$\\mathbf{h(\\textbf{\\textit{x}})=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction h peut s\'Ã©crire \\textbf{h(4)=16}}`;
						texte_corr += `\\item L'image de $x$ par la fonction h vaut $3\\times x + 1 = 3x + 1$ donc $h(x)=3\\times x + 1$ soit $h(x) = 3x + 1$.`;
					};

					// sous question g/
					if (sortie_html) {
						texte += num_alpha(j) + ` En utilisant la forme `;
						texte += katex_Popup('$\\mathbf{h:\\textbf{\\textit{x}} \\longmapsto \\ldots}$', 'Notation', '4 a pour image 16 par la fonction h peut s\'Ã©crire $\\mathbf{h:4\\longmapsto16}$');
						texte += ` Ã©crire la rÃ©ponse Ã  la question ` + num_alpha(j - 3) + `<br>`;
						texte_corr += num_alpha(j) + ` L'image de $x$ par la fonction h vaut $3\\times x +1= 3x + 1$ donc $h : x \\longmapsto 3\\times x + 1$ soit $h : x \\longmapsto 3x + 1$.<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item  En utilisant la forme `;
						texte += `$\\mathbf{h:\\textbf{\\textit{x}} \\longmapsto \\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction h peut s\'Ã©crire $\\mathbf{h:4\\longmapsto16}$}`;
						texte += ` Ã©crire la rÃ©ponse Ã  la question d/`;
						texte_corr += `\\item L'image de $x$ par la fonction h vaut $3\\times x +1= 3x + 1$ donc $h : x \\longmapsto 3\\times x + 1$ soit $h : x \\longmapsto 3x + 1$.`;
						texte += `\\end{enumerate}`;
						texte_corr += `\\end{enumerate}`;
					};
					break;
				case 4: // nombre de diviseurs de x entier
					var j = 0; // pour la sous-numÃ©rotation
					// consigne
					texte = `La $\\mathbf{machine\\,d}$, qui n'accepte que des nombres entiers positifs, renvoie le nombre de diviseurs du nombre de dÃ©part.`;
					texte += `<br>`;
					// machine
					x = randint(2, 51);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?						
					if (sortie_html) {
						texte += machine_maths_video(`videos/machineMaths-d.mp4`);
					} else { // sortie Latex avec Tikz
						texte += tikz_machine_maths('d', '---', `nombre \\, total`, `de \\, diviseurs`, `nombre\\,de`, `d\\acute{e}part\\,${x}`, `nombre \\, de`, `diviseurs`);
					};
					// sous question a/
					if (sortie_html) {
						texte += num_alpha(j) + ` Que renvoie la machine si le nombre de dÃ©part vaut  ${x} ? Formuler la rÃ©ponse `;
						texte += katex_Popup('avec le mot image', 'Image', 'l\'image de la valeur Ã  la sortie de la machine') + `<br>`;
						texte_corr = num_alpha(j) + ` Pour trouver la liste des diviseurs de ${x} on cherche tous les produits de deux facteurs qui donnent ${x}<br>`;
						j++;//incrÃ©mente la sous question
					} else { //sortie LaTeX
						texte += `\\begin{enumerate}[itemsep=1em]`;
						texte += `\\item Que renvoie la machine si le nombre de dÃ©part vaut  ${x} ? Formuler la rÃ©ponse `;
						texte += `avec le mot \\textbf{image} \\footnote{\\textbf{Image : } L\'image de la valeur Ã  la sortie de la machine}`;
						texte_corr = `\\begin{enumerate}[itemsep=1em]`;
						texte_corr += `\\item Pour trouver la liste des diviseurs de ${x} on cherche tous les produits de deux facteurs qui donnent ${x}<br>`;
					};
					if (liste_diviseurs(x).length % 2 == 0) {//si il y a un nombre pair de diviseurs
						for (let m = 0; m < (liste_diviseurs(x).length / 2); m++) {
							texte_corr += `$` + liste_diviseurs(x)[m] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - m - 1)] + `$<br>`;
						};
					} else {
						for (let m = 0; m < ((liste_diviseurs(x).length - 1) / 2); m++) {
							texte_corr += `$` + liste_diviseurs(x)[m] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - m - 1)] + `$<br>`;
						};
						texte_corr += `$` + liste_diviseurs(x)[(liste_diviseurs(x).length - 1) / 2] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - 1) / 2] + `$<br>`;
					};
					texte_corr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${x}<br>`;
					texte_corr += `La liste des diviseurs de ${x} est donc ` + liste_diviseurs(x) + `; Cette liste compte ` + liste_diviseurs(x).length + ` nombres. <br>`;
					texte_corr += `Donc ` + liste_diviseurs(x).length + ` est l'image de ${x} par la fonction d.`;
					if (sortie_html) {
						texte_corr += `<br>`;
					};

					// sous question b/
					x = randint(1, 9);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?
					if (sortie_html) {
						//texte += num_alpha(j) + ` Quelle est une valeur possible du nombre de dÃ©part si la machine renvoie  2 ?<br>`;
						texte += num_alpha(j) + ` Quelle est une valeur possible du nombre de dÃ©part si la machine renvoie  2 ? En existe-t-il plusieurs ?<br>`;
						texte_corr += num_alpha(j) + ` Si la machine renvoie 2 alors le nombre de dÃ©part  a exactement 2 diviseurs, tous les`;
						texte_corr += katex_Popup('nombres premiers', 'Nombre premier', 'Un nombre entier est un <b>nombre premier</b> si il a exactement deux diviseurs, 1 et lui-mÃªme.');
						texte_corr += `conviennent.<br>`;
						texte_corr += `2 est premier donc 2 est <b>un</b> antÃ©cÃ©dent de 2 par la fonction d.<br>`;
						texte_corr += `7 est premier donc 7 est <b>un autre</b> antÃ©cÃ©dent de 2 par la fonction d.<br>`;
						j++;//incrÃ©mente la sous question
					} else {
						//texte += `\\item Quelle est une valeur possible du nombre de dÃ©part si la machine renvoie  2 ?`;
						texte += `\\item Quelle est une valeur possible du nombre de dÃ©part si la machine renvoie  2 ? En existe-til plusieurs ?`;
						texte_corr += ` \\item Si la machine renvoie 2 alors le nombre de dÃ©part  a exactement 2 diviseurs, tous les`;
						texte_corr += `\\textbf{nombres premiers} \\footnote{\\textbf{Nombre premier :} Un nombre entier est un \\textbf{nombre premier} si il a exactement deux diviseurs, 1 et lui-mÃªme.}`;
						texte_corr += `conviennent.<br>`;
						texte_corr += `2 est premier donc 2 est \\textbf{un} antÃ©cÃ©dent de 2 par la fonction d.<br>`;
						texte_corr += `7 est premier donc 7 est \\textbf{un autre} antÃ©cÃ©dent de 2 par la fonction d.`;
					};

					// sous question c/
					x = randint(51, 99);//augmenter les possibles pour Ã©viter les questions dÃ©jÃ  posÃ©es?	
					if (sortie_html) {
						texte += num_alpha(j) + ` Quelle est l'image de ${x} par la `;
						texte += katex_Popup('fonction', 'Vocabulaire', '<b>fonction</b> est le nom que l\'on donne Ã  ces machines mathÃ©matiques');
						texte += ` $d$ ? &Eacute;crire la rÃ©ponse sous la forme `;
						texte += katex_Popup('$\\mathbf{d(' + (x) + ')=\\ldots}$', 'Notation', '4 a pour image 16 par la fonction d peut s\'Ã©crire <b>d(4)=16</b>') + `<br>`;
						texte_corr += num_alpha(j) + ` Pour trouver l'image de ${x} on peut par exemple chercher tous ses diviseurs et les compter<br>`;
						j++;//incrÃ©mente la sous question
					} else { // sortie LaTeX
						texte += `\\item Quelle est l'image de ${x} par la `;
						texte += `\\textbf{fonction d} \\footnote{\\textbf{Vocabulaire :} \\textit{fonction} est le nom que l\'on donne Ã  ces machines mathÃ©matiques.}`;
						texte += ` ? \\'{E}crire la rÃ©ponse sous la forme `;
						texte += `$\\mathbf{d(` + (x) + `)=\\ldots}$ \\footnote{\\textbf{Notation :} 4 a pour image 16 par la fonction d peut s\'Ã©crire \\textbf{d(4)=16}}`;
						texte_corr += `\\item Pour trouver l'image de ${x} on peut par exemple chercher tous ses diviseurs et les compter<br>`;
					};
					if (liste_diviseurs(x).length % 2 == 0) {//si il y a un nombre pair de diviseurs
						for (let m = 0; m < (liste_diviseurs(x).length / 2); m++) {
							texte_corr += `$` + liste_diviseurs(x)[m] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - m - 1)] + `$<br>`;
						};
					} else {
						for (let m = 0; m < ((liste_diviseurs(x).length - 1) / 2); m++) {
							texte_corr += `$` + liste_diviseurs(x)[m] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - m - 1)] + `$<br>`;
						};
						texte_corr += `$` + liste_diviseurs(x)[(liste_diviseurs(x).length - 1) / 2] + `\\times` + liste_diviseurs(x)[(liste_diviseurs(x).length - 1) / 2] + `$<br>`;
					};
					texte_corr += `La liste des diviseurs de ${x} est donc `;
					texte_corr += liste_diviseurs(x)[0];
					for (let k = 1; k < liste_diviseurs(x).length; k++) {
						texte_corr += ` ; ` + liste_diviseurs(x)[k];
					};
					texte_corr += ` ; Cette liste compte ` + liste_diviseurs(x).length + ` nombres.<br> `;
					texte_corr += `Donc ` + liste_diviseurs(x).length + ` est l'image de ${x} par la fonction d.`;
					if (sortie_html) {
						texte_corr += `<br>`;
					};

					// sous question d/
					if (sortie_html) {
						// texte += num_alpha(j) + ` Peut-on trouver deux antÃ©cÃ©dents de 3 par la fonction d ?<br>`;
						texte += num_alpha(j) + ` Peut-on trouver plusieurs antÃ©cÃ©dents de 3 par la fonction d ? Qu'ont-ils de commun ?<br>`;
						texte_corr += num_alpha(j) + ` Il faut trouver des nombres qui ont exactement 3 diviseurs.<br>`;
						j++;//incrÃ©mente la sous question
					} else {
						//texte += `\\item  Peut-on trouver deux antÃ©cÃ©dents de 3 par la fonction d ?`;
						texte += `\\item  Peut-on trouver plusieurs antÃ©cÃ©dents de 3 par la fonction d ? Qu'ont-ils de commun ?`;
						texte_corr += `\\item Il faut trouver des nombres qui ont exactement 3 diviseurs.<br>`;
					}
					texte_corr += `La liste des diviseurs de 9 est `;
					texte_corr += liste_diviseurs(9)[0];
					for (let k = 1; k < liste_diviseurs(9).length; k++) {
						texte_corr += ` ; ` + liste_diviseurs(9)[k];
					};
					texte_corr += ` ; Cette liste compte ` + liste_diviseurs(9).length + ` nombres, `;
					texte_corr += `donc 9 est un antÃ©cÃ©dent de 3 par la fonction d.<br>`;
					texte_corr += `La liste des diviseurs de 25 est `;
					texte_corr += liste_diviseurs(25)[0];
					for (let k = 1; k < liste_diviseurs(25).length; k++) {
						texte_corr += ` ; ` + liste_diviseurs(25)[k];
					};
					texte_corr += ` ; Cette liste compte ` + liste_diviseurs(25).length + ` nombres, `;
					texte_corr += `donc 25 est un antÃ©cÃ©dent de 3 par la fonction d.<br>`;
					texte_corr += `Tu peux en trouver d'autres, qu'ont ils de commun ?`
					if (!sortie_html) {
						texte += `\\end{enumerate}`;
						texte_corr += `\\end{enumerate}`;
					};
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3F12 Notion de fonction - Vocabulaire
 * DÃ©terminer Ã  partir de plusieurs modes de reprÃ©sentation l'image d'un nombre
 * @author SÃ©bastien LOZANO
 */

function fonctions_calculs_d_images() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Fonctions : Calculs d'images";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = ``;
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne += `Calcule les images avec la mÃ©thode demandÃ©e.`;

	sortie_html ? this.spacing = 2 : this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 4;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 5;

	var num_ex = '3F12'; // pour rendre unique les id des SVG, en cas d'utilisation dans plusieurs exercices y faisant appel

	if (sortie_html) {
		var pourcentage = '100%'; // pour l'affichage des svg. On a besoin d'une variable globale
	} else { // sortie LaTeX

	};
	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//			 this.bouton_aide = modal_pdf(numero_de_l_exercice,"pdf/FicheFonctions-3F1-act.pdf","Aide mÃ©moire sur les fonctions (SÃ©bastien Lozano)","Aide mÃ©moire")		
			//			 this.bouton_aide += modal_video('videoTest','videos/Fonctions.mp4','Petit conte mathÃ©matique','Intro VidÃ©o');
		}
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [];
		if (this.sup == 1) {
			type_de_questions_disponibles = [1]; // prog de calcul
		} else if (this.sup == 2) {
			type_de_questions_disponibles = [2]; // diagramme
		} else if (this.sup == 3) {
			type_de_questions_disponibles = [3]; // f(x) = ...
		} else if (this.sup == 4) {
			type_de_questions_disponibles = [4]; // f : x ---> ...
		} else if (this.sup == 5) {
			type_de_questions_disponibles = [1, 2, 3, 4]; // mÃ©lange
		};
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		for (let i = 0, a, b, c, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			if (sortie_html) {
				let id_unique = `${num_ex}_${i}_${Date.now()}`
				var id_du_div = `div_svg${numero_de_l_exercice}${id_unique}`;
				var id_du_div_corr = `div_svg_corr${numero_de_l_exercice}${id_unique}`;
			}
			// on part sur de l'affine avec coeff positifs, on verra ensuite
			a = randint(2, 9);
			b = randint(2, 9);
			c = randint(2, 9);

			switch (type_de_questions) {
				case 1:
					var j = 0; // pour la sous-numÃ©rotation
					texte = `On donne le programme de calcul suivant qui correspond Ã  une certaine fonction :`;
					texte_corr = `Avec ce programme de calcul :`
					if (sortie_html) {
						texte += `
							<br>
							<div class="ui compact warning message">		
							<p>							
							- Choisir un nombre<br>
							- Multiplier ce nombre par ${a}<br>
							- Ajouter ${b} au rÃ©sultat obtenu<br>
							</p>
							</div>
							<br>`;
						// sous-question a/
						texte += num_alpha(j) + ` Appliquer ce programme de calcul au nombre ${c}<br>`;
						texte_corr += `<br>` + num_alpha(j) + `
							<br>
							<div class="ui compact warning message">		
							<p>							
							- On choisit le nombre ${c}<br>
							- On multiplie ce nombre par ${a} : ${a}$\\times$ ${c} = ${a * c}<br>
							- On ajoute ${b} au rÃ©sultat obtenu : ${a * c}+${b}=${a * c + b}<br>
							</p>
							</div>
							<br>							
							`;
						j++;
						// sous-question b/
						texte += num_alpha(j) + ` Traduire ce calcul par une phrase contenant le mot image`;
						texte_corr += num_alpha(j) + `L'image de ${c} par cette fonction vaut ${a * c + b}`;
						texte_corr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par cette fonction`;
					} else {
						texte += tex_cadre_par_orange(itemize([`Choisir un nombre`, `Multiplier ce nombre par ${a}`, `Ajouter ${b} au rÃ©sultat obtenu`]));
						// sous-question a/
						texte += tex_enumerate([`Appliquer ce programme de calcul au nombre ${c}`, `Traduire ce calcul par une phrase contenant le mot image`], this.spacing);
						//texte_corr += 
						texte_corr += tex_enumerate([tex_cadre_par_orange(itemize([`On choisit le nombre ${c}`, `On multiplie ce nombre par ${a} : $${a} \\times ${c} = ${a * c}$ `, `On ajoute ${b} au rÃ©sultat obtenu : $${a * c}+${b}=${a * c + b}$`])), `L'image de ${c} par cette fonction vaut ${a * c + b}<br>On peut aussi dire que ${a * c + b} est l'image de ${c} par cette fonction`], this.spacing);
					};
					break;
				case 2:
					var j = 0; // pour la sous-numÃ©rotation
					// les variables a,b,c changent sans refaire un appel Ã  randint
					texte = `Soit $f$ la fonction dÃ©finie par l'expression algÃ©brique $f(x)=$ ${a}$x+$${b}`;
					if (sortie_html) {
						// sous-question a/
						texte += `<br>` + num_alpha(j) + ` Calculer l'image de ${c}`;
						texte += `<br>`;
						texte_corr = num_alpha(j) + ` Calculons l'image par $f$ de $x= ${c}$ :`;
						texte_corr += `<br>$f(${mise_en_evidence('\\textit{\\textbf{x}}')})= ${a} ${mise_en_evidence('\\textit{\\textbf{x}}')}+${b}$`;
						texte_corr += `<br>$f(${mise_en_evidence(c)})= ${a}\\times ${mise_en_evidence(c)}+${b}$`;
						texte_corr += `<br>$f(${mise_en_evidence(c)})= ${a * c}+${b}$`;
						texte_corr += `<br>$f(${mise_en_evidence(c)})= ${a * c + b}$`;
						j++;
						//sous question b/
						texte += num_alpha(j) + ` Traduire ce calcul par une phrase contenant le mot image`;
						texte_corr += `<br>` + num_alpha(j) + ` L'image de ${c} par la fonction $f$ vaut ${a * c + b}`;
						texte_corr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $f$`;
					} else {
						// sous-question a/ et b/
						texte += tex_enumerate([`Calculer l'image de ${c}`, `Traduire ce calcul par une phrase contenant le mot image`], this.spacing);
						texte_corr = tex_enumerate([`Calculons l'image par $f$ de $x= ${c}$ :
							<br>$f(${mise_en_evidence('\\textit{\\textbf{x}}')})= ${a} ${mise_en_evidence('\\textit{\\textbf{x}}')}+${b}$
							<br>$f(${mise_en_evidence(c)})= ${a}\\times ${mise_en_evidence(c)}+${b}$
							<br>$f(${mise_en_evidence(c)})= ${a * c}+${b}$
							<br>$f(${mise_en_evidence(c)})= ${a * c + b}$`, `L'image de ${c} par la fonction $f$ vaut ${a * c + b}
							<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $f$`
						], this.spacing);
					};
					break;
				case 3:
					var j = 0; // pour la sous-numÃ©rotation
					// les variables a,b,c changent sans refaire un appel Ã  randint
					texte = `Soit $g$ la fonction dÃ©finie par $g:x\\longmapsto$ ${a}$x+$${b}`;
					if (sortie_html) {
						// sous-question a/
						texte += `<br>` + num_alpha(j) + ` Calculer l'image de ${c}`;
						texte += `<br>`;
						texte_corr = num_alpha(j) + ` Calculons l'image par $g$ de $x= ${c}$ :`;
						texte_corr += `<br>$g:${mise_en_evidence('\\textit{\\textbf{x}}')}\\longmapsto ${a} ${mise_en_evidence('\\textit{\\textbf{x}}')}+${b}$`;
						texte_corr += `<br>$g:${mise_en_evidence(c)}\\longmapsto ${a}\\times${mise_en_evidence(c)}+${b}$`;
						texte_corr += `<br>$g:${mise_en_evidence(c)}\\longmapsto ${a * c}+${b}$`;
						texte_corr += `<br>$g:${mise_en_evidence(c)}\\longmapsto ${a * c + b}$`;
						j++;
						//sous question b/
						texte += num_alpha(j) + ` Traduire ce calcul par une phrase contenant le mot image`;
						texte_corr += `<br>` + num_alpha(j) + ` L'image de ${c} par la fonction $g$ vaut ${a * c + b}`;
						texte_corr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`;
					} else {
						// sous-question a/ et b/
						texte += tex_enumerate([`Calculer l'image de ${c}`, `Traduire ce calcul par une phrase contenant le mot image`], this.spacing);
						texte_corr = tex_enumerate([`Calculons l'image par $g$ de $x= ${c}$ :
							<br>$g:${mise_en_evidence('\\textit{\\textbf{x}}')}\\longmapsto ${a} ${mise_en_evidence('\\textit{\\textbf{x}}')}+${b}$
							<br>$g:${mise_en_evidence(c)}\\longmapsto ${a}\\times ${mise_en_evidence(c)}+${b}$
							<br>$g:${mise_en_evidence(c)}\\longmapsto ${a * c}+${b}$
							<br>$g:${mise_en_evidence(c)}\\longmapsto ${a * c + b}$`, `L'image de ${c} par la fonction $g$ vaut ${a * c + b}
							<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`
						], this.spacing);
					};
					break;
				case 4:
					texte = ``;
					texte_corr = ``;
					texte_corr += `Calculer avec un diagramme `;
					var j = 0; // pour la sous-numÃ©rotation
					// les variables a,b,c changent sans refaire un appel Ã  randint
					texte += `Soit la fonction $h$ dÃ©finie par le diagramme `;
					if (sortie_html) {
						// sous-question a/
						texte += `<div id="${id_du_div}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
						SVG_machine_diag_3F12(id_du_div, 800, 100, 'h', 'x', [['' + a, a + 'x'], ['' + b, a + 'x+' + b]]);
						texte += num_alpha(j) + ` Calculer l'image de ${c}`;
						texte += `<br>`;
						texte_corr += `<br>`;
						texte_corr += num_alpha(j) + ` Calculons l'image par $h$ de $x=$ ${c} :`;
						texte_corr += `<div id="${id_du_div_corr}" style="width: ${pourcentage}"; display : table "></div>`;
						SVG_machine_diag_3F12(id_du_div_corr, 800, 100, 'h', '' + c, [['' + a, '' + (a * c)], ['' + b, '' + (a * c + b)]]);
						j++;
						//sous question b/
						texte += num_alpha(j) + ` Traduire ce calcul par une phrase contenant le mot image`;
						texte_corr += `<br>` + num_alpha(j) + ` L'image de ${c} par la fonction $h$ vaut ${a * c + b}`;
						texte_corr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $h$`;
					} else {
						texte += `<br>` + tikz_machine_diag(`h`, `x`, [[`\\times ` + a, a + `x`], [`+` + b, a + `x+` + b]]);
						// sous-question a/ et b/
						texte += tex_enumerate([`Calculer l'image de ${c}`, `Traduire ce calcul par une phrase contenant le mot image`], this.spacing);
						texte_corr = tex_enumerate(
							[`Calculons l'image par $g$ de $x=$ ${c} :<br>` + tikz_machine_diag(`h`, c, [[`\\times ` + a, (a * c)], [`+` + b, (a * c + b)]]),
							`L'image de ${c} par la fonction $g$ vaut ${a * c + b}
						 	<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`
							], this.spacing);
					};
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler', 5, "1 : &Agrave; partir d'un programme de calcul\n2 : &Agrave; partir de l'expression algÃ©brique sous forme f(x) = ...\n3 : &Agrave; partir de l'expression algÃ©brique sous forme f : x --> ...\n4 : &Agrave; partir d'un diagramme\n5 : MÃ©lange"];
};

/**
 * 3A10 - Division Euclidienne; diviseurs, multiples, critÃ¨res de divisibilitÃ©
 * Exercice bilan
 * @author SÃ©bastien Lozano
 */

function DivisionEuclidienne_multiplesDiviseurs_Criteres() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Division Euclidienne - Diviseurs - Multiples";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Divisions euclidiennes - Diviseurs - Multiples.`;
	//sortie_html ? this.spacing = 3 : this.spacing = 2;
	sortie_html ? this.spacing = 1 : this.spacing = 2;
	//sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 2;
	this.nb_questions = 5;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A10.pdf", "Aide mÃ©moire sur la division euclidienne (SÃ©bastien Lozano)", "Aide mÃ©moire")
			//this.bouton_aide += modal_video('conteMathsNombresPremiers','videos/LesNombresPremiers.mp4','Petit conte mathÃ©matique','Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3, 4, 5];
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			var dividende;
			var diviseur;
			var quotient;
			var reste;

			switch (type_de_questions) {
				case 1: // plus grand reste dans une division euclidienne
					diviseur = randint(2, 99);
					texte = `Dire quel est le plus grand reste possible dans une division euclidienne par ${diviseur}.`;
					texte_corr = `Si on divise par ${diviseur}, il ne peut pas rester plus de ${diviseur - 1}, sinon c'est qu'on peut encore ajouter au moins 1 fois ${diviseur} dans le dividende et donc 1 au quotient.`;
					break;
				case 2: // quotient et reste d'une division euclidienne donnÃ©e
					diviseur = randint(2, 99);
					dividende = randint(1001, 99999);
					quotient = Math.trunc(dividende / diviseur);
					reste = dividende % diviseur;

					texte = `On a ${nombre_avec_espace(dividende)}=${nombre_avec_espace(diviseur)}$\\times$${nombre_avec_espace(quotient)} $+$ ${nombre_avec_espace(reste)}`;
					texte += `<br>`;
					texte += `Ãcrire le quotient et le reste de la division euclidienne de ${nombre_avec_espace(dividende)} par ${diviseur}.`;
					texte_corr = `Dans la division euclidienne de ${nombre_avec_espace(dividende)} par ${diviseur}, le quotient vaut ${nombre_avec_espace(quotient)} et le reste ${reste}.`;
					break;
				case 3: // caractÃ©risation des multiples et diviseurs par le reste de la division euclidienne
					dividende = randint(101, 9999);
					let rg_diviseur; // rang du diviseur choisi
					if (liste_diviseurs(dividende).length % 2 == 0) {//si il y a un nombre pair de diviseurs on prend le (n/2+1) eme
						rg_diviseur = liste_diviseurs(dividende).length / 2 + 1;
					} else { // il y a nbre impair de diviseurs on prend le ((n-1)/2 +1) eme
						rg_diviseur = (liste_diviseurs(dividende).length - 1) / 2 + 1;
					}
					diviseur = liste_diviseurs(dividende)[rg_diviseur - 1]; // on choisit le diviseur central de dividende, ATTENTION rang des tableaux commence Ã  0 
					let candidats_diviseurs = [diviseur - 1, diviseur, diviseur + 1]; // on prend l'entier prÃ©cÃ©dent et le successeur de ce diviseur
					// Faut-il que je conditionne pour Ã©viter le diviseur 1 ?
					candidats_diviseurs = shuffle(candidats_diviseurs); // on mÃ©lange le tableau
					texte = 'Les trois divisions euclidiennes suivantes sont exactes : <br>';
					texte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[0])}$\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[0]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[0])}`;
					texte += `<br>`;
					texte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[1])}$\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[1]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[1])}`;
					texte += `<br>`;
					texte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[2])}$\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[2]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[2])}`;
					texte += `<br>`;
					texte += `Sans calculer, dire si les nombres ${nombre_avec_espace(candidats_diviseurs[0])}; ${nombre_avec_espace(candidats_diviseurs[1])}; ${nombre_avec_espace(candidats_diviseurs[2])} sont des diviseurs de ${nombre_avec_espace(dividende)}. Justifier.`;
					texte_corr = ``;
					if (egal(dividende % candidats_diviseurs[0],0)) { //egal() est une fonction de JC pour Ã©viter les problÃ¨mes de virgule flottante
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[0])} vaut 0 donc ${nombre_avec_espace(candidats_diviseurs[0])} est un diviseur de ${nombre_avec_espace(dividende)}`;
					} else {
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[0])} ne vaut pas 0 donc ${nombre_avec_espace(candidats_diviseurs[0])} n'est pas un diviseur de ${nombre_avec_espace(dividende)}`;
					}
					texte_corr += `<br>`;
					if (egal(dividende % candidats_diviseurs[1],0)) { //egal() est une fonction de JC pour Ã©viter les problÃ¨mes de virgule flottante
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[1])} vaut 0 donc ${nombre_avec_espace(candidats_diviseurs[1])} divise ${nombre_avec_espace(dividende)}`;
					} else {
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[1])} ne vaut pas 0 donc ${nombre_avec_espace(candidats_diviseurs[1])} ne divise pas ${nombre_avec_espace(dividende)}`;
					}
					texte_corr += `<br>`;
					if (egal(dividende % candidats_diviseurs[2],0)) { //egal() est une fonction de JC pour Ã©viter les problÃ¨mes de virgule flottante
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[2])} vaut 0 donc ${nombre_avec_espace(dividende)} est divisible par ${nombre_avec_espace(candidats_diviseurs[2])}`;
					} else {
						texte_corr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[2])} ne vaut pas 0 donc ${nombre_avec_espace(dividende)} n'est pas divisible par ${nombre_avec_espace(candidats_diviseurs[2])}`;
					}
					texte_corr += `<br>`;
					break;
				case 4: // vocabulaire diviseurs et multiples
					// on dÃ©clare des tableaux utiles 
					let diviseurs = [];
					let multiplicateurs = [];
					let multiples = [];
					let quotients = [];
					let textes = [];
					let textes_corr = [];
					// on tire au hasard 4 diviseurs diffÃ©rents entre 2 et 999 et 4 multiplicateurs diffÃ©rents entre 2 et 9 
					diviseurs = [randint(2, 999), randint(2, 999, [diviseurs[0]]), randint(2, 999, [diviseurs[0], diviseurs[1]]), randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2]])];
					multiplicateurs = [randint(2, 9), randint(2, 9, [multiplicateurs[0]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1], multiplicateurs[2]])];
					// on calcule les multiples
					for (let j = 0; j < 4; j++) {
						multiples[j] = diviseurs[j] * multiplicateurs[j];
						quotients[j] = multiples[j] / diviseurs[j];
						diviseurs[j] = nombre_avec_espace(diviseurs[j]);
						multiples[j] = nombre_avec_espace(multiples[j]);
						quotients[j] = nombre_avec_espace(quotients[j]);
					};
					// on crÃ©e les phrases 
					textes[0] = `${diviseurs[0]} $\\ldots\\ldots\\ldots\\ldots$ ${multiples[0]}`;
					textes_corr[0] = `${diviseurs[0]} est un diviseur de ${multiples[0]} car ${multiples[0]}=${diviseurs[0]}$\\times$${quotients[0]}`;
					textes[1] = `${diviseurs[1]} $\\ldots\\ldots\\ldots\\ldots$ ${multiples[1]}`;
					textes_corr[1] = `${diviseurs[1]} est un diviseur de ${multiples[1]} car ${multiples[1]}=${diviseurs[1]}$\\times$${quotients[1]}`;
					textes[2] = `${multiples[2]} $\\ldots\\ldots\\ldots\\ldots$ ${diviseurs[2]}`;
					textes_corr[2] = `${multiples[2]} est un multiple de ${diviseurs[2]} car ${multiples[2]}=${diviseurs[2]}$\\times$${quotients[2]}`;
					textes[3] = `${multiples[3]} $\\ldots\\ldots\\ldots\\ldots$ ${diviseurs[3]}`;
					textes_corr[3] = `${multiples[3]} est un multiple de ${diviseurs[3]} car ${multiples[3]}=${diviseurs[3]}$\\times$${quotients[3]}`;
					// on ajoute deux cas ni multiple ni diviseur
					// on choisit deux nombres
					let n1 = nombre_avec_espace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3]]));
					let p1 = nombre_avec_espace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3], n1]));
					// on choisit un autre qui n'est pas dans la liste des diviseurs de n1
					let n2 = nombre_avec_espace(randint(2, 999, liste_diviseurs(n1)));
					let p2 = nombre_avec_espace(randint(2, 999, liste_diviseurs(p1)));
					textes[4] = `${n1} $\\ldots\\ldots\\ldots\\ldots$ ${n2}`;
					textes_corr[4] = `${n1} n'est ni un multiple ni un diviseur de ${n2} car ${n1}=${n2}$\\times$${Math.trunc(n1/n2)}+${texte_en_couleur(n1%n2)} et ${n2}=${n1}$\\times$${Math.trunc(n2/n1)}+${texte_en_couleur(n2%n1)}`;
					textes[5] = `${p2} $\\ldots\\ldots\\ldots\\ldots$ ${p1}`;
					textes_corr[5] = `${p2} n'est ni un multiple ni un diviseur de ${p1} car ${p1}=${p2}$\\times$${Math.trunc(p1/p2)}+${texte_en_couleur(p1%p2)} et ${p2}=${p1}$\\times$${Math.trunc(p2/p1)}+${texte_en_couleur(p2%p1)}`;
					// on mÃ©lange pour que l'ordre change!
					shuffle2tableaux(textes, textes_corr);
					texte = `Avec la calculatrice, complÃ©ter chaque phrase avec "est un diviseur de" ou "est un multiple de" ou "n'est ni un diviseur ni un multiple de".`;
					texte += `<br>`;
					texte_corr = ``;
					for (let j = 0; j < 5; j++) {
						texte += textes[j];
						texte += `<br>`;
						texte_corr += textes_corr[j];
						texte_corr += `<br>`;
					};
					texte += textes[5];
					//texte +=`<br>`;
					texte_corr += textes_corr[5];
					texte_corr += `<br>`;
					break;
				case 5: // liste des diviseurs
					// on dÃ©finit un tableau pour les choix du nombre dont on veut les diviseurs
					// 3 parmis 2,99 y compris les premiers et 1 parmis les entiers Ã  3 chiffres ayant au moins 8 diviseurs, il y en a 223 !
					let tableau_de_choix = [];
					tableau_de_choix = [randint(2, 99), randint(2, 99, [tableau_de_choix[0]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1], tableau_de_choix[2]])];
					let tableau_de_choix_3chiffres = [];
					for (let m = 101; m < 999; m++) {
						if (liste_diviseurs(m).length > 8) {
							tableau_de_choix_3chiffres.push(m);
						};
					};
					// on ajoute un nombre Ã  trois chiffre avec au moins 8 diviseurs dans les choix possibles
					let rg_Nb_3chiffres = randint(0, (tableau_de_choix_3chiffres.length - 1));
					tableau_de_choix.push(tableau_de_choix_3chiffres[rg_Nb_3chiffres]);
					let N; // on dÃ©clare le nombre dont on va chercher les diviseurs
					let rg_N; // pour tirer le rang du nombre dans le tableau des choix
					rg_N = randint(0, (tableau_de_choix.length - 1));
					N = tableau_de_choix[rg_N];
					texte = `Ãcrire la liste de tous les diviseurs de ${N}.`;
					texte_corr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En Ã©crivant toujours le plus petit facteur en premier.<br>`;
					texte_corr += `Il est suffisant de chercher des diviseurs infÃ©rieurs au plus grand nombre dont le carrÃ© vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\times$${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N)) * Math.trunc(Math.sqrt(N))}<${N}`;
					texte_corr += ` et ${Math.trunc(Math.sqrt(N)) + 1}$\\times$${Math.trunc(Math.sqrt(N)) + 1} = ${(Math.trunc(Math.sqrt(N)) + 1) * (Math.trunc(Math.sqrt(N)) + 1)}>${N} donc il suffit d'arrÃªter la recherche de facteur Ã  ${Math.trunc(Math.sqrt(N))}.`;
					texte_corr += ` En effet, si ${N} est le produit de deux entiers p$\\times$q avec p < q alors si p$\\times$p > ${N} c'est que q$\\times$q < ${N} mais dans ce cas p serait supÃ©rieur Ã  q sinon p$\\times$q serait infÃ©rieur Ã  ${N} ce qui ne doit pas Ãªtre le cas.<br>`
					if (liste_diviseurs(N).length % 2 == 0) {//si il y a un nombre pair de diviseurs
						for (let m = 0; m < (liste_diviseurs(N).length / 2); m++) {
							texte_corr += `` + liste_diviseurs(N)[m] + `$\\times$` + liste_diviseurs(N)[(liste_diviseurs(N).length - m - 1)] + ` = ${N}<br>`;
						};
					} else {
						for (let m = 0; m < ((liste_diviseurs(N).length - 1) / 2); m++) {
							texte_corr += `` + liste_diviseurs(N)[m] + `$\\times$` + liste_diviseurs(N)[(liste_diviseurs(N).length - m - 1)] + `<br>`;
						};
						texte_corr += `` + liste_diviseurs(N)[(liste_diviseurs(N).length - 1) / 2] + `$\\times$` + liste_diviseurs(N)[(liste_diviseurs(N).length - 1) / 2] + ` = ${N}<br>`;
					};
					texte_corr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`;
					texte_corr += `La liste des diviseurs de ${N} est donc `;
					texte_corr += `1`;
					for (let w = 1; w < liste_diviseurs(N).length; w++) {
						texte_corr += ` ; ` + liste_diviseurs(N)[w];
					};
					texte_corr += `.`;
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A11 justifier la non primalitÃ© rÃ©investissement des critÃ¨res de divisibilitÃ©
 * Nombres Ã  3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 11, sous forme d'un produit de deux nombres premiers infÃ©rieurs Ã  100
 * et un nombre premier inferieur Ã  529
 * dans cet exo on n'utilise pas les critÃ¨res par 7 et 11
 * @author SÃ©bastien Lozano
 */
function Premier_ou_pas() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "PrimalitÃ© ou pas";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Justifier que les nombres suivants sont premiers ou pas.`;
	//sortie_html ? this.spacing = 3 : this.spacing = 2;
	sortie_html ? this.spacing = 1 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 5;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 2;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A11.pdf", "Aide mÃ©moire sur les nombres premiers (SÃ©bastien Lozano)", "Aide mÃ©moire")
			this.bouton_aide += modal_video('conteMathsNombresPremiers', 'videos/LesNombresPremiers.mp4', 'Petit conte mathÃ©matique - Les Nombres Premiers', 'Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3, 6, 7];
		type_de_questions_disponibles = shuffle(type_de_questions_disponibles); // on mÃ©lange l'ordre des questions
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		let string_rappel = `Cette liste des nombres premiers infÃ©rieurs Ã  100 pourra Ãªtre utile : <br>` + crible_eratosthene_n(100)[0];
		for (let k = 1; k < crible_eratosthene_n(100).length; k++) {
			string_rappel += `, ` + crible_eratosthene_n(100)[k];
		};
		string_rappel += `.`;

		this.introduction = warn_message(string_rappel, `nombres`, `Coup de pouce`);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

			type_de_questions = liste_type_de_questions[i];

			var N; // le nombre de la question

			switch (type_de_questions) {
				case 1: // nombre pair
					N = 2 * randint(51, 4999);
					texte = nombre_avec_espace(N);
					texte_corr = `Comme ${nombre_avec_espace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 2: // Multiple de 3
					let sum = 0; // pour la valeur de la somme;
					N = 3 * randint(34, 3333); // on initialise avant la boucle car on a peut Ãªtre de la chance
					while ( (N % 2 == 0) || (N % 5 == 0)) {
						N = 3 * randint(34, 3333);
					};
					texte = nombre_avec_espace(N);
					texte_corr = `Comme ` + N.toString().charAt(0);
					sum = Number(N.toString().charAt(0));
					for (let k = 1; k < N.toString().length; k++) {
						texte_corr += ` + ` + N.toString().charAt(k);
						sum += Number(N.toString().charAt(k));
					};
					texte_corr += ` = ${sum} est un multiple de 3 donc ${nombre_avec_espace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 3: // Multiple de 5
					N = 5 * randint(20, 1999);
					texte = nombre_avec_espace(N);
					texte_corr = `Comme le dernier chiffre de ${nombre_avec_espace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombre_avec_espace(N)} est divisible par 5, `;
					texte_corr += `il admet donc au moins trois diviseurs qui sont 1, 5 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 4: // Multiple de 7
					let N_longueur; // pour la taille du string N
					let N1; // pour la repetiton du critÃ¨re
					let N1_longueur; // pour la taille du string N1
					let sum1; // pour la somme de la rÃ©pÃ©tition du critÃ¨re
					N = 7 * randint(15, 1428);
					texte = nombre_avec_espace(N);
					N_longueur = N.toString().length;
					texte_corr = ` 7 divise ${nombre_avec_espace(N)}, en effet : `;
					texte_corr += `<br>`;
					N1 = N;
					N1_longueur = N_longueur;
					sum1 = Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1));
					while (sum1 >= 56) {
						texte_corr += `${N1.toString().substring(0, N1_longueur - 1)} + 5$\\times$${N1.toString().charAt(N1_longueur - 1)}`;
						texte_corr += ` = ${Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1))}`;
						texte_corr += `<br>`;
						N1 = sum1;
						N1_longueur = N1.toString().length;
						sum1 = Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1));
					};
					texte_corr += `Comme ${N1.toString().substring(0, N1_longueur - 1)} + 5$\\times$${N1.toString().charAt(N1_longueur - 1)} = ${sum1} est un multiple de 7 alors 7 divise ${N} aussi `;
					texte_corr += `qui admet donc au moins trois diviseurs : 1, 7 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 5: // multiple de 11
					let even_sum; // pour la somme des chiffres de rang impair
					let odd_sum; // pour la somme des chiffres de rang pair
					N = 11 * randint(10, 909);
					texte = nombre_avec_espace(N);
					texte_corr = `D'une part, la somme des chiffres de rang impair de ${nombre_avec_espace(N)} vaut `;
					if (Number(N.toString().length) % 2 == 0) { // si N a un nombre pair de chiffres
						even_sum = Number(N.toString().charAt(1));
						texte_corr += N.toString().charAt(1);
						for (let k = 3; k < N.toString().length; k++) {
							if (k % 2 == 1) {
								texte_corr += ` + ` + N.toString().charAt(k);
								even_sum += Number(N.toString().charAt(k));
							};
						};
						texte_corr += ` = ` + even_sum + ` <br> `;
					} else { // sinon N a un nombre impair de chiffres
						even_sum = Number(N.toString().charAt(0));
						texte_corr += N.toString().charAt(0);
						for (let m = 1; m < N.toString().length; m++) {
							if (m % 2 == 0) {
								texte_corr += ` + ` + N.toString().charAt(m);
								even_sum += Number(N.toString().charAt(m));
							};

						};
						texte_corr += ` = ` + even_sum + `<br> `;
					};
					texte_corr += `d'autre part, la somme des chiffres de rang pair de ${nombre_avec_espace(N)} vaut `;
					if (Number(N.toString().length) % 2 == 0) { // si N a un nombre pair de chiffres
						odd_sum = Number(N.toString().charAt(0));
						texte_corr += N.toString().charAt(0);
						for (let k = 1; k < N.toString().length; k++) {
							if (k % 2 == 0) {
								texte_corr += ` + ` + N.toString().charAt(k);
								odd_sum += Number(N.toString().charAt(k));
							};
						};
						texte_corr += ` = ` + odd_sum + ` <br> `;
					} else { // sinon N a un nombre impair de chiffres
						odd_sum = Number(N.toString().charAt(1));
						texte_corr += N.toString().charAt(1);
						for (let m = 3; m < N.toString().length; m++) {
							if (m % 2 == 1) {
								texte_corr += ` + ` + N.toString().charAt(m);
								odd_sum += Number(N.toString().charAt(m));
							};

						};
						texte_corr += ` = ` + odd_sum + `<br> `;
					};
					texte_corr += `la diffÃ©rence entre la somme des chiffres de rangs pairs et celle des chiffres de rangs impairs vaut `;
					if ((odd_sum - even_sum) == 0) {
						texte_corr += `${odd_sum - even_sum}, `;

					} else {
						texte_corr += `${Math.abs(odd_sum - even_sum)} qui est un multiple de 11, `;
					};
					texte_corr += `<br>`;
					texte_corr += ` cela signifie que ${nombre_avec_espace(N)} est divisible par 11, il admet donc au moins trois diviseurs qui sont 1, 11 et lui-mÃªme,`;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 6: // produit de deux nombres premiers infÃ©rieurs Ã  100
					// rang du premier facteur premier
					let r1 = randint(0, crible_eratosthene_n(100).length - 1);
					// rang du second facteur premier
					let r2 = randint(0, crible_eratosthene_n(100).length - 1);
					let prime1 = crible_eratosthene_n(100)[r1]; // on tire un nombre premier infÃ©rieur Ã  100, il n'y en a que 25!
					let prime2 = crible_eratosthene_n(100)[r2]; // on tire un autre nombre premier infÃ©rieur Ã  100, Ã§a peut Ãªtre le mÃªme qu'avant!
					N = prime1 + `$\\times$` + prime2;
					texte = N;
					texte_corr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `;
					if (prime1 == prime2) {
						texte_corr += `trois divisieurs qui sont 1, ${prime1} et lui-mÃªme ${N}=${nombre_avec_espace(prime1 * prime2)}, `;
					} else {
						texte_corr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-mÃªme ${N}=${nombre_avec_espace(prime1 * prime2)}, `;
					};
					texte_corr += texte_en_couleur_et_gras(`${N} = ` + nombre_avec_espace(prime1 * prime2) + ` n'est donc pas premier.`);
					break;
				case 7: // nombre premier infÃ©rieur Ã  529
					// rang du nombre premier choisi
					let r = randint(0, crible_eratosthene_n(529).length - 1);
					N = crible_eratosthene_n(529)[r]; //on choisit un nombre premier infÃ©rieur Ã  529
					texte = N + ``;
					let tab_premiers_a_tester = crible_eratosthene_n(Math.trunc(Math.sqrt(N)));
					//texte_corr = `Testons la divisibilitÃ© de ${N} par tous les nombres premiers infÃ©rieurs Ã  $\\sqrt{${N}}$, c'est Ã  dire par les nombres `;
					texte_corr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers infÃ©rieurs Ã  $\\sqrt{${N}}$, c'est Ã  dire par les nombres `;
					texte_corr += tab_premiers_a_tester[0];
					for (let k = 1; k < tab_premiers_a_tester.length; k++) {
						texte_corr += `, ` + tab_premiers_a_tester[k];
					};
					//texte_corr += `.`;
					// texte_corr += `<br> Aucun de ces nombres premiers ne divise ${N}, `;
					texte_corr += `, le reste n'est jamais nul.`;
					// texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` est donc un nombre premier.`);
					texte_corr += `<br>`+texte_en_couleur_et_gras(nombre_avec_espace(N) + ` est donc un nombre premier.`);
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A11-1 justifier la non primalitÃ© rÃ©investissement des critÃ¨res de divisibilitÃ©
 * Nombres Ã  3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 11, sous forme d'un produit de deux nombres premiers infÃ©rieurs Ã  100
 * et un nombre premier inferieur Ã  529
 * variante de 3A-11 avec les critÃ¨res par 7 et 11 en plus
 * @author SÃ©bastien Lozano
 */
function Premier_ou_pas_critere_par7_par11() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "PrimalitÃ© ou pas - Variante avec les critÃ¨res de divisibilitÃ© par 7 et par 11";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Justifier que les nombres suivants sont premiers ou pas.`;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 3 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 7;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 2;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A11.pdf", "Aide mÃ©moire sur les nombres premiers (SÃ©bastien Lozano)", "Aide mÃ©moire")
			this.bouton_aide += modal_video('conteMathsNombresPremiers', 'videos/LesNombresPremiers.mp4', 'Petit conte mathÃ©matique - Les Nombres Premiers', 'Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7];
		type_de_questions_disponibles = shuffle(type_de_questions_disponibles); // on mÃ©lange l'ordre des questions
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		let string_rappel_b = `Ces critÃ¨res de divisibilitÃ© pourront Ãªtre utiles :`;
		if (sortie_html) {
			string_rappel_b += `<br>`;
			string_rappel_b += `- Un nombre est divisible par 7 si la somme de son nombre de dizaines et de cinq fois son chiffre des unitÃ©s lâest.<br>`;
			string_rappel_b += `- Un nombre est divisible par 11 si la diffÃ©rence entre la somme de ses chiffres de rangs pairs et la somme de ses chiffres de rangs impairs est nulle ou Ã©gale Ã  un multiple de 11.`;
			string_rappel_b += `<br> <br>`;
		} else {
			string_rappel_b += itemize([
				`Un nombre est divisible par 7 si la somme de son nombre de dizaines et de cinq fois son chiffre des unitÃ©s lâest.`,
				`Un nombre est divisible par 11 si la diffÃ©rence entre la somme de ses chiffres de rangs pairs et la somme de ses chiffres de rangs impairs est nulle ou Ã©gale Ã  un multiple de 11.`
			]);
			string_rappel_b += `\\par\\vspace{0.5cm}`;
		};
		string_rappel_b += `Ainsi que cette liste des nombres premiers infÃ©rieurs Ã  100 : `;
		if (sortie_html) {
			string_rappel_b += `<br>`;
		} else {
			string_rappel_b += `\\par\\vspace{0.25cm}`;
		};
		string_rappel_b += crible_eratosthene_n(100)[0];
		for (let k = 1; k < crible_eratosthene_n(100).length; k++) {
			string_rappel_b += `, ` + crible_eratosthene_n(100)[k];
		};
		string_rappel_b += `.`;

		this.introduction = warn_message(string_rappel_b, `nombres`, `Coup de pouce`);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			var N; // le nombre de la question

			switch (type_de_questions) {
				case 1: // nombre pair
					N = 2 * randint(51, 4999);
					texte = nombre_avec_espace(N);
					texte_corr = `Comme ${nombre_avec_espace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 2: // Multiple de 3
					let sum = 0; // pour la valeur de la somme;
					N=3*randint(34,3333);// on initialise avant la boucle car on a peut Ãªtre de la chance
					while ( (N % 2 == 0) || (N % 5 == 0)) {
						N = 3 * randint(34, 3333);
					};
					texte = nombre_avec_espace(N);
					texte_corr = `Comme ` + N.toString().charAt(0);
					sum = Number(N.toString().charAt(0));
					for (let k = 1; k < N.toString().length; k++) {
						texte_corr += ` + ` + N.toString().charAt(k);
						sum += Number(N.toString().charAt(k));
					};
					texte_corr += ` = ${sum} est un multiple de 3 donc ${nombre_avec_espace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 3: // Multiple de 5
					N = 5 * randint(20, 1999);
					texte = nombre_avec_espace(N);
					texte_corr = `Comme le dernier chiffre de ${nombre_avec_espace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombre_avec_espace(N)} est divisible par 5, `;
					texte_corr += `il admet donc au moins trois diviseurs qui sont 1, 5 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 4: // Multiple de 7
					let N_longueur; // pour la taille du string N
					let N1; // pour la repetiton du critÃ¨re
					let N1_longueur; // pour la taille du string N1
					let sum1; // pour la somme de la rÃ©pÃ©tition du critÃ¨re
					N = 7 * randint(15, 1428);
					texte = nombre_avec_espace(N);
					N_longueur = N.toString().length;
					texte_corr = ` 7 divise ${nombre_avec_espace(N)}, en effet : `;
					texte_corr += `<br>`;
					N1 = N;
					N1_longueur = N_longueur;
					sum1 = Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1));
					while (sum1 >= 56) {
						texte_corr += `${N1.toString().substring(0, N1_longueur - 1)} + 5$\\times$${N1.toString().charAt(N1_longueur - 1)}`;
						texte_corr += ` = ${Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1))}`;
						texte_corr += `<br>`;
						N1 = sum1;
						N1_longueur = N1.toString().length;
						sum1 = Number(N1.toString().substring(0, N1_longueur - 1)) + 5 * Number(N1.toString().charAt(N1_longueur - 1));
					};
					texte_corr += `Comme ${N1.toString().substring(0, N1_longueur - 1)} + 5$\\times$${N1.toString().charAt(N1_longueur - 1)} = ${sum1} est un multiple de 7 alors 7 divise ${N} aussi `;
					texte_corr += `qui admet donc au moins trois diviseurs : 1, 7 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 5: // multiple de 11
					let even_sum; // pour la somme des chiffres de rang impair
					let odd_sum; // pour la somme des chiffres de rang pair
					N = 11 * randint(10, 909);
					texte = nombre_avec_espace(N);
					texte_corr = `D'une part, la somme des chiffres de rang impair de ${nombre_avec_espace(N)} vaut `;
					if (Number(N.toString().length) % 2 == 0) { // si N a un nombre pair de chiffres
						even_sum = Number(N.toString().charAt(1));
						texte_corr += N.toString().charAt(1);
						for (let k = 3; k < N.toString().length; k++) {
							if (k % 2 == 1) {
								texte_corr += ` + ` + N.toString().charAt(k);
								even_sum += Number(N.toString().charAt(k));
							};
						};
						texte_corr += ` = ` + even_sum + ` <br> `;
					} else { // sinon N a un nombre impair de chiffres
						even_sum = Number(N.toString().charAt(0));
						texte_corr += N.toString().charAt(0);
						for (let m = 1; m < N.toString().length; m++) {
							if (m % 2 == 0) {
								texte_corr += ` + ` + N.toString().charAt(m);
								even_sum += Number(N.toString().charAt(m));
							};

						};
						texte_corr += ` = ` + even_sum + `<br> `;
					};
					texte_corr += `d'autre part, la somme des chiffres de rang pair de ${nombre_avec_espace(N)} vaut `;
					if (Number(N.toString().length) % 2 == 0) { // si N a un nombre pair de chiffres
						odd_sum = Number(N.toString().charAt(0));
						texte_corr += N.toString().charAt(0);
						for (let k = 1; k < N.toString().length; k++) {
							if (k % 2 == 0) {
								texte_corr += ` + ` + N.toString().charAt(k);
								odd_sum += Number(N.toString().charAt(k));
							};
						};
						texte_corr += ` = ` + odd_sum + ` <br> `;
					} else { // sinon N a un nombre impair de chiffres
						odd_sum = Number(N.toString().charAt(1));
						texte_corr += N.toString().charAt(1);
						for (let m = 3; m < N.toString().length; m++) {
							if (m % 2 == 1) {
								texte_corr += ` + ` + N.toString().charAt(m);
								odd_sum += Number(N.toString().charAt(m));
							};

						};
						texte_corr += ` = ` + odd_sum + `<br> `;
					};
					texte_corr += `la diffÃ©rence entre la somme des chiffres de rangs pairs et celle des chiffres de rangs impairs vaut `;
					if ((odd_sum - even_sum) == 0) {
						texte_corr += `${odd_sum - even_sum}, `;

					} else {
						texte_corr += `${Math.abs(odd_sum - even_sum)} qui est un multiple de 11, `;
					};
					texte_corr += `<br>`;
					texte_corr += ` cela signifie que ${nombre_avec_espace(N)} est divisible par 11, il admet donc au moins trois diviseurs qui sont 1, 11 et lui-mÃªme, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(N) + ` n'est donc pas premier.`);
					break;
				case 6: // produit de deux nombres premiers infÃ©rieurs Ã  100
					// rang du premier facteur premier
					let r1 = randint(0, crible_eratosthene_n(100).length - 1);
					// rang du second facteur premier
					let r2 = randint(0, crible_eratosthene_n(100).length - 1);
					let prime1 = crible_eratosthene_n(100)[r1]; // on tire un nombre premier infÃ©rieur Ã  100, il n'y en a que 25!
					let prime2 = crible_eratosthene_n(100)[r2]; // on tire un autre nombre premier infÃ©rieur Ã  100, Ã§a peut Ãªtre le mÃªme qu'avant!
					N = prime1 + `$\\times$` + prime2;
					texte = N;
					texte_corr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `;
					if (prime1 == prime2) {
						texte_corr += `trois divisieurs qui sont 1, ${prime1} et lui-mÃªme ${N}=${nombre_avec_espace(prime1 * prime2)}, `;
					} else {
						texte_corr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-mÃªme ${N}=${nombre_avec_espace(prime1 * prime2)}, `;
					};
					texte_corr += texte_en_couleur_et_gras(`${N} = ` + nombre_avec_espace(prime1 * prime2) + ` n'est donc pas premier.`);
					break;
				case 7: // nombre premier infÃ©rieur Ã  529
					// rang du nombre premier choisi
					let r = randint(0, crible_eratosthene_n(529).length - 1);
					N = crible_eratosthene_n(529)[r]; //on choisit un nombre premier infÃ©rieur Ã  529
					texte = N + ``;;
					let tab_premiers_a_tester = crible_eratosthene_n(Math.trunc(Math.sqrt(N)));
					texte_corr = `Testons la divisibilitÃ© de ${N} par tous les nombres premiers infÃ©rieurs Ã  $\\sqrt{${N}}$, c'est Ã  dire par les nombres `;
					texte_corr += tab_premiers_a_tester[0];
					for (let k = 1; k < tab_premiers_a_tester.length; k++) {
						texte_corr += `, ` + tab_premiers_a_tester[k];
					};
					texte_corr += `.`;
					texte_corr += `<br> Aucun de ces nombres premiers ne divise ${N}, `;
					texte_corr += texte_en_couleur_et_gras(nombre_avec_espace(Number(N)) + ` n'est donc pas premier.`);
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A11-2 - Decomposition_facteurs_premiers
 * DÃ©composer un nombre en facteurs premiers et compter son nombre de diviseurs Ã  partir d'un tableau
 * plusieurs type de nombres Ã  dÃ©composer
 * type 1 : 3 Ã  5 facteurs premiers max, multiplicitÃ©s 0,1,2 ou 3 max Ã  prÃ©ciser
 * type 2 : un produit de deux premiers entre 30 et 100, multiplicitÃ© 1 ... suffisamment de possibilitÃ©s?
 * type 3 : un gros premiers au delÃ  de 1000 et infÃ©rieur Ã  2 000  
 * @author SÃ©bastien Lozano
 */

function Decomposition_facteurs_premiers() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "DÃ©composition en facteurs premiers d'un entier";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Ã l'aide de la calculatrice, dÃ©composer pas Ã  pas les nombres entiers en produit de facteurs premiers.`;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 3 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 3;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A11.pdf", "Aide mÃ©moire sur les nombres premiers (SÃ©bastien Lozano)", "Aide mÃ©moire")
			this.bouton_aide += modal_video('conteMathsNombresPremiers', 'videos/LesNombresPremiers.mp4', 'Petit conte mathÃ©matique - Les Nombres Premiers', 'Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3];
		type_de_questions_disponibles = shuffle(type_de_questions_disponibles); // on mÃ©lange l'ordre des questions
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		let string_rappel = `Cette liste des nombres premiers infÃ©rieurs Ã  100 pourra Ãªtre utile : <br>` + crible_eratosthene_n(100)[0];
		for (let k = 1; k < crible_eratosthene_n(100).length; k++) {
			string_rappel += `, ` + crible_eratosthene_n(100)[k];
		};
		string_rappel += `.`;

		this.introduction = warn_message(string_rappel, `nombres`, `Coup de pouce`);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			switch (type_de_questions) {
				case 1: // 3 Ã  5 facteurs premiers max compris entre 0 et 30, de multiplicitÃ© 1,2 ou 3 max
					// on fixe le nombre de facteurs premier entre 3 et 5
					let nb_de_premiers = randint(3, 5);
					// on fixe la limite pour le choix des premiers
					let max_premier = 11;
					// on fixe le rang max pour le choix des premiers
					let rg_max = crible_eratosthene_n(max_premier).length - 1;
					// on choisit les rangs pour les nombres premiers
					let tab_rangs = [];
					let tab_rangs_exclus = [];
					for (let k = 0; k < (nb_de_premiers); k++) {
						for (let m = 0; m < k; m++) {
							tab_rangs_exclus.push(tab_rangs[m]);
						}
						tab_rangs[k] = randint(0, rg_max, tab_rangs_exclus);
					};
					// on choisit les premiers
					let tab_premiers = [];
					for (let k = 0; k < tab_rangs.length; k++) {
						tab_premiers[k] = crible_eratosthene_n(max_premier)[tab_rangs[k]];
					};
					// on range les facteurs premiers dans l'ordre croissant
					tab_premiers.sort(function (a, b) {
						return a - b;
					});
					// on choisit les multiplicitÃ©s
					let tab_multiplicites = [];
					for (let k = 0; k < tab_rangs.length; k++) {
						tab_multiplicites[k] = randint(1, 2);
					};
					// yapluka Ã©crire le nombre dans l'Ã©noncÃ© et sa dÃ©composition dans la correction
					texte = `Ã l'aide de la calculatrice, dÃ©composer `;
					let nombre_a_decomposer = 1;
					for (let k = 0; k < tab_rangs.length; k++) {
						for (let m = 0; m < tab_multiplicites[k]; m++) {
							nombre_a_decomposer = nombre_a_decomposer * tab_premiers[k];
						};
					};
					let racine_premier_1 = Math.trunc(Math.sqrt(nombre_a_decomposer));
					texte += `$${tex_nombre(nombre_a_decomposer)}$ en produit de facteurs premiers.`;
					// correction						
					texte_corr = `Nous allons successivement tester la divisibilitÃ© de $${tex_nombre(nombre_a_decomposer)}$ par tous les nombres premiers infÃ©rieurs Ã  `;
					texte_corr += `$${tex_nombre(nombre_a_decomposer)}$ en commenÃ§ant par 2, 3, 5, 7, ...<br>`;
					texte_corr = `Il est suffisant de tester la divisibilitÃ© de $${tex_nombre(nombre_a_decomposer)}$ par tous les nombres premiers infÃ©rieurs ou Ã©gaux Ã  $\\sqrt{${tex_nombre(nombre_a_decomposer)}}$ c'est Ã  dire infÃ©rieurs Ã  $${tex_nombre(racine_premier_1)}$.<br>`;
					texte_corr += `Ce sont les nombres de la liste : <br>`;
					texte_corr += crible_eratosthene_n(racine_premier_1)[0] + ` ; `;
					for (let k = 1; k < crible_eratosthene_n(racine_premier_1).length; k++) {
						texte_corr += crible_eratosthene_n(racine_premier_1)[k];
						if (k != crible_eratosthene_n(racine_premier_1).length - 1) {
							texte_corr += ` ; `;
						} else {
							texte_corr += `.`;
						}
						if (k % 15 == 0) {
							texte_corr += `<br>`;
						}
					};
					texte_corr += `<br>`;
					var liste_facteurs_premiers = obtenir_liste_facteurs_premiers(nombre_a_decomposer);
					var quotient_intermediaire = nombre_a_decomposer;
					for (let k = 0; k < liste_facteurs_premiers.length; k++) {
						texte_corr += `$${tex_nombre(quotient_intermediaire)}\\div${mise_en_evidence(liste_facteurs_premiers[k])} = ${tex_nombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;
						quotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];
					};
					texte_corr += `Finalement on obtient la dÃ©composition suivante : $ ${tex_nombre(nombre_a_decomposer)} = `;
					if (tab_multiplicites[0] == 1) {
						texte_corr += `${tab_premiers[0]}`;
					} else {
						texte_corr += `${tab_premiers[0]}^{${tab_multiplicites[0]}}`;
					};
					for (let k = 1; k < tab_premiers.length; k++) {
						if (tab_multiplicites[k] == 1) {
							texte_corr += `\\times ${tab_premiers[k]}`;
						} else {
							texte_corr += `\\times ${tab_premiers[k]}^{${tab_multiplicites[k]}}`;
						};
					};
					texte_corr += `$`;
					break;
				case 2: // deux premiers compris entre 30 et 100 de multiplicitÃ© 1
					// on choisit un rang diffÃ©rent pour chaque premier entre 30 et 100
					let r1 = randint(0, premiers_entre_bornes(30, 100).length - 1);
					let r2 = randint(0, premiers_entre_bornes(30, 100).length - 1, r1);
					let premier1 = premiers_entre_bornes(30, 100)[r1];
					let premier2 = premiers_entre_bornes(30, 100)[r2];
					if (premier1 > premier2) { // on inverse p1 et p2 si p1 est supÃ©rieur Ã  p2
						let p = premier1;
						premier1 = premier2;
						premier2 = p;
					};
					texte = `Ã l'aide de la calculatrice, dÃ©composer $${tex_nombre(premier1 * premier2)}$ en produit de facteurs premiers.`;
					let racine_prem = Math.trunc(Math.sqrt(premier1 * premier2));
					texte_corr = `Il est suffisant de tester la divisibilitÃ© de $${tex_nombre(premier1 * premier2)}$ par tous les nombres premiers infÃ©rieurs ou Ã©gaux Ã  $\\sqrt{${tex_nombre(premier1 * premier2)}}$ c'est Ã  dire infÃ©rieurs Ã  $${tex_nombre(racine_prem)}$.<br>`;
					texte_corr += `Ce sont les nombres de la liste suivante : <br>$`;
					texte_corr += crible_eratosthene_n(racine_prem)[0];
					for (let k = 1; k < crible_eratosthene_n(racine_prem).length; k++) {
						texte_corr += `; ` + crible_eratosthene_n(racine_prem)[k];
					};
					texte_corr += `.$<br>`;
					liste_facteurs_premiers = obtenir_liste_facteurs_premiers(premier1 * premier2);
					quotient_intermediaire = premier1 * premier2;
					for (let k = 0; k < liste_facteurs_premiers.length; k++) {
						texte_corr += `$${tex_nombre(quotient_intermediaire)}\\div${mise_en_evidence(liste_facteurs_premiers[k])} = ${tex_nombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;
						quotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];
					};
					texte_corr += ` D'oÃ¹ $${tex_nombre(premier1 * premier2)} = ${tex_nombre(premier1)}\\times${tex_nombre(premier2)}$.`;
					break;
				case 3: // un gros premier entre 1000 et 2000			
					// on choisit un rang pour le nombre premier entre 1000 et 2000
					let r = randint(0, premiers_entre_bornes(1000, 2000).length - 1);
					let premier = premiers_entre_bornes(1000, 2000)[r];
					let racine_premier = Math.trunc(Math.sqrt(premier));
					texte = `Ã l'aide de la calculatrice, dÃ©composer $${tex_nombre(premier)}$ en produit de facteurs premiers.`;
					texte_corr = `En testant la divisibilitÃ© de $${tex_nombre(premier)}$ par tous les nombres premiers infÃ©rieurs ou Ã©gaux Ã  $${racine_premier}$`;
					texte_corr += ` c'est Ã  dire les nombre de la liste $`;
					texte_corr += crible_eratosthene_n(racine_premier)[0];
					for (let k = 1; k < crible_eratosthene_n(racine_premier).length; k++) {
						texte_corr += `; ` + crible_eratosthene_n(racine_premier)[k];
					};
					texte_corr += `$, `;
					texte_corr += `on se rend compte que $${tex_nombre(premier)}$ est un nombre premier donc `;
					texte_corr += `$${tex_nombre(premier)} = ${tex_nombre(premier)}$.`;
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A11-3 - Lister/Compter les diviseurs d'un entier Ã  partir de sa decomposition en facteurs premiers 
 * @author SÃ©bastien Lozano
 */

function Lister_Diviseurs_Par_Decomposition_facteurs_premiers() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Compter/lister les diviseurs d'un entier Ã  partir de sa dÃ©composition en facteurs premiers.";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Sans la calculatrice, compter/lister les diviseurs d'un entier Ã  partir de sa dÃ©composition en facteurs premiers.`;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 2 : this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 2;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A11.pdf", "Aide mÃ©moire sur les nombres premiers (SÃ©bastien Lozano)", "Aide mÃ©moire")
			this.bouton_aide += modal_video('conteMathsNombresPremiers', 'videos/LesNombresPremiers.mp4', 'Petit conte mathÃ©matique - Les Nombres Premiers', 'Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1];
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];


			switch (type_de_questions) {
				case 1: // lister/compter les diviseurs d'un entier Ã  partir de sa dÃ©composition en facteurs premiers			
					texte = `Lister/compter les diviseurs d'un entier Ã  partir de sa dÃ©composition en facteurs premiers`;
					//let premiers_dispos = premiers_entre_bornes(2,11);
					// on fixe le nombre de facteurs premier Ã  3
					let nb_de_premiers_b = randint(3, 3);
					// on fixe la limite pour le choix des premiers
					let max_premier_b = 11;
					// on fixe le rang max pour le choix des premiers
					let rg_max_b = crible_eratosthene_n(max_premier_b).length - 1;
					// on choisit les rangs pour les nombres premiers
					let tab_rangs_b = [];
					let tab_rangs_exclus_b = [];
					for (let k = 0; k < (nb_de_premiers_b); k++) {
						for (let m = 0; m < k; m++) {
							tab_rangs_exclus_b.push(tab_rangs_b[m]);
						}
						tab_rangs_b[k] = randint(0, rg_max_b, tab_rangs_exclus_b);
					};
					// on choisit les premiers
					let tab_premiers_b = [];
					for (let k = 0; k < tab_rangs_b.length; k++) {
						tab_premiers_b[k] = crible_eratosthene_n(max_premier_b)[tab_rangs_b[k]];
					};
					// on range les facteurs premiers dans l'ordre croissant
					tab_premiers_b.sort(function (a, b) {
						return a - b;
					});
					// on choisit les multiplicitÃ©s
					let tab_multiplicites_b = [];
					for (let k = 0; k < tab_rangs_b.length; k++) {
						tab_multiplicites_b[k] = randint(1, 2);
					};
					texte = ``;
					let nombre_a_decomposer_b = 1;
					for (let k = 0; k < tab_rangs_b.length; k++) {
						for (let m = 0; m < tab_multiplicites_b[k]; m++) {
							nombre_a_decomposer_b = nombre_a_decomposer_b * tab_premiers_b[k];
						};
					};
					texte += `La dÃ©composition en facteurs premiers de $${tex_nombre(nombre_a_decomposer_b)}$ est : $`;
					if (tab_multiplicites_b[0] == 1) {
						texte += `${tab_premiers_b[0]}`;
					} else {
						texte += `${tab_premiers_b[0]}^{${tab_multiplicites_b[0]}}`;
					};
					for (let k = 1; k < tab_premiers_b.length; k++) {
						if (tab_multiplicites_b[k] == 1) {
							texte += `\\times ${tab_premiers_b[k]}`;
						} else {
							texte += `\\times ${tab_premiers_b[k]}^{${tab_multiplicites_b[k]}}`;
						};
					};
					texte += `$, <br>`;
					texte += num_alpha(0) + ` ComplÃ©ter le tableau ci-dessous.`;
					if (!sortie_html) {
						texte += `$\\medskip$`;
					};
					// on crÃ©e le tableau des entetes de lignes et des colonnes
					let ent_lignes = [];
					let contenu_lignes = [];
					let ent_colonnes = [`\\times`];
					// les entetes des lignes
					for (let k = 0; k < tab_multiplicites_b[0] + 1; k++) {
						ent_lignes.push(`\\phantom{plusLarge}` + tab_premiers_b[0] + `^{` + k + `}\\phantom{plusLarge}`);
					};
					// les entetes des colonnes 
					for (let m = 0; m < tab_multiplicites_b[1] + 1; m++) {
						for (let l = 0; l < tab_multiplicites_b[2] + 1; l++) {
							ent_colonnes.push(tab_premiers_b[1] + `^{` + m + `}\\times` + tab_premiers_b[2] + `^{` + l + `}`);
						};
					};
					// tableau pour la permutation circulaire
					let tab_temp;
					// on y affecte les lignes
					tab_temp = ent_lignes;
					// on supprime le x de l'entete des colonnes
					ent_colonnes.shift();
					// on affecte Ã§a aux lignes;
					ent_lignes = ent_colonnes;
					// on remet le x en colonnes et on ajoute le reste
					ent_colonnes = [`\\times`].concat(tab_temp);
					// le contenu des lignes
					for (let l = 0; l < (tab_multiplicites_b[0] + 1); l++) {
						for (let c = 1; c < (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1) + 1; c++) {
							//contenu_lignes.push(`l : `+l+`, c : `+Number(c));
							contenu_lignes.push(``);
						};
					};
					texte += `<br>`;
					texte += tab_C_L(ent_colonnes, ent_lignes, contenu_lignes);
					if (!sortie_html) {
						texte += `$\\medskip$`;
					};
					texte += `<br>`;
					texte += num_alpha(1) + ` En dÃ©duire le nombre de diviseurs de $${tex_nombre(nombre_a_decomposer_b)}$.<br>`;
					texte += num_alpha(2) + ` Enfin, dresser la liste des diviseurs de $${tex_nombre(nombre_a_decomposer_b)}$.<br>`;

					// correction
					texte_corr = `Avec la dÃ©composition en facteurs premiers de $${tex_nombre(nombre_a_decomposer_b)}$ qui est : $`;
					if (tab_multiplicites_b[0] == 1) {
						texte_corr += `${tab_premiers_b[0]}`;
					} else {
						texte_corr += `${tab_premiers_b[0]}^{${tab_multiplicites_b[0]}}`;
					};
					for (let k = 1; k < tab_premiers_b.length; k++) {
						if (tab_multiplicites_b[k] == 1) {
							texte_corr += `\\times ${tab_premiers_b[k]}`;
						} else {
							texte_corr += `\\times ${tab_premiers_b[k]}^{${tab_multiplicites_b[k]}}`;
						};
					};
					texte_corr += `$, <br>`;
					texte_corr += num_alpha(0) + ` Le tableau donne :`;
					// on crÃ©e le tableau des entetes de lignes et des colonnes
					let ent_lignes_corr = [];
					let ent_lignes_corr_res = [];
					let contenu_lignes_corr = [];
					//let contenu_lignes_corr_res = [];
					let ent_colonnes_corr = [`\\times`];
					let ent_colonnes_corr_res = [1];
					// les entetes des lignes
					for (let k = 0; k < tab_multiplicites_b[0] + 1; k++) {
						ent_lignes_corr.push(tab_premiers_b[0] + `^{` + k + `}`);
						ent_lignes_corr_res.push(tab_premiers_b[0] ** k);
					};
					// les entetes des colonnes 
					for (let m = 0; m < tab_multiplicites_b[1] + 1; m++) {
						for (let l = 0; l < tab_multiplicites_b[2] + 1; l++) {
							ent_colonnes_corr.push(tab_premiers_b[1] + `^{` + m + `}\\times` + tab_premiers_b[2] + `^{` + l + `}`);
							ent_colonnes_corr_res.push(tab_premiers_b[1] ** m * tab_premiers_b[2] ** l);
						};
					};
					// tableaux pour les permutations circulaires
					let tab_temp_corr;
					let tab1_temp_corr;
					// on y affecte les lignes
					tab_temp_corr = ent_lignes_corr;
					tab1_temp_corr = ent_lignes_corr_res;
					// on supprime le x de l'entete des colonnes
					ent_colonnes_corr.shift();
					ent_colonnes_corr_res.shift();
					// on affecte Ã§a aux lignes;
					ent_lignes_corr = ent_colonnes_corr;
					ent_lignes_corr_res = ent_colonnes_corr_res;
					// on remet le x en colonnes et on ajoute le reste
					ent_colonnes_corr = [`\\times`].concat(tab_temp_corr);
					ent_colonnes_corr_res = [1].concat(tab1_temp_corr);
					// le contenu des lignes
					for (let l = 0; l < (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1) + 1; l++) {
						for (let c = 1; c < (tab_multiplicites_b[0] + 2); c++) {
							//contenu_lignes_corr.push(`l : `+l+`, c : `+Number(c));								
							contenu_lignes_corr.push(ent_lignes_corr[l] + `\\times` + ent_colonnes_corr[c] + `=` + mise_en_evidence(tex_nombre(ent_lignes_corr_res[l] * ent_colonnes_corr_res[c])));
						};
					};
					texte_corr += `<br>`;
					texte_corr += tab_C_L(ent_colonnes_corr, ent_lignes_corr, contenu_lignes_corr);
					texte_corr += `<br>`;
					texte_corr += num_alpha(1) + ` $${tex_nombre(nombre_a_decomposer_b)}$ a donc `;
					texte_corr += `$(${tab_multiplicites_b[0]}+1)\\times(${tab_multiplicites_b[1]}+1)\\times(${tab_multiplicites_b[2]}+1) = `;
					texte_corr += `${tab_multiplicites_b[0] + 1}\\times${tab_multiplicites_b[1] + 1}\\times${tab_multiplicites_b[2] + 1} = `;
					texte_corr += `${(tab_multiplicites_b[0] + 1) * (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1)}$ diviseurs.<br>`;
					texte_corr += `En effet, dans la dÃ©composition apparait : `;
					texte_corr += ` <br> - Le facteur premier $${tab_premiers_b[0]}$ avec la multiplicitÃ© $${tab_multiplicites_b[0]}$`;
					texte_corr += `, le facteur $${tab_premiers_b[0]}$ apparait donc sous les formes : `;
					for (let k = 0; k < tab_multiplicites_b[0]; k++) {
						texte_corr += `$${tab_premiers_b[0]}^{` + k + `}$ ou `;
					};
					texte_corr += `$${tab_premiers_b[0]}^{` + tab_multiplicites_b[0] + `}$ d'oÃ¹ le facteur $(${tab_multiplicites_b[0]}+1)$.`;

					texte_corr += ` <br> - Le facteur premier $${tab_premiers_b[1]}$ avec la multiplicitÃ© $${tab_multiplicites_b[1]}$`;
					texte_corr += `, le facteur $${tab_premiers_b[1]}$ apparait donc sous les formes : `;
					for (let k = 0; k < tab_multiplicites_b[1]; k++) {
						texte_corr += `$${tab_premiers_b[1]}^{` + k + `}$ ou `;
					};
					texte_corr += `$${tab_premiers_b[1]}^{` + tab_multiplicites_b[1] + `}$ d'oÃ¹ le facteur $(${tab_multiplicites_b[1]}+1)$.`;

					texte_corr += ` <br> - Le facteur premier $${tab_premiers_b[2]}$ avec la multiplicitÃ© $${tab_multiplicites_b[2]}$`;
					texte_corr += `, le facteur $${tab_premiers_b[2]}$ apparait donc sous les formes : `;
					for (let k = 0; k < tab_multiplicites_b[2]; k++) {
						texte_corr += `$${tab_premiers_b[2]}^{` + k + `}$ ou `;
					};
					texte_corr += `$${tab_premiers_b[2]}^{` + tab_multiplicites_b[2] + `}$ d'oÃ¹ le facteur $(${tab_multiplicites_b[2]}+1)$.`;
					texte_corr += `<br>`;
					texte_corr += num_alpha(2) + ` Enfin, voici la liste des $${(tab_multiplicites_b[0] + 1) * (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1)}$ diviseurs de $${tex_nombre(nombre_a_decomposer_b)}$ issus du tableau ci-dessus : `;
					texte_corr += `$1`;
					for (let w = 1; w < liste_diviseurs(nombre_a_decomposer_b).length; w++) {
						texte_corr += `\\text{ ; }` + tex_nombre(liste_diviseurs(nombre_a_decomposer_b)[w]);
					};
					texte_corr += `.$`;
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A12 - Fractions irreductibles
 * @author SÃ©bastien Lozano
 */

function Fractions_irreductibles() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Fractions irrÃ©ductibles";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	this.consigne = `Rendre irrÃ©ductible une fraction et son inverse Ã  partir des dÃ©compositons en produit de facteurs premiers.`;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 4 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 4 : this.spacing_corr = 2;
	this.nb_questions = 1;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = `bclogo`;

	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A12.pdf", "Aide mÃ©moire sur les fonctions (SÃ©bastien Lozano)", "Aide mÃ©moire")
			//this.bouton_aide += modal_video('conteMathsNombresPremiers','videos/LesNombresPremiers.mp4','Petit conte mathÃ©matique','Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		//let type_de_questions_disponibles = [1,2,3,4];
		let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);

		this.introduction = warn_message(`Ã la question ` + num_alpha(3) + ` une observation judicieuse et argumentÃ©e pourra faire gagner du temps!`, `nombres`, `Coup de pouce`);

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			var nb_div_prem_communs; // nombre de diviseurs premiers communs
			var candidats_premiers_communs; // tableau des candidats premiers communs
			var premiers_communs; // tableau des diviseurs premiers communs
			var multiplicites_premiers_communs; // tableau des multiplicitÃ©s des diviseurs premiers communs 
			var r; // tableau pour le choix des rangs des diviseurs premiers communs
			var r_exclus; // tableau pour la boucle de creation de r				
			var nb1_dist; // diviseur unique du premier nombre 
			var nb2_dist; // divisuer unique du second nombre
			var r_ex; // pour exlcure le rang de nb1
			var tab_nb1; // tableau pour les diviseurs de nb1
			var tab_nb2; // tableau pour les diviseurs de nb2
			var multiplicites_nb1;
			var multiplicites_nb2;
			var nb1; // nbre 1
			var nb2; // nbre 2

			// on fixe le tableau de choix
			candidats_premiers_communs = premiers_entre_bornes(2, 13);
			// on fixe le nombre de divisuers premiers communs
			nb_div_prem_communs = 4;
			// on initialise le tableau des diviseurs premiers communs
			premiers_communs = [];
			// on initialise le tableau des rangs
			r = [];
			// on initialise le tableau des rangs dÃ©jÃ  choisis
			r_exclus = [];
			// on complÃ¨te le tableau des rangs des rangs des diviseurs premiers choisis
			for (let k = 0; k < nb_div_prem_communs; k++) {
				for (let m = 0; m < k; m++) {
					r_exclus.push(r[m]);
				};
				r[k] = randint(0, candidats_premiers_communs.length - 1, r_exclus);
			};
			// on complÃ¨te le tableau des diviseurs premiers communs
			for (let k = 0; k < nb_div_prem_communs; k++) {
				premiers_communs.push(candidats_premiers_communs[r[k]]);
			};
			// on initialise et on complÃ¨te le tableau des multiplicitÃ©s des diviseurs premiers communs
			multiplicites_premiers_communs = [];
			for (let k = 0; k < nb_div_prem_communs; k++) {
				multiplicites_premiers_communs.push(randint(0, 2));
			};
			// on supprime les diviseurs premiers de multiplicitÃ© 0 et leur multiplicitÃ©
			let idx = multiplicites_premiers_communs.indexOf(0);
			while (idx != -1) {
				premiers_communs.splice(idx, 1);
				multiplicites_premiers_communs.splice(idx, 1);
				idx = multiplicites_premiers_communs.indexOf(0);
			};
			// on initialise le tableau des diviseurs du premier et du second nombre avec les diviseurs premiers communs
			tab_nb1 = [];
			tab_nb2 = [];
			for (let k = 0; k < premiers_communs.length; k++) {
				tab_nb1[k] = premiers_communs[k];
				tab_nb2[k] = premiers_communs[k];
			};
			// on initialise les tableaux de multiplicitÃ©, ils sont les mÃªmes mais on pourrait vouloir qu'ils soient diffÃ©rents
			multiplicites_nb1 = [];
			multiplicites_nb2 = [];
			for (let k = 0; k < premiers_communs.length; k++) {
				multiplicites_nb1[k] = multiplicites_premiers_communs[k];
				multiplicites_nb2[k] = multiplicites_premiers_communs[k];
			};
			// on ajoute un facteur premier distinct pour chaque nombre plus petit que 30
			r_ex = randint(0, premiers_entre_bornes(2, 30).length - 1);
			nb1_dist = premiers_entre_bornes(2, 30)[r_ex];
			nb2_dist = premiers_entre_bornes(2, 30)[randint(0, premiers_entre_bornes(2, 30).length - 1, r_ex)];
			// on ajoute nb1_dist, nb2_dist dans les tableaux des diviseurs premiers du premier et du second nombre 
			// nb1
			let bool = false;
			let n = 0;
			while (n < tab_nb1.length && bool != true) {
				if (nb1_dist == tab_nb1[n]) {// si le diviseur premier est dÃ©jÃ  prÃ©sent on incrÃ©mente sa multiplicitÃ©
					multiplicites_nb1[n]++;
					bool = true;
				};
				n++;
			};
			// on teste la valeur de sortie de bool et on ajoute la nouvelle valeur si necessaire
			if (!bool) {// il n'est pas prÃ©sent on l'ajoute avec la multipplicitÃ© 1
				tab_nb1.push(nb1_dist);
				multiplicites_nb1.push(1);
				bool = true;
			};
			// nb2
			bool = false;
			n = 0;
			while (n < tab_nb2.length && !bool) {
				if (nb2_dist == tab_nb2[n]) {// si le diviseur premier est dÃ©jÃ  prÃ©sent on incrÃ©mente sa multiplicitÃ©
					multiplicites_nb2[n]++;
					bool = true;
				};
				n++;
			};
			// on teste la valeur de sortie de bool et on ajoute la nouvelle valeur si necessaire
			if (!bool) {// il n'est pas prÃ©sent on l'ajoute avec la multipplicitÃ© 1
				tab_nb2.push(nb2_dist);
				multiplicites_nb2.push(1);
				bool = true;
			};
			// on crÃ©e un tableau associatif Ã  partir des deux tableaux tab_ni et multiplicites_ni
			let tab_prem_mult_nb1 = [];
			for (let k = 0; k < tab_nb1.length; k++) {
				tab_prem_mult_nb1[k] = { 'prem': tab_nb1[k], 'mult': multiplicites_nb1[k] };
			};
			let tab_prem_mult_nb2 = [];
			for (let k = 0; k < tab_nb2.length; k++) {
				tab_prem_mult_nb2[k] = { 'prem': tab_nb2[k], 'mult': multiplicites_nb2[k] };
			};
			// on range selon prem croissant
			tab_prem_mult_nb1.sort(function (a, b) {
				return a.prem > b.prem;
			});
			tab_prem_mult_nb2.sort(function (a, b) {
				return a.prem > b.prem;
			});
			// on initialise nb1 et nb2 et on les calcule Ã  partir des tableaux 				
			nb1 = 1;
			for (let k = 0; k < tab_nb1.length; k++) {
				nb1 = nb1 * tab_prem_mult_nb1[k].prem ** tab_prem_mult_nb1[k].mult;
			};
			nb2 = 1;
			for (let k = 0; k < tab_nb2.length; k++) {
				nb2 = nb2 * tab_prem_mult_nb2[k].prem ** tab_prem_mult_nb2[k].mult;
			};

			switch (type_de_questions) {
				case 1: // dÃ©composition de A
					texte = num_alpha(0) + ` DÃ©composer $A = ${tex_nombre(nb1)}$ en produit de facteurs premiers : `;
					texte_corr = num_alpha(0) + ` La dÃ©composition en produit de facteurs premier de $A = `;
					switch (tab_prem_mult_nb1[0].mult) {
						case 1:
							texte_corr += `${tab_prem_mult_nb1[0].prem}`;
							break;
						default:
							texte_corr += `${tab_prem_mult_nb1[0].prem}^{${tab_prem_mult_nb1[0].mult}}`;
							break;
					};
					for (let k = 1; k < tab_nb1.length; k++) {
						switch (tab_prem_mult_nb1[k].mult) {
							case 1:
								texte_corr += `\\times${tab_prem_mult_nb1[k].prem}`;
								break;
							default:
								texte_corr += `\\times${tab_prem_mult_nb1[k].prem}^{${tab_prem_mult_nb1[k].mult}}`;
								break;
						};
					};
					texte_corr += `$.`;
					//	break;		
					//case 2 : // dÃ©composition de B 	
					texte += `<br>` + num_alpha(1) + ` DÃ©composer $B = ${tex_nombre(nb2)}$ en produit de facteurs premiers : `;
					texte_corr += `<br>` + num_alpha(1) + ` La dÃ©composition en produit de facteurs premier de $B = `;
					switch (tab_prem_mult_nb2[0].mult) {
						case 1:
							texte_corr += `${tab_prem_mult_nb2[0].prem}`;
							break;
						default:
							texte_corr += `${tab_prem_mult_nb2[0].prem}^{${tab_prem_mult_nb2[0].mult}}`;
							break;
					};
					for (let k = 1; k < tab_nb2.length; k++) {
						switch (tab_prem_mult_nb2[k].mult) {
							case 1:
								texte_corr += `\\times${tab_prem_mult_nb2[k].prem}`;
								break;
							default:
								texte_corr += `\\times${tab_prem_mult_nb2[k].prem}^{${tab_prem_mult_nb2[k].mult}}`;
								break;
						};
					};
					texte_corr += `$.`;
					//	break;	
					//case 3 : // reduction de A sur B 			
					texte += `<br>` + num_alpha(2) + ` Rendre la fraction $\\dfrac{A}{B} = \\dfrac{${tex_nombre(nb1)}}{${tex_nombre(nb2)}}$ irrÃ©ductible `;
					if (sortie_html) {
						texte += ` Ã  l'aide des dÃ©compositions obtenues au ` + num_alpha(0) + ` et au ` + num_alpha(1);
					} else {
						texte += ` Ã  l'aide des questions ` + num_alpha(0) + ` et ` + num_alpha(1);
					};
					texte_corr += `<br>` + num_alpha(2) + ` $\\dfrac{A}{B} = \\dfrac{${tex_nombre(nb1)}}{${tex_nombre(nb2)}} = `;
					texte_corr += `\\dfrac{`;
					texte_corr += `\\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[0] + `}`;
					for (let k = 1; k < decomp_fact_prem_array(nb1 / nb1_dist).length; k++) {
						texte_corr += `\\times \\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[k] + `}`
					};
					texte_corr += `\\times ${nb1_dist}}{`;
					texte_corr += `\\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[0] + `}`;
					for (let k = 1; k < decomp_fact_prem_array(nb1 / nb1_dist).length; k++) {
						texte_corr += `\\times \\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[k] + `}`
					};
					texte_corr += `\\times ${nb2_dist}} = `;
					texte_corr += `\\dfrac{${nb1_dist}}{${nb2_dist}}$.`;
					//	break;	
					//case 4 : // reduction de B sur A 			
					texte += `<br>` + num_alpha(3) + ` Rendre la fraction $\\dfrac{B}{A} = \\dfrac{${tex_nombre(nb2)}}{${tex_nombre(nb1)}}$ irrÃ©ductible`;
					if (sortie_html) {
						texte += ` Ã  l'aide des dÃ©compositions obtenues au ` + num_alpha(0) + ` et au ` + num_alpha(1);
					} else {
						texte += ` Ã  l'aide des questions ` + num_alpha(0) + ` et ` + num_alpha(1);
					};
					texte_corr += `<br>` + num_alpha(3) + ` $\\dfrac{B}{A}$ est l'inverse de $\\dfrac{A}{B}$ donc $\\dfrac{B}{A} = \\dfrac{${tex_nombre(nb2)}}{${tex_nombre(nb1)}} = `;
					texte_corr += `\\dfrac{`;
					texte_corr += `\\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[0] + `}`;
					for (let k = 1; k < decomp_fact_prem_array(nb1 / nb1_dist).length; k++) {
						texte_corr += `\\times \\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[k] + `}`
					};
					texte_corr += `\\times ${nb2_dist}}{`;
					texte_corr += `\\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[0] + `}`;
					for (let k = 1; k < decomp_fact_prem_array(nb1 / nb1_dist).length; k++) {
						texte_corr += `\\times \\cancel{` + decomp_fact_prem_array(nb1 / nb1_dist)[k] + `}`
					};
					texte_corr += `\\times ${nb1_dist}} = `;
					texte_corr += `\\dfrac{${nb2_dist}}{${nb1_dist}}$.`;
					//	break;	
					//case 5 : // calculer le produit A/B x B/A et rÃ©duire. Remarque?
					// texte += `<br>`+num_alpha(4)+` Combien alculer le produit de $\\dfrac{A}{B} = \\dfrac{${tex_nombre(nb1)}}{${tex_nombre(nb2)}}$ et de $\\dfrac{B}{A} = \\dfrac{${tex_nombre(nb2)}}{${tex_nombre(nb1)}}$.`;
					// texte += `<br>Donner le rÃ©sultat sous forme de fraction irrÃ©ductible.`
					//texte += `<br>`+num_alpha(4)+` Remarque ?`
					//texte_corr += `<br>`+num_alpha(4)+' corr type 5';
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			};
			cpt++
		};
		liste_de_question_to_contenu(this);
	};
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};

/**
 * 3A13 - PPCM_Engrenages
 * les deux on besoin de la def partielle serie : stlX
 * pb dans la sortie LaTeX, revoir comment user de la fonction katex_Popup2() pour affichage d'une note hors texte!
 * @author SÃ©bastien Lozano
 */

function PPCM_Engrenages() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.sup = 1;
	this.titre = "Engrenages";
	// pas de diffÃ©rence entre la version html et la version latex pour la consigne
	//this.consigne =`DÃ©terminer au bout de combien de tours les deux roues seront toutes les deux revenues Ã  leur position initiale.`;
	this.consigne = ``;
	//this.consigne += `<br>`;
	sortie_html ? this.spacing = 2 : this.spacing = 2;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;
	this.nb_questions = 4;
	//this.correction_detaillee_disponible = true;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;
	this.liste_packages = 'bclogo';

	var num_ex = '3A13'; // pour rendre unique les id des SVG, en cas d'utilisation dans plusieurs exercices y faisant appel

	if (sortie_html) {
		var pourcentage = '100%'; // pour l'affichage des svg. On a besoin d'une variable globale
	} else { // sortie LaTeX

	};
	this.nouvelle_version = function (numero_de_l_exercice) {
		let type_de_questions;
		if (sortie_html) { // les boutons d'aide uniquement pour la version html
			//this.bouton_aide = '';
			this.bouton_aide = modal_pdf(numero_de_l_exercice, "pdf/FicheArithmetique-3A13.pdf", "Aide mÃ©moire sur les fonctions (SÃ©bastien Lozano)", "Aide mÃ©moire")
			//this.bouton_aide += modal_video('conteMathsNombresPremiers','videos/LesNombresPremiers.mp4','Petit conte mathÃ©matique','Intro VidÃ©o');
		} else { // sortie LaTeX
		};

		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = [1, 2, 3, 4];
		//let type_de_questions_disponibles = [1];
		let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);
		let txt_intro = `BoÃ®te de vitesse, transmission de vÃ©lo, de moto, perceuse electrique, tout Ã§a fonctionne avec des engrenages! Mais au fait, comment Ã§a marche, les engrenages?`;
		if (sortie_html) {
			txt_intro += warn_message(`Attention, les roues ci-dessous ne comportent pas le nombre de dents de l'Ã©noncÃ©!`, `nombres`, `Coup de pouce`);
			txt_intro += `<div id="${num_ex}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
			//this.introduction += warn_message(`Attention, les roues ci-dessous ne comportent pas le nombre de dents de l'Ã©noncÃ©!`, `nombres`, `Coup de pouce`);
			//this.introduction += `<div id="${num_ex}" style="width: ${pourcentage}"; height: 50px; display : table "></div>`;
			SVG_engrenages(num_ex, 200, 200);
		};
		
		this.introduction = lampe_message({
			titre : `ArithmÃ©tique des engrenages`,
			texte : txt_intro,
			couleur : `nombres`
		});

		for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
			type_de_questions = liste_type_de_questions[i];

			if (sortie_html) {
				let id_unique = `${num_ex}_${i}_${Date.now()}`
				var id_du_div = `div_svg${numero_de_l_exercice}${id_unique}`;
				//var id_du_div_corr = `div_svg_corr${numero_de_l_exercice}${id_unique}`;
			}

			var nb_dents_r1;
			var nb_dents_r2;
			let txt_popup = `Ãtant donnÃ©s deux nombres entiers a et b, lorsque le plus petit multiple commun Ã  $a$ et $b$ vaut $a \\times b$ ( $ppcm(a,b)=a\\times b$ ), on dit que `;
						//txt_popup += texte_gras('les nombres a et b sont premiers entre eux');
						if (sortie_html) {
							txt_popup += '<b>les nombres a et b sont premiers entre eux</b>';
						} else {
							txt_popup += '$\\textbf{les nombres a et b sont premiers entre eux}$';
						};

			switch (type_de_questions) {
				case 1: // avec de petits nombres on calcule les mutliples
					nb_dents_r1 = randint(5, 30);
					nb_dents_r2 = randint(5, 30, nb_dents_r1);
					texte = `La roue n$\\degree$1 possÃ¨de $${nb_dents_r1}$ dents et la roue n$\\degree$2 a $${nb_dents_r2}$ dents.`;
					texte += `<br>` + num_alpha(0) + ` Ãcrire la liste des multiples de $${nb_dents_r1}$ et de $${nb_dents_r2}$.`
					if (ppcm(nb_dents_r1, nb_dents_r2) == (nb_dents_r1 * nb_dents_r2)) {
						texte += `<br>Pourquoi peut-on en dÃ©duire que ${nb_dents_r1} et ${nb_dents_r2} sont des `;
						// let txt_popup = `Ãtant donnÃ©s deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\times b$, on dit que `;
						// //txt_popup += texte_gras('les nombres a et b sont premiers entre eux');
						// if (sortie_html) {
						// 	txt_popup += '<b>les nombres a et b sont premiers entre eux</b>';
						// } else {
						// 	txt_popup += '$\\textbf{les nombres a et b sont premiers entre eux}$';
						// };
						//${texte_gras('les nombres a et b sont premiers entre eux')}.`;
						texte += katex_Popup2(
							numero_de_l_exercice + 1,
							1,
							"nombres premiers entre eux ?",
							`DÃ©finition : Nombres premiers entre eux`,
							txt_popup
						);
					};
					texte += `<br>` + num_alpha(1) + ` En dÃ©duire le nombre de tours de chaque roue avant le retour Ã  leur position initiale.`
					texte_corr = num_alpha(0) + ` Liste des premiers multiples de $${nb_dents_r1}$ : <br>`;
					// on va faire en sorte de toujours avoir un nombre de multiples multiple de 5
					let nb_marge = 5 - (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1) % 5;
					let k_max = (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 + nb_marge);
					for (let k = 1; k < k_max + 1; k++) {
						texte_corr += `$${k}\\times${nb_dents_r1} = `;
						if (k == (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1)) {
							texte_corr += mise_en_evidence(tex_nombre(k * nb_dents_r1));
							texte_corr += `$ ; `;
						} else {
							texte_corr += `${tex_nombre(k * nb_dents_r1)}$ ; `;
						};
						if (k % 5 == 0) {
							texte_corr += `<br>`;
						}
					};
					texte_corr += `$\\ldots$ `;
					texte_corr += `<br>`;
					texte_corr += ` Liste des premiers multiples de ${nb_dents_r2} : <br>`;
					// on va faire en sorte de toujours avoir un nombre de multiples multiple de 5
					nb_marge = 5 - (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2) % 5;
					k_max = (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2 + nb_marge);
					for (let k = 1; k < k_max + 1; k++) {
						texte_corr += `$${k}\\times${nb_dents_r2} = `;
						if (k == (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2)) {
							texte_corr += mise_en_evidence(tex_nombre(k * nb_dents_r2));
							texte_corr += `$ ; `;
						} else {
							texte_corr += `${tex_nombre(k * nb_dents_r2)}$ ; `;
						};
						if (k % 5 == 0) {
							texte_corr += `<br>`;
						}
					};
					texte_corr += `$\\ldots$ `;
					texte_corr += `<br>`;
					texte_corr += `Le plus petit multiple commun Ã  $${nb_dents_r1}$ et $${nb_dents_r2}$ vaut donc $ppcm(${nb_dents_r1},${nb_dents_r2}) = ${ppcm(nb_dents_r1, nb_dents_r2)}$.`;
					texte_corr += `<br>`;
					if (ppcm(nb_dents_r1, nb_dents_r2) == (nb_dents_r1 * nb_dents_r2)) {
						texte_corr += `Le $ppcm(` + nb_dents_r1 + `;` + nb_dents_r2 + `)=` + nb_dents_r1 + `\\times` + nb_dents_r2 + `$ donc $${nb_dents_r1}$ et $${nb_dents_r2}$ sont des `;
						texte_corr += katex_Popup2(
							numero_de_l_exercice + 2,
							1,
							"nombres premiers entre eux.",
							`DÃ©finition : Nombres premiers entre eux`,
							txt_popup//`Ãtant donnÃ©s deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\times b$, on dit que ${texte_gras('les nombres a et b sont premiers entre eux')}.`
						);
					};
					texte_corr += `<br><br>` + num_alpha(1) + ` Chaque roue doit tourner de $ppcm(${nb_dents_r1},${nb_dents_r2})=${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}$ dents.`;
					texte_corr += `<br> Cela correspond Ã  $(${ppcm(nb_dents_r1, nb_dents_r2)}\\text{ dents})\\div (${nb_dents_r1}\\text{ dents/tour}) = ${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1}$`;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `pour la roue n$\\degree$1.`
					texte_corr += `<br>Cela correspond Ã  $(${ppcm(nb_dents_r1, nb_dents_r2)}\\text{ dents})\\div (${nb_dents_r2}\\text{ dents/tour}) = ${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2}$`;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `pour la roue n$\\degree$2.`
					break;
				case 2: // avec de plus grands nombre, c'est mieux de dÃ©composer en facteurs premiers
					nb_dents_r1 = randint(31, 80);
					nb_dents_r2 = randint(31, 80, nb_dents_r1);
					texte = `La roue n$\\degree$1 possÃ¨de $${nb_dents_r1}$ dents et la roue n$\\degree$2 a $${nb_dents_r2}$ dents.`;
					texte += `<br>` + num_alpha(0) + ` DÃ©composer $${nb_dents_r1}$ et $${nb_dents_r2}$ en produit de facteurs premiers.`;
					if (ppcm(nb_dents_r1, nb_dents_r2) == (nb_dents_r1 * nb_dents_r2)) {
						texte += `<br>Pourquoi peut-on en dÃ©duire que ${nb_dents_r1} et ${nb_dents_r2} sont des `;
						texte += katex_Popup2(
							numero_de_l_exercice + 3,
							1,
							"nombres premiers entre eux",
							`DÃ©finition : Nombres premiers entre eux`,
							txt_popup//`Ãtant donnÃ©s deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\times b$, on dit que ${texte_gras('les nombres a et b sont premiers entre eux')}.`
						);
					};
					texte += `<br>` + num_alpha(1) + ` En dÃ©duire le nombre de tours de chaque roue avant le retour Ã  leur position initiale.`;
					texte_corr = `Pour un nombre de dents plus Ã©levÃ©, il est plus commode d'utiliser les dÃ©compositions en produit de facteurs premiers.`
					texte_corr += `<br>` + num_alpha(0) + ` DÃ©composition de $${nb_dents_r1}$ en produit de facteurs premiers :  $${nb_dents_r1} = ${decomposition_facteurs_premiers(nb_dents_r1)}$.`;
					texte_corr += `<br> DÃ©composition de $${nb_dents_r2}$ en produit de facteurs premiers :  $${nb_dents_r2} = ${decomposition_facteurs_premiers(nb_dents_r2)}$.`;
					texte_corr += `<br> D'oÃ¹ $ppcm(${nb_dents_r1},${nb_dents_r2})= ${decomposition_facteurs_premiers(ppcm(nb_dents_r1, nb_dents_r2))}$.<br>`;
					if (ppcm(nb_dents_r1, nb_dents_r2) == (nb_dents_r1 * nb_dents_r2)) {
						texte_corr += `Le $ppcm(` + nb_dents_r1 + `;` + nb_dents_r2 + `)=` + nb_dents_r1 + `\\times` + nb_dents_r2 + `$ donc $${nb_dents_r1}$ et $${nb_dents_r2}$ sont des `;
						texte_corr += katex_Popup2(
							numero_de_l_exercice + 4,
							1,
							"nombres premiers entre eux.",
							`DÃ©finition : Nombres premiers entre eux`,
							txt_popup//`Ãtant donnÃ©s deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\times b$, on dit que ${texte_gras('les nombres a et b sont premiers entre eux')}.`
						);
					};
					texte_corr += `<br><br>` + num_alpha(1) + ` Chaque roue doit tourner de $ppcm(${nb_dents_r1},${nb_dents_r2})=${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}$ dents.`;
					texte_corr += `<br> Cela correspond Ã  $(${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}\\text{ dents})\\div (${nb_dents_r1}\\text{ dents/tour}) = ${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1}$`;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `pour la roue n$\\degree$1.`;
					texte_corr += `<br> Cela correspond Ã  $(${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}\\text{ dents})\\div (${nb_dents_r2}\\text{ dents/tour}) = ${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2}$`;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `pour la roue n$\\degree$2.`
					break;
				case 3: // dÃ©terminer le nombre de dents d'une roue connaissant l'autre et le nombre de tours necessaires Ã  la re-synchro
					nb_dents_r1 = randint(5, 80);
					nb_dents_r2 = randint(5, 80, nb_dents_r1);
					texte = `La roue n$\\degree$2 a maintenant $${nb_dents_r2}$ dents.`;
					texte += ` DÃ©terminer le nombre de dents de la roue n$\\degree$1 qui ferait $${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1}$ `;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 == 1) {
						texte += ` tour `;
					} else {
						texte += ` tours `;
					};
					texte += ` pendant que la roue n$\\degree$2 en fait $${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2}$.`
					texte_corr = `Puisque la roue n$\\degree$2, qui a $${nb_dents_r2}$ dents, fait $${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2}$ `;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r2 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `, cela reprÃ©sente $${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}$ dents.`;
					texte_corr += `<br>La roue n$\\degree$1 doit donc aussi tourner de $${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}$ dents, ceci en $${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1}$ `;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `.`;
					texte_corr += `<br> on obtient donc $(${tex_nombre(ppcm(nb_dents_r1, nb_dents_r2))}\\text{ dents})\\div (${ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1}\\text{`;
					if (ppcm(nb_dents_r1, nb_dents_r2) / nb_dents_r1 == 1) {
						texte_corr += ` tour `;
					} else {
						texte_corr += ` tours `;
					};
					texte_corr += `}) = ${nb_dents_r1} \\text{ dents/tour}.$`
					texte_corr += `<br>La roue n$\\degree$1 a donc : $${nb_dents_r1}$ dents.`;
					break;
			};

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++
		}

		liste_de_question_to_contenu(this);
	}
	//this.besoin_formulaire_numerique = ['RÃ¨gle Ã  travailler',5,"1 : Produit de deux puissances de mÃªme base\n2 : Quotient de deux puissances de mÃªme base\n3 : Puissance de puissance\n4 : Produit de puissances de mÃªme exposant\n5 : MÃ©lange"]; 
};


/**
* Un graphique Ã©tant tracÃ©, dÃ©terminer l'image de nombres donnÃ©s.
* La fonction est un polynome de degrÃ© 1, 2 ou 3 et les nombres des questions ne sont que des entiers.
*
* @Auteur RÃ©mi Angot
* 3F12-4
*/
function Image_graphique() {
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Lire l'image d'un nombre Ã  partir d'un graphique"
	this.consigne = ""
	this.sup = 3;
	this.spacing = 1;
	sortie_html ? this.spacing_corr = 3 : this.spacing_corr = 1;
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.type_exercice = 'MG32';
	this.taille_div_MG32 = [800, 600];
	this.pas_de_version_LaTeX = false;
	this.nb_cols = 1;
	this.liste_packages = 'pgfplots';


	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es
		let codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAAEL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFAeKkeuFHrhEBzy4UeuFHs#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAAA4AAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8AAAAAAQ4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBCb52yLQ5WAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wAAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AAAAAAAOAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAADgAAAQUAAQAAAAcAAAAJAP####8AAAAAAQ4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAQEAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAduYmdyYWR4AAIyMAAAAAFANAAAAAAAAAAAABEA#####wAHbmJncmFkeQACMjAAAAABQDQAAAAAAAD#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAUR3JhZHVhdGlvbkF4ZXNSZXBlcmUAAAAbAAAACAAAAAMAAAAKAAAADwAAABD#####AAAAAQATQ0Fic2Npc3NlT3JpZ2luZVJlcAAAAAARAAVhYnNvcgAAAAr#####AAAAAQATQ09yZG9ubmVlT3JpZ2luZVJlcAAAAAARAAVvcmRvcgAAAAoAAAALAAAAABEABnVuaXRleAAAAAr#####AAAAAQAKQ1VuaXRleVJlcAAAAAARAAZ1bml0ZXkAAAAK#####wAAAAEAEENQb2ludERhbnNSZXBlcmUAAAAAEQAAAAAADgAAAQUAAAAACgAAAA4AAAASAAAADgAAABMAAAAWAAAAABEAAAAAAA4AAAEFAAAAAAoAAAANAAAAAA4AAAASAAAADgAAABQAAAAOAAAAEwAAABYAAAAAEQAAAAAADgAAAQUAAAAACgAAAA4AAAASAAAADQAAAAAOAAAAEwAAAA4AAAAVAAAADAAAAAARAAAAFgAAAA4AAAAPAAAADwAAAAARAAAAAAAOAAABBQAAAAAXAAAAGQAAAAwAAAAAEQAAABYAAAAOAAAAEAAAAA8AAAAAEQAAAAAADgAAAQUAAAAAGAAAABv#####AAAAAQAIQ1NlZ21lbnQAAAAAEQEAAAAAEAAAAQABAAAAFwAAABoAAAAXAAAAABEBAAAAABAAAAEAAQAAABgAAAAcAAAABAAAAAARAQAAAAALAAFXAMAUAAAAAAAAwDQAAAAAAAAFAAE#3FZ4mrzfDgAAAB3#####AAAAAgAIQ01lc3VyZVgAAAAAEQAGeENvb3JkAAAACgAAAB8AAAARAAAAABEABWFic3cxAAZ4Q29vcmQAAAAOAAAAIP####8AAAACABJDTGlldU9iamV0UGFyUHRMaWUBAAAAEQBmZmYAAAAfAAAADgAAAA8AAAAfAAAAAgAAAB8AAAAfAAAAEQAAAAARAAVhYnN3MgANMiphYnNvci1hYnN3MQAAAA0BAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAEgAAAA4AAAAhAAAAFgAAAAARAQAAAAALAAABBQAAAAAKAAAADgAAACMAAAAOAAAAEwAAABkBAAAAEQBmZmYAAAAkAAAADgAAAA8AAAAfAAAABQAAAB8AAAAgAAAAIQAAACMAAAAkAAAABAAAAAARAQAAAAALAAFSAEAgAAAAAAAAwCAAAAAAAAAFAAE#0RtOgbToHwAAAB7#####AAAAAgAIQ01lc3VyZVkAAAAAEQAGeUNvb3JkAAAACgAAACYAAAARAAAAABEABW9yZHIxAAZ5Q29vcmQAAAAOAAAAJwAAABkBAAAAEQBmZmYAAAAmAAAADgAAABAAAAAmAAAAAgAAACYAAAAmAAAAEQAAAAARAAVvcmRyMgANMipvcmRvci1vcmRyMQAAAA0BAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAEwAAAA4AAAAoAAAAFgAAAAARAQAAAAALAAABBQAAAAAKAAAADgAAABIAAAAOAAAAKgAAABkBAAAAEQBmZmYAAAArAAAADgAAABAAAAAmAAAABQAAACYAAAAnAAAAKAAAACoAAAAr#####wAAAAIADENDb21tZW50YWlyZQAAAAARAWZmZgAAAAAAAAAAAEAYAAAAAAAAAAAAHwsAAf###wAAAAEAAAAAAAAAAQAAAAAAAAAAAAsjVmFsKGFic3cxKQAAABkBAAAAEQBmZmYAAAAtAAAADgAAAA8AAAAfAAAABAAAAB8AAAAgAAAAIQAAAC0AAAAbAAAAABEBZmZmAAAAAAAAAAAAQBgAAAAAAAAAAAAkCwAB####AAAAAQAAAAAAAAABAAAAAAAAAAAACyNWYWwoYWJzdzIpAAAAGQEAAAARAGZmZgAAAC8AAAAOAAAADwAAAB8AAAAGAAAAHwAAACAAAAAhAAAAIwAAACQAAAAvAAAAGwAAAAARAWZmZgDAIAAAAAAAAD#wAAAAAAAAAAAAJgsAAf###wAAAAIAAAABAAAAAQAAAAAAAAAAAAsjVmFsKG9yZHIxKQAAABkBAAAAEQBmZmYAAAAxAAAADgAAABAAAAAmAAAABAAAACYAAAAnAAAAKAAAADEAAAAbAAAAABEBZmZmAMAcAAAAAAAAAAAAAAAAAAAAAAArCwAB####AAAAAgAAAAEAAAABAAAAAAAAAAAACyNWYWwob3JkcjIpAAAAGQEAAAARAGZmZgAAADMAAAAOAAAAEAAAACYAAAAGAAAAJgAAACcAAAAoAAAAKgAAACsAAAAz#####wAAAAEABUNGb25jAP####8AAWYACC0yKngqeCszAAAADQD#####AAAAAQAMQ01vaW5zVW5haXJlAAAADQIAAAANAgAAAAFAAAAAAAAAAP####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAAeAAAAAAAAAAFACAAAAAAAAAABeAAAAAQA#####wEAAAAAEAABeAAAAAAAAAAAAEAIAAAAAAAABQABQC8BAyKX1IIAAAAEAAAAGAD#####AAJ4MQAAAAoAAAA2AAAAEQD#####AAJ5MQAFZih4MSn#####AAAAAQAOQ0FwcGVsRm9uY3Rpb24AAAA1AAAADgAAADcAAAAWAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAKAAAADgAAADcAAAAOAAAAOP####8AAAACAA1DTGlldURlUG9pbnRzAP####8AAAD#AAIAAAA5AAAB9AABAAAANgAAAAQAAAA2AAAANwAAADgAAAA5#####wAAAAEAFUNQb2ludExpZUxpZXVQYXJQdExpZQD#####AAAAAAAQAAFNAAAAAAAAAAAAQAgAAAAAAAAJAAG##CuHsx36wAAAADq##CuHsx36wAAAAAMA#####wEAAAABEAAAAQABAAAAOwA#8AAAAAAAAAAAAAMA#####wEAAAABEAAAAQABAAAAOwE#8AAAAAAAAP####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAAEAAAAPAAAACIA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAUAAAA9AAAAFwD#####AAAAAAAQAAABAQEAAAA7AAAAPgAAABcA#####wAAAAAAEAAAAQEBAAAAOwAAAD8AAAAO##########8="

		let a, b, c, d, x1, x2, x3, fx1, fx2, fx3, expression_f, numa, dena, numb, denb, numc, denc, ymax;

		function initialise_variables() {
			if (sortie_html) { // repÃ¨re -10 || 10
				x1 = randint(-6, -3);
				x2 = randint(x1 + 3, 2);
				x3 = randint(x2 + 2, 8);
				fx1 = randint(-5, 5);
				fx2 = randint(-6, 6);
				fx3 = randint(-5, 5);
				d = randint(-5, 5);
				c = randint(-5, 5);
				ymax = 7;
			} else { // repÃ¨re -5 || 5
				x1 = randint(-4, -2);
				x2 = randint(-1, 2, [0]);
				x3 = randint(3, 4);
				fx1 = randint(-4, 4);
				fx2 = randint(-4, 4);
				fx3 = randint(-4, 4);
				d = randint(-3, 3);
				c = randint(-3, 3);
				ymax = 4;
			}
		};

		initialise_variables();


		texte = `On a tracÃ© ci-dessous la courbe reprÃ©sentative de la fonction $f$.<br>`

		if (this.sup == 1) {

			a = calcul((fx2 - fx1) / (x2 - x1));
			b = calcul(fx1 - a * x1);
			expression_f = `${a}*x+(${b})`;

			texte += `DÃ©terminer par lecture graphique les images de $${x1}$ et de $${x2}$ par cette fonction $f$.<br><br>`
			texte_corr = `L'image de $${x1}$ est $${fx1}$, on note $f(${x1})=${fx1}$.<br>`
			texte_corr += `L'image de $${x2}$ est $${fx2}$, on note $f(${x2})=${fx2}$.`

		}

		if (this.sup == 2) {
			[[numa, dena], [numb, denb]] = resol_sys_lineaire_2x2(x1, x3, fx1, fx3, c)
			while (dena == 0 || denb == 0 || numa == 0) {
				x1 = randint(-6, -3);
				x3 = randint(1, 6);
				fx1 = randint(-5, 5);
				fx3 = randint(-6, 6);
				d = randint(-10, 10);

				[[numa, dena], [numb, denb]] = resol_sys_lineaire_2x2(x1, x3, fx1, fx3, c)
			}
			a = numa / dena;
			b = numb / denb;
			x2 = 0;
			fx2 = c;

			expression_f = `${a}*x^2+(${b})*x+(${c})`;
		}

		if (this.sup == 3) {
			[[numa, dena], [numb, denb], [numc, denc]] = resol_sys_lineaire_3x3(x1, x2, x3, fx1, fx2, fx3, d)
			let [extremum1, extremum2] = cherche_min_max_f([numa / dena, numb / denb, numc / denc, d])
			while (dena == 0 || denb == 0 || denc == 0 || abs(extremum1[1]) > ymax || abs(extremum2[1]) > ymax) {
				initialise_variables();
				[[numa, dena], [numb, denb], [numc, denc]] = resol_sys_lineaire_3x3(x1, x2, x3, fx1, fx2, fx3, d)
				if (cherche_min_max_f([numa / dena, numb / denb, numc / denc, d]) == []) {
					[extremum1, extremum2] = [[0, 999], [0, 999]]
				} else {
					[extremum1, extremum2] = cherche_min_max_f([numa / dena, numb / denb, numc / denc, d])
				}
			}
			a = numa / dena;
			b = numb / denb;
			c = numc / denc;

			expression_f = `${a}*x^3+(${b})*x^2+(${c})*x+(${d})`;
		}

		if (this.sup == 2 || this.sup == 3) {
			texte += `DÃ©terminer par lecture graphique les images de $${x1}$, de $${x2}$ et de $${x3}$ par cette fonction $f$.<br><br>`
			texte_corr = `L'image de $${x1}$ est $${fx1}$, on note $f(${x1})=${fx1}$.<br>`
			texte_corr += `L'image de $${x2}$ est $${fx2}$, on note $f(${x2})=${fx2}$.<br>`
			texte_corr += `L'image de $${x3}$ est $${fx3}$, on note $f(${x3})=${fx3}$.<br>`
		}

		if (!sortie_html) {
			texte += "\n\n"
			texte += tex_graphique(expression_f);
		}

		this.MG32codeBase64 = codeBase64
		this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "f", "${expression_f}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `

		this.liste_questions.push(texte);
		this.liste_corrections.push(texte_corr);
		liste_de_question_to_contenu_sans_numero(this);
	}

	this.besoin_formulaire_numerique = ['Type de fonctions', 3, "1 : Affine\n2 : Polynome du 2nd degrÃ©\n3 : Polynome du 3e degrÃ©"];

}

/**
* Un graphique Ã©tant tracÃ©, dÃ©terminer les antÃ©cÃ©dents de nombres donnÃ©s.
* La fonction est un polynome de degrÃ© 1, 2 ou 3 et les nombres des questions ne sont que des entiers.
*
* @Auteur RÃ©mi Angot
* 3F13
*/
function Antecedent_graphique() {
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Lire les antÃ©cÃ©dents d'un nombre Ã  partir d'un graphique"
	this.consigne = ""
	this.sup = 2;
	this.spacing = 1;
	sortie_html ? this.spacing_corr = 3 : this.spacing_corr = 1;
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.type_exercice = 'MG32';
	this.taille_div_MG32 = [800, 600];
	this.pas_de_version_LaTeX = false;
	this.nb_cols = 1;
	this.liste_packages = 'pgfplots';



	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		this.contenu = ''; // Liste de questions
		this.contenu_correction = ''; // Liste de questions corrigÃ©es
		let codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAAEL#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFAeKkeuFHrhEBzy4UeuFHs#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAAA4AAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8AAAAAAQ4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUBCb52yLQ5WAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wAAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AAAAAAAOAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAADgAAAQUAAQAAAAcAAAAJAP####8AAAAAAQ4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAQEAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQAHQ0NhbGN1bAD#####AAduYmdyYWR4AAIyMAAAAAFANAAAAAAAAAAAABEA#####wAHbmJncmFkeQACMjAAAAABQDQAAAAAAAD#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAUR3JhZHVhdGlvbkF4ZXNSZXBlcmUAAAAbAAAACAAAAAMAAAAKAAAADwAAABD#####AAAAAQATQ0Fic2Npc3NlT3JpZ2luZVJlcAAAAAARAAVhYnNvcgAAAAr#####AAAAAQATQ09yZG9ubmVlT3JpZ2luZVJlcAAAAAARAAVvcmRvcgAAAAoAAAALAAAAABEABnVuaXRleAAAAAr#####AAAAAQAKQ1VuaXRleVJlcAAAAAARAAZ1bml0ZXkAAAAK#####wAAAAEAEENQb2ludERhbnNSZXBlcmUAAAAAEQAAAAAADgAAAQUAAAAACgAAAA4AAAASAAAADgAAABMAAAAWAAAAABEAAAAAAA4AAAEFAAAAAAoAAAANAAAAAA4AAAASAAAADgAAABQAAAAOAAAAEwAAABYAAAAAEQAAAAAADgAAAQUAAAAACgAAAA4AAAASAAAADQAAAAAOAAAAEwAAAA4AAAAVAAAADAAAAAARAAAAFgAAAA4AAAAPAAAADwAAAAARAAAAAAAOAAABBQAAAAAXAAAAGQAAAAwAAAAAEQAAABYAAAAOAAAAEAAAAA8AAAAAEQAAAAAADgAAAQUAAAAAGAAAABv#####AAAAAQAIQ1NlZ21lbnQAAAAAEQEAAAAAEAAAAQABAAAAFwAAABoAAAAXAAAAABEBAAAAABAAAAEAAQAAABgAAAAcAAAABAAAAAARAQAAAAALAAFXAMAUAAAAAAAAwDQAAAAAAAAFAAE#3FZ4mrzfDgAAAB3#####AAAAAgAIQ01lc3VyZVgAAAAAEQAGeENvb3JkAAAACgAAAB8AAAARAAAAABEABWFic3cxAAZ4Q29vcmQAAAAOAAAAIP####8AAAACABJDTGlldU9iamV0UGFyUHRMaWUBAAAAEQBmZmYAAAAfAAAADgAAAA8AAAAfAAAAAgAAAB8AAAAfAAAAEQAAAAARAAVhYnN3MgANMiphYnNvci1hYnN3MQAAAA0BAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAEgAAAA4AAAAhAAAAFgAAAAARAQAAAAALAAABBQAAAAAKAAAADgAAACMAAAAOAAAAEwAAABkBAAAAEQBmZmYAAAAkAAAADgAAAA8AAAAfAAAABQAAAB8AAAAgAAAAIQAAACMAAAAkAAAABAAAAAARAQAAAAALAAFSAEAgAAAAAAAAwCAAAAAAAAAFAAE#0RtOgbToHwAAAB7#####AAAAAgAIQ01lc3VyZVkAAAAAEQAGeUNvb3JkAAAACgAAACYAAAARAAAAABEABW9yZHIxAAZ5Q29vcmQAAAAOAAAAJwAAABkBAAAAEQBmZmYAAAAmAAAADgAAABAAAAAmAAAAAgAAACYAAAAmAAAAEQAAAAARAAVvcmRyMgANMipvcmRvci1vcmRyMQAAAA0BAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAEwAAAA4AAAAoAAAAFgAAAAARAQAAAAALAAABBQAAAAAKAAAADgAAABIAAAAOAAAAKgAAABkBAAAAEQBmZmYAAAArAAAADgAAABAAAAAmAAAABQAAACYAAAAnAAAAKAAAACoAAAAr#####wAAAAIADENDb21tZW50YWlyZQAAAAARAWZmZgAAAAAAAAAAAEAYAAAAAAAAAAAAHwsAAf###wAAAAEAAAAAAAAAAQAAAAAAAAAAAAsjVmFsKGFic3cxKQAAABkBAAAAEQBmZmYAAAAtAAAADgAAAA8AAAAfAAAABAAAAB8AAAAgAAAAIQAAAC0AAAAbAAAAABEBZmZmAAAAAAAAAAAAQBgAAAAAAAAAAAAkCwAB####AAAAAQAAAAAAAAABAAAAAAAAAAAACyNWYWwoYWJzdzIpAAAAGQEAAAARAGZmZgAAAC8AAAAOAAAADwAAAB8AAAAGAAAAHwAAACAAAAAhAAAAIwAAACQAAAAvAAAAGwAAAAARAWZmZgDAIAAAAAAAAD#wAAAAAAAAAAAAJgsAAf###wAAAAIAAAABAAAAAQAAAAAAAAAAAAsjVmFsKG9yZHIxKQAAABkBAAAAEQBmZmYAAAAxAAAADgAAABAAAAAmAAAABAAAACYAAAAnAAAAKAAAADEAAAAbAAAAABEBZmZmAMAcAAAAAAAAAAAAAAAAAAAAAAArCwAB####AAAAAgAAAAEAAAABAAAAAAAAAAAACyNWYWwob3JkcjIpAAAAGQEAAAARAGZmZgAAADMAAAAOAAAAEAAAACYAAAAGAAAAJgAAACcAAAAoAAAAKgAAACsAAAAz#####wAAAAEABUNGb25jAP####8AAWYACC0yKngqeCszAAAADQD#####AAAAAQAMQ01vaW5zVW5haXJlAAAADQIAAAANAgAAAAFAAAAAAAAAAP####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAAeAAAAAAAAAAFACAAAAAAAAAABeAAAAAQA#####wEAAAAAEAABeAAAAAAAAAAAAEAIAAAAAAAABQABQC8BAyKX1IIAAAAEAAAAGAD#####AAJ4MQAAAAoAAAA2AAAAEQD#####AAJ5MQAFZih4MSn#####AAAAAQAOQ0FwcGVsRm9uY3Rpb24AAAA1AAAADgAAADcAAAAWAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAKAAAADgAAADcAAAAOAAAAOP####8AAAACAA1DTGlldURlUG9pbnRzAP####8AAAD#AAIAAAA5AAAB9AABAAAANgAAAAQAAAA2AAAANwAAADgAAAA5#####wAAAAEAFUNQb2ludExpZUxpZXVQYXJQdExpZQD#####AAAAAAAQAAFNAAAAAAAAAAAAQAgAAAAAAAAJAAG#fx#Yd2ToAAAAADq#fx#Yd2ToAAAAAAMA#####wEAAAABEAAAAQABAAAAOwA#8AAAAAAAAAAAAAMA#####wEAAAABEAAAAQABAAAAOwE#8AAAAAAAAP####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAAEAAAAPAAAACIA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAUAAAA9AAAAFwD#####AAAAAAAQAAABAQEAAAA7AAAAPgAAABcA#####wAAAAAAEAAAAQEBAAAAOwAAAD8AAAAO##########8="

		let a, b, c, d, x1, x2, x3, fx1, fx2, fx3, expression_f, numa, dena, numb, denb, numc, denc, ymax;

		function initialise_variables() {
			if (sortie_html) { // repÃ¨re -10 || 10
				x1 = randint(-6, -3);
				x2 = randint(x1 + 3, 2);
				x3 = randint(x2 + 2, 8);
				fx1 = randint(-5, 5);
				fx2 = randint(-6, 6);
				fx3 = randint(-5, 5);
				d = randint(-5, 5);
				c = randint(-5, 5);
				ymax = 7;
			} else { // repÃ¨re -5 || 5
				x1 = randint(-4, -2);
				x2 = randint(-1, 2, [0]);
				x3 = randint(3, 4);
				fx1 = randint(-4, 4);
				fx2 = randint(-4, 4);
				fx3 = randint(-4, 4);
				d = randint(-3, 3);
				c = randint(-3, 3);
				ymax = 4;
			}
		};

		initialise_variables();


		texte = `On a tracÃ© ci-dessous la courbe reprÃ©sentative de la fonction $f$.<br>`

		if (this.sup == 1) {

			a = calcul((fx2 - fx1) / (x2 - x1));
			b = calcul(fx1 - a * x1);
			expression_f = `${a}*x+(${b})`;

			texte += `DÃ©terminer par lecture graphique les antÃ©cÃ©dents de $${fx1}$ et de $${fx2}$ par cette fonction $f$.<br><br>`
			texte_corr = `L'antÃ©cÃ©dent de $${fx1}$ est $${x1}$, on note $f(${x1})=${fx1}$.<br>`
			texte_corr += `L'antÃ©cÃ©dent de $${fx2}$ est $${x2}$, on note $f(${x2})=${fx2}$.`

		}

		if (this.sup == 2) {
			if (randint(1, 4) < 4) { // une fois sur 4 il n'y a qu'un seul antÃ©cÃ©dent
				let x0 = randint(-2, 2)
				let fx0 = randint(-4, 4)
				if (!sortie_html) {
					fx0 = randint(-2, 2)
				}
				a = randint(-3, 3, 0);
				texte += `DÃ©terminer par lecture graphique les antÃ©cÃ©dents de $${fx0}$ par cette fonction $f$.<br><br>`
				texte_corr = `$${fx0}$ a un unique antÃ©cÃ©dent $${x0}$, on note $f(${x0})=${fx0}$.<br>`
				expression_f = `${a}*(x-(${x0}))^2+(${fx0})`;
			} else {
				fx3 = fx1;
				[[numa, dena], [numb, denb]] = resol_sys_lineaire_2x2(x1, x3, fx1, fx3, c)
				while (dena == 0 || denb == 0 || numa == 0) {
					x1 = randint(-4, -1);
					x3 = randint(1, 4);
					sortie_html ? fx1 = randint(-7, 7) : fx1 = randint(-3, 3);
					fx3 = fx1;
					sortie_html ? c = randint(-6, 6) : c = randint(-4, 4);

					[[numa, dena], [numb, denb]] = resol_sys_lineaire_2x2(x1, x3, fx1, fx3, c)
				}
				a = numa / dena;
				b = numb / denb;
				x2 = 0;
				fx2 = c;
				expression_f = `${a}*x^2+(${b})*x+(${c})`;
				texte += `DÃ©terminer par lecture graphique les antÃ©cÃ©dents de $${fx1}$ par cette fonction $f$.<br><br>`
				texte_corr = `$${fx1}$ a deux antÃ©cÃ©dents $${x1}$ et $${x3}$, on note $f(${x1})=f(${x3})=${fx1}$.<br>`
			}
		}


		if (!sortie_html) {
			texte += "\n\n"
			texte += tex_graphique(expression_f);
		}

		this.MG32codeBase64 = codeBase64
		this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "f", "${expression_f}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `

		this.liste_questions.push(texte);
		this.liste_corrections.push(texte_corr);
		liste_de_question_to_contenu_sans_numero(this);
	}

	this.besoin_formulaire_numerique = ['Type de fonctions', 2, "1 : Affine\n2 : Polynome du 2nd degrÃ©"];

}
/**
* ProblÃ¨mes calculs d'aire et de volumes utilisant l'effet d'une rÃ©duction sur les aires et les volumes 
* @auteur Jean-Claude Lhote
* 3G22
*/
function Agrandissement_reduction() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "ConnaÃ®tre les effets des agrandissements/rÃ©ductions sur les aires et les volumes";
	this.consigne = "";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	sortie_html ? this.spacing_corr = 3.5 : this.spacing_corr = 1.5
	sortie_html ? this.spacing = 2.5 : this.spacing = 1.5
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.quatrieme = false;
	this.sup = 1; // 
	this.sup2 =1;
	this.pas_de_version_LaTeX = false;


	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = [];
		this.liste_corrections = [];
		let texte, texte_corr, r, r2, h1, h2, h3, c, c2; 
	//	if (sortie_html) {
			this.type_exercice = 'MG32';
			this.taille_div_MG32 = [600, 700];
			let codeBase64
			let choix
			if (this.sup == 1) choix = randint(1, 3)
			else if (this.sup == 2) choix = randint(4,5)
			else choix = randint(1, 5)
			switch (choix) {
				case 1: // calcul de l'aire de base, du volume d'une pyramide Ã  base carrÃ©e. puis, calcul de la section, du volume de la petite pyramide et du volume du tronc
					c = calcul(randint(30, 60) / 10)
					h1 = calcul(randint(12, 20) / 2)
					h2 = randint(3, Math.floor(h1) - 1)
					if (this.sup2<3)
						if (this.sup2==1) // on veut un coefficient de rÃ©duction dÃ©cimal Ã  1 chiffre aprÃ¨s la virgule
							while (calcul(h2/h1)!=arrondi(h2/h1,1)) {
								c = calcul(randint(30, 60) / 10)
								h1 = calcul(randint(12, 20) / 2)
								h2 = randint(3, Math.floor(h1) - 1)
							}
						else // coefficient qui peut Ãªtre dÃ©cimal avec plus d'un chiffre ou rationnel non dÃ©cimal.
							while (calcul(h2/h1)==arrondi(h2/h1,1)) {
								c = calcul(randint(30, 60) / 10)
								h1 = calcul(randint(12, 20) / 2)
								h2 = randint(3, Math.floor(h1) - 1)
							}
					codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAANmcmH###8BAP8BAAAAAAAAAAAFHAAAAtIAAAAAAAAAAAAAAAEAAAE1#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAFAgBQAAAAAAEBzyFHrhR64#####wAAAAEAB0NDYWxjdWwA#####wAFbWluaTEAAzAuNQAAAAE#4AAAAAAAAAAAAAMA#####wAFbWF4aTEAATMAAAABQAgAAAAAAAD#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAHQ3Vyc2V1cgAAAAUAAAAFAAAAAwAAAAIAAAADAAAAAf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQAAAAAEAQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQEAAAAEAAAAAAAQAAAAwAgAAAAAAAA#8AAAAAAAAAUAAUBPAAAAAAAAAAAABf####8AAAABAAtDSG9tb3RoZXRpZQAAAAAEAAAAAf####8AAAABAApDT3BlcmF0aW9uA#####8AAAABAA9DUmVzdWx0YXRWYWxldXIAAAACAAAACAEAAAAJAAAAAgAAAAkAAAAD#####wAAAAEAC0NQb2ludEltYWdlAAAAAAQBAAAAAA0AAk8xAMAQAAAAAAAAQBAAAAAAAAAFAAAAAAYAAAAHAAAABwAAAAAEAAAAAQAAAAgDAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAAgAAAAgBAAAACQAAAAMAAAAJAAAAAgAAAAoAAAAABAEAAAAADQACSTIAwAAAAAAAAABACAAAAAAAAAUAAAAABgAAAAn#####AAAAAQAIQ1NlZ21lbnQBAAAABAAAAAAAEAAAAQEBAAAAAQAAAAYAAAAGAQAAAAQAAAAAARAAAmsxAMAAAAAAAAAAQAAAAAAAAAABAAE#2973ve973wAAAAv#####AAAAAgAPQ01lc3VyZUFic2Npc3NlAQAAAAQABHpvb20AAAAIAAAACgAAAAz#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAAAQBAAAAAAAAAAAAAAAAwBgAAAAAAAAAAAAMDwAB####AAAAAQAAAAIAAAABAAAAAAAAAAAAAAAAAgAAAA0AAAADAP####8AAWMAATMAAAABQAgAAAAAAAAAAAACAP####8AAAAAAQ8AAU8AP#AAAAAAAABACAAAAAAAAAUAAUBukAAAAAAAQILsKPXCj1wAAAAFAP####8BAAAAABAAAAEAAQAAABABQACWu5jH4oIAAAACAP####8AAAAAAQ8AAk8yAQUAAUCBLAAAAAAAQHn4UeuFHrgAAAACAP####8AAAAAAQ8AAk8zAQUAAUCBJAAAAAAAQH44UeuFHrgAAAAFAP####8BAAAAABAAAAEAAQAAABMBQACWu5jH4oIAAAACAP####8AAAAAAQ8AAk80AQUAAUCBFAAAAAAAQIIcKPXCj1wAAAAFAP####8BAAAAABAAAAEAAQAAABUBQACWu5jH4oL#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAABL#####AAAAAQAFQ0ZvbmMA#####wAEemVybwANYWJzKHQpPDAuMDAwMQAAAAgE#####wAAAAIACUNGb25jdGlvbgD#####AAAAAgARQ1ZhcmlhYmxlRm9ybWVsbGUAAAAAAAAAAT8aNuLrHEMtAAF0AAAABQD#####AQAAAAEQAAABAAEAAAASAD#wAAAAAAAAAAAABgD#####AAAAAAEPAAJKMgEFAADAQAAAAAAAAAAAABn#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAASAAAAGgAAAAoA#####wEAAAAAEAAAAQUAAAAAEwAAABv#####AAAAAQAJQ0NlcmNsZU9BAP####8Af39#AQEAAAATAAAAHP####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAUAAAAHf####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAAA0AAkkzAQUAAQAAAB7#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAAQsAAkszAQEAAUAYJx+keskRAAAAHQAAAAsA#####wAAAAAAEAAAAQABAAAAEgAAABoAAAALAP####8AAAAAABAAAAEAAQAAABMAAAAfAAAACwD#####AAAAAAAQAAABAAEAAAATAAAAIP####8AAAACABNDTWVzdXJlQW5nbGVPcmllbnRlAP####8ACGFuZ3RoZXRhAAAAHwAAABMAAAAgAAAAAwD#####AAV0aGV0YQAIYW5ndGhldGEAAAAJAAAAJAAAAAMA#####wADeCcxAApzaW4odGhldGEpAAAAEAMAAAAJAAAAJQAAAAMA#####wADeCcyAApjb3ModGhldGEpAAAAEAQAAAAJAAAAJf####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAP####8AfwAAAAIAAAAAQDWKaKSo2fMAAAAfAAAAEwAAACAB#####wAAAAEADENCaXNzZWN0cmljZQD#####AX8AAAAQAAABAQEAAAAfAAAAEwAAACAAAAAGAP####8BfwAAABAAAAEFAAFAebYKC41k5QAAACn#####AAAAAgAGQ0xhdGV4AP####8AfwAAAMAUAAAAAAAAwCYAAAAAAAAAAAAqEQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAClx2YXJ0aGV0YSAAAAAKAP####8BAAAAABAAAAEFAAAAABoAAAAX#####wAAAAEAEkNBcmNEZUNlcmNsZURpcmVjdAD#####AH9#fwEBAAAAEgAAABoAAAAsAAAAFgD#####AAAAAAEPAAJLMgEBAAE#wCNHf8Ds#QAAAC0AAAALAP####8AAAAAABAAAAEAAQAAABIAAAAuAAAAFwD#####AAZhbmdwaGkAAAAaAAAAEgAAAC4AAAADAP####8AA3BoaQAGYW5ncGhpAAAACQAAADAAAAAHAP####8AAAAVAAAAEAQAAAAJAAAAMQAAAAMA#####wADeScxABQtY29zKHRoZXRhKSpzaW4ocGhpKQAAAAgBAAAAAQAAAAAAAAAAAAAACAIAAAAQBAAAAAkAAAAlAAAAEAMAAAAJAAAAMQAAAAMA#####wADeScyABNzaW4odGhldGEpKnNpbihwaGkpAAAACAIAAAAQAwAAAAkAAAAlAAAAEAMAAAAJAAAAMQAAABgA#####wAAAP8AAgAAAABAN1LlDbOjogAAABoAAAASAAAALgEAAAAZAP####8BAAD#ABAAAAEBAQAAABoAAAASAAAALgAAAAYA#####wEAAP8AEAAAAQUAAUB8Mk4l1syCAAAANgAAABoA#####wAAAP8AwBAAAAAAAADAFAAAAAAAAAAAADcRAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAHXHZhcnBoaQAAAAUA#####wEAAAABEAAAAQABAAAAFQA#8AAAAAAAAAAAAAYA#####wAAAAABDwACSjQBBQABwEoAAAAAAAAAAAA5AAAAEwD#####AGZmZgABAAAAFQAAADoAAAAWAP####8BAAAAABAAAAEFAAE#8JfpunkCYQAAADsAAAAFAP####8BAAAAABAAAAEAAQAAADwAQACWu5jH4oL#####AAAAAQAQQ0ludERyb2l0ZURyb2l0ZQD#####AQAAAAAQAAABBQAAAAAWAAAAPQAAABQA#####wAAABYAAAA7AAAAFQD#####AQAAAAENAAJJNAEFAAEAAAA######wAAAAIAB0NSZXBlcmUA#####wAAAAABAQAAABUAAABAAAAAOgAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAoA#####wEAAAAAEAAAAQUAAAAAOgAAADIAAAAHAP####8AAAA+AAAAEAQAAAAJAAAAMQAAAAoA#####wEAAAAAEAAAAQUAAAAAPAAAAEP#####AAAAAgANQ0xpZXVEZVBvaW50cwD#####AAB#fwEBAAAARAAAAGQAAAAAADwAAAAFAAAAPAAAAD0AAAA+AAAAQwAAAET#####AAAAAQAIQ1ZlY3RldXIA#####wAAAP8AEAAAAQABAAAAFQAAAEIA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAEAAAAQUAAAAAQQAAAAkAAAAmAAAACQAAADMAAAAgAP####8BAAAAABAAAAEFAAAAAEEAAAAJAAAAJwAAAAkAAAA0AAAAHwD#####AP8AAAAQAAABAAEAAAAVAAAARwAAAAAfAP####8AAH8AABAAAAEAAQAAABUAAABIAAAAAB4A#####wBmZmYBAQAAAEcAAABkAAAAAAAgAAAABgAAACAAAAAkAAAAJQAAACYAAAAzAAAAR#####8AAAABAAxDU3VyZmFjZUxpZXUA#####wB#f38AAAAFAAAASwAAACEA#####wB#f38AAAAFAAAARQAAAAMA#####wACaDEAAjEwAAAAAUAkAAAAAAAAAAAAAwD#####AAJoMgABMwAAAAFACAAAAAAAAAAAAAMA#####wACaDMABWgxLWgyAAAACAEAAAAJAAAATgAAAAkAAABP#####wAAAAEACUNMb25ndWV1cgD#####AAAAEgAAABr#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8A#wAAAf####8QQIA8AAAAAABAdGhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABFpPT03#####AAAAAgAJQ0NlcmNsZU9SAP####8B#wAAAAEAAAAQAAAAAT#wAAAAAAAAAAAAABQA#####wAAABEAAABTAAAAFQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAFQAAAAVAP####8B#wAAABAAAkkiAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABUAAAABwD#####AAAAEAAAAAkAAAANAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAVgAAAFf#####AAAAAQAOQ1BvaW50TGllUG9pbnQA#####wEAAAAACwACSTEAwBAAAAAAAABAEAAAAAAAAAUAAAAAWP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAADQAAAQABAAAAEAAAAFn#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAAQAAAAWgAAABMA#####wEAAAAAAQAAABAAAABZAAAAFAD#####AAAAWwAAAFwAAAAVAP####8BAAAAAAsAAkoxAMAoAAAAAAAAwBAAAAAAAAAFAAIAAABdAAAAHQD#####AICAgAEBAAAAEAAAAFkAAABeAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAIAD#####AQAAAAAPAAFLAEAQAAAAAAAAwC4AAAAAAAAFAAAAAF8AAAABAAAAAAAAAAAAAAAQBAAAAAkAAAAxAAAAIAD#####AQAAAAAPAAFJAMAmAAAAAAAAwC4AAAAAAAAFAAAAAF8AAAAJAAAAJgAAAAkAAAAzAAAAIAD#####AQAAAAAPAAFKAEAUAAAAAAAAwCwAAAAAAAAFAAAAAF8AAAAJAAAAJwAAAAkAAAA0#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wEAAAAADQAAAQEBAAAAEAAAAGEAAAAoAP####8BAAAAAA0AAAEBAQAAABAAAABiAAAAKAD#####AQAAAAANAAABAQEAAAAQAAAAYAAAAB8A#####wH#AAAAEAAAAQABAAAAEAAAAGEAAAAAHwD#####AQB#AAAQAAABAAEAAAAQAAAAYgAAAAAfAP####8BAAD#ABAAAAEAAQAAABAAAABgAP####8AAAABABFDTWFjcm9EaXNwYXJpdGlvbgD#####AAAA#wH#####DUB+IAAAAAAAQIQQAAAAAAACAczM#wAAAAAAAAAAAAAAAQAAAAAAAAAAABMoTyxJLEosSykgaW52aXNpYmxlAAAAAAAJAAAAZAAAAGEAAABiAAAAZQAAAGgAAABgAAAAZwAAAGYAAABj#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wAAAP8B#####w1AfpAAAAAAAECE4AAAAAAAAgHMzP8AAAAAAAAAAAAAAAEAAAAAAAAAAAARKE8sSSxKLEspIHZpc2libGUAAAAAAAkAAABkAAAAYQAAAGIAAABlAAAAaAAAAGAAAABnAAAAZgAAAGMA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8B#wAAABAAAkUiAAAAAAAAAAAAQAgAAAAAAAAFAAAAABAAAABhAAAACAMAAAAJAAAADwAAAAFAAAAAAAAAAAAAACUA#####wEAAAAADwABRQEFAAAAAGsAAAAMAP####8ABGFiczEAAAAQAAAAYQAAAGwAAAADAP####8AAWEABjIqYWJzMQAAAAgCAAAAAUAAAAAAAAAAAAAACQAAAG0AAAArAP####8B#wD#ABAAAAEFAAAAABAAAABiAAAACQAAAG0AAAAlAP####8BAAAAABAAAAEFAAAAAG8AAAASAP####8AAAAQAAAAcAAAAAoA#####wEAAAAADwABQgDAAAAAAAAAAEAIAAAAAAAABQAAAABsAAAAcQAAABIA#####wAAAHIAAABwAAAACgD#####AQAAAAAPAAFDAAAAAAAAAAAAQAAAAAAAAAAFAAAAAHAAAABzAAAAEgD#####AAAAcgAAAGwAAAAKAP####8BAAAAAA8AAUEAwBwAAAAAAAA#8AAAAAAAAAUAAAAAbAAAAHUAAAASAP####8AAAByAAAAdgAAAAoA#####wEAAAAADwABRADAMwAAAAAAAMAyAAAAAAAABQAAAAB0AAAAdwAAAAsA#####wAAAAAAEAAAAQEBAAAAcgAAAHQAAAALAP####8AAAAAABAAAAEBAQAAAHQAAAB4AAAACwD#####AAAAAAAQAAABAQEAAAB4AAAAdgAAAAsA#####wAAAAAAEAAAAQEBAAAAdgAAAHIAAAAXAP####8ABWFuZzEzAAAAcgAAAHYAAAB0AAAAFwD#####AAVhbmcxNAAAAHQAAAB2AAAAeAAAABcA#####wAFYW5nMTcAAAB0AAAAcgAAAHgAAAAXAP####8ABWFuZzE4AAAAeAAAAHIAAAB2AAAAFwD#####AAZhbmcxMTEAAAB4AAAAdAAAAHYAAAAXAP####8ABmFuZzExMgAAAHYAAAB0AAAAcgAAABcA#####wAGYW5nMTE1AAAAdgAAAHgAAAByAAAAFwD#####AAZhbmcxMTYAAAByAAAAeAAAAHQAAAAmAP####8BAAAAAAsAAAEBAQAAAHYAAAByAAAAJgD#####AQAAAAANAAABAQEAAAByAAAAdAAAACYA#####wEAAAAADQAAAQEBAAAAdAAAAHgAAAAmAP####8BAAAAAA0AAAEBAQAAAHgAAAB2AAAAKwD#####Af8AAAAQAAJTIgAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAYAAAAAkAAABOAAAAJQD#####AQAAAAAPAAFTAMAiAAAAAAAAwDIAAAAAAAAFAAAAAIkAAAAMAP####8ABWFiczE1AAAAEAAAAGAAAACKAAAAAwD#####AAFoAAVhYnMxNQAAAAkAAACLAAAACwD#####AAAAAAAQAAABAQEAAACKAAAAdgAAAAsA#####wAAAAAAEAAAAQEBAAAAigAAAHIAAAALAP####8AAAAAABAAAAEBAQAAAIoAAAB0AAAACwD#####AAAAAAAQAAABAQEAAACKAAAAeAAAABcA#####wAFYW5nMTIAAACKAAAAdgAAAHIAAAAXAP####8ABWFuZzE1AAAAeAAAAHYAAACKAAAAAwD#####AAlTQVZpc2libGUAHzEvemVybyhhbmcxMithbmcxMythbmcxNCthbmcxNSkAAAAIAwAAAAE#8AAAAAAAAP####8AAAABAA5DQXBwZWxGb25jdGlvbgAAABgAAAAIAAAAAAgAAAAACAAAAAAJAAAAkQAAAAkAAAB9AAAACQAAAH4AAAAJAAAAkgAAAAcA#####wAAAIoAAAAJAAAAkwAAAAoA#####wH#AP8AEAAAAQUAAAAAdgAAAJQAAAALAP####8BAAAAABAAAAEAAgAAAIoAAACVAAAAFwD#####AAVhbmcxNgAAAIoAAAByAAAAdAAAABcA#####wAFYW5nMTkAAAB2AAAAcgAAAIoAAAADAP####8ACVNCVmlzaWJsZQAfMS96ZXJvKGFuZzE2K2FuZzE3K2FuZzE4K2FuZzE5KQAAAAgDAAAAAT#wAAAAAAAAAAAALAAAABgAAAAIAAAAAAgAAAAACAAAAAAJAAAAlwAAAAkAAAB#AAAACQAAAIAAAAAJAAAAmAAAAAcA#####wAAAIoAAAAJAAAAmQAAAAoA#####wH#AP8AEAAAAQUAAAAAcgAAAJoAAAALAP####8BAAAAABAAAAEAAgAAAIoAAACbAAAAFwD#####AAZhbmcxMTAAAACKAAAAdAAAAHgAAAAXAP####8ABmFuZzExMwAAAHIAAAB0AAAAigAAAAMA#####wAJU0NWaXNpYmxlACMxL3plcm8oYW5nMTEwK2FuZzExMSthbmcxMTIrYW5nMTEzKQAAAAgDAAAAAT#wAAAAAAAAAAAALAAAABgAAAAIAAAAAAgAAAAACAAAAAAJAAAAnQAAAAkAAACBAAAACQAAAIIAAAAJAAAAngAAAAcA#####wAAAIoAAAAJAAAAnwAAAAoA#####wH#AP8AEAAAAQUAAAAAdAAAAKAAAAALAP####8BAAAAABAAAAEAAgAAAIoAAAChAAAAFwD#####AAZhbmcxMTQAAACKAAAAeAAAAHYAAAAXAP####8ABmFuZzExNwAAAHQAAAB4AAAAigAAAAMA#####wAJU0RWaXNpYmxlACMxL3plcm8oYW5nMTE0K2FuZzExNSthbmcxMTYrYW5nMTE3KQAAAAgDAAAAAT#wAAAAAAAAAAAALAAAABgAAAAIAAAAAAgAAAAACAAAAAAJAAAAowAAAAkAAACDAAAACQAAAIQAAAAJAAAApAAAAAcA#####wAAAIoAAAAJAAAApQAAAAoA#####wH#AP8AEAAAAQUAAAAAeAAAAKYAAAALAP####8BAAAAABAAAAEAAgAAAIoAAACnAAAAHAD#####AQAAAAANAAJXMQEFAAAAAI8AAACFAAAADAD#####AAVhYnMxMQAAAHYAAAByAAAAqf####8AAAABAA5DVGVzdEV4aXN0ZW5jZQD#####AAZUZXN0QUIAAACqAAAAAwD#####AAlBQlZpc2libGUADDEvKDEtVGVzdEFCKQAAAAgDAAAAAT#wAAAAAAAAAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAqwAAAAcA#####wAAAIoAAAAJAAAArAAAAAoA#####wH#AAAAEAAAAQUAAAAAdgAAAK0AAAALAP####8BAAAAABAAAAEAAgAAAK4AAAByAAAAHAD#####AQAAAAANAAJXMgEFAAAAAJAAAACGAAAADAD#####AAVhYnMxMgAAAHIAAAB0AAAAsAAAAC0A#####wAGdGVzdEJDAAAAsQAAAAMA#####wAJQkNWaXNpYmxlAAwxLygxLXRlc3RCQykAAAAIAwAAAAE#8AAAAAAAAAAAAAgBAAAAAT#wAAAAAAAAAAAACQAAALIAAAAHAP####8AAACKAAAACQAAALMAAAAKAP####8B#wD#ABAAAAEFAAAAAHIAAAC0AAAACwD#####AQAAAAAQAAABAAIAAAC1AAAAdAAAABwA#####wEAAAAADQACVzMBBQAAAACHAAAAjQAAAAwA#####wAFYWJzMTMAAAB0AAAAeAAAALcAAAAtAP####8ABlRlc3RDRAAAALgAAAADAP####8ACUNEVmlzaWJsZQAMMS8oMS1UZXN0Q0QpAAAACAMAAAABP#AAAAAAAAAAAAAIAQAAAAE#8AAAAAAAAAAAAAkAAAC5AAAABwD#####AAAAigAAAAkAAAC6AAAACgD#####Af8A#wAQAAABBQAAAAB0AAAAuwAAAAsA#####wEAAAAAEAAAAQACAAAAvAAAAHgAAAAcAP####8BAAAAAA0AAlc0AQUAAAAAjgAAAIgAAAAMAP####8ABWFiczE0AAAAeAAAAHYAAAC+AAAALQD#####AAZUZXN0REEAAAC#AAAAAwD#####AAlEQVZpc2libGUADDEvKDEtVGVzdERBKQAAAAgDAAAAAT#wAAAAAAAAAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAwAAAAAcA#####wAAAIoAAAAJAAAAwQAAAAoA#####wH#AP8AEAAAAQUAAAAAeAAAAMIAAAALAP####8BAAAAABAAAAEAAgAAAMMAAAB2#####wAAAAEADkNPYmpldER1cGxpcXVlAP####8AAAAAAAAArwAAAC4A#####wAAAAAAAAC2AAAALgD#####AAAAAAAAAJYAAAAuAP####8AAAAAAAAAnAAAAC4A#####wAAAAAAAACiAAAALgD#####AAAAAAAAAL0AAAAuAP####8AAAAAAAAAxAAAAC4A#####wAAAAAAAACoAAAAKwD#####AAAAAAEQAAJPJwBACAAAAAAAAEAAAAAAAAAABQAAAAAQAAAAYAAAAAkAAABQAAAACwD#####Af8AAAAQAAABAAEAAACJAAAAawAAAAcA#####wAAAIkAAAAJAAAAkwAAAAcA#####wAAAIkAAAAJAAAArAAAAAcA#####wAAAIkAAAAJAAAAswAAAAcA#####wAAAIkAAAAJAAAAugAAAAcA#####wAAAIkAAAAJAAAAwQAAAAsA#####wAAAAAAEAAAAQEBAAAAEAAAAHT#####AAAAAQAQQ0Ryb2l0ZVBhcmFsbGVsZQD#####Af8AAAAQAAABAQEAAADNAAAA1AAAAAsA#####wH#AAAAEAAAAQEBAAAAEAAAAHIAAAAvAP####8B#wAAABAAAAEBAQAAAM0AAADWAAAABwD#####AAAAiQAAAAkAAACZAAAABwD#####AAAAiQAAAAkAAACfAAAABwD#####AAAAiQAAAAkAAACl#####wAAAAEACUNQb2x5Z29uZQD#####ANjY2AEBAAAABQAAAHYAAAByAAAAdAAAAHgAAAB2#####wAAAAEAEENTdXJmYWNlUG9seWdvbmUA#####wB#f38AAAAFAAAA2wAAAAcA#####wAAABAAAAABP#B64UeuFHsAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACKAAAA3QAAACMA#####wAAAAAAwDQAAAAAAADAJgAAAAAAAAAAAN4QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAADI0dTAAAAFAD#####AAAA1AAAAFMAAAAVAP####8BAAAAABAAAUYAAAAAAAAAAABACAAAAAAAAAUAAQAAAOAAAAAVAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAA4AAAACsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABAAAADhAAAAAT#gAAAAAAAAAAAABwD#####AAAAEAAAAAgDAAAAEAQAAAAJAAAAMQAAAAFAAAAAAAAAAAAAAAsA#####wAAAAAAEAAAAQEBAAAAEAAAAOMAAAASAP####8AAAAQAAAA4wAAAAoA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM0AAADmAAAACwD#####AAAAAAAQAAABAQEAAADNAAAA5wAAAAsA#####wAAAAAAEAAAAQEBAAAAeAAAAHIAAAALAP####8AAAAAABAAAAEBAQAAAHYAAAB0AAAAFAD#####AAAAZQAAAFMAAAAVAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAA6wAAABUA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAADrAAAABwD#####AAAAEAAAAAgDAAAAEAAAAAAQBAAAAAkAAAAxAAAAAUAAAAAAAAAAAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA7AAAAO4AAAASAP####8AAAAQAAAA7wAAAAoA#####wEAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAAAAOMAAADwAAAACwD#####AAAAAAAQAAABAQEAAADvAAAAEAAAAAsA#####wAAAAAAEAAAAQEBAAAA4wAAAPEAAAALAP####8AAAAAABAAAAEBAQAAAPEAAADvAAAAMAD#####AAAAAAEBAAAABQAAAO8AAAAQAAAA4wAAAPEAAADvAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAzQAAAPAAAAASAP####8AAADNAAAA9gAAAAoA#####wEAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAAAAOcAAAD3AAAACwD#####AAAAAAAQAAABAQEAAAD2AAAAzQAAAAsA#####wAAAAAAEAAAAQEBAAAA5wAAAPgAAAALAP####8AAAAAABAAAAEBAQAAAPgAAAD2AAAAMAD#####AAAAAAEBAAAABQAAAPYAAADNAAAA5wAAAPgAAAD2AAAABwD#####AAAAiQAAAAgDAAAACQAAAE8AAAAJAAAATgAAAAoA#####wEAAAAAEAACQycAQCQAAAAAAADAMAAAAAAAAAUAAAAAdAAAAP0AAAAHAP####8AAACJAAAACAMAAAAJAAAATwAAAAkAAABOAAAACgD#####AQAAAAAQAAJCJwBAJAAAAAAAAMAAAAAAAAAABQAAAAByAAAA#wAAAAoA#####wEAAAAAEAACQScAwDgAAAAAAAC#8AAAAAAAAAUAAAAAdgAAAP8AAAAKAP####8BAAAAABAAAkQnAMA6AAAAAAAAwCYAAAAAAAAFAAAAAHgAAAD#AAAAMAD#####AAAAAAEBAAAABQAAAQEAAAEAAAAA#gAAAQIAAAEBAAAAMQD#####AP8AAAAAAAUAAAEDAAAACwD#####AP8AAAAQAAABAQEAAAEBAAAA#gAAAAsA#####wD#AAAAEAAAAQEBAAABAgAAAQAAAAAKAP####8B#wAAABAAAkEyAAAAAAAAAAAAQAgAAAAAAAAFAAAAAQEAAADQAAAACgD#####Af8AAAAQAAJCMgAAAAAAAAAAAEAIAAAAAAAABQAAAAEAAAAA0AAAAAsA#####wD#AAAAEAAAAQACAAABBwAAAQgAAAAKAP####8B#wAAABAAAkIzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAQAAAADRAAAACgD#####Af8AAAAQAAJDMwAAAAAAAAAAAEAIAAAAAAAABQAAAAD+AAAA0QAAAAsA#####wD#AAAAEAAAAQACAAABCgAAAQsAAAAKAP####8B#wAAABAAAkM0AAAAAAAAAAAAQAgAAAAAAAAFAAAAAP4AAADSAAAACgD#####Af8AAAAQAAJENAAAAAAAAAAAAEAIAAAAAAAABQAAAAECAAAA0gAAAAsA#####wD#AAAAEAAAAQACAAABDQAAAQ4AAAAKAP####8B#wAAABAAAkQzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAQIAAADTAAAACgD#####Af8AAAAQAAJBMwAAAAAAAAAAAEAIAAAAAAAABQAAAAEBAAAA0wAAAAsA#####wD#AAAAEAAAAQACAAABEAAAAREAAAArAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAdgAAAAE#8ZmZmZmZmgAAACsA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABAAAAB0AAAAAT#xmZmZmZmaAAAAKwD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEAAAAHIAAAABP#GZmZmZmZoAAAArAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAeAAAAAE#8ZmZmZmZmgAAACMA#####wAAAAAAwBgAAAAAAADAIgAAAAAAAAAAARMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABQQAAACMA#####wAAAAAAwBgAAAAAAADAHAAAAAAAAAAAARUQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABQgAAACMA#####wAAAAAAwBwAAAAAAADAIAAAAAAAAAAAARQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABQwAAACMA#####wAAAAAAwBgAAAAAAADAJAAAAAAAAAAAARYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABRAAAACsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM0AAAEBAAAAAT#0zMzMzMzNAAAAKwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAzQAAAQAAAAABP#TMzMzMzM0AAAArAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADNAAABAgAAAAE#9MzMzMzMzQAAACsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM0AAAD+AAAAAT#0zMzMzMzNAAAAIwD#####AAAAAADAFAAAAAAAAMAmAAAAAAAAAAABGxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAJBJwAAACMA#####wAAAAAAwAgAAAAAAADAIAAAAAAAAAAAARwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAACQicAAAAjAP####8AAAAAAMAYAAAAAAAAwCAAAAAAAAAAAAEeEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAkMnAAAAIwD#####AAAAAADAHAAAAAAAAMAiAAAAAAAAAAABHRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAJEJwAAACsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAIkAAADNAAAAAT#zMzMzMzMzAAAADgD#####AAAAzQAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAOcAAAEkAAAAEgD#####AAAAzQAAASMAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAElAAABJgAAACMA#####wAAAAAAwAgAAAAAAADAKgAAAAAAAAAAAScQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAEI0dPJwAAAA4A#####wAAABAAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADjAAABKQAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAASoAAAEmAAAAIwD#####AAAAAADAEAAAAAAAAMAxAAAAAAAAAAABKxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAMjR0######AAAAAQAHQ01pbGlldQD#####AQAAAAAPAAFHAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHQAAAByAAAAKwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEAAAAS0AAAABP#MzMzMzMzMAAAANAP####8AAAAAAQAAAS4SAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAADwAAADIA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAM0AAACJAAAAMgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEAAAAM0AAAANAP####8AAAAAAMAqAAAAAAAAwCIAAAAAAAAAAAExEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAFAAAAANAP####8AAAAAAMAmAAAAAAAAwBgAAAAAAAAAAAEwEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAE8AAAALAP####8AAAAAABAAAAEBAQAAABAAAACKAAAAUf##########"
					if (!sortie_html) texte = `\\begin{minipage}{0.65 \\linewidth} \n\t`
					else texte=``
					texte += `SABCD est une pyramide Ã  base carrÃ©e de hauteur SO${sp()}=${sp()}${tex_nombre(h1)}${sp()}cm et de cÃ´tÃ© de base ${tex_nombre(c)}${sp()}cm.<br>`
					texte += ` Le point O' est situÃ© sur la hauteur [SO] Ã  ${h2}${sp()}cm de S.`
					texte += `<br>Un plan parallÃ¨le Ã  la face ABCD passant par O' coupe la pyramide en formant la section A'B'C'D'.<br>`
					if (!sortie_html) texte +=`La figure n'est pas en vraie grandeur.<br>`
					texte += num_alpha(0) + ` Calculer l'` + katex_Popup2(numero_de_l_exercice + i * 4, 1, "aire de base de la pyramide", `Formule : Aire d'un carrÃ© de cÃ´tÃ© c`, `$Aire=\\text{c}$${exposant(2)}`) + `.<br>`
					texte += num_alpha(1) + ` Calculer le ` + katex_Popup2(numero_de_l_exercice + i * 4 + 1, 1, "volume de la pyramide", `Formule : volume d'une pyramide d'aire de base $B$ et de hauteur h`, `$Volume= \\dfrac{B \\times \\text{h}}{3}$`) + ` SABCD.<br>`
					texte += num_alpha(2) + ` En dÃ©duire l'aire de la ` + katex_Popup2(numero_de_l_exercice + i * 4 + 2, 1, "section", `DÃ©finition : section plane d'un solide`, `La section d'un solide par un plan est une figure plane.<br>Dans le cas d'une section d'une pyramide par un plan parallÃ¨le Ã  sa base, cette section est un polygone qui est une rÃ©duction de la base.<br>Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©es par k${exposant(2)} et les volumes sont multipliÃ©s par k${exposant(3)}.`) + ` A'B'C'D' sachant que SO'${sp()}=${sp()}${h2}${sp()}cm.<br>`
					texte += num_alpha(3) + ` Calculer le volume de la pyramide SA'B'C'D'.<br>`
					texte += num_alpha(4) + ` Calculer le volume du tronc de la pyramide (partie de la pyramide situÃ©e entre la base et la section).`
					if (sortie_html) texte += `<br>Le point O peut Ãªtre dÃ©placÃ© et on peut changer l'angle de vue &#x3C6; `
					else texte+=`\n\t \\end{minipage} \n\t \\begin{minipage}{0.35 \\linewidth} \n\t \\begin{tikzpicture}[scale=0.8] \n\t
					\\definecolor{hhhhhh}{rgb}{0,0,0}
					\\definecolor{phphph}{rgb}{0.5,0.5,0.5}
					\\definecolor{dpdpdp}{rgb}{0.85,0.85,0.85}
					\\definecolor{ofofof}{rgb}{0.5,0.5,0.5}
					\\definecolor{ffhhhh}{rgb}{1,0,0}
					\\clip (9.38,0) rectangle (0,14.47);
					\\fill[color=black] (4.578,2.328) circle (0.063);
					\\draw [color=black , dotted, line width = 0.4](6.773,0.916)--(8.236,3.174);
					\\draw [color=black , dotted, line width = 0.4](8.236,3.174)--(2.384,3.739);
					\\draw [color=black , dotted, line width = 0.4](2.384,3.739)--(0.921,1.481);
					\\draw [color=black , dotted, line width = 0.4](0.921,1.481)--(6.773,0.916);
					\\draw [color=black , dotted, line width = 0.4](4.578,13.458)--(0.921,1.481);
					\\draw [color=black , dotted, line width = 0.4](4.578,13.458)--(6.773,0.916);
					\\draw [color=black , dotted, line width = 0.4](4.578,13.458)--(8.236,3.174);
					\\draw [color=black , dotted, line width = 0.4](4.578,13.458)--(2.384,3.739);
					\\draw [color=black , line width = 0.8](0.921,1.481)--(6.773,0.916);
					\\draw [color=black , line width = 0.8](6.773,0.916)--(8.236,3.174);
					\\draw [color=black , line width = 0.8](4.578,13.458)--(0.921,1.481);
					\\draw [color=black , line width = 0.8](4.578,13.458)--(6.773,0.916);
					\\draw [color=black , line width = 0.8](4.578,13.458)--(8.236,3.174);
					\\fill[color=black] (4.578,6.501) circle (0.063);
					\\draw [color=black , dotted, line width = 0.4](4.578,2.328)--(8.236,3.174);
					\\draw [color=dpdpdp , dotted, line width = 0.4](0.921,1.481)--(6.773,0.916)--(8.236,3.174)--(2.384,3.739)--(0.921,1.481)--cycle;
					\\fill [color = ofofof, opacity = 0.2](0.921,1.481)--(6.773,0.916)--(8.236,3.174)--(2.384,3.739)--(0.921,1.481)--cycle;
					\\node at (3.891, 14.198) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {\\textbf{S}};
					\\draw [color=black , dotted, line width = 0.4](4.578,2.328)--(5.065,2.44);
					\\fill[color=black] (5.065,6.614) circle (0.063);
					\\draw [color=black , dotted, line width = 0.4](4.578,6.501)--(5.065,6.614);
					\\draw [color=black , dotted, line width = 0.4](2.384,3.739)--(6.773,0.916);
					\\draw [color=black , dotted, line width = 0.4](0.921,1.481)--(8.236,3.174);
					\\draw [color=black , dotted, line width = 0.4](4.578,2.789)--(4.578,2.328);
					\\draw [color=black , dotted, line width = 0.4](5.065,2.44)--(5.065,2.902);
					\\draw [color=black , dotted, line width = 0.4](5.065,2.902)--(4.578,2.789);
					\\draw [color=black , dotted, line width = 0.4](4.578,2.789)--(4.578,2.328)--(5.065,2.44)--(5.065,2.902)--(4.578,2.789)--cycle;
					\\draw [color=black , dotted, line width = 0.4](4.578,6.963)--(4.578,6.501);
					\\draw [color=black , dotted, line width = 0.4](5.065,6.614)--(5.065,7.075);
					\\draw [color=black , dotted, line width = 0.4](5.065,7.075)--(4.578,6.963);
					\\draw [color=black , dotted, line width = 0.4](4.578,6.963)--(4.578,6.501)--(5.065,6.614)--(5.065,7.075)--(4.578,6.963)--cycle;
					\\draw [color=black , dotted, line width = 0.4](2.292,5.972)--(5.95,5.619)--(6.864,7.031)--(3.207,7.383)--(2.292,5.972)--cycle;
					\\fill [color = ffhhhh, opacity = 0.2](2.292,5.972)--(5.95,5.619)--(6.864,7.031)--(3.207,7.383)--(2.292,5.972)--cycle;
					\\draw [color=ffhhhh , dotted, line width = 0.4](2.292,5.972)--(6.864,7.031);
					\\draw [color=ffhhhh , dotted, line width = 0.4](3.207,7.383)--(5.95,5.619);
					\\draw [color=ffhhhh , line width = 0.8](2.292,5.972)--(5.95,5.619);
					\\draw [color=ffhhhh , line width = 0.8](5.95,5.619)--(6.864,7.031);
					\\node at (0.305, 1.74) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {A};
					\\node at (6.742, 1.057) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {B};
					\\node at (8.32, 3.571) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {C};
					\\node at (1.914, 4.255) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {D};
					\\node at (1.544, 6.407) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {A'};
					\\node at (6.205, 5.667) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {B'};
					\\node at (7.112, 7.564) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {C'};
					\\node at (2.201, 7.992) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {D'};
					\\node at (3.935, 5.466) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {\\textbf{O'}};
					\\node at (4.247, 2.292) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {\\textbf{O}};
					\\draw [color=black , dotted, line width = 0.4](4.578,2.328)--(4.578,13.458);
					\\end{tikzpicture} \n\t \\end{minipage}`
					texte_corr = num_alpha(0) + ` L'aire de base de la pyramide est : $${tex_nombre(c)}^2$ cm${exposant(2)} $= ${tex_nombrec(c * c)}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(1) + ` Le volume de la pyramide est : $\\dfrac{A_\\text{base} \\times \\text{hauteur}}{3}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(c * c)}\\times ${tex_nombre(h1)}}{3}$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(c * c * h1 / 3))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(2) + ` La section est une rÃ©duction de la base de coefficient $\\dfrac{${h2}}{${tex_nombre(h1)}}`
					if (!Number.isInteger(h1) || pgcd(h2, h1) > 1) texte_corr += `=${tex_fraction_reduite(h2 * 10, h1 * 10)}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += `Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©s par k${exposant(2)}.<br>`
					texte_corr += `Donc son aire est $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^2 \\times ${tex_nombre(c * c)}$ cm${exposant(2)} $=${tex_fraction_reduite(arrondi(h2 * h2 * 100 * c * c), arrondi(h1 * h1 * 100))}$ cm${exposant(2)} $\\approx ${tex_nombrec(arrondi(h2 * h2 * c * c / h1 / h1, 2))}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(3) + ` Dans une rÃ©duction de coefficient k, les volumes sont multipliÃ©s par k ${exposant(3)}.<br>`
					texte_corr += `Donc le volume de la pyramide SA'B'C'D' est : $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3 \\times \\dfrac{${tex_nombrec(c * c * h1)}}{3}$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(h2 ** 3 * c * c / h1 ** 2 / 3))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(4) + ` Le volume du tronc de la pyramide est : `
					texte_corr += `$V_\\text{SABCD} - V_\\text{SA'B'C'D'}$<br>Soit : <br>$${tex_nombrec(arrondi(c * c * h1 / 3))}$ cm${exposant(3)}$ - ${tex_nombrec(arrondi(h2 ** 3 * c * c / h1 ** 2 / 3))}$ cm${exposant(3)}$ \\approx ${tex_nombrec(arrondi(c * c * h1 / 3 - h2 ** 3 * c * c / h1 ** 2 / 3, 2))}$ cm${exposant(3)}.<br>`
					texte_corr += `Ce qui reprÃ©sente $${tex_fraction_reduite((h1 ** 3 - h2 ** 3) * 1000, (h1 ** 3) * 1000)}$ du volume de SABCD.`

					this.MG32codeBase64 = codeBase64
					this.MG32code_pour_modifier_la_figure = `
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");
							mtg32App.calculate("MG32svg${numero_de_l_exercice}");
							mtg32App.display("MG32svg${numero_de_l_exercice}");
							`
					break;
				case 2: // calcul de l'aire de base, du volume d'un cÃ´ne. puis, calcul de la section, du volume du cÃ´ne rÃ©duit et du volume du tronc
					r = calcul(randint(12, 35) / 10)
					h1 = calcul(randint(12, 20) / 2)
					h2 = randint(3, Math.floor(h1) - 1)
					if (this.sup2<3)
					if (this.sup2==1) // coefficient de rÃ©duction dÃ©cimal
						while (calcul(h2/h1)!=arrondi(h2/h1,1)) {
							r = calcul(randint(12, 35) / 10)
							h1 = calcul(randint(12, 20) / 2)
							h2 = randint(3, Math.floor(h1) - 1)
						}
					else //coefficient de rÃ©duction rationnel
						while (calcul(h2/h1)==arrondi(h2/h1,1)) {
							r = calcul(randint(12, 35) / 10)
							h1 = calcul(randint(12, 20) / 2)
							h2 = randint(3, Math.floor(h1) - 1)
						}	
					codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAANmcmH###8BAP8BAAAAAAAAAAAFHAAAAtIAAAAAAAAAAAAAAAAAAAET#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEAD0NWYXJpYWJsZUJvcm5lZQD#####AANhbmc#6SH7VEQtGAAAAAAAAAAAQBkh+1RELRg#qZmZmZmZmgAAATAABDIqcGkABDAuMDX#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAUB#eAAAAAAAQHqoUeuFHrj#####AAAAAQAHQ0NhbGN1bAD#####AAVtaW5pMQADMC4yAAAAAT#JmZmZmZmaAAAABAD#####AAVtYXhpMQABMgAAAAFAAAAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AAdDdXJzZXVyAAAABQAAAAUAAAADAAAAAwAAAAQAAAAC#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAAAAAAUBAAAAABAAAAEAAQAAAAIBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAQAAAAUBAAAAABAAAADACAAAAAAAAD#wAAAAAAAABQABQEuAAAAAAAAAAAAG#####wAAAAEAC0NIb21vdGhldGllAAAAAAUAAAAC#####wAAAAEACkNPcGVyYXRpb24D#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAMAAAAJAQAAAAoAAAADAAAACgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UAAAAABQEAAAAADQACTzEAwBAAAAAAAABAEAAAAAAAAAUAAAAABwAAAAgAAAAIAAAAAAUAAAACAAAACQMAAAAJAQAAAAE#8AAAAAAAAAAAAAoAAAADAAAACQEAAAAKAAAABAAAAAoAAAADAAAACwAAAAAFAQAAAAANAAJJNQDAAAAAAAAAAEAIAAAAAAAABQAAAAAHAAAACv####8AAAABAAhDU2VnbWVudAEAAAAFAQAAAAAQAAABAQEAAAACAAAABwAAAAcBAAAABQEAAAABEAACazEAwAAAAAAAAABAAAAAAAAAAAEAAT#ZmZmZmZmaAAAADP####8AAAACAA9DTWVzdXJlQWJzY2lzc2UBAAAABQAEem9vbQAAAAkAAAALAAAADf####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAABQEAAAAAAAAAAAAAAADAGAAAAAAAAAAAAA0PAAH###8AAAABAAAAAgAAAAEAAAAAAAAAAAAAAAACAAAADgAAAAMA#####wH#AAAAEAABWgAAAAAAAAAAAEAIAAAAAAAABQABQHmoAAAAAABAd2hR64UeuAAAAAgA#####wAAABAAAAAKAAAADgAAAAYA#####wH#AAABEAAAAQEBAAAAEAA#8AAAAAAAAAAAAAcA#####wH#AAAAEAABTQAAAAAAAAAAAEAIAAAAAAAABQABwEgAAAAAAAAAAAASAAAACwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEwAAABEAAAADAP####8BAAAAAQ8AAk8yAQUAAUCA3AAAAAAAQICEKPXCj1wAAAAGAP####8BAAAAARAAAAEAAQAAABUAP#AAAAAAAAAAAAAHAP####8BAAAAAQ8AAkoyAQUAAMBAAAAAAAAAAAAAFv####8AAAABAAlDTG9uZ3VldXIA#####wAAABUAAAAXAAAAAwD#####AAAAAAAPAAFPAMAyAAAAAAAAwCgAAAAAAAAFAAFAYnAAAAAAAEB4mFHrhR64AAAABgD#####AQAAAAAQAAABAAEAAAAZAUAD6BRQ79ycAAAABwD#####Af8AAAAQAAJJIgAAAAAAAAAAAEAIAAAAAAAABQABQDF7TwMpFiAAAAAaAAAABAD#####AAJoMQACMTAAAAABQCQAAAAAAAAAAAAEAP####8AAmgyAAE0AAAAAUAQAAAAAAAAAAAABAD#####AAFyAAMzLjUAAAABQAwAAAAAAAD#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAABUAAAADAP####8BAAAAAQ8AAk8zAQUAAUCSQgAAAAAAQHe4UeuFHrcAAAAGAP####8BAAAAABAAAAEAAQAAACABQAPoFFDv3JwAAAADAP####8BAAAAAQsAAk80AQUAAUCSVgAAAAAAQH5YUeuFHrgAAAAGAP####8BAAAAABAAAAEAAQAAACIBQAPoFFDv3JwAAAAQAP####8AAAAZAAAACwD#####AQB#AAALAAJXNADANQAAAAAAAMAUAAAAAAAABQAAAAAXAAAAH#####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAABUAAAAXAAAACwD#####AQAAAAALAAJXNwBAAAAAAAAAAAAAAAAAAAAABQAAAAAgAAAAJv####8AAAABAAlDQ2VyY2xlT0EA#####wF#f38BAQAAACAAAAAn#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAACEAAAAo#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAADQACSTMBBQABAAAAKf####8AAAABAA9DUG9pbnRMaWVDZXJjbGUA#####wEAAAABCwACSzMBAQABQBX9VSbZZwcAAAAo#####wAAAAIAE0NNZXN1cmVBbmdsZU9yaWVudGUA#####wAIYW5ndGhldGEAAAAqAAAAIAAAACsAAAAEAP####8ABXRoZXRhAAhhbmd0aGV0YQAAAAoAAAAsAAAABAD#####AAN4JzEACnNpbih0aGV0YSn#####AAAAAgAJQ0ZvbmN0aW9uAwAAAAoAAAAtAAAABAD#####AAN4JzIACmNvcyh0aGV0YSkAAAAXBAAAAAoAAAAtAAAAFQD#####AQAAAAALAAJXMQDAAAAAAAAAAEAAAAAAAAAABQABQBNc46k8Cu8AAAAoAAAAFgD#####AAVhbmdsZQAAACoAAAAgAAAAMP####8AAAABABJDQXJjRGVDZXJjbGVEaXJlY3QA#####wF#f38BAQAAABUAAAAXAAAAJQAAABUA#####wEAAAABCwACSzIBAQABP8B#LK14eQYAAAAyAAAAFgD#####AAZhbmdwaGkAAAAXAAAAFQAAADMAAAAEAP####8AA3BoaQAGYW5ncGhpAAAACgAAADQAAAAEAP####8AA3knMQAULWNvcyh0aGV0YSkqc2luKHBoaSkAAAAJAQAAAAEAAAAAAAAAAAAAAAkCAAAAFwQAAAAKAAAALQAAABcDAAAACgAAADUAAAAEAP####8AA3knMgATc2luKHRoZXRhKSpzaW4ocGhpKQAAAAkCAAAAFwMAAAAKAAAALQAAABcDAAAACgAAADX#####AAAAAQAXQ01lc3VyZUFuZ2xlR2VvbWV0cmlxdWUA#####wAAABcAAAAVAAAAJQAAAAQA#####wAEcGxhdAAGSjJPMlc0AAAACgAAADgAAAAEAP####8ABWRyb2l0AAZwbGF0LzIAAAAJAwAAAAoAAAA5AAAAAUAAAAAAAAAAAAAADAD#####AQAAAAAQAAABAAEAAAAVAAAAFwAAAAwA#####wEAAAAAEAAAAQABAAAAIAAAACoAAAAMAP####8BAAAAABAAAAEAAQAAACAAAAAr#####wAAAAIAE0NNYXJxdWVBbmdsZU9yaWVudGUA#####wF#AAAAAgAAAABAOLK7zEtlnQAAACoAAAAgAAAAKwH#####AAAAAQAMQ0Jpc3NlY3RyaWNlAP####8BfwAAABAAAAEBAQAAACoAAAAgAAAAKwAAAAcA#####wF#AAAAEAAAAQUAAUB5tgoLjWTlAAAAP#####8AAAACAAZDTGF0ZXgA#####wF#AAAAwBQAAAAAAADAJgAAAAAAAAAAAEARAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAKXHZhcnRoZXRhIAAAAAwA#####wEAAAAAEAAAAQABAAAAFQAAADMAAAAIAP####8AAAAiAAAAFwQAAAAKAAAANQAAABoA#####wEAAP8AAgAAAABAN1LlDbOjogAAABcAAAAVAAAAMwEAAAAbAP####8BAAD#ABAAAAEBAQAAABcAAAAVAAAAMwAAAAcA#####wEAAP8AEAAAAQUAAUB3uGBZxKE1AAAARQAAABwA#####wEAAP8AAAAAAAAAAADAFAAAAAAAAAAAAEYRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAHXHZhcnBoaQAAAAQA#####wABawAIc2luKHBoaSkAAAAXAwAAAAoAAAA1AAAABAD#####AAp0ZXN0UGhpTnVsACcxLygocGhpPTApKyhhYnMocGhpLXBsYXQpPDAuMDAwMDAwMDAxKSkAAAAJAwAAAAE#8AAAAAAAAAAAAAkAAAAACQgAAAAKAAAANQAAAAEAAAAAAAAAAAAAAAkEAAAAFwAAAAAJAQAAAAoAAAA1AAAACgAAADkAAAABPhEuC+gm1pUAAAAIAP####8AAAAZAAAACgAAAEkAAAAGAP####8BAAAAARAAAAEAAQAAACIAP#AAAAAAAAAAAAAHAP####8BAAAAAQsAAko0AQUAAcBLgAAAAAAAAAAASwAAABIA#####wFmZmYAAQAAACIAAABMAAAAFQD#####AQAAAAAQAAABBQABP#CX6bp5AmEAAABNAAAABgD#####AQAAAAAQAAABAAEAAABOAEAD6BRQ79yc#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wEAAAAAEAAAAQUAAAAAIwAAAE8AAAATAP####8AAAAjAAAATQAAABQA#####wEAAAAADQACSTQBBQABAAAAUf####8AAAACAAdDUmVwZXJlAP####8AAAAAAQEAAAAiAAAAUgAAAEwAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAALAP####8BAAAAABAAAAEFAAAAAEwAAABDAAAACAD#####AAAAUAAAABcEAAAACgAAADUAAAALAP####8BAAAAABAAAAEFAAAAAE4AAABV#####wAAAAIADUNMaWV1RGVQb2ludHMA#####wEAf38BAQAAAFYAAABkAAAAAABOAAAABQAAAE4AAABPAAAAUAAAAFUAAABW#####wAAAAEACENWZWN0ZXVyAP####8BAAD#ABAAAAEAAQAAACIAAABUAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABAAAAEFAAAAAFMAAAAKAAAALgAAAAoAAAA2AAAAIQD#####AQAAAAAQAAABBQAAAABTAAAACgAAAC8AAAAKAAAANwAAACAA#####wH#AAAAEAAAAQABAAAAIgAAAFkAAAAAIAD#####AQB#AAAQAAABAAEAAAAiAAAAWgAAAAAfAP####8BZmZmAQEAAABZAAAAZAAAAAAAKwAAAAYAAAArAAAALAAAAC0AAAAuAAAANgAAAFn#####AAAAAQAMQ1N1cmZhY2VMaWV1AP####8Bf39#AAAABQAAAF0AAAAiAP####8Bf39#AAAABQAAAFcAAAASAP####8B#wAAAQEAAAAZAAAAG#####8AAAABAA1DRGVtaURyb2l0ZU9BAP####8B#wAAAA0AAAEBAQAAABAAAAAT#####wAAAAEADkNQb2ludExpZVBvaW50AP####8B#wAAABAAAVUAQCAAAAAAAADAKgAAAAAAAAUAAAAAFAAAAA0A#####wABdQAAABAAAAATAAAAYv####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####Af8AAAAQAAJJMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAAGwAAAAoAAABjAAAAJAD#####AQAAAAALAAJJMQDAEAAAAAAAAEAQAAAAAAAABQAAAABk#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAANAAABAAEAAAAZAAAAZf####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAABkAAABmAAAAEgD#####AQAAAAABAAAAGQAAAGUAAAATAP####8AAABnAAAAaAAAABQA#####wEAAAAACwACSjEAwCgAAAAAAADAEAAAAAAAAAUAAgAAAGkAAAAeAP####8AgICAAQEAAAAZAAAAZQAAAGoAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAAhAP####8BAAAAAA8AAUkAP#AAAAAAAABAEAAAAAAAAAUAAAAAawAAAAoAAAAuAAAACgAAADYAAAAhAP####8BAAAAAA8AAUoBBQAAAABrAAAACgAAAC8AAAAKAAAANwAAACMA#####wEAAAAADQAAAQEBAAAAGQAAAGwAAAAhAP####8BAAAAAA8AAUsAQBAAAAAAAADALgAAAAAAAAUAAAAAawAAAAEAAAAAAAAAAAAAABcEAAAACgAAADUAAAAjAP####8BAAAAAA0AAAEBAQAAABkAAABvAAAAIwD#####AQAAAAANAAABAQEAAAAZAAAAbQAAACAA#####wH#AAAAEAAAAQABAAAAGQAAAGwAAAAAIAD#####AQB#AAAQAAABAAEAAAAZAAAAbQAAAAAgAP####8BAAD#ABAAAAEAAQAAABkAAABvAP####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAAHD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wEAAP8B#####w1AfcAAAAAAAECCQAAAAAAAAgHMzP8AAAAAAAAAAAAAAAEAAAAAAAAAAAATKE8sSSxKLEspIGludmlzaWJsZQAAAAAACQAAAHEAAABuAAAAcAAAAHIAAABzAAAAdAAAAG0AAABsAAAAb#####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8BAAD#Af####8NQH5wAAAAAABAgxgAAAAAAAIBzMz#AAAAAAAAAAAAAAABAAAAAAAAAAAAEShPLEksSixLKSB2aXNpYmxlAAAAAAAJAAAAcQAAAG4AAABwAAAAcgAAAHMAAAB0AAAAbQAAAGwAAABvAAAAAB4A#####wCAgIABAQAAABkAAABsAAAAbQAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAACEA#####wHY2NgAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGsAAAAKAAAAHgAAAAEAAAAAAAAAAAAAACEA#####wEAAAAAEAABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAACgAAAB4AAAABAAAAAAAAAAAAAAAkAP####8BAAAAAA8AAUEBBQAAAAB6AAAADQD#####AARhYnMxAAAAGQAAAGwAAAB7AAAABAD#####AANSYXkABGFiczEAAAAKAAAAfAAAACUA#####wEAAAAAEAAAAQUAAAAAGQAAAGwAAAAJAgAAAAoAAAB9AAAAFwQAAAAKAAAAMQAAACUA#####wEAAAAAEAAAAQUAAAAAGQAAAG0AAAAJAgAAAAoAAAB9AAAAFwMAAAAKAAAAMQAAABEA#####wAAABkAAAB+AAAACwD#####AQAAAAAQAAABBQAAAAB#AAAAgAAAAB8A#####wB#f38BAQAAAIEAAAB4AQAAAAAwAAAABgAAADAAAAAxAAAAfgAAAH8AAACAAAAAgQAAACIA#####wD##wAAAAAFAAAAggAAACEA#####wEAAAAAEAAAAQUAAAAAawAAAAEAAAAAAAAAAAAAAAkBAAAAAQAAAAAAAAAAAAAACgAAAH0AAAASAP####8BAAAAAQEAAAAZAAAAhAAAABMA#####wAAAHEAAACFAAAAFAD#####AQAAAAAQAAABBQABAAAAhgAAAAsA#####wH#AP8AEAAAAQUAAAAAhwAAAEoAAAALAP####8B#wD#ABAAAAEFAAAAAIgAAAAkAAAADAD#####AQAAAAAQAAABAAIAAACIAAAAiQAAAAcA#####wEAAAAAEAAAAQUAAT+0tjyl3q+#AAAAiv####8AAAABAA5DT2JqZXREdXBsaXF1ZQD#####AAAAAAAAAIoAAAANAP####8AAWEAAAAZAAAAbAAAAHsAAAAhAP####8BZmZmABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAACQIAAAAKAAAAjQAAABcEAAAACgAAAAEAAAAJAgAAAAoAAACNAAAAFwMAAAAKAAAAAQAAAB4A#####wDm5uYAAQAAABkAAABsAAAAbwAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAACEA#####wEAAAAAEAACUyIAwDkAAAAAAADALgAAAAAAAAUAAAAAjwAAAAEAAAAAAAAAAAAAAAoAAAAcAAAAJAD#####AQAAAAAPAAFTAMBEgAAAAAAAwCIAAAAAAAAFAAAAAJAAAAANAP####8ABWFiczExAAAAGQAAAGoAAACRAAAABAD#####AAFzAAVhYnMxMQAAAAoAAACSAAAAKwD#####AAAAAAAAAJH#####AAAAAQAOQ1Rlc3RFeGlzdGVuY2UA#####wAIRXhpc3REZXMAAACSAAAABAD#####AAp0ZXN0U0VnYWxPAA4xLygxLUV4aXN0RGVzKQAAAAkDAAAAAT#wAAAAAAAAAAAACQEAAAABP#AAAAAAAAAAAAAKAAAAlQAAAAgA#####wAAABkAAAAKAAAAlgAAAAQA#####wADeScwAAtrXjIqUmF5XjIvcwAAAAkDAAAACQL#####AAAAAQAKQ1B1aXNzYW5jZQAAAAoAAABIAAAAAUAAAAAAAAAAAAAALQAAAAoAAAB9AAAAAUAAAAAAAAAAAAAACgAAAJMAAAAEAP####8AA3gnMAAUcmFjKFJheV4yLXknMF4yL2teMikAAAAXEgAAAAkBAAAALQAAAAoAAAB9AAAAAUAAAAAAAAAAAAAACQMAAAAtAAAACgAAAJgAAAABQAAAAAAAAAAAAAAtAAAACgAAAEgAAAABQAAAAAAAAAAAAAAhAP####8B#wAAABAAAAEFAAAAAGsAAAAKAAAAmQAAAAoAAACYAAAACwD#####Af8AAAAQAAABBQAAAACaAAAAdQAAAAYA#####wEAAAAAEAAAAQEBAAAAmgA#8zMzMzMzMwAAAAYA#####wEAAAAAEAAAAQEBAAAAmwA#8zMzMzMzMwAAABMA#####wAAAJ0AAACFAAAAFAD#####AQAAAAAQAAABBQACAAAAngAAABMA#####wAAAJwAAACFAAAAFAD#####AQAAAAAQAAABBQACAAAAoAAAABgA#####wEAAAABAQAAABkAAACfAAAAoQAAABUA#####wEAAAAACwACVzMAwCQAAAAAAABAGAAAAAAAAAUAAT#T+ibKoaWlAAAAov####8AAAABAA1DUG9pbnRQcm9qZXRlAP####8BAAAAAAsAAlcyAMAuAAAAAAAAQBQAAAAAAAAFAAAAAKMAAABmAAAAJQD#####AQAAAAALAAJXNQDAIAAAAAAAAEAgAAAAAAAABQAAAACkAAAAo#####8AAAABAA1DRm9uY3Rpb24zVmFyAAAAAAkCAAAACQcAAAAKAAAANQAAAAEAAAAAAAAAAAAAAAkGAAAACgAAADUAAAAKAAAAOgAAAAoAAABIAAAACQEAAAABAAAAAAAAAAAAAAAKAAAASAAAAAQA#####wAIdGVzdFNpbnQAFjEvKGFicyhzKTw9YWJzKGspKlJheSkAAAAJAwAAAAE#8AAAAAAAAAAAAAkGAAAAFwAAAAAKAAAAkwAAAAkCAAAAFwAAAAAKAAAASAAAAAoAAAB9AAAADAD#####AAAAAAAQAAABAAIAAACRAAAAmgAAAAwA#####wAAAAAAEAAAAQACAAAAkQAAAJsAAAAMAP####8Bf39#ABAAAAEAAQAAAJEAAAClAAAABwD#####AQAAAAALAAJXNgEFAAE#6TBqC7jF5AAAAKkAAAAfAP####8Bf39#AAEAAACqAAAAUAAAAAAAowAAAAUAAACjAAAApAAAAKUAAACpAAAAqv####8AAAACABJDTGlldU9iamV0UGFyUHRMaWUA#####wDY2NgAAACrAAAAAUAkAAAAAAAAAAAAqgAAAAIAAACqAAAAqwAAAB8A#####wEAAAAAAgAAAKUAAAB4AAAAAACjAAAAAwAAAKMAAACkAAAApQAAAAgA#####wAAABkAAAAKAAAApgAAAAsA#####wH#AP8AEAAAAQUAAAAAkQAAAK4AAAAMAP####8Bf39#ABAAAAEAAQAAAK8AAACBAAAAMAD#####AH9#fwAAALAAAAABQDUAAAAAAAAAAAAwAAAABwAAADAAAAAxAAAAfgAAAH8AAACAAAAAgQAAALAAAAAHAP####8Bf39#ABAAAAEFAAE#6MY8Xi4nRgAAALAAAAAfAP####8Bf39#AAEAAACyAAAAUAEAAAAAMAAAAAgAAAAwAAAAMQAAAH4AAAB#AAAAgAAAAIEAAACwAAAAsgAAADAA#####wB#f38AAACzAAAAAUAkAAAAAAAAAAAAsgAAAAIAAACyAAAAswAAACsA#####wAAAAAAAACtAAAACAD#####AAAAkQAAAAoAAACmAAAACwD#####Af8AAAAQAAABBQAAAACBAAAAtgAAAB8A#####wEAAAAAAgAAALcAAABkAQAAAAAwAAAABwAAADAAAAAxAAAAfgAAAH8AAACAAAAAgQAAALcAAAArAP####8AAAAAAAAAuAAAAAsA#####wH#AAAAEAAAAQUAAAAAhAAAAJcAAAASAP####8BAAAAAAIAAAAZAAAAugAAABUA#####wEAAAAAEAAAAQUAAUACcpnT3JQVAAAAuwAAAAwA#####wF#f38AEAAAAQABAAAAGQAAALwAAAAHAP####8Bf39#ABAAAAEFAAE#6c331KusFwAAAL0AAAASAP####8Bf39#AAEAAAAZAAAAvgAAADAA#####wB#f38AAAC9AAAAAUA0AAAAAAAAAAAAvAAAAAIAAAC8AAAAvQAAADAA#####wB#f38AAAC#AAAAAUAkAAAAAAAAAAAAvgAAAAIAAAC+AAAAvwAAACsA#####wAAAAAAAAC7AAAADAD#####AQAAAAAQAAABAAIAAACJAAAAkQAAAAcA#####wF#f38AEAAAAQUAAT#B0fQhYRklAAAAwwAAAAYA#####wF#f38AEAAAAQABAAAAxAE#8zMzMzMzMwAAAAwA#####wEAAAAAEAAAAQACAAAAkQAAAIgAAAAdAP####8Bf39#ABAAAAEFAAAAAMUAAADGAAAADAD#####AX9#fwAQAAABAAEAAADEAAAAxwAAADAA#####wB#f38AAADIAAAAAUAkAAAAAAAAAAAAxAAAAAQAAADEAAAAxQAAAMcAAADIAAAADAD#####AX9#fwAQAAABAAEAAACRAAAAiwAAADAA#####wB#f38AAADKAAAAAUAkAAAAAAAAAAAAiwAAAAIAAACLAAAAygAAACsA#####wAAAAAAAADDAAAAKwD#####AAAAAAAAAMYAAAAMAP####8BAAAAABAAAAEBAQAAAJEAAACO#####wAAAAIAFUNMaWV1T2JqZXRQYXJWYXJpYWJsZQD#####AL29vQAAAM4AAAABQDkAAAAAAAAAAAABAAAAAwAAAAEAAACOAAAAzgAAACEA#####wAAAAAAEAACTycAwDkAAAAAAADAKgAAAAAAAAUAAAAAjwAAAAEAAAAAAAAAAAAAAAkBAAAACgAAABwAAAAKAAAAHf####8AAAABABBDRHJvaXRlUGFyYWxsZWxlAP####8B5ubmABAAAAEAAQAAANAAAABuAAAADAD#####AObm5gAQAAABAAEAAACRAAAAfgAAAB0A#####wGkpKQAEAACUCIAAAAAAAAAAABACAAAAAAAAAUAAAAA0QAAANIAAAAyAP####8B5ubmABAAAAEAAQAAANAAAABxAAAADAD#####AObm5gAQAAABAAEAAAB#AAAAkQAAAB0A#####wGkpKQAEAACUSIAwDsAAAAAAADAIgAAAAAAAAUAAAAA1AAAANUAAAARAP####8AAADQAAAA0wAAAAsA#####wGkpKQAEAACUCcAAAAAAAAAAABACAAAAAAAAAUAAAAA1gAAANcAAAAfAP####8ApKSkAQEAAADYAAAAeAEAAAAAKwAAAB4AAAArAAAALAAAAC0AAAAuAAAALwAAADYAAAA3AAAAbAAAAG0AAABuAAAAcQAAAHgAAAB6AAAAewAAAHwAAAB9AAAAfgAAAH8AAACPAAAAkAAAAJEAAADQAAAA0QAAANIAAADTAAAA1AAAANUAAADWAAAA1wAAANgAAAAiAP####8A#wAAAAAABQAAANkAAAATAP####8AAABnAAAAYAAAABQA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAADbAAAAFAD#####Af8AAAAQAAJKIgAAAAAAAAAAAEAIAAAAAAAABQACAAAA2wAAAB4A#####wDm5uYAAQAAABkAAAAbAAAA3QAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAACAAxDQ29tbWVudGFpcmUA#####wH#AAAB#####xBAf7gAAAAAAEB7KFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAEWk9PTQAAAAgA#####wAAABkAAAABP#B64UeuFHsAAAALAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAACRAAAA4AAAADMA#####wAAAAAAwDQAAAAAAADAKAAAAAAAAAAAAOEQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABUwAAABMA#####wAAABoAAACFAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAOMAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAA4wAAAAwA#####wAAAAAAEAAAAQEBAAAAkAAAAOUAAAAGAP####8BAAAAARAAAAEBAQAAANABP#AAAAAAAAAAAAAdAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADnAAAA5gAAAAwA#####wB#f38AEAAAAQEBAAAA0AAAAOgAAAAMAP####8AAAAAABAAAAEBAQAAABkAAADlAAAADAD#####AAAAAAAQAAABAQEAAAAZAAAAkf####8AAAACAAlDQ2VyY2xlT1IA#####wEAAAABAQAAANAAAAABP9mZmZmZmZoAAAAAEwD#####AAAA6QAAAOwAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAA7QAAABQA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAADtAAAAEwD#####AAAA6wAAAOwAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAA8AAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAADwAAAACAD#####AAAA0AAAABcEAAAACgAAADUAAAALAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAADyAAAA8wAAABEA#####wAAANAAAAD0AAAACwD#####AQAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAAAA7gAAAPUAAAAMAP####8AAAAAABAAAAEBAQAAAPQAAADQAAAADAD#####AAAAAAAQAAABAQEAAADQAAAA7gAAAAwA#####wAAAAAAEAAAAQEBAAAA7gAAAPYAAAAMAP####8AAAAAABAAAAEBAQAAAPYAAAD0#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAEBAAAABQAAAPQAAADQAAAA7gAAAPYAAAD0AAAAEQD#####AAAA0AAAAO4AAAALAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAA#AAAAAsA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAAD1AAAAEQD#####AAAAGQAAAP4AAAALAP####8BAAAAABAAAABACAAAAAAAAAAAAAAAAAAABQAAAAD9AAAA#wAAAAwA#####wAAAAAAEAAAAQEBAAAA#gAAABkAAAAMAP####8AAAAAABAAAAEBAQAAABkAAAD9AAAADAD#####AAAAAAAQAAABAQEAAAD9AAABAAAAAAwA#####wAAAAAAEAAAAQEBAAABAAAAAP4AAAA1AP####8AAAAAAQEAAAAFAAAA#gAAABkAAAD9AAABAAAAAP4AAAAGAP####8BAAAAARAAAAEBAQAAABABP#AAAAAAAAAAAAA0AP####8BAAAAAQEAAAAQAAAAAT#JmZmZmZmaAAAAABMA#####wAAAQYAAAEHAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAQgAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAABCAAAAAwA#####wH#AAAAEAAAAQABAAABCgAAAQn#####AAAAAQAHQ01pbGlldQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA0AAAAJAAAAA2AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAA0AAAAA4A#####wEAAAAAwCoAAAAAAADAHAAAAAAAAAAAAQwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAHQAAADYA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHkAAAAZAAAADgD#####AQAAAADAHAAAAAAAAAAAAAAAAAAAAAABDxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAAeAAAABAD#####AAJoMwAFaDEtaDIAAAAJAQAAAAoAAAAcAAAACgAAAB0AAAAOAP####8BAAAAAMA1AAAAAAAAwCIAAAAAAAAAAAENEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAQAAAREAAAAY##########8="
					if (!sortie_html) texte = `\\begin{minipage}{0.7 \\linewidth} \n\t`
					else texte=``
					texte += `Un cÃ´ne a pour rayon ${tex_nombre(r)}${sp()}cm et pour hauteur SO${sp()}=${sp()}${tex_nombre(h1)}${sp()}cm.<br>Le point O' est situÃ© sur la hauteur [SO] Ã  ${h2}${sp()}cm de S.<br>`
					texte += `Un plan parallÃ¨le Ã  la base passant par O' coupe le cÃ´ne.<br>`
					texte += `On obtient ainsi une section ` + katex_Popup2(numero_de_l_exercice + i * 4, 1, "semblable", `DÃ©finition : Figures semblables`, `Se dit de deux figures/solides qui ont les mÃªmes formes, les mÃªmes angles mais pas nÃ©cessairement les mÃªmes mesures.<br>Les reprÃ©sentations d'une mÃªme figure Ã  deux Ã©chelles diffÃ©rentes sont des figures semblables.`) + ` Ã  la base et un cÃ´ne rÃ©duit semblable au grand cÃ´ne.<br>`
					if (!sortie_html) texte +=`La figure n'est pas en vraie grandeur.<br>`
					texte += num_alpha(0) + ` Calculer l'` + katex_Popup2(numero_de_l_exercice + i * 4 + 1, 1, "aire de base du cÃ´ne", `Formule : Aire du disque de rayon R`, `$Aire=\\pi \\times \\text{R}^{2}$`) + `.<br>`
					texte += num_alpha(1) + ` Calculer le ` + katex_Popup2(numero_de_l_exercice + i * 4 + 2, 1, "volume du cÃ´ne", `Formule : Volume d'un cÃ´ne de rayon R et de hauteur h`, `$Volume= \\dfrac{\\pi \\times \\text{R}^{2} \\times \\text{h}}{3}$`) + `.<br>`
					texte += num_alpha(2) + ` En dÃ©duire l'aire de la ` + katex_Popup2(numero_de_l_exercice + i * 4 + 3, 1, "section", `DÃ©finition : Section plane d'un solide`, `La section d'un solide par un plan est une figure plane.<br>Dans le cas d'une section d'un cÃ´ne par un plan parallÃ¨le Ã  sa base, cette section est un disque qui est une rÃ©duction de la base.<br>Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©es par k${exposant(2)} et les volumes sont multipliÃ©s par k${exposant(3)}.`) + ` sachant que SO'${sp()}=${sp()}${h2}${sp()}cm.<br>`
					texte += num_alpha(3) + ` Calculer le volume du cÃ´ne de hauteur SO'.<br>`
					texte += num_alpha(4) + ` Calculer le volume du tronc de cÃ´ne (partie du cÃ´ne situÃ©e entre la base et la section).`
					if (sortie_html) texte += `<br>Le point O peut Ãªtre dÃ©placÃ© et on peut changer l'angle de vue &#x3C6; `
					else texte+=`\n\t \\end{minipage} \n\t \\begin{minipage}{0.3 \\linewidth} \n\t \\begin{tikzpicture}[scale=0.7] \n\t 
					\\definecolor{hhhhhh}{rgb}{0,0,0}
					\\definecolor{phphph}{rgb}{0.5,0.5,0.5}
					\\definecolor{ofofof}{rgb}{0.5,0.5,0.5}
					\\definecolor{ffffhh}{rgb}{1,1,0}
					\\definecolor{enenen}{rgb}{0.9,0.9,0.9}
					\\definecolor{dpdpdp}{rgb}{0.85,0.85,0.85}
					\\definecolor{bdbdbd}{rgb}{0.74,0.74,0.74}
					\\definecolor{alalal}{rgb}{0.64,0.64,0.64}
					\\definecolor{ffhhhh}{rgb}{1,0,0}
					\\clip (40.89,0) rectangle (0,22.58);
					\\fill[color=black] (4.609,10.281) circle (0.063);
					\\node at (3.828, 10.531) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.438cm} {0.547cm} \\selectfont] {$\\text{O}$};
					\\draw [color=ofofof , dotted, line width = 0.4](1.513,9.062)--(1.679,9)--(1.853,8.942)--(2.035,8.887)--(2.224,8.836)--(2.419,8.788)--(2.621,8.745)--(2.827,8.706)--(3.039,8.672)--(3.255,8.642)--(3.475,8.616)--(3.698,8.595)--(3.923,8.578)--(4.15,8.567)--(4.379,8.559)--(4.608,8.557)--(4.837,8.559)--(5.065,8.566)--(5.292,8.578)--(5.518,8.595)--(5.741,8.616)--(5.96,8.641)--(6.176,8.671)--(6.388,8.706)--(6.595,8.745)--(6.796,8.788)--(6.992,8.835)--(7.181,8.886)--(7.363,8.941)--(7.537,8.999)--(7.703,9.062)--(7.861,9.127)--(8.01,9.196)--(8.15,9.267)--(8.279,9.342)--(8.399,9.419)--(8.509,9.498)--(8.607,9.579)--(8.695,9.663)--(8.772,9.748)--(8.837,9.834)--(8.891,9.922)--(8.932,10.011)--(8.962,10.1)--(8.98,10.19)--(8.987,10.281)--(8.981,10.371)--(8.963,10.461)--(8.933,10.55)--(8.891,10.639)--(8.838,10.727)--(8.773,10.813)--(8.696,10.899)--(8.609,10.982)--(8.51,11.063)--(8.401,11.143)--(8.281,11.22)--(8.152,11.294)--(8.012,11.366)--(7.863,11.435)--(7.706,11.5)--(7.54,11.562)--(7.365,11.621)--(7.184,11.676)--(6.995,11.727)--(6.799,11.774)--(6.598,11.817)--(6.391,11.856)--(6.18,11.891)--(5.964,11.921)--(5.744,11.947)--(5.521,11.968)--(5.296,11.984)--(5.069,11.996)--(4.84,12.003)--(4.611,12.006)--(4.382,12.003)--(4.154,11.996)--(3.926,11.984)--(3.701,11.968)--(3.478,11.947)--(3.258,11.921)--(3.042,11.891)--(2.831,11.857)--(2.624,11.818)--(2.422,11.775)--(2.227,11.728)--(2.038,11.677)--(1.856,11.622)--(1.682,11.563)--(1.515,11.501)--(1.358,11.436)--(1.209,11.367)--(1.069,11.295)--(0.939,11.221)--(0.819,11.144)--(0.71,11.065)--(0.611,10.983)--(0.524,10.9)--(0.447,10.815)--(0.382,10.728)--(0.328,10.64)--(0.286,10.552)--(0.256,10.462)--(0.238,10.372)--(0.232,10.282)--(0.238,10.192)--(0.256,10.102)--(0.286,10.012)--(0.327,9.923)--(0.381,9.836)--(0.446,9.749)--(0.522,9.664)--(0.61,9.581)--(0.708,9.499)--(0.818,9.42)--(0.937,9.343)--(1.067,9.268)--(1.207,9.197)--(1.355,9.128)--cycle;
					
					\\fill[color = ffffhh, opacity = 0.2](1.513,9.062)--(1.679,9)--(1.853,8.942)--(2.035,8.887)--(2.224,8.836)--(2.419,8.788)--(2.621,8.745)--(2.827,8.706)--(3.039,8.672)--(3.255,8.642)--(3.475,8.616)--(3.698,8.595)--(3.923,8.578)--(4.15,8.567)--(4.379,8.559)--(4.608,8.557)--(4.837,8.559)--(5.065,8.566)--(5.292,8.578)--(5.518,8.595)--(5.741,8.616)--(5.96,8.641)--(6.176,8.671)--(6.388,8.706)--(6.595,8.745)--(6.796,8.788)--(6.992,8.835)--(7.181,8.886)--(7.363,8.941)--(7.537,8.999)--(7.703,9.062)--(7.861,9.127)--(8.01,9.196)--(8.15,9.267)--(8.279,9.342)--(8.399,9.419)--(8.509,9.498)--(8.607,9.579)--(8.695,9.663)--(8.772,9.748)--(8.837,9.834)--(8.891,9.922)--(8.932,10.011)--(8.962,10.1)--(8.98,10.19)--(8.987,10.281)--(8.981,10.371)--(8.963,10.461)--(8.933,10.55)--(8.891,10.639)--(8.838,10.727)--(8.773,10.813)--(8.696,10.899)--(8.609,10.982)--(8.51,11.063)--(8.401,11.143)--(8.281,11.22)--(8.152,11.294)--(8.012,11.366)--(7.863,11.435)--(7.706,11.5)--(7.54,11.562)--(7.365,11.621)--(7.184,11.676)--(6.995,11.727)--(6.799,11.774)--(6.598,11.817)--(6.391,11.856)--(6.18,11.891)--(5.964,11.921)--(5.744,11.947)--(5.521,11.968)--(5.296,11.984)--(5.069,11.996)--(4.84,12.003)--(4.611,12.006)--(4.382,12.003)--(4.154,11.996)--(3.926,11.984)--(3.701,11.968)--(3.478,11.947)--(3.258,11.921)--(3.042,11.891)--(2.831,11.857)--(2.624,11.818)--(2.422,11.775)--(2.227,11.728)--(2.038,11.677)--(1.856,11.622)--(1.682,11.563)--(1.515,11.501)--(1.358,11.436)--(1.209,11.367)--(1.069,11.295)--(0.939,11.221)--(0.819,11.144)--(0.71,11.065)--(0.611,10.983)--(0.524,10.9)--(0.447,10.815)--(0.382,10.728)--(0.328,10.64)--(0.286,10.552)--(0.256,10.462)--(0.238,10.372)--(0.232,10.282)--(0.238,10.192)--(0.256,10.102)--(0.286,10.012)--(0.327,9.923)--(0.381,9.836)--(0.446,9.749)--(0.522,9.664)--(0.61,9.581)--(0.708,9.499)--(0.818,9.42)--(0.937,9.343)--(1.067,9.268)--(1.207,9.197)--(1.355,9.128)(1.513,9.062);
					\\draw [color=black , line width = 0.8](4.609,21.776)--(8.937,10.54);
					\\draw [color=black , line width = 0.8](4.609,21.776)--(0.282,10.54);
					\\draw [color=dpdpdp , line width = 0.4](4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776)--(4.609,21.776);
					
					\\draw [color=dpdpdp , line width = 0.4](4.129,20.528)--(4.126,20.52)--(4.124,20.511)--(4.123,20.503)--(4.123,20.495)--(4.124,20.486)--(4.126,20.478)--(4.129,20.47)--(4.133,20.461)--(4.137,20.453)--(4.143,20.445)--(4.149,20.437)--(4.156,20.429)--(4.164,20.422)--(4.173,20.414)--(4.183,20.407)--(4.194,20.399)--(4.205,20.392)--(4.217,20.386)--(4.23,20.379)--(4.244,20.373)--(4.258,20.366)--(4.273,20.361)--(4.289,20.355)--(4.305,20.35)--(4.322,20.344)--(4.339,20.34)--(4.357,20.335)--(4.376,20.331)--(4.395,20.327)--(4.414,20.324)--(4.433,20.32)--(4.453,20.318)--(4.473,20.315)--(4.494,20.313)--(4.515,20.311)--(4.535,20.31)--(4.556,20.309)--(4.578,20.308)--(4.599,20.308)--(4.62,20.308)--(4.641,20.308)--(4.662,20.309)--(4.683,20.31)--(4.704,20.311)--(4.725,20.313)--(4.745,20.315)--(4.766,20.318)--(4.785,20.32)--(4.805,20.324)--(4.824,20.327)--(4.843,20.331)--(4.861,20.335)--(4.879,20.34)--(4.897,20.344)--(4.913,20.35)--(4.93,20.355)--(4.945,20.361)--(4.96,20.366)--(4.975,20.373)--(4.988,20.379)--(5.001,20.386)--(5.013,20.392)--(5.025,20.399)--(5.035,20.407)--(5.045,20.414)--(5.054,20.422)--(5.062,20.429)--(5.07,20.437)--(5.076,20.445)--(5.082,20.453)--(5.086,20.461)--(5.09,20.47)--(5.093,20.478)--(5.095,20.486)--(5.096,20.495)--(5.096,20.503)--(5.095,20.511)--(5.093,20.52)--(5.09,20.528);
					
					\\draw [color=dpdpdp , line width = 0.4](3.648,19.279)--(3.642,19.263)--(3.639,19.246)--(3.637,19.229)--(3.637,19.213)--(3.639,19.196)--(3.643,19.179)--(3.648,19.163)--(3.656,19.146)--(3.665,19.13)--(3.676,19.114)--(3.689,19.098)--(3.703,19.082)--(3.72,19.067)--(3.738,19.052)--(3.757,19.037)--(3.778,19.023)--(3.801,19.009)--(3.826,18.995)--(3.851,18.982)--(3.879,18.969)--(3.907,18.957)--(3.937,18.945)--(3.969,18.934)--(4.001,18.923)--(4.035,18.913)--(4.07,18.903)--(4.105,18.894)--(4.142,18.886)--(4.18,18.878)--(4.218,18.871)--(4.257,18.865)--(4.297,18.859)--(4.338,18.854)--(4.378,18.85)--(4.42,18.846)--(4.462,18.843)--(4.504,18.841)--(4.546,18.84)--(4.588,18.839)--(4.631,18.839)--(4.673,18.84)--(4.715,18.841)--(4.757,18.843)--(4.799,18.846)--(4.84,18.85)--(4.881,18.854)--(4.922,18.859)--(4.962,18.865)--(5.001,18.871)--(5.039,18.878)--(5.077,18.886)--(5.113,18.894)--(5.149,18.903)--(5.184,18.913)--(5.218,18.923)--(5.25,18.934)--(5.281,18.945)--(5.311,18.957)--(5.34,18.969)--(5.367,18.982)--(5.393,18.995)--(5.417,19.009)--(5.44,19.023)--(5.462,19.037)--(5.481,19.052)--(5.499,19.067)--(5.515,19.082)--(5.53,19.098)--(5.543,19.114)--(5.554,19.13)--(5.563,19.146)--(5.57,19.163)--(5.576,19.179)--(5.58,19.196)--(5.582,19.213)--(5.582,19.229)--(5.58,19.246)--(5.577,19.263)--(5.571,19.279);
					
					\\draw [color=dpdpdp , line width = 0.4](3.167,18.031)--(3.159,18.006)--(3.153,17.981)--(3.151,17.956)--(3.151,17.931)--(3.154,17.906)--(3.159,17.881)--(3.168,17.856)--(3.179,17.832)--(3.193,17.807)--(3.209,17.783)--(3.228,17.759)--(3.25,17.736)--(3.275,17.712)--(3.302,17.69)--(3.331,17.668)--(3.363,17.646)--(3.397,17.625)--(3.434,17.604)--(3.472,17.584)--(3.513,17.565)--(3.556,17.547)--(3.601,17.529)--(3.648,17.512)--(3.697,17.496)--(3.748,17.481)--(3.8,17.466)--(3.853,17.453)--(3.908,17.441)--(3.965,17.429)--(4.022,17.418)--(4.081,17.409)--(4.141,17.4)--(4.202,17.393)--(4.263,17.386)--(4.325,17.381)--(4.388,17.377)--(4.451,17.373)--(4.514,17.371)--(4.578,17.37)--(4.641,17.37)--(4.705,17.371)--(4.768,17.373)--(4.831,17.377)--(4.894,17.381)--(4.956,17.386)--(5.017,17.393)--(5.078,17.4)--(5.138,17.409)--(5.196,17.418)--(5.254,17.429)--(5.31,17.441)--(5.365,17.453)--(5.419,17.466)--(5.471,17.481)--(5.522,17.496)--(5.57,17.512)--(5.617,17.529)--(5.662,17.547)--(5.705,17.565)--(5.746,17.584)--(5.785,17.604)--(5.822,17.625)--(5.856,17.646)--(5.888,17.668)--(5.917,17.69)--(5.944,17.712)--(5.968,17.736)--(5.99,17.759)--(6.009,17.783)--(6.026,17.807)--(6.04,17.832)--(6.051,17.856)--(6.059,17.881)--(6.065,17.906)--(6.068,17.931)--(6.068,17.956)--(6.066,17.981)--(6.06,18.006)--(6.052,18.031);
					
					\\draw [color=dpdpdp , line width = 0.4](2.686,16.782)--(2.675,16.749)--(2.668,16.716)--(2.664,16.683)--(2.665,16.649)--(2.668,16.616)--(2.676,16.583)--(2.687,16.549)--(2.702,16.517)--(2.72,16.484)--(2.743,16.452)--(2.768,16.42)--(2.797,16.389)--(2.83,16.358)--(2.866,16.327)--(2.905,16.298)--(2.948,16.269)--(2.993,16.241)--(3.042,16.214)--(3.094,16.187)--(3.148,16.162)--(3.205,16.137)--(3.265,16.113)--(3.328,16.091)--(3.393,16.069)--(3.46,16.049)--(3.53,16.03)--(3.601,16.012)--(3.675,15.995)--(3.75,15.98)--(3.827,15.966)--(3.905,15.953)--(3.985,15.942)--(4.066,15.932)--(4.148,15.923)--(4.23,15.916)--(4.314,15.91)--(4.398,15.906)--(4.482,15.903)--(4.567,15.901)--(4.652,15.901)--(4.736,15.903)--(4.821,15.906)--(4.905,15.91)--(4.988,15.916)--(5.071,15.923)--(5.153,15.932)--(5.234,15.942)--(5.314,15.953)--(5.392,15.966)--(5.469,15.98)--(5.544,15.995)--(5.617,16.012)--(5.689,16.03)--(5.758,16.049)--(5.826,16.069)--(5.891,16.091)--(5.953,16.113)--(6.013,16.137)--(6.071,16.162)--(6.125,16.187)--(6.177,16.214)--(6.226,16.241)--(6.271,16.269)--(6.314,16.298)--(6.353,16.327)--(6.389,16.358)--(6.421,16.389)--(6.451,16.42)--(6.476,16.452)--(6.498,16.484)--(6.517,16.517)--(6.532,16.549)--(6.543,16.583)--(6.55,16.616)--(6.554,16.649)--(6.554,16.683)--(6.551,16.716)--(6.544,16.749)--(6.533,16.782);
					
					\\draw [color=dpdpdp , line width = 0.4](2.205,15.534)--(2.192,15.492)--(2.182,15.451)--(2.178,15.409)--(2.178,15.367)--(2.183,15.326)--(2.193,15.284)--(2.207,15.243)--(2.225,15.202)--(2.248,15.161)--(2.276,15.121)--(2.308,15.081)--(2.344,15.042)--(2.385,15.003)--(2.43,14.965)--(2.479,14.928)--(2.532,14.892)--(2.589,14.857)--(2.65,14.823)--(2.715,14.79)--(2.783,14.758)--(2.854,14.727)--(2.929,14.698)--(3.008,14.669)--(3.089,14.643)--(3.173,14.617)--(3.26,14.593)--(3.349,14.571)--(3.441,14.55)--(3.535,14.531)--(3.631,14.513)--(3.729,14.497)--(3.829,14.483)--(3.93,14.47)--(4.032,14.46)--(4.136,14.451)--(4.24,14.443)--(4.345,14.438)--(4.451,14.434)--(4.556,14.432)--(4.662,14.432)--(4.768,14.434)--(4.874,14.438)--(4.979,14.443)--(5.083,14.451)--(5.187,14.46)--(5.289,14.47)--(5.39,14.483)--(5.49,14.497)--(5.588,14.513)--(5.684,14.531)--(5.778,14.55)--(5.869,14.571)--(5.959,14.593)--(6.046,14.617)--(6.13,14.643)--(6.211,14.669)--(6.289,14.698)--(6.364,14.727)--(6.436,14.758)--(6.504,14.79)--(6.569,14.823)--(6.63,14.857)--(6.687,14.892)--(6.74,14.928)--(6.789,14.965)--(6.834,15.003)--(6.874,15.042)--(6.911,15.081)--(6.943,15.121)--(6.97,15.161)--(6.994,15.202)--(7.012,15.243)--(7.026,15.284)--(7.036,15.326)--(7.04,15.367)--(7.041,15.409)--(7.036,15.451)--(7.027,15.492)--(7.014,15.534);
					
					\\draw [color=dpdpdp , line width = 0.4](1.724,14.285)--(1.708,14.236)--(1.697,14.186)--(1.692,14.136)--(1.692,14.086)--(1.698,14.036)--(1.709,13.986)--(1.726,13.936)--(1.748,13.887)--(1.776,13.838)--(1.809,13.79)--(1.848,13.742)--(1.891,13.695)--(1.94,13.648)--(1.994,13.603)--(2.053,13.559)--(2.117,13.515)--(2.185,13.473)--(2.258,13.432)--(2.336,13.392)--(2.417,13.354)--(2.503,13.317)--(2.593,13.282)--(2.687,13.248)--(2.785,13.216)--(2.886,13.185)--(2.99,13.157)--(3.097,13.13)--(3.207,13.105)--(3.32,13.082)--(3.435,13.061)--(3.553,13.041)--(3.673,13.024)--(3.794,13.009)--(3.917,12.996)--(4.041,12.985)--(4.166,12.977)--(4.292,12.97)--(4.419,12.966)--(4.546,12.964)--(4.673,12.964)--(4.8,12.966)--(4.927,12.97)--(5.053,12.977)--(5.178,12.985)--(5.302,12.996)--(5.425,13.009)--(5.546,13.024)--(5.666,13.041)--(5.783,13.061)--(5.899,13.082)--(6.011,13.105)--(6.122,13.13)--(6.229,13.157)--(6.333,13.185)--(6.434,13.216)--(6.531,13.248)--(6.625,13.282)--(6.715,13.317)--(6.801,13.354)--(6.883,13.392)--(6.961,13.432)--(7.034,13.473)--(7.102,13.515)--(7.166,13.559)--(7.225,13.603)--(7.279,13.648)--(7.328,13.695)--(7.371,13.742)--(7.41,13.79)--(7.443,13.838)--(7.47,13.887)--(7.493,13.936)--(7.51,13.986)--(7.521,14.036)--(7.527,14.086)--(7.527,14.136)--(7.522,14.186)--(7.511,14.236)--(7.494,14.285);
					
					\\draw [color=dpdpdp , line width = 0.4](1.243,13.037)--(1.224,12.979)--(1.212,12.921)--(1.206,12.862)--(1.206,12.804)--(1.213,12.745)--(1.226,12.687)--(1.245,12.629)--(1.271,12.572)--(1.304,12.515)--(1.342,12.458)--(1.387,12.403)--(1.438,12.348)--(1.495,12.294)--(1.558,12.241)--(1.627,12.189)--(1.701,12.139)--(1.781,12.089)--(1.866,12.041)--(1.957,11.995)--(2.052,11.95)--(2.152,11.907)--(2.257,11.866)--(2.367,11.827)--(2.481,11.789)--(2.598,11.754)--(2.72,11.72)--(2.845,11.689)--(2.974,11.66)--(3.105,11.633)--(3.24,11.608)--(3.377,11.586)--(3.516,11.566)--(3.658,11.548)--(3.801,11.533)--(3.946,11.52)--(4.092,11.51)--(4.239,11.503)--(4.387,11.497)--(4.535,11.495)--(4.684,11.495)--(4.832,11.497)--(4.98,11.503)--(5.127,11.51)--(5.273,11.52)--(5.418,11.533)--(5.561,11.548)--(5.702,11.566)--(5.842,11.586)--(5.979,11.608)--(6.113,11.633)--(6.245,11.66)--(6.374,11.689)--(6.499,11.72)--(6.62,11.754)--(6.738,11.789)--(6.852,11.827)--(6.961,11.866)--(7.066,11.907)--(7.167,11.95)--(7.262,11.995)--(7.353,12.041)--(7.438,12.089)--(7.518,12.139)--(7.592,12.189)--(7.661,12.241)--(7.724,12.294)--(7.781,12.348)--(7.831,12.403)--(7.876,12.458)--(7.915,12.515)--(7.947,12.572)--(7.973,12.629)--(7.993,12.687)--(8.006,12.745)--(8.013,12.804)--(8.013,12.862)--(8.007,12.921)--(7.994,12.979)--(7.975,13.037);
					
					\\draw [color=dpdpdp , line width = 0.4](0.763,11.788)--(0.741,11.722)--(0.726,11.656)--(0.719,11.589)--(0.72,11.522)--(0.727,11.455)--(0.742,11.389)--(0.765,11.323)--(0.795,11.257)--(0.832,11.192)--(0.876,11.127)--(0.927,11.064)--(0.985,11.001)--(1.05,10.939)--(1.122,10.879)--(1.201,10.819)--(1.286,10.762)--(1.377,10.705)--(1.474,10.651)--(1.578,10.598)--(1.687,10.547)--(1.801,10.498)--(1.921,10.45)--(2.047,10.405)--(2.177,10.362)--(2.311,10.322)--(2.45,10.283)--(2.593,10.248)--(2.74,10.214)--(2.89,10.183)--(3.044,10.155)--(3.201,10.13)--(3.36,10.107)--(3.522,10.087)--(3.686,10.07)--(3.851,10.055)--(4.018,10.044)--(4.186,10.035)--(4.355,10.029)--(4.525,10.026)--(4.694,10.026)--(4.864,10.029)--(5.032,10.035)--(5.201,10.044)--(5.368,10.055)--(5.533,10.07)--(5.697,10.087)--(5.859,10.107)--(6.018,10.13)--(6.175,10.155)--(6.328,10.183)--(6.479,10.214)--(6.626,10.248)--(6.769,10.283)--(6.908,10.322)--(7.042,10.362)--(7.172,10.405)--(7.297,10.45)--(7.417,10.498)--(7.532,10.547)--(7.641,10.598)--(7.744,10.651)--(7.842,10.705)--(7.933,10.762)--(8.018,10.819)--(8.097,10.879)--(8.168,10.939)--(8.234,11.001)--(8.292,11.064)--(8.343,11.127)--(8.387,11.192)--(8.424,11.257)--(8.454,11.323)--(8.476,11.389)--(8.491,11.455)--(8.499,11.522)--(8.499,11.589)--(8.492,11.656)--(8.478,11.722)--(8.456,11.788);
					
					\\draw [color=dpdpdp , line width = 0.4](0.282,10.54)--(0.257,10.465)--(0.241,10.391)--(0.233,10.315)--(0.233,10.24)--(0.242,10.165)--(0.259,10.09)--(0.284,10.016)--(0.318,9.942)--(0.359,9.869)--(0.409,9.796)--(0.467,9.724)--(0.532,9.654)--(0.605,9.585)--(0.686,9.516)--(0.775,9.45)--(0.87,9.385)--(0.973,9.322)--(1.082,9.26)--(1.199,9.2)--(1.321,9.143)--(1.45,9.088)--(1.586,9.035)--(1.726,8.984)--(1.872,8.936)--(2.024,8.89)--(2.18,8.847)--(2.341,8.807)--(2.506,8.769)--(2.676,8.734)--(2.849,8.703)--(3.025,8.674)--(3.204,8.648)--(3.386,8.626)--(3.57,8.606)--(3.756,8.59)--(3.944,8.577)--(4.133,8.567)--(4.323,8.561)--(4.514,8.557)--(4.705,8.557)--(4.895,8.561)--(5.085,8.567)--(5.274,8.577)--(5.462,8.59)--(5.648,8.606)--(5.833,8.626)--(6.015,8.648)--(6.194,8.674)--(6.37,8.703)--(6.543,8.734)--(6.712,8.769)--(6.878,8.807)--(7.039,8.847)--(7.195,8.89)--(7.346,8.936)--(7.493,8.984)--(7.633,9.035)--(7.768,9.088)--(7.897,9.143)--(8.02,9.2)--(8.136,9.26)--(8.246,9.322)--(8.349,9.385)--(8.444,9.45)--(8.532,9.516)--(8.613,9.585)--(8.687,9.654)--(8.752,9.724)--(8.81,9.796)--(8.859,9.869)--(8.901,9.942)--(8.934,10.016)--(8.96,10.09)--(8.977,10.165)--(8.985,10.24)--(8.986,10.315)--(8.978,10.391)--(8.962,10.465)--(8.937,10.54);
					
					\\draw [color=black , line width = 0.8](0.282,10.54)--(0.265,10.49)--(0.251,10.441)--(0.241,10.391)--(0.235,10.341)--(0.232,10.291)--(0.233,10.242)--(0.238,10.192)--(0.246,10.142)--(0.259,10.092)--(0.274,10.043)--(0.294,9.994)--(0.317,9.944)--(0.343,9.896)--(0.373,9.847)--(0.407,9.799)--(0.444,9.751)--(0.485,9.704)--(0.529,9.657)--(0.576,9.611)--(0.627,9.566)--(0.681,9.52)--(0.739,9.476)--(0.8,9.432)--(0.864,9.389)--(0.931,9.347)--(1.001,9.305)--(1.074,9.265)--(1.15,9.225)--(1.229,9.186)--(1.311,9.148)--(1.396,9.111)--(1.483,9.075)--(1.573,9.039)--(1.665,9.005)--(1.76,8.972)--(1.857,8.94)--(1.957,8.91)--(2.059,8.88)--(2.163,8.851)--(2.269,8.824)--(2.377,8.798)--(2.487,8.773)--(2.598,8.75)--(2.712,8.727)--(2.827,8.706)--(2.943,8.687)--(3.061,8.669)--(3.18,8.652)--(3.3,8.636)--(3.421,8.622)--(3.544,8.609)--(3.667,8.597)--(3.791,8.587)--(3.916,8.579)--(4.041,8.572)--(4.167,8.566)--(4.293,8.561)--(4.419,8.559)--(4.546,8.557)--(4.673,8.557)--(4.799,8.559)--(4.926,8.561)--(5.052,8.566)--(5.178,8.572)--(5.303,8.579)--(5.428,8.587)--(5.552,8.597)--(5.675,8.609)--(5.797,8.622)--(5.919,8.636)--(6.039,8.652)--(6.158,8.669)--(6.276,8.687)--(6.392,8.706)--(6.507,8.727)--(6.62,8.75)--(6.732,8.773)--(6.842,8.798)--(6.95,8.824)--(7.056,8.851)--(7.16,8.88)--(7.262,8.91)--(7.361,8.94)--(7.459,8.972)--(7.554,9.005)--(7.646,9.039)--(7.736,9.075)--(7.823,9.111)--(7.908,9.148)--(7.99,9.186)--(8.069,9.225)--(8.145,9.265)--(8.218,9.305)--(8.288,9.347)--(8.355,9.389)--(8.419,9.432)--(8.48,9.476)--(8.537,9.52)--(8.592,9.566)--(8.643,9.611)--(8.69,9.657)--(8.734,9.704)--(8.775,9.751)--(8.812,9.799)--(8.846,9.847)--(8.876,9.896)--(8.902,9.944)--(8.925,9.994)--(8.945,10.043)--(8.96,10.092)--(8.972,10.142)--(8.981,10.192)--(8.985,10.242)--(8.986,10.291)--(8.984,10.341)--(8.978,10.391)--(8.968,10.441)--(8.954,10.49)--(8.937,10.54);
					
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(1.513,9.062);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(2.419,8.788);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(3.475,8.616);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(4.608,8.557);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(5.741,8.616);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(6.796,8.788);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(7.703,9.062);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(8.399,9.419);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(8.837,9.834);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(8.987,10.281);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(8.838,10.727);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(8.401,11.143);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(7.706,11.5);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(6.799,11.774);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(5.744,11.947);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(4.611,12.006);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(3.478,11.947);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(2.422,11.775);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(1.515,11.501);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(0.819,11.144);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(0.382,10.728);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(0.232,10.282);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(0.381,9.836);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(0.818,9.42);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.609,21.776)--(1.513,9.062);
					\\fill[color=black] (4.609,17.178) circle (0.063);
					\\node at (3.609, 17.46) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {$\\text{O'}$};
					\\draw [color=enenen , line width = 0.4](4.609,21.776)--(4.213,10.125);
					\\draw [color=enenen , line width = 0.4](1.541,11.491)--(4.609,21.776);
					\\draw [color=alalal , dotted, line width = 0.4](2.887,17.055)--(2.905,17.02)--(2.929,16.985)--(2.956,16.951)--(2.989,16.917)--(3.025,16.885)--(3.066,16.853)--(3.111,16.821)--(3.16,16.791)--(3.213,16.762)--(3.27,16.734)--(3.33,16.707)--(3.394,16.682)--(3.461,16.658)--(3.531,16.635)--(3.604,16.614)--(3.68,16.594)--(3.758,16.576)--(3.839,16.559)--(3.921,16.544)--(4.006,16.531)--(4.092,16.519)--(4.179,16.51)--(4.268,16.502)--(4.358,16.496)--(4.448,16.492)--(4.539,16.489)--(4.629,16.489)--(4.72,16.49)--(4.811,16.493)--(4.901,16.498)--(4.99,16.505)--(5.078,16.514)--(5.165,16.524)--(5.251,16.537)--(5.334,16.55)--(5.416,16.566)--(5.496,16.583)--(5.573,16.602)--(5.647,16.623)--(5.719,16.645)--(5.788,16.668)--(5.854,16.693)--(5.916,16.719)--(5.975,16.746)--(6.03,16.775)--(6.081,16.805)--(6.128,16.835)--(6.171,16.867)--(6.21,16.899)--(6.245,16.932)--(6.275,16.966)--(6.301,17)--(6.322,17.035)--(6.339,17.07)--(6.351,17.106)--(6.358,17.141)--(6.36,17.177)--(6.358,17.213)--(6.351,17.249)--(6.339,17.284)--(6.323,17.32)--(6.302,17.354)--(6.277,17.389)--(6.247,17.423)--(6.212,17.456)--(6.174,17.488)--(6.131,17.52)--(6.084,17.55)--(6.033,17.58)--(5.978,17.609)--(5.919,17.636)--(5.857,17.662)--(5.792,17.687)--(5.723,17.71)--(5.652,17.732)--(5.577,17.753)--(5.5,17.772)--(5.421,17.789)--(5.339,17.805)--(5.256,17.819)--(5.17,17.832)--(5.083,17.842)--(4.995,17.851)--(4.906,17.858)--(4.816,17.863)--(4.726,17.866)--(4.635,17.868)--(4.544,17.868)--(4.453,17.865)--(4.363,17.861)--(4.273,17.855)--(4.184,17.847)--(4.097,17.838)--(4.011,17.826)--(3.926,17.813)--(3.843,17.798)--(3.763,17.782)--(3.684,17.764)--(3.608,17.744)--(3.535,17.723)--(3.465,17.7)--(3.398,17.676)--(3.334,17.651)--(3.273,17.624)--(3.216,17.596)--(3.163,17.567)--(3.114,17.537)--(3.068,17.506)--(3.027,17.474)--(2.991,17.441)--(2.958,17.408)--(2.93,17.374)--(2.907,17.339)--(2.888,17.304)--(2.874,17.269)--(2.864,17.233)--(2.859,17.197)--(2.859,17.161)--(2.864,17.126)--cycle;
					
					\\fill[color = ffhhhh, opacity = 0.2](2.887,17.055)--(2.905,17.02)--(2.929,16.985)--(2.956,16.951)--(2.989,16.917)--(3.025,16.885)--(3.066,16.853)--(3.111,16.821)--(3.16,16.791)--(3.213,16.762)--(3.27,16.734)--(3.33,16.707)--(3.394,16.682)--(3.461,16.658)--(3.531,16.635)--(3.604,16.614)--(3.68,16.594)--(3.758,16.576)--(3.839,16.559)--(3.921,16.544)--(4.006,16.531)--(4.092,16.519)--(4.179,16.51)--(4.268,16.502)--(4.358,16.496)--(4.448,16.492)--(4.539,16.489)--(4.629,16.489)--(4.72,16.49)--(4.811,16.493)--(4.901,16.498)--(4.99,16.505)--(5.078,16.514)--(5.165,16.524)--(5.251,16.537)--(5.334,16.55)--(5.416,16.566)--(5.496,16.583)--(5.573,16.602)--(5.647,16.623)--(5.719,16.645)--(5.788,16.668)--(5.854,16.693)--(5.916,16.719)--(5.975,16.746)--(6.03,16.775)--(6.081,16.805)--(6.128,16.835)--(6.171,16.867)--(6.21,16.899)--(6.245,16.932)--(6.275,16.966)--(6.301,17)--(6.322,17.035)--(6.339,17.07)--(6.351,17.106)--(6.358,17.141)--(6.36,17.177)--(6.358,17.213)--(6.351,17.249)--(6.339,17.284)--(6.323,17.32)--(6.302,17.354)--(6.277,17.389)--(6.247,17.423)--(6.212,17.456)--(6.174,17.488)--(6.131,17.52)--(6.084,17.55)--(6.033,17.58)--(5.978,17.609)--(5.919,17.636)--(5.857,17.662)--(5.792,17.687)--(5.723,17.71)--(5.652,17.732)--(5.577,17.753)--(5.5,17.772)--(5.421,17.789)--(5.339,17.805)--(5.256,17.819)--(5.17,17.832)--(5.083,17.842)--(4.995,17.851)--(4.906,17.858)--(4.816,17.863)--(4.726,17.866)--(4.635,17.868)--(4.544,17.868)--(4.453,17.865)--(4.363,17.861)--(4.273,17.855)--(4.184,17.847)--(4.097,17.838)--(4.011,17.826)--(3.926,17.813)--(3.843,17.798)--(3.763,17.782)--(3.684,17.764)--(3.608,17.744)--(3.535,17.723)--(3.465,17.7)--(3.398,17.676)--(3.334,17.651)--(3.273,17.624)--(3.216,17.596)--(3.163,17.567)--(3.114,17.537)--(3.068,17.506)--(3.027,17.474)--(2.991,17.441)--(2.958,17.408)--(2.93,17.374)--(2.907,17.339)--(2.888,17.304)--(2.874,17.269)--(2.864,17.233)--(2.859,17.197)--(2.859,17.161)--(2.864,17.126)(2.887,17.055);
					\\node at (3.922, 22.559) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {S};
					\\draw [color=black , dotted, line width = 0.4](4.609,21.776)--(8.987,10.281);
					\\draw [color=ofofof , dotted, line width = 0.4](4.609,17.178)--(6.36,17.178);
					\\draw [color=black , dotted, line width = 0.4](4.609,10.281)--(8.987,10.281);
					\\draw [color=black , dotted, line width = 0.4](4.609,10.281)--(4.609,21.776);
					\\draw [color=black , dotted, line width = 0.4](4.609,17.546)--(4.609,17.178);
					\\draw [color=black , dotted, line width = 0.4](4.609,17.178)--(5.009,17.178);
					\\draw [color=black , dotted, line width = 0.4](5.009,17.178)--(5.009,17.546);
					\\draw [color=black , dotted, line width = 0.4](5.009,17.546)--(4.609,17.546);
					\\draw [color=black , dotted, line width = 0.4](4.609,17.546)--(4.609,17.178)--(5.009,17.178)--(5.009,17.546)--(4.609,17.546)--cycle;
					\\draw [color=black , dotted, line width = 0.4](4.609,10.649)--(4.609,10.281);
					\\draw [color=black , dotted, line width = 0.4](4.609,10.281)--(5.009,10.281);
					\\draw [color=black , dotted, line width = 0.4](5.009,10.281)--(5.009,10.649);
					\\draw [color=black , dotted, line width = 0.4](5.009,10.649)--(4.609,10.649);
					\\draw [color=black , dotted, line width = 0.4](4.609,10.649)--(4.609,10.281)--(5.009,10.281)--(5.009,10.649)--(4.609,10.649)--cycle;
					\\end{tikzpicture} \n\t \\end{minipage}`
					
					texte_corr = num_alpha(0) + ` L'aire de base du cÃ´ne est : $\\pi \\times R^2$ cm${exposant(2)} $= \\pi \\times ${tex_nombre(r)}^2$ cm${exposant(2)} $= ${tex_nombrec(r * r)}\\pi$ cm${exposant(2)} $\\approx ${tex_nombrec(arrondi(r * r * Math.PI))}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(1) + ` Le volume du cÃ´ne est $\\dfrac{A_\\text{base}}{3}\\times \\text{hauteur}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r)}\\pi}{3} \\times ${tex_nombre(h1)}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(r * r * h1 * Math.PI / 3))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(2) + ` La section est une rÃ©duction de la base de coefficient $\\dfrac{${tex_nombre(h2)}}{${tex_nombre(h1)}}`
					if (!Number.isInteger(h1) || pgcd(h2, h1) > 1) texte_corr += `=${tex_fraction_reduite(h2 * 10, h1 * 10)}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += `Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©s par k${exposant(2)}.<br>`
					texte_corr += `Donc son aire est $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^2 \\times ${tex_nombrec(r * r)}\\pi$ cm${exposant(2)} $=${tex_fraction_reduite(arrondi(h2 * h2 * 100 * r * r), arrondi(h1 * h1 * 100))}\\pi$ cm${exposant(2)} $\\approx${tex_nombrec(arrondi(h2 * h2 * r * r * Math.PI / h1 / h1))}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(3) + ` Dans une rÃ©duction de coefficient k, les volumes sont multipliÃ©s par k${exposant(3)}.<br>`
					texte_corr += `Donc le volume du cÃ´ne de hauteur SO' est : $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3))}$ cm${exposant(3)} '.<br>`
					texte_corr += num_alpha(4) + ` Le volume du tronc de cÃ´ne est : `
					texte_corr += `$V_\\text{CÃ´ne} - V_\\text{CÃ´neRÃ©duit}$<br>Soit : <br>$\\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)}$ - \\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} `
					texte_corr += `$ = \\left(1-\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3\\right)\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} `
					texte_corr += `$ = \\left(1-\\dfrac{${fraction_simplifiee(h2 * 10, h1 * 10)[0] ** 3}}{${fraction_simplifiee(h2 * 10, h1 * 10)[1] ** 3}}\\right)\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} `
					texte_corr += `$ = \\dfrac{${fraction_simplifiee(h2 * 10, h1 * 10)[1] ** 3 - fraction_simplifiee(h2 * 10, h1 * 10)[0] ** 3}}{${fraction_simplifiee(h2 * 10, h1 * 10)[1] ** 3}}\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} `
					texte_corr += `$ \\approx ${tex_nombrec(arrondi((fraction_simplifiee(h2 * 10, h1 * 10)[1] ** 3 - fraction_simplifiee(h2 * 10, h1 * 10)[0] ** 3) * r * r * h1 * Math.PI / (fraction_simplifiee(h2 * 10, h1 * 10)[1] ** 3 * 3)))}$ cm${exposant(3)}<br>`
					this.MG32codeBase64 = codeBase64
					this.MG32code_pour_modifier_la_figure = `
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r", "${r}");
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");							 
							 mtg32App.calculate("MG32svg${numero_de_l_exercice}");
							 mtg32App.display("MG32svg${numero_de_l_exercice}");
							 `
					break;
				case 3: // calcul de l'aire de base, du volume d'une pyramide Ã  base triangulaire. puis, calcul de la section, du volume de la petite pyramide et du volume du tronc
					c = calcul(randint(30, 60) / 10)
					c2 = calcul(randint(30, 60) / 10)
					h1 = calcul(randint(12, 20) / 2)
					h2 = randint(3, Math.floor(h1) - 1)
					if (this.sup2<3)
					if (this.sup2==1) // coefficient de rÃ©duction dÃ©cimal
						while (calcul(h2/h1)!=arrondi(h2/h1,1)) {
							c = calcul(randint(30, 60) / 10)
							c2 = calcul(randint(30, 60) / 10)
							h1 = calcul(randint(12, 20) / 2)
							h2 = randint(3, Math.floor(h1) - 1)
						}
					else //coefficient de rÃ©duction rationnel
						while (calcul(h2/h1)==arrondi(h2/h1,1)) {
							c = calcul(randint(30, 60) / 10)
							c2 = calcul(randint(30, 60) / 10)
							h1 = calcul(randint(12, 20) / 2)
							h2 = randint(3, Math.floor(h1) - 1)
						}	
					codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAANmcmH###8BAP8BAAAAAAAAAAAFHAAAAtIAAAAAAAAAAAAAAAEAAAEg#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAFAf2gAAAAAAEB5uFHrhR64#####wAAAAEAB0NDYWxjdWwA#####wAFbWluaTEAAzAuMgAAAAE#yZmZmZmZmgAAAAMA#####wAFbWF4aTEAATMAAAABQAgAAAAAAAD#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAHQ3Vyc2V1cgAAAAUAAAAFAAAAAwAAAAIAAAADAAAAAf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQAAAAAEAQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQEAAAAEAAAAAAAQAAAAwAgAAAAAAAA#8AAAAAAAAAUAAUBMgAAAAAAAAAAABf####8AAAABAAtDSG9tb3RoZXRpZQAAAAAEAAAAAf####8AAAABAApDT3BlcmF0aW9uA#####8AAAABAA9DUmVzdWx0YXRWYWxldXIAAAACAAAACAEAAAAJAAAAAgAAAAkAAAAD#####wAAAAEAC0NQb2ludEltYWdlAAAAAAQBAAAAAA0AAk82AMAQAAAAAAAAQBAAAAAAAAAFAAAAAAYAAAAHAAAABwAAAAAEAAAAAQAAAAgDAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAAgAAAAgBAAAACQAAAAMAAAAJAAAAAgAAAAoAAAAABAEAAAAADQACSTUAwAAAAAAAAABACAAAAAAAAAUAAAAABgAAAAn#####AAAAAQAIQ1NlZ21lbnQBAAAABAAAAAAAEAAAAQEBAAAAAQAAAAYAAAAGAQAAAAQAAAAAARAAAmsxAMAAAAAAAAAAQAAAAAAAAAABAAE#0xZ0xZ0xZwAAAAv#####AAAAAgAPQ01lc3VyZUFic2Npc3NlAQAAAAQABHpvb20AAAAIAAAACgAAAAz#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAAAQBAAAAAAAAAAAAAAAAwBgAAAAAAAAAAAAMDwAB####AAAAAQAAAAIAAAABAAAAAAAAAAAAAAAAAgAAAA0AAAADAP####8AAmMnAAE0AAAAAUAQAAAAAAAAAAAAAwD#####AAJoMQACMTAAAAABQCQAAAAAAAAAAAADAP####8AAmgyAAE0AAAAAUAQAAAAAAAAAAAAAwD#####AAJoMwAFaDEtaDIAAAAIAQAAAAkAAAAQAAAACQAAABEAAAADAP####8AAWMAATMAAAABQAgAAAAAAAAAAAACAP####8AAAAAAA8AAU8AwCgAAAAAAABAEAAAAAAAAAUAAUBrEAAAAAAAQH3YUeuFHrgAAAAFAP####8BAAAAABAAAAEAAQAAABQBP#MzMzMzMzMAAAACAP####8BAAAAAQ8AAk8yAQUAAUCBFAAAAAAAQGPQo9cKPXEAAAACAP####8BAAAAAQ8AAk8zAQUAAUCBJAAAAAAAQG3wo9cKPXEAAAAFAP####8BAAAAABAAAAEAAQAAABcBP#MzMzMzMzMAAAACAP####8BAAAAAQ8AAk80AQUAAUCBHAAAAAAAQHS4UeuFHrgAAAAFAP####8BAAAAABAAAAEAAQAAABkBP#MzMzMzMzMAAAAFAP####8BAAAAARAAAAEAAQAAABYAP#AAAAAAAAAAAAAGAP####8BAAAAAQ8AAkoyAQUAAMBCAAAAAAAAAAAAG#####8AAAABAAlDQ2VyY2xlT0EA#####wB#f38BAQAAABYAAAAc#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAAFgAAABwAAAAKAP####8BAAAAABAAAAEFAAAAABcAAAAeAAAADgD#####AH9#fwEBAAAAFwAAAB######AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQD#####AAAAGAAAACD#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAD#####AQAAAAENAAJJMwEFAAEAAAAh#####wAAAAEAD0NQb2ludExpZUNlcmNsZQD#####AAAAAAEPAAJLMgEBAAFAAGSoGqf0lgAAAB0AAAASAP####8AAAAAAQ8AAkszAQEAAUAWHME9jCZzAAAAIAAAAAsA#####wAAAAAAEAAAAQABAAAAFgAAABwAAAALAP####8AAAAAABAAAAEAAQAAABYAAAAjAAAACwD#####AAAAAAAQAAABAAEAAAAXAAAAIgAAAAsA#####wAAAAAAEAAAAQABAAAAFwAAACT#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQD#####AAZhbmdwaGkAAAAcAAAAFgAAACMAAAATAP####8AB2FuZ3RldGEAAAAiAAAAFwAAACQAAAADAP####8AA3BoaQAGYW5ncGhpAAAACQAAACkAAAADAP####8ABXRoZXRhAAdhbmd0ZXRhAAAACQAAACoAAAAHAP####8AAAAZ#####wAAAAIACUNGb25jdGlvbgQAAAAJAAAAKwAAAAMA#####wADeCcxAApzaW4odGhldGEpAAAAFAMAAAAJAAAALAAAAAMA#####wADeScxABQtY29zKHRoZXRhKSpzaW4ocGhpKQAAAAgBAAAAAQAAAAAAAAAAAAAACAIAAAAUBAAAAAkAAAAsAAAAFAMAAAAJAAAAKwAAAAMA#####wADeCcyAApjb3ModGhldGEpAAAAFAQAAAAJAAAALAAAAAMA#####wADeScyABNzaW4odGhldGEpKnNpbihwaGkpAAAACAIAAAAUAwAAAAkAAAAsAAAAFAMAAAAJAAAAK#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAP####8AAAD#AAIAAAAAQDzMlF2JcmgAAAAcAAAAFgAAACMB#####wAAAAEADENCaXNzZWN0cmljZQD#####AQAA#wAQAAABAQEAAAAcAAAAFgAAACMAAAAGAP####8BAAD#ABAAAAEFAAFAgM#j0J2QXQAAADP#####AAAAAgAGQ0xhdGV4AP####8AAAD#AMAQAAAAAAAAwBQAAAAAAAAAAAA0EQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAB1x2YXJwaGkAAAAVAP####8AfwAAAAIAAAAAQDxTDia4t4kAAAAiAAAAFwAAACQBAAAAFgD#####AX8AAAAQAAABAQEAAAAiAAAAFwAAACQAAAAGAP####8BfwAAABAAAAEFAAFAfSZmyCoB2wAAADcAAAAXAP####8AfwAAAMAUAAAAAAAAwCYAAAAAAAAAAAA4EQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAClx2YXJ0aGV0YSAAAAAFAP####8BAAAAARAAAAEAAQAAABkAP#AAAAAAAAAAAAAGAP####8AAAAAAQ8AAko0AQUAAcBGLhR64UewAAAAOgAAAA4A#####wBmZmYAAQAAABkAAAA7AAAAEgD#####AQAAAAAQAAABBQABP#CX6bp5AmEAAAA8AAAABQD#####AQAAAAAQAAABAAEAAAA9AD#zMzMzMzMz#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wEAAAAAEAAAAQUAAAAAGgAAAD4AAAAQAP####8AAAAaAAAAPAAAABEA#####wEAAAABDQACSTQBBQABAAAAQP####8AAAACAAdDUmVwZXJlAP####8AAAAAAQEAAAAZAAAAQQAAADsAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAAKAP####8BAAAAABAAAAEFAAAAADsAAAAtAAAABwD#####AAAAPwAAABQEAAAACQAAACsAAAAKAP####8BAAAAABAAAAEFAAAAAD0AAABE#####wAAAAIADUNMaWV1RGVQb2ludHMA#####wAAf38BAQAAAEUAAABkAAAAAAA9AAAABQAAAD0AAAA+AAAAPwAAAEQAAABF#####wAAAAEACENWZWN0ZXVyAP####8AAAD#ABAAAAEAAQAAABkAAABDAP####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8BAAAAABAAAAEFAAAAAEIAAAAJAAAALgAAAAkAAAAvAAAAHAD#####AQAAAAAQAAABBQAAAABCAAAACQAAADAAAAAJAAAAMQAAABsA#####wD#AAAAEAAAAQABAAAAGQAAAEgAAAAAGwD#####AAB#AAAQAAABAAEAAAAZAAAASQAAAAAaAP####8AZmZmAQEAAABIAAAAZAAAAAAAJAAAAAYAAAAkAAAAKgAAACwAAAAuAAAALwAAAEj#####AAAAAQAMQ1N1cmZhY2VMaWV1AP####8Af39#AAAABQAAAEwAAAAdAP####8Af39#AAAABQAAAEYAAAACAP####8BAAAAAA8AAVoAAAAAAAAAAABACAAAAAAAAAUAAUB2qAAAAAAAQFEhR64UeuIAAAAFAP####8BAAAAARAAAAEBAQAAAE8BP#AAAAAAAAAAAAAPAP####8AAAAXAAAAIgAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAE8AAABR#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wH#AAAADQAAAQEBAAAATwAAAFIAAAAFAP####8B#wAAARAAAAEAAQAAAE8AP#AAAAAAAAD#####AAAAAQALQ1NpbWlsaXR1ZGUA#####wAAAE8AAAABQFaAAAAAAAAAAAABP9MzMzMzMzMAAAAKAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABSAAAAVQAAAB8A#####wAAAE######AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBWgAAAAAAAAAAAAT#TMzMzMzMzAAAACgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAUgAAAFcAAAALAP####8B#wAAABAAAAEAAQAAAFYAAABY#####wAAAAIADENDb21tZW50YWlyZQD#####AP8AAAH#####EEB#qAAAAAAAQHpoUeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAARaT09N#####wAAAAEABUNGb25jAP####8ABHplcm8ADWFicyh0KTwwLjAwMDEAAAAIBAAAABQA#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAE#Gjbi6xxDLQABdAAAAAcA#####wAAABQAAAABP+AAAAAAAAAAAAAHAP####8AAABPAAAACQAAAA0AAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABSAAAAXf####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAPAAFVAMAQAAAAAAAAwDcAAAAAAAIFAAAAAF7#####AAAAAQAJQ0xvbmd1ZXVyAP####8AAABPAAAAX#####8AAAACAAlDQ2VyY2xlT1IA#####wEAAAABAQAAABQAAAABP#AAAAAAAAAAAAAAEAD#####AAAAFQAAAGEAAAARAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAYgAAABEA#####wEAAAAADwACSTIAAAAAAAAAAABACAAAAAAAAAUAAQAAAGIAAAAkAP####8BAAAAAAsAAkkxAMAQAAAAAAAAQBAAAAAAAAAFAAAAAGT#####AAAAAQAJQ0Ryb2l0ZUFCAP####8BAAAAAA0AAAEAAQAAABQAAABl#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wEAAAAAEAAAAQABAAAAFAAAAGYAAAAOAP####8BAAAAAAEAAAAUAAAAZQAAABAA#####wAAAGcAAABoAAAAEQD#####AQAAAAALAAJKMQDAKAAAAAAAAMAQAAAAAAAABQACAAAAaQAAABkA#####wCAgIABAQAAABQAAABlAAAAagAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAABwA#####wEAAAAADwABSwBAEAAAAAAAAMA3AAAAAAAABQAAAABrAAAAAQAAAAAAAAAAAAAAFAQAAAAJAAAAKwAAABwA#####wEAAAAADwABSQDAEAAAAAAAAD#wAAAAAAAABQAAAABrAAAACQAAAC4AAAAJAAAALwAAABwA#####wEAAAAADwABSgEFAAAAAGsAAAAJAAAAMAAAAAkAAAAxAAAAHgD#####AQAAAAANAAABAQEAAAAUAAAAbQAAAB4A#####wEAAAAADQAAAQEBAAAAFAAAAG4AAAAeAP####8BAAAAAA0AAAEBAQAAABQAAABsAAAAGwD#####Af8AAAAQAAABAAEAAAAUAAAAbQAAAAAbAP####8BAH8AABAAAAEAAQAAABQAAABuAAAAABsA#####wEAAP8AEAAAAQABAAAAFAAAAGwA#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAAA8AAUEAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAAG0AAAAJAAAAEwAAACkA#####wEAAAAADwABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAAUAAAAbgAAAAkAAAAPAAAAKQD#####AQAAAAAPAAFTAAAAAAAAAAAAQAgAAAAAAAAFAAAAABQAAABsAAAACQAAABAAAAApAP####8AAAAAAA8AAk8nAAAAAAAAAAAAQAgAAAAAAAAFAAAAABQAAABsAAAACQAAABIAAAALAP####8AAAAAABAAAAEBAQAAAHUAAAAUAAAACwD#####AAAAAAAQAAABAQEAAAAUAAAAdgAAAAsA#####wAAAAAAEAAAAQEBAAAAdgAAAHUAAAALAP####8AAAAAABAAAAEBAQAAAHcAAAB1AAAACwD#####AAAAAAAQAAABAQEAAAB3AAAAdgAAAAcA#####wAAAHcAAAAIAwAAAAkAAAARAAAACQAAABAAAAAKAP####8BAAAAAA8AAkEnAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHUAAAB+AAAACgD#####AQAAAAAPAAJCJwAAAAAAAAAAAEAIAAAAAAAABQAAAAB2AAAAfgAAAAsA#####wAAAAAAEAAAAQEBAAAAfwAAAHgAAAALAP####8AAAAAABAAAAEBAQAAAHgAAACAAAAACwD#####AAAAAAAQAAABAQEAAAB#AAAAgAAAAAQA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAQAAAAMAAAB2AAAAdQAAABQAAAAWAAAAAIQBAAAAABAAAAEAAQAAABQAAAB1AAAAdgAAAAYAAAAAhAEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAIUAAAATAQAAAIQABGFuZzEAAAB2AAAAdQAAABQAAAAEAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAEAAAADAAAAFAAAAHUAAAB3AAAAFgAAAACIAQAAAAAQAAABAAEAAAB3AAAAdQAAABQAAAAGAAAAAIgBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAACJAAAAEwEAAACIAARhbmcyAAAAFAAAAHUAAAB3AAAABAD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAABAAAAAwAAAHcAAAB1AAAAdgAAABYAAAAAjAEAAAAAEAAAAQABAAAAdgAAAHUAAAB3AAAABgAAAACMAQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAAjQAAABMBAAAAjAAEYW5nMwAAAHcAAAB1AAAAdgAAAAMA#####wAEc29tQQAOYW5nMSthbmcyK2FuZzMAAAAIAAAAAAgAAAAACQAAAIcAAAAJAAAAiwAAAAkAAACPAAAAAwD#####AAlTQXZpc2libGUADDEvemVybyhzb21BKQAAAAgDAAAAAT#wAAAAAAAA#####wAAAAEADkNBcHBlbEZvbmN0aW9uAAAAWwAAAAkAAACQAAAABwD#####AAAAdwAAAAkAAACRAAAACgD#####Af8AAAANAAJBMQAAAAAAAAAAAEAIAAAAAAAABQAAAAB1AAAAkgAAAAsA#####wAAAAAAEAAAAQACAAAAdwAAAJMAAAAEAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAEAAAADAAAAdwAAAHYAAAAUAAAAFgAAAACVAQAAAAAQAAABAAEAAAAUAAAAdgAAAHcAAAAGAAAAAJUBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAACWAAAAEwEAAACVAARhbmc0AAAAdwAAAHYAAAAUAAAABAD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAABAAAAAwAAAHUAAAB2AAAAdwAAABYAAAAAmQEAAAAAEAAAAQABAAAAdwAAAHYAAAB1AAAABgAAAACZAQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAAmgAAABMBAAAAmQAEYW5nNQAAAHUAAAB2AAAAdwAAAAQA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAQAAAAMAAAAUAAAAdgAAAHUAAAAWAAAAAJ0BAAAAABAAAAEAAQAAAHUAAAB2AAAAFAAAAAYAAAAAnQEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAJ4AAAATAQAAAJ0ABGFuZzYAAAAUAAAAdgAAAHUAAAADAP####8ABHNvbUIADmFuZzQrYW5nNSthbmc2AAAACAAAAAAIAAAAAAkAAACYAAAACQAAAJwAAAAJAAAAoAAAAAMA#####wAJU0J2aXNpYmxlAAwxL3plcm8oc29tQikAAAAIAwAAAAE#8AAAAAAAAAAAACoAAABbAAAACQAAAKEAAAAHAP####8AAAB3AAAACQAAAKIAAAAKAP####8BAAAAAA0AAkIxAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHYAAACjAAAACwD#####AAAAAAAQAAABAAIAAAB3AAAApAAAAAQA#####wAXTWVzdXJlIGQnYW5nbGUgb3JpZW50w6kAAAACAAAAAQAAAAMAAAB3AAAAFAAAAHUAAAAWAAAAAKYBAAAAABAAAAEAAQAAAHUAAAAUAAAAdwAAAAYAAAAApgEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMFAAFAaT5Clg7dyQAAAKcAAAATAQAAAKYABGFuZzcAAAB3AAAAFAAAAHUAAAAEAP####8AF01lc3VyZSBkJ2FuZ2xlIG9yaWVudMOpAAAAAgAAAAEAAAADAAAAdQAAABQAAAB2AAAAFgAAAACqAQAAAAAQAAABAAEAAAB2AAAAFAAAAHUAAAAGAAAAAKoBAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzBQABQGk+QpYO3ckAAACrAAAAEwEAAACqAARhbmc4AAAAdQAAABQAAAB2AAAABAD#####ABdNZXN1cmUgZCdhbmdsZSBvcmllbnTDqQAAAAIAAAABAAAAAwAAAHYAAAAUAAAAdwAAABYAAAAArgEAAAAAEAAAAQABAAAAdwAAABQAAAB2AAAABgAAAACuAQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwUAAUBpPkKWDt3JAAAArwAAABMBAAAArgAFYW5nMTAAAAB2AAAAFAAAAHcAAAADAP####8ABHNvbU8AD2FuZzcrYW5nOCthbmcxMAAAAAgAAAAACAAAAAAJAAAAqQAAAAkAAACtAAAACQAAALEAAAADAP####8ACVNPdmlzaWJsZQAMMS96ZXJvKHNvbU8pAAAACAMAAAABP#AAAAAAAAAAAAAqAAAAWwAAAAkAAACyAAAABwD#####AAAAdwAAAAkAAACzAAAACgD#####AQAAAAANAAJPMQAAAAAAAAAAAEAIAAAAAAAABQAAAAAUAAAAtAAAAAsA#####wAAAAAAEAAAAQACAAAAdwAAALUAAAAnAP####8BAAAAABAAAAEAAQAAAHYAAAAUAAAAJwD#####AQAAAAAQAAABAAEAAAB1AAAAFAAAACcA#####wEAAAAAEAAAAQABAAAAdgAAAHUAAAALAP####8AAAAAABAAAAEBAQAAAHcAAAAUAAAAGAD#####AQAAAAAQAAJ3MQAAAAAAAAAAAEAIAAAAAAAABQAAAAC4AAAAfQAAAAwA#####wAEYWJzMQAAAHYAAAB3AAAAu#####8AAAABAA5DVGVzdEV4aXN0ZW5jZQD#####AAZ0ZXN0T0EAAAC8AAAAAwD#####AAlPQXZpc2libGUADDEvKDEtdGVzdE9BKQAAAAgDAAAAAT#wAAAAAAAAAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAvQAAABgA#####wEAAAAAEAACdzIAAAAAAAAAAABACAAAAAAAAAUAAAAAtgAAALkAAAAMAP####8ABGFiczIAAAAUAAAAdwAAAL8AAAArAP####8ABnRlc3RBQgAAAMAAAAADAP####8ACUFCdmlzaWJsZQAMMS8oMS10ZXN0QUIpAAAACAMAAAABP#AAAAAAAAAAAAAIAQAAAAE#8AAAAAAAAAAAAAkAAADBAAAAGAD#####AQAAAAAQAAJ3MwAAAAAAAAAAAEAIAAAAAAAABQAAAAB8AAAAtwAAAAwA#####wAEYWJzMwAAAHUAAAB3AAAAwwAAACsA#####wAGdGVzdE9CAAAAxAAAAAMA#####wAJT0J2aXNpYmxlAAwxLygxLXRlc3RPQikAAAAIAwAAAAE#8AAAAAAAAAAAAAgBAAAAAT#wAAAAAAAAAAAACQAAAMUAAAAHAP####8AAAB3AAAACQAAAL4AAAAKAP####8BAAAAABAAAkEyAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHUAAADHAAAACwD#####AAAAAAAQAAABAAIAAADIAAAAFAAAAAcA#####wAAAHcAAAAJAAAAwgAAAAoA#####wEAAAAAEAACQjIAAAAAAAAAAABACAAAAAAAAAUAAAAAdgAAAMoAAAALAP####8BAAAAABAAAAEAAgAAAMsAAAB1AAAABwD#####AAAAdwAAAAkAAADGAAAACgD#####AQAAAAAQAAJCMwAAAAAAAAAAAEAIAAAAAAAABQAAAAB2AAAAzQAAAAsA#####wAAAAAAEAAAAQACAAAAzgAAABQAAAAKAP####8BAAAAABAAAkE0AAAAAAAAAAAAQAgAAAAAAAAFAAAAAH8AAADKAAAACwD#####AAAAAAAQAAABAAIAAADQAAAAgAAAAAoA#####wEAAAAAEAACQjQAAAAAAAAAAABACAAAAAAAAAUAAAAAgAAAAM0AAAALAP####8AAAAAABAAAAEAAgAAANIAAAB4AAAACgD#####AQAAAAAQAAJPNQAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAAxwAAAAsA#####wAAAAAAEAAAAQACAAAA1AAAAH######AAAAAQAOQ0NlbnRyZUdyYXZpdGUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAH8AAAB4AAAAgAAAAAcA#####wAAANYAAAABP#TMzMzMzM0AAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB#AAAA1wAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHgAAADXAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAgAAAANcAAAAhAP####8AAAAAAMAkAAAAAAAAwCQAAAAAAAAAAADYEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAABCNHQScAAAAhAP####8AAAAAAMAAAAAAAAAAwBgAAAAAAAAAAADaEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAABCNHQicAAAAhAP####8AAAAAAD#wAAAAAAAAwDEAAAAAAAAAAADZEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAABCNHTycAAAAsAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB1AAAAFAAAAHYAAAAHAP####8AAADeAAAAAT#zMzMzMzMzAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAdQAAAN8AAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB2AAAA3wAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABQAAADfAAAAIQD#####AAAAAADAOQAAAAAAAMAoAAAAAAAAAAAAdRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAMjR0EAAAAhAP####8AAAAAAMAQAAAAAAAAwCAAAAAAAAAAAADhEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyNHQgAAACEA#####wAAAAAAwBgAAAAAAADAIgAAAAAAAAAAAOIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAADI0dPAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAbgAAAFwAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABtAAAAXAAAAAsA#####wB#f38AEAAAAQEBAAAAFAAAAOYAAAAPAP####8AAAAUAAAA5wAAAAsA#####wB#f38AEAAAAQEBAAAA5wAAABQAAAAPAP####8AAAAUAAAA5gAAAAoA#####wF#f38AEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAAAAOcAAADrAAAACwD#####AH9#fwAQAAABAQEAAADnAAAA7AAAAAsA#####wB#f38AEAAAAQEBAAAA7AAAAOb#####AAAAAQAJQ1BvbHlnb25lAP####8Af39#AQEAAAAFAAAA5gAAABQAAADnAAAA7AAAAOYAAAAKAP####8Bf39#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAA6wAAAAoA#####wF#f38AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHgAAADpAAAACwD#####AH9#fwAQAAABAQEAAAB4AAAA8AAAAA8A#####wAAAHgAAADxAAAACwD#####AH9#fwAQAAABAQEAAADxAAAAeAAAAA8A#####wAAAHgAAADwAAAACgD#####AX9#fwAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAAAA8QAAAPUAAAALAP####8Af39#ABAAAAEBAQAAAPEAAAD2AAAACwD#####AH9#fwAQAAABAQEAAAD2AAAA8AAAAC0A#####wB#f38BAQAAAAUAAADwAAAAeAAAAPEAAAD2AAAA8AAAAAoA#####wF#f38AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGwAAABcAAAADwD#####AAAAFAAAAPoAAAAKAP####8Bf39#ABAAAABACAAAAAAAAAAAAAAAAAAABQAAAADmAAAA+wAAAAsA#####wB#f38AEAAAAQEBAAAA+gAAABQAAAALAP####8Af39#ABAAAAEBAQAAAOYAAAD8AAAACwD#####AH9#fwAQAAABAQEAAAD8AAAA+gAAAC0A#####wB#f38BAQAAAAUAAAD6AAAAFAAAAOYAAAD8AAAA+gAAAA8A#####wAAABQAAADnAAAACgD#####AX9#fwAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAAAA+gAAAQEAAAALAP####8Af39#ABAAAAEBAQAAAPoAAAECAAAACwD#####AH9#fwAQAAABAQEAAAECAAAA5wAAAC0A#####wB#f38BAQAAAAUAAADnAAAAFAAAAPoAAAECAAAA5wAAAAoA#####wF#f38AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHgAAAD7AAAADwD#####AAAAeAAAAQYAAAAKAP####8Bf39#ABAAAABACAAAAAAAAAAAAAAAAAAABQAAAADwAAABBwAAAAsA#####wB#f38AEAAAAQEBAAABBgAAAHgAAAALAP####8Af39#ABAAAAEBAQAAAPAAAAEIAAAACwD#####AH9#fwAQAAABAQEAAAEIAAABBgAAAC0A#####wB#f38BAQAAAAUAAAEGAAAAeAAAAPAAAAEIAAABBgAAAA8A#####wAAAHgAAADxAAAACgD#####AX9#fwAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAAABBgAAAQ0AAAALAP####8Af39#ABAAAAEBAQAAAQYAAAEOAAAACwD#####AH9#fwAQAAABAQEAAAEOAAAA8QAAAC0A#####wB#f38BAQAAAAUAAADxAAAAeAAAAQYAAAEOAAAA8QAAAC0A#####wD#AAABAQAAAAQAAAB#AAAAgAAAAHgAAAB######wAAAAEAEENTdXJmYWNlUG9seWdvbmUA#####wD#AAAAAAAFAAABEgAAAC0A#####wAAfwABAQAAAAQAAAB1AAAAdgAAABQAAAB1AAAALgD#####AAAA#wAAAAUAAAEUAAAACgD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAdwAAAPsAAAAhAP####8AAAAAAMAwAAAAAAAAwCIAAAAAAAAAAAEWEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyNHUwAAACkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAHgAAAB3AAAAAT#TMzMzMzMzAAAAKQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAFAAAAHgAAAABP9mZmZmZmZoAAAANAP####8AAAAAAMAoAAAAAAAAwB#######+AAAAEYEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAQAAABEAAAANAP####8AAAAAAMAuAAAAAAAAwCAAAAAAAAAAAAEZEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAQAAABIAAAApAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB1AAAAFAAAAAE#2ZmZmZmZmgAAACkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABQAAAB2AAAAAT#jMzMzMzMzAAAADQD#####AAAAAADAHAAAAAAAAMA2AAAAAAAAAAABHBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAATAAAADQD#####AAAAAAC#8AAAAAAAAMAzAAAAAAAAAAABHRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAAAPAAAAYP##########"
					if (!sortie_html) texte = `\\begin{minipage}{0.7 \\linewidth} \n\t`
					else texte=``
					texte += `SOAB est une pyramide Ã  base triangulaire de hauteur SO${sp()}=${sp()}${tex_nombre(h1)}${sp()}cm.<br> Sa base est un triangle OAB rectangle en O tel que OA${sp()}=${sp()}${tex_nombre(c)}${sp()}cm et OB${sp()}=${sp()}${tex_nombre(c2)}${sp()}cm.<br>`
					texte += ` Le point O' est situÃ© sur la hauteur [SO] Ã  ${h2}${sp()}cm de S.`
					texte += `<br>Un plan parallÃ¨le Ã  la face OAB passant par O' coupe la pyramide en formant la section O'A'B'.<br>`
					if (!sortie_html) texte +=`La figure n'est pas en vraie grandeur.<br>`
					texte += num_alpha(0) + ` Calculer l'` + katex_Popup2(numero_de_l_exercice + i * 4, 1, "aire de base de la pyramide", `Formule : Aire d'un triangle rectangle`, `$Aire=\\dfrac{\\text{c}\\times\\text{c'}}{2}$`) + `.<br>`
					texte += num_alpha(1) + ` Calculer le ` + katex_Popup2(numero_de_l_exercice + i * 4 + 1, 1, "volume de la pyramide", `Formule : volume d'une pyramide d'aire de base $B$ et de hauteur h`, `$Volume= \\dfrac{B \\times \\text{h}}{3}$`) + ` SOAB.<br>`
					texte += num_alpha(2) + ` En dÃ©duire l'aire de la ` + katex_Popup2(numero_de_l_exercice + i * 4 + 2, 1, "section", `DÃ©finition : section plane d'un solide`, `La section d'un solide par un plan est une figure plane.<br>Dans le cas d'une section d'une pyramide par un plan parallÃ¨le Ã  sa base, cette section est un polygone qui est une rÃ©duction de la base.<br>Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©es par k${exposant(2)} et les volumes sont multipliÃ©s par k${exposant(3)}.`) + ` O'A'B' sachant que SO'${sp()}=${sp()}${h2}${sp()}cm.<br>`
					texte += num_alpha(3) + ` Calculer le volume de la pyramide SO'A'B'.<br>`
					texte += num_alpha(4) + ` Calculer le volume du tronc de la pyramide (partie de la pyramide situÃ©e entre la base et la section).`
					if (sortie_html) texte += `<br>Le point O peut Ãªtre dÃ©placÃ© et on peut changer l'angle de vue &#x3C6; `
					else texte+=`\n\t \\end{minipage} \n\t \\begin{minipage}{0.3 \\linewidth} \n\t \\begin{tikzpicture}[scale=0.8]
					\\definecolor{hhhhhh}{rgb}{0,0,0}
					\\definecolor{phphph}{rgb}{0.5,0.5,0.5}
					\\definecolor{ofofof}{rgb}{0.5,0.5,0.5}
					\\definecolor{ffhhhh}{rgb}{1,0,0}
					\\definecolor{hhofhh}{rgb}{0,0.5,0}
					\\definecolor{hhhhff}{rgb}{0,0,1}
					\\clip (8.05,0) rectangle (0,12.08);
					\\fill[color=black] (3.878,2.24) circle (0.054);
					\\node at (3.341, 2.562) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.376cm} {0.47cm} \\selectfont] {$\\text{O}$};
					\\fill[color=black] (3.878,7.567) circle (0.054);
					\\node at (3.663, 7.889) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.376cm} {0.47cm} \\selectfont] {$\\text{O'}$};
					\\draw [color=black , dotted, line width = 0.4](1.822,1.235)--(3.878,2.24);
					\\draw [color=black , dotted, line width = 0.4](3.878,2.24)--(6.791,0.978);
					\\draw [color=black , dotted, line width = 0.4](6.791,0.978)--(1.822,1.235);
					\\draw [color=black , dotted, line width = 0.4](3.878,11.118)--(1.822,1.235);
					\\draw [color=black , dotted, line width = 0.4](3.878,11.118)--(6.791,0.978);
					\\draw [color=black , dotted, line width = 0.4](3.055,7.165)--(3.878,7.567);
					\\draw [color=black , dotted, line width = 0.4](3.878,7.567)--(5.043,7.062);
					\\draw [color=black , dotted, line width = 0.4](3.055,7.165)--(5.043,7.062);
					\\draw [color=black , line width = 0.8](3.878,11.118)--(1.822,1.235);
					\\draw [color=black , line width = 0.8](3.878,11.118)--(6.791,0.978);
					\\draw [color=black , dotted, line width = 0.4](3.878,11.118)--(3.878,2.24);
					\\draw [color=black , line width = 0.8](3.055,7.165)--(5.043,7.062);
					\\node at (2.345, 7.43) [align=left,below right ,black,,font= \\sf \\fontsize {0.403cm} {0.503cm} \\selectfont] {\\textbf{A'}};
					\\node at (5.278, 7.27) [align=left,below right ,black,,font= \\sf \\fontsize {0.403cm} {0.503cm} \\selectfont] {\\textbf{B'}};
					\\node at (1.178, 1.584) [align=left,below right ,black,,font= \\sf \\fontsize {0.403cm} {0.503cm} \\selectfont] {\\textbf{A}};
					\\node at (7.155, 1.145) [align=left,below right ,black,,font= \\sf \\fontsize {0.403cm} {0.503cm} \\selectfont] {\\textbf{B}};
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,2.24)--(4.242,2.083);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,2.073)--(3.878,2.24);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,2.073)--(3.899,1.915);
					\\draw [color=ofofof , dotted, line width = 0.4](3.899,1.915)--(4.242,2.083);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,2.083)--(3.878,2.24)--(3.535,2.073)--(3.899,1.915)--(4.242,2.083)--cycle;
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,7.567)--(4.242,7.409);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,7.399)--(3.878,7.567);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,7.399)--(3.899,7.241);
					\\draw [color=ofofof , dotted, line width = 0.4](3.899,7.241)--(4.242,7.409);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,7.409)--(3.878,7.567)--(3.535,7.399)--(3.899,7.241)--(4.242,7.409)--cycle;
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,2.684)--(3.878,2.24);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,2.083)--(4.242,2.526);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,2.526)--(3.878,2.684);
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,2.684)--(3.878,2.24)--(4.242,2.083)--(4.242,2.526)--(3.878,2.684)--cycle;
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,2.684)--(3.535,2.517);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,2.517)--(3.535,2.073);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,2.073)--(3.878,2.24)--(3.878,2.684)--(3.535,2.517)--(3.535,2.073)--cycle;
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,8.011)--(3.878,7.567);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,7.409)--(4.242,7.853);
					\\draw [color=ofofof , dotted, line width = 0.4](4.242,7.853)--(3.878,8.011);
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,8.011)--(3.878,7.567)--(4.242,7.409)--(4.242,7.853)--(3.878,8.011)--cycle;
					\\draw [color=ofofof , dotted, line width = 0.4](3.878,8.011)--(3.535,7.843);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,7.843)--(3.535,7.399);
					\\draw [color=ofofof , dotted, line width = 0.4](3.535,7.399)--(3.878,7.567)--(3.878,8.011)--(3.535,7.843)--(3.535,7.399)--cycle;
					\\draw [color=ffhhhh , dotted, line width = 0.4](3.055,7.165)--(5.043,7.062)--(3.878,7.567)--(3.055,7.165)--cycle;
					\\fill [color = ffhhhh, opacity = 0.2](3.055,7.165)--(5.043,7.062)--(3.878,7.567)--(3.055,7.165)--cycle;
					\\draw [color=hhofhh , dotted, line width = 0.4](1.822,1.235)--(6.791,0.978)--(3.878,2.24)--(1.822,1.235)--cycle;
					\\fill [color = hhhhff, opacity = 0.2](1.822,1.235)--(6.791,0.978)--(3.878,2.24)--(1.822,1.235)--cycle;
					\\node at (3.395, 11.857) [align=left,below right ,black,,font= \\sf \\fontsize {0.403cm} {0.503cm} \\selectfont] {\\textbf{S}};
					\\end{tikzpicture} \n\t \\end{minipage}`
					
					texte_corr = num_alpha(0) + ` L'aire de base de la pyramide est : $\\dfrac{${tex_nombre(c)}\\times${tex_nombre(c2)}}{2}$ cm${exposant(2)} $= ${tex_nombrec(c * c2 / 2)}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(1) + ` Le volume de la pyramide est : $\\dfrac{A_\\text{base} \\times \\text{hauteur}}{3}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(c * c2 / 2)}\\times ${tex_nombre(h1)}}{3}$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(c * c2 * h1 / 6))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(2) + ` La section est une rÃ©duction de la base de coefficient $\\dfrac{${h2}}{${tex_nombre(h1)}}`
					if (!Number.isInteger(h1) || pgcd(h2, h1) > 1) texte_corr += `=${tex_fraction_reduite(h2 * 10, h1 * 10)}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += `Dans une rÃ©duction de coefficient k, les aires sont multipliÃ©s par k${exposant(2)}.<br>`
					texte_corr += `Donc son aire est $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^2 \\times ${tex_nombre(c * c2 / 2)}$ cm${exposant(2)} $=${tex_fraction_reduite(arrondi(h2 * h2 * 100 * c * c2), arrondi(h1 * h1 * 200))}$ cm${exposant(2)} $\\approx ${tex_nombrec(arrondi(h2 * h2 * c * c2 / h1 / h1 / 2, 2))}$ cm${exposant(2)}.<br>`
					texte_corr += num_alpha(3) + ` Dans une rÃ©duction de coefficient k, les volumes sont multipliÃ©s par k${exposant(3)}.<br>`
					texte_corr += `Donc le volume de la pyramide SO'A'B' est : $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3 \\times \\dfrac{${tex_nombrec(c * c2 * h1 / 2)}}{3}$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(h2 ** 3 * c * c2 / h1 ** 2 / 6))}$ cm${exposant(3)} '.<br>`
					texte_corr += num_alpha(4) + ` Le volume du tronc de la pyramide est : `
					texte_corr += `$V_\\text{SABCD} - V_\\text{SA'B'C'D'}$<br>Soit : <br>$${tex_nombrec(arrondi(c * c2 * h1 / 6))}$ cm${exposant(3)}$ - ${tex_nombrec(arrondi(h2 ** 3 * c * c2 / h1 ** 2 / 6))}$ cm${exposant(3)}$ \\approx ${tex_nombrec(arrondi(c * c2 * h1 / 6 - h2 ** 3 * c * c2 / h1 ** 2 / 6, 2))}$ cm${exposant(3)}.<br>`
					texte_corr += `Ce qui reprÃ©sente $${tex_fraction_reduite(1000 * (h1 ** 3 - h2 ** 3), 1000 * h1 ** 3)}$ du volume de SABCD.`

					this.MG32codeBase64 = codeBase64
					this.MG32code_pour_modifier_la_figure = `
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");
							mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c'", "${c2}");							
							mtg32App.calculate("MG32svg${numero_de_l_exercice}");
							mtg32App.display("MG32svg${numero_de_l_exercice}");
							`
					break;
				case 4: // Un tronc de cÃ´ne Ã©tant donnÃ© (seau), calcul de la hauteur du cÃ´ne dont il est issu, de son volume, puis du volume du seau. Lecture graphique du volume d'eau Ã  mi hauteur et calcul de ce volume
	
					r = calcul(randint(15, 20) / 10)
					r2 = calcul(randint(11, r * 10 - 3) / 10)
					h3 = calcul(randint(10, 15) / 5)
					h2 = calcul(r2 * h3 / (r - r2))
					h1 = calcul(h2 + h3)
					while (calcul(h2/h1)!=arrondi(h2/h1,1)||calcul((h3/2+h2)/h1)!=arrondi((h3/2+h2)/h1,1)) { // on impose des coefficients de rÃ©duction dÃ©cimaux dans cet exercice.
							r = calcul(randint(15, 20) / 10)
							r2 = calcul(randint(11, r * 10 - 3) / 10)
							h3 = calcul(randint(10, 15) / 5)
							h2 = calcul(r2 * h3 / (r - r2))
							h1 = calcul(h2 + h3)
					}
					codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+qPXDAANmcmH###8BAP8BAAAAAAAAAAAFHAAAAtIAAAAAAAAAAAAAAAEAAAE8#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wEAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAABAIwAAAAAAAEB7iFHrhR64#####wAAAAEAB0NDYWxjdWwA#####wAFbWluaTMAAzAuMgAAAAE#yZmZmZmZmgAAAAMA#####wAFbWF4aTMAATIAAAABQAAAAAAAAAD#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAHQ3Vyc2V1cgAAAAUAAAAFAAAAAwAAAAIAAAADAAAAAf####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQAAAAAEAQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQEAAAAEAQAAAAAQAAAAwAgAAAAAAAA#8AAAAAAAAAUAAUBLgAAAAAAAAAAABf####8AAAABAAtDSG9tb3RoZXRpZQAAAAAEAAAAAf####8AAAABAApDT3BlcmF0aW9uA#####8AAAABAA9DUmVzdWx0YXRWYWxldXIAAAACAAAACAEAAAAJAAAAAgAAAAkAAAAD#####wAAAAEAC0NQb2ludEltYWdlAAAAAAQBAAAAAA0AAk8xAMAQAAAAAAAAQBAAAAAAAAAFAAAAAAYAAAAHAAAABwAAAAAEAAAAAQAAAAgDAAAACAEAAAABP#AAAAAAAAAAAAAJAAAAAgAAAAgBAAAACQAAAAMAAAAJAAAAAgAAAAoAAAAABAEAAAAADQACSTEAwAAAAAAAAABACAAAAAAAAAUAAAAABgAAAAn#####AAAAAQAIQ1NlZ21lbnQBAAAABAAAAAAAEAAAAQEBAAAAAQAAAAYAAAAGAQAAAAQAAAAAARAAAmsxAMAAAAAAAAAAQAAAAAAAAAABAAE#0p5BKeQSngAAAAv#####AAAAAgAPQ01lc3VyZUFic2Npc3NlAQAAAAQABHpvb20AAAAIAAAACgAAAAz#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAAAQBAAAAAAAAAAAAAAAAwBgAAAAAAAAAAAAMDwAB####AAAAAQAAAAIAAAABAAAAAAAAAAAAAAAAAgAAAA0AAAADAP####8ABVJtaW5pAAIxNQAAAAFALgAAAAAAAAAAAAMA#####wAFUm1heGkAAjIwAAAAAUA0AAAAAAAAAAAAAwD#####AAZSbWF4aScAB1JtYXhpLTUAAAAIAQAAAAkAAAAQAAAAAUAUAAAAAAAAAAAAAwD#####AAVIbWF4aQACMzAAAAABQD4AAAAAAAAAAAADAP####8ABUhtaW5pAAIyMAAAAAFANAAAAAAAAAAAAAIA#####wAAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAABAbJAAAAAAAECANCj1wo9cAAAAAwD#####AARwYXM0AAExAAAAAT#wAAAAAAAAAAAAAwD#####AAhwYXNncmFkNAABNQAAAAFAFAAAAAAAAAAAAAQA#####wAHQ3Vyc2V1cgAAAA4AAAAHAAAABQAAABMAAAASAAAAFQAAABYAAAAUAAAABQAAAAAXAQAAAAAQAAABAAEAAAAUAT#wAAAAAAAAAAAABgEAAAAXAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAEBhgAAAAAAAAAAAGAAAAAMAAAAAFwAHbmJncmFkMAAdaW50KChIbWF4aS1IbWluaSkvcGFzNCswLjUpKzEAAAAIAP####8AAAACAAlDRm9uY3Rpb24CAAAACAAAAAAIAwAAAAgBAAAACQAAABIAAAAJAAAAEwAAAAkAAAAVAAAAAT#gAAAAAAAAAAAAAT#wAAAAAAAAAAAAAwAAAAAXAApuYmdyYWRwYXMwACFpbnQoKEhtYXhpLUhtaW5pKS9wYXNncmFkNCswLjUpKzEAAAAIAAAAAA4CAAAACAAAAAAIAwAAAAgBAAAACQAAABIAAAAJAAAAEwAAAAkAAAAWAAAAAT#gAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAC0NQb2ludENsb25lAAAAABcBAAAAAAsAAk8xAMA4AAAAAAAAP#AAAAAAAAABAAAAABQAAAALAQAAABcAAAAAABAAAAEAAQAAABwAAAAZ#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUAAAAAFwEAAAAAEAAAAQABAAAAHAAAAB0AAAAGAAAAABcBAAAAAAsAAkoxAMA2AAAAAAAAwC4AAAAAAAABAAG#vhkUx7D9WQAAAB4AAAAHAAAAABcAAAAcAAAACAMAAAAJAAAAFQAAAAgBAAAACQAAABIAAAAJAAAAEwAAAAoAAAAAFwEAAAAACwACSTEAAAAAAAAAAABAAAAAAAAAAAEAAAAAGQAAACD#####AAAAAgAHQ1JlcGVyZQAAAAAXAAAAAAEBAAAAHAAAACEAAAAfAAAAAAAACQAAABMAAAABAAAAAAAAAAAAAAAJAAAAFQAAAAE#8AAAAAAAAAAAAAYAAAAAFwEAAAAACwACVzEAwCAAAAAAAADAOwAAAAAAAAUAAT#hGDFObkU6AAAAHf####8AAAACABJDTGlldU9iamV0UGFyUHRMaWUBAAAAFwAAAAAAAAAjAAAACQAAABoAAAAjAAAAAgAAACMAAAAj#####wAAAAIACENNZXN1cmVYAAAAABcABGFic3cAAAAiAAAAIwAAAAMAAAAAFwAHYWJzd0FycgAjaW50KGFic3cqMTAwMDAwMDAwMCswLjUpLzEwMDAwMDAwMDAAAAAIAwAAAA4CAAAACAAAAAAIAgAAAAkAAAAlAAAAAUHNzWUAAAAAAAAAAT#gAAAAAAAAAAAAAUHNzWUAAAAAAAAADQAAAAAXAQAAAAAAAAAAAAAAAEAYAAAAAAAAAAAAIwsAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAkAAAAmAAAAEgEAAAAXAAAAAAAAACcAAAAJAAAAGwAAACMAAAAEAAAAIwAAACUAAAAmAAAAJ#####8AAAABAA1DUG9pbnRCYXNlRW50AQAAABcAAAAAARAAAlQzAAAAAAAAAAAAQAgAAAAAAAABAAEAAAAiQCAAAAAAAAAAAAAAAAAAAAAAAAAACQAAABMAAAAJAAAAEgAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABMAAAAAFwAFbWVzYWIAAAAiAAAAKQAAAAMBAAAAFwACaDUAJGludChtZXNhYioxMDAwMDAwMDAwKzAuNSkvMTAwMDAwMDAwMAAAAAgDAAAADgIAAAAIAAAAAAgCAAAACQAAACoAAAABQc3NZQAAAAAAAAABP+AAAAAAAAAAAAABQc3NZQAAAAAAAAANAQAAABcAAAAAAAAAAAAAAAAAwCAAAAAAAAAAAAApDwAB####AAAAAQAAAAIAAAABAAAAAAAAAAAABUJIID0gAAMgY20JAAAAKwAAAAMA#####wAGUm1pbmknAAIxMAAAAAFAJAAAAAAAAAAAAAIA#####wAAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAABAbLAAAAAAAEB9eFHrhR64AAAAAwD#####AARwYXMyAAExAAAAAT#wAAAAAAAAAAAAAwD#####AAhwYXNncmFkMgABNQAAAAFAFAAAAAAAAAAAAAQA#####wAHQ3Vyc2V1cgAAAA4AAAAHAAAABQAAAC0AAAARAAAALwAAADAAAAAuAAAABQAAAAAxAQAAAAAQAAABAAEAAAAuAT#wAAAAAAAAAAAABgEAAAAxAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAEBhgAAAAAAAAAAAMgAAAAMAAAAAMQAHbmJncmFkMAAfaW50KChSbWF4aSctUm1pbmknKS9wYXMyKzAuNSkrMQAAAAgAAAAADgIAAAAIAAAAAAgDAAAACAEAAAAJAAAAEQAAAAkAAAAtAAAACQAAAC8AAAABP+AAAAAAAAAAAAABP#AAAAAAAAAAAAADAAAAADEACm5iZ3JhZHBhczAAI2ludCgoUm1heGknLVJtaW5pJykvcGFzZ3JhZDIrMC41KSsxAAAACAAAAAAOAgAAAAgAAAAACAMAAAAIAQAAAAkAAAARAAAACQAAAC0AAAAJAAAAMAAAAAE#4AAAAAAAAAAAAAE#8AAAAAAAAAAAAA8AAAAAMQEAAAAACwACTzEAwDgAAAAAAAA#8AAAAAAAAAEAAAAALgAAAAsBAAAAMQAAAAAAEAAAAQABAAAANgAAADMAAAAQAAAAADEBAAAAABAAAAEAAQAAADYAAAA3AAAABgAAAAAxAQAAAAALAAJKMQDANgAAAAAAAMAuAAAAAAAAAQABv74ZFMew#VkAAAA4AAAABwAAAAAxAAAANgAAAAgDAAAACQAAAC8AAAAIAQAAAAkAAAARAAAACQAAAC0AAAAKAAAAADEBAAAAAAsAAkkxAAAAAAAAAAAAQAAAAAAAAAABAAAAADMAAAA6AAAAEQAAAAAxAAAAAAEBAAAANgAAADsAAAA5AAAAAAAACQAAAC0AAAABAAAAAAAAAAAAAAAJAAAALwAAAAE#8AAAAAAAAAAAAAYAAAAAMQEAAAAACwACVzEAwCAAAAAAAADAOwAAAAAAAAUAAT#hGDFObkU6AAAANwAAABIBAAAAMQAAAAAAAAA9AAAACQAAADQAAAA9AAAAAgAAAD0AAAA9AAAAEwAAAAAxAARhYnN3AAAAPAAAAD0AAAADAAAAADEAB2Fic3dBcnIAI2ludChhYnN3KjEwMDAwMDAwMDArMC41KS8xMDAwMDAwMDAwAAAACAMAAAAOAgAAAAgAAAAACAIAAAAJAAAAPwAAAAFBzc1lAAAAAAAAAAE#4AAAAAAAAAAAAAFBzc1lAAAAAAAAAA0AAAAAMQEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAD0LAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAJAAAAQAAAABIBAAAAMQAAAAAAAABBAAAACQAAADUAAAA9AAAABAAAAD0AAAA#AAAAQAAAAEEAAAAUAQAAADEAAAAAARAAAVQAAAAAAAAAAABACAAAAAAAAAEAAQAAADxAFAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAALQAAAAkAAAARAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwAAAAAxAAVtZXNhYgAAADwAAABDAAAAAwEAAAAxAAJyMwAkaW50KG1lc2FiKjEwMDAwMDAwMDArMC41KS8xMDAwMDAwMDAwAAAACAMAAAAOAgAAAAgAAAAACAIAAAAJAAAARAAAAAFBzc1lAAAAAAAAAAE#4AAAAAAAAAAAAAFBzc1lAAAAAAAAAA0BAAAAMQAAAAAAAAAAAAAAAADAIAAAAAAAAAAAAEMPAAH###8AAAABAAAAAgAAAAEAAAAAAAAAAAAFQkEgPSAAAyBjbQkAAABFAAAAAgD#####AAAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAEBs8AAAAAAAQHo4UeuFHrgAAAADAP####8ABW1pbmkxAAVSbWluaQAAAAkAAAAPAAAAAwD#####AAVtYXhpMQAFUm1heGkAAAAJAAAAEAAAAAMA#####wAEcGFzMQABMQAAAAE#8AAAAAAAAAAAAAMA#####wAIcGFzZ3JhZDEAATUAAAABQBQAAAAAAAAAAAAEAP####8AB0N1cnNldXIAAAAOAAAABwAAAAUAAABIAAAASQAAAEoAAABLAAAARwAAAAUAAAAATAEAAAAAEAAAAQABAAAARwE#8AAAAAAAAAAAAAYBAAAATAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAABAYYAAAAAAAAAAAE0AAAADAAAAAEwAB25iZ3JhZDAAHWludCgobWF4aTEtbWluaTEpL3BhczErMC41KSsxAAAACAAAAAAOAgAAAAgAAAAACAMAAAAIAQAAAAkAAABJAAAACQAAAEgAAAAJAAAASgAAAAE#4AAAAAAAAAAAAAE#8AAAAAAAAAAAAAMAAAAATAAKbmJncmFkcGFzMAAhaW50KChtYXhpMS1taW5pMSkvcGFzZ3JhZDErMC41KSsxAAAACAAAAAAOAgAAAAgAAAAACAMAAAAIAQAAAAkAAABJAAAACQAAAEgAAAAJAAAASwAAAAE#4AAAAAAAAAAAAAE#8AAAAAAAAAAAAA8AAAAATAEAAAAACwACTzEAwDgAAAAAAAA#8AAAAAAAAAEAAAAARwAAAAsBAAAATAAAAAAAEAAAAQABAAAAUQAAAE4AAAAQAAAAAEwBAAAAABAAAAEAAQAAAFEAAABSAAAABgAAAABMAQAAAAALAAJKMQDANgAAAAAAAMAuAAAAAAAAAQABv74ZFMew#VkAAABTAAAABwAAAABMAAAAUQAAAAgDAAAACQAAAEoAAAAIAQAAAAkAAABJAAAACQAAAEgAAAAKAAAAAEwBAAAAAAsAAkkxAAAAAAAAAAAAQAAAAAAAAAABAAAAAE4AAABVAAAAEQAAAABMAAAAAAEBAAAAUQAAAFYAAABUAAAAAAAACQAAAEgAAAABAAAAAAAAAAAAAAAJAAAASgAAAAE#8AAAAAAAAAAAAAYAAAAATAEAAAAACwACVzEAwCAAAAAAAADAOwAAAAAAAAUAAT#hGDFObkU6AAAAUgAAABIBAAAATAAAAAAAAABYAAAACQAAAE8AAABYAAAAAgAAAFgAAABYAAAAEwAAAABMAARhYnN3AAAAVwAAAFgAAAADAAAAAEwAB2Fic3dBcnIAI2ludChhYnN3KjEwMDAwMDAwMDArMC41KS8xMDAwMDAwMDAwAAAACAMAAAAOAgAAAAgAAAAACAIAAAAJAAAAWgAAAAFBzc1lAAAAAAAAAAE#4AAAAAAAAAAAAAFBzc1lAAAAAAAAAA0AAAAATAEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAFgLAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAJAAAAWwAAABIBAAAATAAAAAAAAABcAAAACQAAAFAAAABYAAAABAAAAFgAAABaAAAAWwAAAFwAAAAUAQAAAEwAAAAAARAAAlQxAAAAAAAAAAAAQAgAAAAAAAABAAEAAABXQBQAAAAAAAAAAAAAAAAAAAAAAAAACQAAAEgAAAAJAAAASQAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAABMAAAAATAAFbWVzYWIAAABXAAAAXgAAAAMBAAAATAACcjIAJGludChtZXNhYioxMDAwMDAwMDAwKzAuNSkvMTAwMDAwMDAwMAAAAAgDAAAADgIAAAAIAAAAAAgCAAAACQAAAF8AAAABQc3NZQAAAAAAAAABP+AAAAAAAAAAAAABQc3NZQAAAAAAAAANAQAAAEwAAAAAAAAAAAAAAAAAwCAAAAAAAAAAAABeDwAB####AAAAAQAAAAIAAAABAAAAAAAAAAAABEhMID0AAyBjbQkAAABgAAAAAwD#####AAJoMwAFaDUvMTAAAAAIAwAAAAkAAAArAAAAAUAkAAAAAAAAAAAAAwD#####AAJyJwAFcjMvMTAAAAAIAwAAAAkAAABFAAAAAUAkAAAAAAAAAAAAAwD#####AAFyAAVyMi8xMAAAAAgDAAAACQAAAGAAAAABQCQAAAAAAAAAAAADAP####8AAmgyAAxyJypoMy8oci1yJykAAAAIAwAAAAgCAAAACQAAAGMAAAAJAAAAYgAAAAgBAAAACQAAAGQAAAAJAAAAYwAAAAIA#####wAAAAABDAABUwDALgAAAAAAAMAiAAAAAAAABQABQFugAAAAAABAfOhR64UeuAAAAAcA#####wAAAGYAAAAJAAAAZQAAAAcA#####wAAAGYAAAAJAAAADQAAAAMA#####wAISGVhdU1pbmkAATAAAAABAAAAAAAAAAAAAAACAP####8AAAAAABAAAABACAAAAAAAAAAAAAAAAAAABQAAQGxQAAAAAABAgfwo9cKPXAAAAAMA#####wAEcGFzNQABMQAAAAE#8AAAAAAAAAAAAAQA#####wAHQ3Vyc2V1cgAAAAoAAAAGAAAABAAAAGkAAAArAAAAawAAAGoAAAAFAAAAAGwBAAAAABAAAAEAAQAAAGoBP#AAAAAAAAAAAAAGAQAAAGwAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAQGGAAAAAAAAAAABtAAAAAwAAAABsAAduYmdyYWQwAB1pbnQoKGg1LUhlYXVNaW5pKS9wYXM1KzAuNSkrMQAAAAgAAAAADgIAAAAIAAAAAAgDAAAACAEAAAAJAAAAKwAAAAkAAABpAAAACQAAAGsAAAABP+AAAAAAAAAAAAABP#AAAAAAAAAAAAAPAAAAAGwBAAAAAAsAAk8xAMA4AAAAAAAAP#AAAAAAAAABAAAAAGoAAAALAQAAAGwAAAAAABAAAAEAAQAAAHAAAABuAAAAEAAAAABsAQAAAAAQAAABAAEAAABwAAAAcQAAAAYAAAAAbAEAAAAACwACSjEAwDYAAAAAAADALgAAAAAAAAEAAb++GRTHsP1ZAAAAcgAAAAcAAAAAbAAAAHAAAAAIAwAAAAkAAABrAAAACAEAAAAJAAAAKwAAAAkAAABpAAAACgAAAABsAQAAAAALAAJJMQAAAAAAAAAAAEAAAAAAAAAAAQAAAABuAAAAdAAAABEAAAAAbAAAAAABAQAAAHAAAAB1AAAAcwAAAAAAAAkAAABpAAAAAQAAAAAAAAAAAAAACQAAAGsAAAABP#AAAAAAAAAAAAAGAAAAAGwBAAAAAAsAAlcxAMAgAAAAAAAAwDsAAAAAAAAFAAE#4RgxTm5FOgAAAHEAAAASAQAAAGwAAAAAAAAAdwAAAAkAAABvAAAAdwAAAAIAAAB3AAAAdwAAABQBAAAAbAAAAAABEAACVDIAAAAAAAAAAABACAAAAAAAAAEAAQAAAHZAIAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAaQAAAAkAAAArAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAEwAAAABsAAVtZXNhYgAAAHYAAAB5AAAAAwEAAABsAAJoZQAkaW50KG1lc2FiKjEwMDAwMDAwMDArMC41KS8xMDAwMDAwMDAwAAAACAMAAAAOAgAAAAgAAAAACAIAAAAJAAAAegAAAAFBzc1lAAAAAAAAAAE#4AAAAAAAAAAAAAFBzc1lAAAAAAAAAA0BAAAAbAAAAAAAAAAAAAAAAADAIAAAAAAAAAAAAHkPAAH###8AAAABAAAAAgAAAAEAAAAAAAAAAAARIEhhdXRldXIgZCdlYXUgPSAAAyBjbQkAAAB7AAAAAwD#####AAhIZWF1TWF4aQACaDUAAAAJAAAAKwAAAAMA#####wAFbWluaTIAC0hlYXVNaW5pKjEwAAAACAIAAAAJAAAAaQAAAAFAJAAAAAAAAAAAAAMA#####wAFbWF4aTIACEhlYXVNYXhpAAAACQAAAH0AAAADAP####8ABHBhczMAATEAAAABP#AAAAAAAAAAAAADAP####8ACHBhc2dyYWQzAAE1AAAAAUAUAAAAAAAAAAAAAwD#####AAJoMQAFaDIraDMAAAAIAAAAAAkAAABlAAAACQAAAGL#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8AAAAAAMAxAAAAAAAAwCgAAAAAAAAAAABmEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyNHUwAAAAMA#####wAEaGVhdQAFaGUvMTAAAAAIAwAAAAkAAAB7AAAAAUAkAAAAAAAAAAAABQD#####AQAAAAAQAAABAQEAAABmAD#qqqqqqqqrAAAABgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAcBGMzMzMzMpAAAAhQAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAIYAAABo#####wAAAAEADkNQb2ludExpZVBvaW50AP####8B#wAAAQwAAkknAQUAAAAAhwAAAAoA#####wEAAAABCgABQgEFAAAAAIgAAABnAAAACwD#####AAAAAAAQAAABAQEAAABmAAAAif####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####AQAAAAAQAAJFMQAAAAAAAAAAAEAIAAAAAAAABQAAAABmAAAAiAAAAAgAAAAACQAAAGUAAAAJAAAAhP####8AAAABAAVDRm9uYwD#####AAFmACFwaS8zKigoeCtoMileMyoocicvaDIpXjItcideMipoMikAAAAIAgAAAAgDAAAACQAAAAAAAAABQAgAAAAAAAAAAAAIAQAAAAgC#####wAAAAEACkNQdWlzc2FuY2UAAAAIAP####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAAJAAAAZQAAAAFACAAAAAAAAAAAABkAAAAIAwAAAAkAAABjAAAACQAAAGUAAAABQAAAAAAAAAAAAAAIAgAAABkAAAAJAAAAYwAAAAFAAAAAAAAAAAAAAAkAAABlAAF4AAAABwD#####AAAAZgAAAAkAAACCAAAACgD#####AQAAAAEKAAFIAQUAAAAAiAAAAI0AAAALAP####8AAAAAABAAAAEBAQAAAIkAAACOAAAAFgD#####AAAAAAEKAAFFAQUAAAAAiwAAAAwA#####wAEYWJzMQAAAIkAAACOAAAAkAAAAAMA#####wABeAAMYWJzMSooaDEtaDIpAAAACAIAAAAJAAAAkQAAAAgBAAAACQAAAIIAAAAJAAAAZQAAAAMA#####wABeQAEZih4Kf####8AAAABAA5DQXBwZWxGb25jdGlvbgAAAIwAAAAJAAAAkgAAAAIA#####wAAAAABDAABTwDAKAAAAAAAAEAQAAAAAAAABQABQGsAAAAAAABAdwAAAAAAAAAAAAUA#####wEAAAAAEAAAAQABAAAAlAE#6qqqqqqqqwAAAAYA#####wAAAAABDAABSQDAEAAAAAAAAEAQAAAAAAAABQABQFImZmZmZmYAAACV#####wAAAAEACUNEcm9pdGVBQgD#####AQAAAAAMAAABAAEAAACUAAAAlgAAABAA#####wEAAAABEAAAAQABAAAAlAAAAJUAAAAGAP####8AAAAAAQwAAUoAwCYAAAAAAAAAAAAAAAAAAAUAAcAt87ZFocrzAAAAmAAAABwA#####wEAAAAADAAAAQABAAAAlAAAAJkAAAARAP####8AgICAAQEAAACUAAAAlgAAAJkAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP+AAAAAAAAAAAAABP#AAAAAAAAAAAAADAP####8AB25iZ3JhZHgAATYAAAABQBgAAAAAAAAAAAADAP####8AB25iZ3JhZHkAAjMwAAAAAUA+AAAAAAAA#####wAAAAEAE0NBYnNjaXNzZU9yaWdpbmVSZXAA#####wAFYWJzb3IAAACb#####wAAAAEAE0NPcmRvbm5lZU9yaWdpbmVSZXAA#####wAFb3Jkb3IAAACb#####wAAAAEACkNVbml0ZXhSZXAA#####wAGdW5pdGV4AAAAm#####8AAAABAApDVW5pdGV5UmVwAP####8ABnVuaXRleQAAAJv#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AAAAAAAQAAABBQAAAACbAAAACQAAAJ4AAAAJAAAAnwAAACEA#####wAAAAAAEAAAAQUAAAAAmwAAAAgAAAAACQAAAJ4AAAAJAAAAoAAAAAkAAACfAAAAIQD#####AAAAAAAQAAABBQAAAACbAAAACQAAAJ4AAAAIAAAAAAkAAACfAAAACQAAAKEAAAAHAP####8AAACiAAAACQAAAJwAAAAKAP####8AAAAAABAAAAEFAAAAAKMAAAClAAAABwD#####AAAAogAAAAkAAACdAAAACgD#####AAAAAAAQAAABBQAAAACkAAAApwAAAAsA#####wEAAAAAEAAAAQABAAAAowAAAKYAAAALAP####8BAAAAABAAAAEAAQAAAKQAAACoAAAABgD#####AAAAAAAKAAFXAMAUAAAAAAAAwDQAAAAAAAAFAAE#3EE7izAqegAAAKkAAAATAP####8ABnhDb29yZAAAAJsAAACrAAAAAwD#####AAVhYnN3MQAGeENvb3JkAAAACQAAAKwAAAASAP####8AZmZmAAAAqwAAAAkAAACcAAAAqwAAAAIAAACrAAAAqwAAAAMA#####wAFYWJzdzIADTIqYWJzb3ItYWJzdzEAAAAIAQAAAAgCAAAAAUAAAAAAAAAAAAAACQAAAJ4AAAAJAAAArQAAACEA#####wEAAAAAEAAAAQUAAAAAmwAAAAkAAACvAAAACQAAAJ######AAAAAgAGQ0xhdGV4AP####8BAAAAAAAAAAAAAAAAQBgAAAAAAAAAAACwCgAB####AAAAAQAAAAAAAAABAAAAAAAAAAAAC1xWYWx7YWJzdzJ9AAAABgD#####AQAAAAAKAAFSAEAgAAAAAAAAwCAAAAAAAAAFAAE#0RtOgbToHwAAAKr#####AAAAAgAIQ01lc3VyZVkA#####wAGeUNvb3JkAAAAmwAAALIAAAADAP####8ABW9yZHIxAAZ5Q29vcmQAAAAJAAAAswAAABIA#####wBmZmYAAACyAAAACQAAAJ0AAACyAAAAAgAAALIAAACyAAAAAwD#####AAVvcmRyMgANMipvcmRvci1vcmRyMQAAAAgBAAAACAIAAAABQAAAAAAAAAAAAAAJAAAAnwAAAAkAAAC0AAAAIQD#####AQAAAAAQAAABBQAAAACbAAAACQAAAJ4AAAAJAAAAtgAAACIA#####wFmZmYAwBwAAAAAAAC#8AAAAAAAAAAAALcKAAH###8AAAACAAAAAQAAAAEAAAAAAAAAAAALXFZhbHtvcmRyMn0AAAAhAP####8BAAAAABAAAAEFAAAAAJsAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAhAP####8AAAAAABAAAAEFAAAAAJsAAAAIAQAAAAkAAACCAAAACQAAAGUAAAABAAAAAAAAAAAAAAALAP####8BAAAAABAAAAEAAQAAALkAAAC6AAAABgD#####AQAAAAAMAAJ4MQEFAAE#4499lAf4#gAAALsAAAATAP####8AB3hDb29yZDEAAACbAAAAvAAAAAMA#####wACeDEAB3hDb29yZDEAAAAJAAAAvQAAAAMA#####wACeTEABWYoeDEpAAAAGwAAAIwAAAAJAAAAvgAAACEA#####wEAAAAAEAAAAQUAAAAAmwAAAAkAAAC+AAAACQAAAL######AAAAAgANQ0xpZXVEZVBvaW50cwD#####AAAA#wACAAAAwAAAAfQAAQAAALwAAAAFAAAAvAAAAL0AAAC+AAAAvwAAAMD#####AAAAAQANQ0RlbWlEcm9pdGVPQQD#####AAAAAAANAAABAAEAAACUAAAAlgAAACEA#####wAAAAAAEAAAAQUAAAAAmwAAAAFACAAAAAAAAAAAAAEAAAAAAAAAAAAAABUA#####wAAAAAAwDYAAAAAAABAOwAAAAAAAAAAAMMOAAH###8AAAACAAAAAAAAAAEAAAAAAAAAAAASTml2ZWF1IGQnZWF1IGVuIGRtAAAAIQD#####AAAAAAAQAAABBQAAAACbAAAAAQAAAAAAAAAAAAAAAUAsAAAAAAAAAAAAJQD#####AAAAAAANAAABAAEAAACUAAAAmQAAAAMA#####wAEeG1pbgABMAAAAAEAAAAAAAAAAAAAAAMA#####wAEeG1heAABMwAAAAFACAAAAAAAAAAAAAMA#####wAEeW1pbgABMAAAAAEAAAAAAAAAAAAAAAMA#####wAEeW1heAACMzAAAAABQD4AAAAAAAAAAAAhAP####8AAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzAgAAAACbAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAwD#####AAJkeAALeG1heC14bWluKzEAAAAIAAAAAAgBAAAACQAAAMgAAAAJAAAAxwAAAAE#8AAAAAAAAAAAAAMA#####wACZHkAC3ltYXgteW1pbisxAAAACAAAAAAIAQAAAAkAAADKAAAACQAAAMkAAAABP#AAAAAAAAAAAAAhAP####8AAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzAgAAAACbAAAACQAAAMcAAAABAAAAAAAAAAAAAAAhAP####8AAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzAgAAAACbAAAACQAAAMgAAAABAAAAAAAAAAAAAAAhAP####8AAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzAgAAAACbAAAAAQAAAAAAAAAAAAAACQAAAMkAAAAhAP####8AAAAAABAAAAAAAAAAAAAAAD#jMzMzMzMzAgAAAACbAAAAAQAAAAAAAAAAAAAACQAAAMoAAAALAP####8AAAAAABAAAAEAAQAAAM4AAADPAAAABgD#####AAAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwIAAT#Ifmt08DKRAAAA0v####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAAMsAAADQAAAACgD#####AQAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwIAAAAA0wAAANQAAAAmAP####8AAADQAAAA0QAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMCAAAAANUAAADWAAAACwD#####AX9#fwAQAAABAQEAAADVAAAA1wAAABIA#####wB#f38AAADYAAAACQAAAMwAAADTAAAABAAAANMAAADVAAAA1wAAANgAAAALAP####8AAAAAABAAAAEAAQAAANEAAADQAAAABgD#####AAAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwIAAT#AzbwzbwzcAAAA2gAAACYA#####wAAAMsAAADOAAAACgD#####AAAAAAAQAAAAAAAAAAAAAAA#4zMzMzMzMwIAAAAA2wAAANwAAAAmAP####8AAADOAAAAzwAAAAoA#####wEAAAAAEAAAAAAAAAAAAAAAP+MzMzMzMzMCAAAAAN0AAADeAAAACwD#####AX9#fwAQAAABAQEAAADdAAAA3wAAABIA#####wB#f38AAADgAAAACQAAAM0AAADbAAAABAAAANsAAADdAAAA3wAAAOAAAAAhAP####8BAAAAABAAAAEFAAAAAJsAAAABP+AAAAAAAAAAAAABQD4AAAAAAAD#####AAAAAQAUQ1RyYW5zbGF0aW9uUGFyQ29vcmQA#####wAAAJsAAAABP#AAAAAAAAAAAAABAAAAAAAAAAAAAAAKAP####8BAAAAABAAAAEFAAAAAOIAAADjAAAACgD#####AQAAAAAQAAABBQAAAADkAAAA4wAAAAsA#####wB#f38AEAAAAQEBAAAAlgAAAOIAAAAKAP####8Af39#ABAAAAEFAAAAAJYAAADjAAAACgD#####AH9#fwAQAAABBQAAAADnAAAA4wAAAAsA#####wB#f38AEAAAAQEBAAAA5wAAAOQAAAALAP####8Af39#ABAAAAEBAQAAAOgAAADlAAAAFQD#####AAAAAABAKgAAAAAAAMAAAAAAAAAAAAAAxQ4AAf###wAAAAAAAAACAAAAAQAAAAAAAAAAABFWb2x1bWUgZCdlYXUgZW4gTAAAAAUA#####wEAAAAAEAAAAQEBAAAAiQE#6qqqqqqqq#####8AAAABAAlDTG9uZ3VldXIA#####wAAAGYAAACI#####wAAAAIACUNDZXJjbGVPUgD#####AQAAAAEBAAAAiQAAAAgDAAAACAIAAAAJAAAAZAAAAAkAAABlAAAACQAAAIIA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAOwAAADu#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAQUAAQAAAO8AAAArAP####8BAAAAABAAAAEFAAIAAADvAAAAAwD#####AAFrAAMxLzQAAAAIAwAAAAE#8AAAAAAAAAAAAAFAEAAAAAAAAP####8AAAABABJDQXJjRGVDZXJjbGVEaXJlY3QA#####wEAAAABAQAAAIkAAADwAAAA8f####8AAAABAA9DUG9pbnRMaWVDZXJjbGUA#####wEAAAAAEAAAAQUAAT#LQPMykWXjAAAA8#####8AAAABAA1DUG9pbnRQcm9qZXRlAP####8BAAAAABAAAAEFAAAAAPQAAADsAAAABwD#####AAAA9QAAAAkAAADyAAAACgD#####AQAAAAAQAAABBQAAAAD0AAAA9gAAACQA#####wAAAAABAQAAAPcAAAAyAAAAAAD0AAAABAAAAPQAAAD1AAAA9gAAAPf#####AAAAAQAPQ1N5bWV0cmllQXhpYWxlAP####8AAADsAAAACgD#####AQAAAAAQAAABBQAAAAD3AAAA+QAAACQA#####wAAAAAAAQAAAPoAAAA8AAAAAAD0AAAABQAAAPQAAAD1AAAA9gAAAPcAAAD6AAAABwD#####AAAAZgAAAAgDAAAACQAAAIIAAAAJAAAAZQAAAAoA#####wEAAAAAEAAAAQUAAAAA8AAAAPwAAAAKAP####8BAAAAABAAAAEFAAAAAPEAAAD8#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAEBAAAAjgAAAP0AAAAtAP####8BAAAAABAAAAEFAAE#5ntWGuQ8wgAAAP8AAAAFAP####8BAAAAABAAAAEBAQAAAI4BP+qqqqqqqqsAAAAuAP####8BAAAAABAAAAEFAAAAAQAAAAEBAAAABwD#####AAABAgAAAAkAAADyAAAACgD#####AQAAAAAQAAABBQAAAAEAAAABAwAAACQA#####wAAAAAAAQAAAQQAAAB4AAAAAAEAAAAABAAAAQAAAAECAAABAwAAAQQAAAALAP####8AAAAAABAAAAEAAQAAAPEAAAD+AAAACwD#####AAAAAAAQAAABAAEAAADwAAAA#QAAABUA#####wAAAAAAwBgAAAAAAADAAAAAAAAAAAAAAI4MAAAAAAACAAAAAQAAAAEAAAAAAAAAAAADI0dIAAAAFQD#####AAAAAABAFAAAAAAAAMAAAAAAAAAAAAAA#QwAAf###wAAAAAAAAABAAAAAQAAAAAAAAAAAAMjR0wAAAALAP####8AAAAAABAAAAEAAQAAAI4AAAD9AAAACwD#####AAAAAAAQAAABAQEAAACJAAAA8AAAABUA#####wAAAAAAwCQAAAAAAABACAAAAAAAAAAAAJAMAAAAAAACAAAAAQAAAAEAAAAAAAAAAAADI0dFAAAABQD#####AQAAAAAQAAABAQEAAACQAT#qqqqqqqqr#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wEAAAAAEAAAAQUAAAABDQAAAQf#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAAJAAAAAKAP####8BAAAAABAAAAEFAAAAAQ4AAAEPAAAALAD#####AQAAAAEBAAAAkAAAAQ4AAAEQAAAALQD#####AQAAAAAQAAABBQABP9E+5jRTgJoAAAERAAAALgD#####AQAAAAAQAAABBQAAAAESAAABDQAAAAcA#####wAAARMAAAAJAAAA8gAAAAoA#####wEAAAAAEAAAAQUAAAABEgAAARQAAAAkAP####8AAAD#AQEAAAEVAAAAPAAAAAABEgAAAAQAAAESAAABEwAAARQAAAEVAAAALwD#####AAABDQAAAAoA#####wEAAP8AEAAAAQUAAAABFQAAARcAAAAkAP####8AAAD#AAEAAAEYAAAAPAAAAAABEgAAAAUAAAESAAABEwAAARQAAAEVAAABGP####8AAAABABFDU3VyZmFjZURldXhMaWV1eAD#####AAB#fwAAAAUAAAD7AAABGQAAADMA#####wAAAP8AAAAFAAABFgAAARkAAAAhAP####8AfwAAABAAAAEFAAAAAJsAAAAJAAAAkgAAAAEAAAAAAAAAAAAAACEA#####wAAAP8ADgABTQDAHAAAAAAAAMA0AAAAAAAABQAAAACbAAAACQAAAJIAAAAJAAAAkwAAACEA#####wAAAP8AEAAAAQUAAAAAmwAAAAEAAAAAAAAAAAAAAAkAAACTAAAAIgD#####AAAA#wDAJgAAAAAAAAAAAAAAAAAAAAABHgwAAf###wAAAAIAAAABAAAAAQAAAAAAAAAAAARWKHgpAAAACwD#####AAAAAAAQAAABAQEAAAEeAAABHQAAAAsA#####wAAAAAAEAAAAQEBAAABHQAAARwAAAALAP####8AAAAAABAAAAEBAQAAAJAAAAEOAAAAFQD#####AQAAAABAIAAAAAAAAD#wAAAAAAAAAAABDg4AAAAAAAAAAAABAAAAAQAAAAAAAAAAAAFGAAAAFQD#####AQAAAAH#####DkAwAAAAAAAAQCgAAAAAAAABAf#MzAAAAAAAAAAAAAAAAQAAAAAAAAAAABNDYXB0dXJlciBsZSBwb2ludCBFAAAACwD#####AAAAAAAQAAABAAEAAABmAAAA8AAAAAsA#####wAAAAAAEAAAAQABAAAAZgAAAPEAAAAiAP####8AAAAAAf####8OQCgAAAAAAABASYAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAdFxiZWdpbnthcnJheX17bH0Ke0JBID0gXFZhbHtyJ30gfQpcXCB7eCA9IEJFIFxhcHByb3ggXFZhbHt4fSBcO2RtfQpcXCB7eSA9IFYoeCkgXGFwcHJveCBcVmFse3l9IFw7IGRtXjN9ClxlbmR7YXJyYXl9#####wAAAAEAEENNYWNyb0FwcGFyaXRpb24A#####wAAAP8B#####wxAeYAAAAAAAEAYAAAAAAAAAgHMzP8AAAAAAAAAAAAAAAEAAAAAAAAAAAAGVm9pciBTAAAAAAAEAAAAigAAASUAAAEmAAAAgwD#####AAAAAQARQ01hY3JvRGlzcGFyaXRpb24A#####wAAAP8B#####wxAfiAAAAAAAEAYAAAAAAAAAgHMzP8AAAAAAAAAAAAAAAEAAAAAAAAAAAAIQ2FjaGVyIFMAAAAAAAUAAABmAAAAigAAASUAAAEmAAAAgwAAABUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAKsKAAAAAAABAAAAAAAAAAEAAAAAAAAAAAALI1ZhbChhYnN3MSkAAAASAP####8AZmZmAAABKgAAAAkAAACcAAAAqwAAAAQAAACrAAAArAAAAK0AAAEqAAAAFQD#####AWZmZgDAJAAAAAAAAL#wAAAAAAAAAAAAsgoAAAAAAAIAAAABAAAAAQAAAAAAAAAAAAsjVmFsKG9yZHIxKQAAABIA#####wBmZmYAAAEsAAAACQAAAJ0AAACyAAAABAAAALIAAACzAAAAtAAAASwAAAAVAP####8AZmZmAMAQAAAAAAAAP#AAAAAAAAAAAACUCgAAAAAAAgAAAAAAAAABAAAAAAAAAAAAATAAAAAVAP####8B#wAAAMA0AAAAAAAAwCYAAAAAAAAAAACIEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyNHVQAAABUA#####wAAAAAAwCwAAAAAAADAIgAAAAAAAAAAAIkQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAADI0dCAAAAFQD#####AAAAAABACAAAAAAAAMAmAAAAAAAAAAAA8BAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAMjR0EAAAAiAP####8AfwAAAAAAAAAAAAAAQBgAAAAAAAAAAAEcEgAB####AAAAAQAAAAAAAAABAAAAAAAAAAAAAXgAAAAVAP####8A#wAAAf####8QQCUAAAAAAABAfDhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABiNHWk9PTQAAAAMA#####wAIdGVzdGNvbmUABHI9cicAAAAICAAAAAkAAABkAAAACQAAAGMAAAACAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQFqgAAAAAABAgxwo9cKPXAAAAAcA#####wAAAGYAAAAJAAABNAAAAAoA#####wAAAAABEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAATUAAAE2AAAAAwD#####AAtDb25lVmlzaWJsZQAKMS90ZXN0Y29uZQAAAAgDAAAAAT#wAAAAAAAAAAAACQAAATQAAAAHAP####8AAABmAAAACQAAATgAAAAKAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAE1AAABOQAAABUA#####wAAAAABAAABOhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAClJbCBuJ3kgYSBwYXMgZGUgY8O0bmUgZGFucyBjZXMgY29uZGl0aW9ucwAAAO3##########w=="
					if (!sortie_html) texte = `\\begin{minipage}{0.7 \\linewidth} \n\t`
					else texte=``
					texte += `Un seau a la forme d'un tronc de cÃ´ne.<br>`
					texte += `Sa hauteur intÃ©rieure est de ${tex_nombre(h3)}${sp()}dm, sa petite base a un dimaÃ¨tre intÃ©rieur de ${tex_nombre(r2 * 2)}${sp()}dm et sa grande base (l'ouverture) a un diamÃ¨tre intÃ©rieur de ${tex_nombre(r * 2)}${sp()}dm.<br>`
					if (!sortie_html) texte +=`La figure n'est pas en vraie grandeur.<br>`
					texte += num_alpha(0) + ` Calculer la hauteur du cÃ´ne obtenu en prolongeant les bords du seau.<br>`
					texte += num_alpha(1) + ` En dÃ©duire le volume de ce cÃ´ne.<br>`
					texte += num_alpha(2) + ` En dÃ©duire le volume total du seau.<br>`
					if (sortie_html) texte += `Dans ces deux prochaines questions, on considÃ¨re qu'on remplit le seau Ã  mi-hauteur d'eau.<br>`
					else texte += num_alpha(3) + ` On remplit le seau Ã  mi-hauteur d'eau. Calculer le volume d'eau correspondant.`
					if (sortie_html) {
						texte += num_alpha(3) + ` Par lecture graphique, aprÃ¨s avoir correctement paramÃ©trÃ© la figure, lire le volume d'eau correspondant.<br>`
						texte += num_alpha(4) + ` Retrouver ce rÃ©sultat par le calcul.<br>`
					}
					if (sortie_html) texte += `<br>On peut dÃ©placer le cÃ´ne avec S et modifier les valeurs avec leurs curseurs respectifs.`
					else texte+=`\n\t \\end{minipage} \n\t \\begin{minipage}{0.3 \\linewidth} \n\t \\begin{tikzpicture}[scale=0.8]
\\definecolor{hhhhhh}{rgb}{0,0,0}
\\definecolor{phphph}{rgb}{0.5,0.5,0.5}
\\definecolor{ffffff}{rgb}{1,1,1}
\\definecolor{hhhhff}{rgb}{0,0,1}
\\definecolor{hhofof}{rgb}{0,0.5,0.5}
\\clip (7.96,0) rectangle (0,12.29);
\\fill[color=black] (3.836,0.278) circle (0.053);
\\node at (3.331, 0.65) [align=left,below right ,black,,font= \\sf \\fontsize {0.398cm} {0.498cm} \\selectfont] {\\textbf{S}};
\\draw [color=black , dotted, line width = 0.4](3.836,0.278)--(3.836,8.678);
\\draw [color=black , dotted, line width = 0.4](3.836,8.678)--(3.836,11.478);
\\fill[color=black] (3.836,9.678) circle (0.053);
\\draw [color=black , dotted, line width = 0.4](5.336,8.678)--(5.333,8.702)--(5.323,8.726)--(5.308,8.75)--(5.287,8.773)--(5.259,8.796)--(5.226,8.819)--(5.187,8.841)--(5.143,8.862)--(5.093,8.883)--(5.038,8.902)--(4.978,8.921)--(4.913,8.939)--(4.844,8.956)--(4.771,8.971)--(4.694,8.986)--(4.613,8.999)--(4.529,9.011)--(4.443,9.021)--(4.354,9.03)--(4.262,9.038)--(4.169,9.044)--(4.075,9.048)--(3.98,9.051)--(3.884,9.053)--(3.788,9.053)--(3.692,9.051)--(3.596,9.048)--(3.502,9.044)--(3.409,9.038)--(3.318,9.03)--(3.228,9.021)--(3.142,9.011)--(3.058,8.999)--(2.977,8.986)--(2.9,8.971)--(2.827,8.956)--(2.758,8.939)--(2.693,8.921)--(2.634,8.902)--(2.579,8.883)--(2.529,8.862)--(2.484,8.841)--(2.445,8.819)--(2.412,8.796)--(2.385,8.773)--(2.363,8.75)--(2.348,8.726)--(2.339,8.702)--(2.336,8.678);

\\draw [color=black , line width = 0.4](5.336,8.678)--(5.334,8.658)--(5.327,8.638)--(5.317,8.619)--(5.302,8.599)--(5.283,8.58)--(5.26,8.56)--(5.233,8.542)--(5.202,8.523)--(5.167,8.505)--(5.128,8.488)--(5.086,8.471)--(5.04,8.455)--(4.99,8.439)--(4.938,8.424)--(4.882,8.41)--(4.823,8.396)--(4.762,8.383)--(4.698,8.371)--(4.631,8.36)--(4.562,8.35)--(4.492,8.341)--(4.419,8.333)--(4.345,8.325)--(4.269,8.319)--(4.192,8.314)--(4.114,8.31)--(4.035,8.307)--(3.955,8.304)--(3.876,8.303)--(3.796,8.303)--(3.716,8.304)--(3.637,8.307)--(3.558,8.31)--(3.48,8.314)--(3.403,8.319)--(3.327,8.325)--(3.252,8.333)--(3.18,8.341)--(3.109,8.35)--(3.04,8.36)--(2.973,8.371)--(2.909,8.383)--(2.848,8.396)--(2.789,8.41)--(2.734,8.424)--(2.681,8.439)--(2.632,8.455)--(2.586,8.471)--(2.543,8.488)--(2.505,8.505)--(2.47,8.523)--(2.439,8.542)--(2.412,8.56)--(2.389,8.58)--(2.37,8.599)--(2.355,8.619)--(2.344,8.638)--(2.338,8.658)--(2.336,8.678);

\\draw [color=black , line width = 0.4](5.836,11.478)--(5.833,11.504)--(5.825,11.53)--(5.811,11.556)--(5.792,11.582)--(5.768,11.608)--(5.738,11.633)--(5.703,11.657)--(5.663,11.682)--(5.618,11.705)--(5.568,11.728)--(5.513,11.751)--(5.454,11.772)--(5.39,11.793)--(5.322,11.813)--(5.25,11.832)--(5.174,11.85)--(5.094,11.867)--(5.011,11.883)--(4.925,11.898)--(4.836,11.911)--(4.744,11.924)--(4.649,11.935)--(4.552,11.945)--(4.454,11.954)--(4.353,11.961)--(4.251,11.967)--(4.149,11.972)--(4.045,11.975)--(3.94,11.978)--(3.836,11.978)--(3.731,11.978)--(3.627,11.975)--(3.523,11.972)--(3.42,11.967)--(3.318,11.961)--(3.218,11.954)--(3.119,11.945)--(3.022,11.935)--(2.928,11.924)--(2.836,11.911)--(2.746,11.898)--(2.66,11.883)--(2.577,11.867)--(2.497,11.85)--(2.421,11.832)--(2.349,11.813)--(2.281,11.793)--(2.218,11.772)--(2.158,11.751)--(2.104,11.728)--(2.054,11.705)--(2.009,11.682)--(1.969,11.657)--(1.934,11.633)--(1.904,11.608)--(1.879,11.582)--(1.86,11.556)--(1.847,11.53)--(1.838,11.504)--(1.836,11.478)--(1.838,11.452)--(1.847,11.426)--(1.86,11.4)--(1.879,11.374)--(1.904,11.349)--(1.934,11.324)--(1.969,11.299)--(2.009,11.275)--(2.054,11.251)--(2.104,11.228)--(2.158,11.206)--(2.218,11.184)--(2.281,11.164)--(2.349,11.144)--(2.421,11.125)--(2.497,11.107)--(2.577,11.09)--(2.66,11.074)--(2.746,11.059)--(2.836,11.045)--(2.928,11.033)--(3.022,11.021)--(3.119,11.011)--(3.218,11.003)--(3.318,10.995)--(3.42,10.989)--(3.523,10.984)--(3.627,10.981)--(3.731,10.979)--(3.836,10.978)--(3.94,10.979)--(4.045,10.981)--(4.149,10.984)--(4.251,10.989)--(4.353,10.995)--(4.454,11.003)--(4.552,11.011)--(4.649,11.021)--(4.744,11.033)--(4.836,11.045)--(4.925,11.059)--(5.011,11.074)--(5.094,11.09)--(5.174,11.107)--(5.25,11.125)--(5.322,11.144)--(5.39,11.164)--(5.454,11.184)--(5.513,11.206)--(5.568,11.228)--(5.618,11.251)--(5.663,11.275)--(5.703,11.299)--(5.738,11.324)--(5.768,11.349)--(5.792,11.374)--(5.811,11.4)--(5.825,11.426)--(5.833,11.452);

\\draw [color=black , line width = 0.4](2.336,8.678)--(1.836,11.478);
\\draw [color=black , line width = 0.4](5.336,8.678)--(5.836,11.478);
\\node at (3.729, 11.531) [align=left,left ,black,,font= \\sf \\fontsize {0.292cm} {0.365cm} \\selectfont] {\\textbf{H}};
\\node at (5.915, 11.531) [align=left,right ,black,fill=ffffff,,font= \\sf \\fontsize {0.292cm} {0.365cm} \\selectfont] {\\textbf{L}};
\\draw [color=black , line width = 0.4](3.836,11.478)--(5.836,11.478);
\\draw [color=black , dotted, line width = 0.4](3.836,8.678)--(5.336,8.678);
\\node at (3.623, 9.599) [align=left,left ,black,,font= \\sf \\fontsize {0.292cm} {0.365cm} \\selectfont] {\\textbf{E}};
\\draw [color=hhhhff , dotted, line width = 0.4](5.514,9.678)--(5.512,9.701)--(5.505,9.723)--(5.493,9.745)--(5.476,9.767)--(5.455,9.789)--(5.429,9.81)--(5.399,9.831)--(5.364,9.852)--(5.325,9.872)--(5.282,9.891)--(5.234,9.91)--(5.183,9.928)--(5.128,9.946)--(5.069,9.963)--(5.007,9.979)--(4.941,9.994)--(4.872,10.008)--(4.8,10.022)--(4.726,10.034)--(4.649,10.045)--(4.57,10.056)--(4.488,10.065)--(4.405,10.073)--(4.32,10.08)--(4.234,10.086)--(4.147,10.091)--(4.058,10.094)--(3.97,10.096)--(3.88,10.098)--(3.791,10.098)--(3.702,10.096)--(3.613,10.094)--(3.525,10.091)--(3.437,10.086)--(3.351,10.08)--(3.266,10.073)--(3.183,10.065)--(3.102,10.056)--(3.022,10.045)--(2.945,10.034)--(2.871,10.022)--(2.799,10.008)--(2.73,9.994)--(2.665,9.979)--(2.602,9.963)--(2.543,9.946)--(2.488,9.928)--(2.437,9.91)--(2.389,9.891)--(2.346,9.872)--(2.307,9.852)--(2.272,9.831)--(2.242,9.81)--(2.216,9.789)--(2.195,9.767)--(2.178,9.745)--(2.167,9.723)--(2.159,9.701)--(2.157,9.678);

\\draw [color=hhhhff , line width = 0.4](5.514,9.678)--(5.512,9.656)--(5.505,9.634)--(5.493,9.611)--(5.476,9.589)--(5.455,9.568)--(5.429,9.546)--(5.399,9.525)--(5.364,9.505)--(5.325,9.485)--(5.282,9.465)--(5.234,9.446)--(5.183,9.428)--(5.128,9.41)--(5.069,9.394)--(5.007,9.378)--(4.941,9.362)--(4.872,9.348)--(4.8,9.335)--(4.726,9.322)--(4.649,9.311)--(4.57,9.301)--(4.488,9.292)--(4.405,9.283)--(4.32,9.276)--(4.234,9.271)--(4.147,9.266)--(4.058,9.262)--(3.97,9.26)--(3.88,9.259)--(3.791,9.259)--(3.702,9.26)--(3.613,9.262)--(3.525,9.266)--(3.437,9.271)--(3.351,9.276)--(3.266,9.283)--(3.183,9.292)--(3.102,9.301)--(3.022,9.311)--(2.945,9.322)--(2.871,9.335)--(2.799,9.348)--(2.73,9.362)--(2.665,9.378)--(2.602,9.394)--(2.543,9.41)--(2.488,9.428)--(2.437,9.446)--(2.389,9.465)--(2.346,9.485)--(2.307,9.505)--(2.272,9.525)--(2.242,9.546)--(2.216,9.568)--(2.195,9.589)--(2.178,9.611)--(2.167,9.634)--(2.159,9.656)--(2.157,9.678);

\\fill[color = hhofof, opacity = 0.33](5.336,8.678)--(5.334,8.658)--(5.327,8.638)--(5.317,8.619)--(5.302,8.599)--(5.283,8.58)--(5.26,8.56)--(5.233,8.542)--(5.202,8.523)--(5.167,8.505)--(5.128,8.488)--(5.086,8.471)--(5.04,8.455)--(4.99,8.439)--(4.938,8.424)--(4.882,8.41)--(4.823,8.396)--(4.762,8.383)--(4.698,8.371)--(4.631,8.36)--(4.562,8.35)--(4.492,8.341)--(4.419,8.333)--(4.345,8.325)--(4.269,8.319)--(4.192,8.314)--(4.114,8.31)--(4.035,8.307)--(3.955,8.304)--(3.876,8.303)--(3.796,8.303)--(3.716,8.304)--(3.637,8.307)--(3.558,8.31)--(3.48,8.314)--(3.403,8.319)--(3.327,8.325)--(3.252,8.333)--(3.18,8.341)--(3.109,8.35)--(3.04,8.36)--(2.973,8.371)--(2.909,8.383)--(2.848,8.396)--(2.789,8.41)--(2.734,8.424)--(2.681,8.439)--(2.632,8.455)--(2.586,8.471)--(2.543,8.488)--(2.505,8.505)--(2.47,8.523)--(2.439,8.542)--(2.412,8.56)--(2.389,8.58)--(2.37,8.599)--(2.355,8.619)--(2.344,8.638)--(2.338,8.658)--(2.336,8.678)--(2.157,9.678)--(2.159,9.656)--(2.167,9.634)--(2.178,9.611)--(2.195,9.589)--(2.216,9.568)--(2.242,9.546)--(2.272,9.525)--(2.307,9.505)--(2.346,9.485)--(2.389,9.465)--(2.437,9.446)--(2.488,9.428)--(2.543,9.41)--(2.602,9.394)--(2.665,9.378)--(2.73,9.362)--(2.799,9.348)--(2.871,9.335)--(2.945,9.322)--(3.022,9.311)--(3.102,9.301)--(3.183,9.292)--(3.266,9.283)--(3.351,9.276)--(3.437,9.271)--(3.525,9.266)--(3.613,9.262)--(3.702,9.26)--(3.791,9.259)--(3.88,9.259)--(3.97,9.26)--(4.058,9.262)--(4.147,9.266)--(4.234,9.271)--(4.32,9.276)--(4.405,9.283)--(4.488,9.292)--(4.57,9.301)--(4.649,9.311)--(4.726,9.322)--(4.8,9.335)--(4.872,9.348)--(4.941,9.362)--(5.007,9.378)--(5.069,9.394)--(5.128,9.41)--(5.183,9.428)--(5.234,9.446)--(5.282,9.465)--(5.325,9.485)--(5.364,9.505)--(5.399,9.525)--(5.429,9.546)--(5.455,9.568)--(5.476,9.589)--(5.493,9.611)--(5.505,9.634)--(5.512,9.656)--(5.514,9.678)--cycle;
\\fill[color = hhhhff, opacity = 0.33](5.514,9.678)--(5.512,9.701)--(5.505,9.723)--(5.493,9.745)--(5.476,9.767)--(5.455,9.789)--(5.429,9.81)--(5.399,9.831)--(5.364,9.852)--(5.325,9.872)--(5.282,9.891)--(5.234,9.91)--(5.183,9.928)--(5.128,9.946)--(5.069,9.963)--(5.007,9.979)--(4.941,9.994)--(4.872,10.008)--(4.8,10.022)--(4.726,10.034)--(4.649,10.045)--(4.57,10.056)--(4.488,10.065)--(4.405,10.073)--(4.32,10.08)--(4.234,10.086)--(4.147,10.091)--(4.058,10.094)--(3.97,10.096)--(3.88,10.098)--(3.791,10.098)--(3.702,10.096)--(3.613,10.094)--(3.525,10.091)--(3.437,10.086)--(3.351,10.08)--(3.266,10.073)--(3.183,10.065)--(3.102,10.056)--(3.022,10.045)--(2.945,10.034)--(2.871,10.022)--(2.799,10.008)--(2.73,9.994)--(2.665,9.979)--(2.602,9.963)--(2.543,9.946)--(2.488,9.928)--(2.437,9.91)--(2.389,9.891)--(2.346,9.872)--(2.307,9.852)--(2.272,9.831)--(2.242,9.81)--(2.216,9.789)--(2.195,9.767)--(2.178,9.745)--(2.167,9.723)--(2.159,9.701)--(2.157,9.678)--(2.157,9.678)--(2.159,9.656)--(2.167,9.634)--(2.178,9.611)--(2.195,9.589)--(2.216,9.568)--(2.242,9.546)--(2.272,9.525)--(2.307,9.505)--(2.346,9.485)--(2.389,9.465)--(2.437,9.446)--(2.488,9.428)--(2.543,9.41)--(2.602,9.394)--(2.665,9.378)--(2.73,9.362)--(2.799,9.348)--(2.871,9.335)--(2.945,9.322)--(3.022,9.311)--(3.102,9.301)--(3.183,9.292)--(3.266,9.283)--(3.351,9.276)--(3.437,9.271)--(3.525,9.266)--(3.613,9.262)--(3.702,9.26)--(3.791,9.259)--(3.88,9.259)--(3.97,9.26)--(4.058,9.262)--(4.147,9.266)--(4.234,9.271)--(4.32,9.276)--(4.405,9.283)--(4.488,9.292)--(4.57,9.301)--(4.649,9.311)--(4.726,9.322)--(4.8,9.335)--(4.872,9.348)--(4.941,9.362)--(5.007,9.378)--(5.069,9.394)--(5.128,9.41)--(5.183,9.428)--(5.234,9.446)--(5.282,9.465)--(5.325,9.485)--(5.364,9.505)--(5.399,9.525)--(5.429,9.546)--(5.455,9.568)--(5.476,9.589)--(5.493,9.611)--(5.505,9.634)--(5.512,9.656)--(5.514,9.678)--cycle;
\\draw [color=black , dotted, line width = 0.4](3.836,9.678)--(5.514,9.678);
\\draw [color=black , line width = 0.4](3.836,0.278)--(5.336,8.678);
\\draw [color=black , line width = 0.4](3.836,0.278)--(2.336,8.678);
\\node at (3.411, 8.97) [align=left,below right ,black,,font= \\sf \\fontsize {0.398cm} {0.498cm} \\selectfont] {\\textbf{B}};
\\node at (5.362, 9.023) [align=left,below right ,black,,font= \\sf \\fontsize {0.398cm} {0.498cm} \\selectfont] {\\textbf{A}};
\\fill[color=black] (3.836,0.278) circle (0.053);
\\end{tikzpicture} \n\t \\end{minipage}`
					texte_corr = num_alpha(0) + ` Les triangles SBA et SHL sont semblables car les droites (BA) et (HL) sont parallÃ¨les dans le plan du triangle SHL.<br>`
					texte_corr += ` La tangente de l'angle $\\widehat{HSL}$ est Ã©gale dans le triangle SHL Ã  $\\dfrac{\\text{HL}}{\\text{SH}}$ et dans le triangle SBA Ã  $\\dfrac{\\text{BA}}{\\text{SB}}$.<br>`
					texte_corr += ` d'oÃ¹ $\\dfrac{\\text{HL}}{\\text{SH}}=\\dfrac{\\text{BA}}{\\text{SH}-\\text{BH}}$ `
					texte_corr += ` et l'Ã©galitÃ© des produits en croix nous donne : $\\text{HL}\\left(\\text{SH}-\\text{BH} \\right) =\\text{BA}\\times \\text{SH}$.<br>`
					texte_corr += ` Soit avec les donnÃ©es numÃ©riques : $${tex_nombre(r)}\\left(\\text{SH}-${tex_nombre(h3)}\\right)=${tex_nombre(r2)}\\times \\text{SH}$.<br>`
					texte_corr += `On en dÃ©duit que SH$\\left(${tex_nombre(r)}-${tex_nombre(r2)}\\right)=${tex_nombre(r)}\\times${tex_nombre(h3)}$.<br>`
					texte_corr += `D'oÃ¹ SH $=\\dfrac{${tex_nombrec(r * h3)}}{${tex_nombrec(r - r2)}}=${tex_nombre(h1)}$ dm ( SB = $${tex_nombre(h2)}$ dm).<br>`

					texte_corr += num_alpha(1) + ` Le volume du cÃ´ne est $\\dfrac{A_\\text{base}}{3}\\times \\text{hauteur}$ dm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r)}\\pi}{3} \\times ${tex_nombre(h1)}$ dm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} $\\approx ${tex_nombrec(arrondi(r * r * h1 * Math.PI / 3))}$ dm${exposant(3)}.<br>`
					texte_corr += num_alpha(2) + ` Le seau est un tronc de cÃ´ne. Pour calculer son volume, on va calculer le volume du cÃ´ne rÃ©duit de hauteur SB et le soustraire du volume du cÃ´ne de hauteur SH.<br>`
					texte_corr += ` Le cÃ´ne de hauteur SB est une rÃ©duction du cÃ´ne de hauteur SH. Le coefficient de cette rÃ©duction est : $\\dfrac{${tex_nombre(r2)}}{${tex_nombre(r)}}`
					if (!Number.isInteger(r) || pgcd(r2 * 10, r * 10) > 1) texte_corr += `=${tex_fraction_reduite(arrondi(r2 * 10), arrondi(r * 10))}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += `Dans une rÃ©duction de coefficient k, les volumes sont multipliÃ©s par k${exposant(3)}.<br>`
					texte_corr += `Donc le volume du cÃ´ne de hauteur SB est : $\\left(${tex_fraction_reduite(arrondi(r2 * 10), arrondi(r * 10))}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} $\\approx ${tex_nombrec(arrondi(Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3))}$ dm${exposant(3)} '.<br>`
					texte_corr += `Le volume du tronc de cÃ´ne est : `
					texte_corr += `$V_\\text{CÃ´ne} - V_\\text{CÃ´neRÃ©duit}$<br>Soit : <br>$\\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)}$ - \\left(${tex_fraction_reduite(arrondi(r2 * 10), arrondi(r * 10))}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} `
					texte_corr += `$ = \\left(1-\\left(${tex_fraction_reduite(arrondi(r2 * 10), arrondi(r * 10))}\\right)^3\\right)\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} `
					texte_corr += `$ = \\left(1-\\dfrac{${fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[0] ** 3}}{${fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[1] ** 3}}\\right)\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} `
					texte_corr += `$ = \\dfrac{${fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[1] ** 3 - fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[0] ** 3}}{${fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[1] ** 3}}\\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} `
					texte_corr += `$ \\approx ${tex_nombrec(arrondi((fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[1] ** 3 - fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[0] ** 3) * r * r * h1 * Math.PI / (fraction_simplifiee(arrondi(r2 * 10), arrondi(r * 10))[1] ** 3 * 3)))}$ dm${exposant(3)}<br>`
					c = h3 / 2
					if (sortie_html) {
						texte_corr += num_alpha(3) + ` Il faut fixer HL Ã  ${tex_nombrec(r*10)} cm ; BA Ã  ${tex_nombrec(r2*10)} cm ; BH Ã  ${tex_nombrec(h3*10)} cm et la hauteur d'eau Ã  ${tex_nombrec((h1 - h2) *5)} cm.<br>`
						texte_corr += `La lecture de $ y = V(x)$ nous donne un volume d'au d'environ ${tex_nombrec(arrondi(Math.PI * (((c + h2) ** 3) * ((r2 / h2) ** 2) - (r2 ** 2) * h2) / 3, 1))} dm${exposant(3)} soit environ ${tex_nombrec(arrondi(Math.PI * (((c + h2) ** 3) * ((r2 / h2) ** 2) - (r2 ** 2) * h2) / 3, 1))} litres d'eau.<br>`
						texte_corr += num_alpha(4)
					}
					else texte_corr += num_alpha(3)
					texte_corr += ` Nous allons dÃ©terminer le volume du cÃ´ne de hauteur SE, puis nous soustrairons le volume du cÃ´ne de hauteur SB pour obtenir le volume d'eau.<br>`
					texte_corr += ` Le cÃ´ne de hauteur SE est une rÃ©duction du cÃ´ne de hauteur SH. Le coefficient de cette rÃ©duction est : $\\dfrac{${tex_nombre((h1 + h2) / 2)}}{${tex_nombrec(h1)}}`
					if (!Number.isInteger(c+h2) || pgcd(h1 * 100, (c + h2) *100) > 1) texte_corr += `=${tex_fraction_reduite(calcul((c + h2) * 100),calcul( h1 * 100))}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += `Donc le volume $V$ du cÃ´ne de hauteur SE est : $\\left(${tex_fraction_reduite(calcul((h1 + h2) * 50),calcul( h1 * 100))}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ dm${exposant(3)} $\\approx ${tex_nombrec(arrondi(Math.PI * r * r * (h2 + c) ** 3 / (h1 ** 2) / 3))}$ dm${exposant(3)}.<br>`
					texte_corr += `Notons $V'$ le volume du cÃ´ne de hauteur SB calculÃ© Ã  la question ` + num_alpha(2) + `<br> Le volume d'eau est donc : `

					texte_corr += `$V-V' \\approx ${tex_nombrec(arrondi(Math.PI * r * r * (h2 + c) ** 3 / (h1 ** 2) / 3))}$ dm${exposant(3)}$ - ${tex_nombrec(arrondi(Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3))}$ dm${exposant(3)} $\\approx ${tex_nombre(calcul(Math.PI * r * r * (h2 + c) ** 3 / (h1 ** 2) / 3 - Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3, 1))}$ dm${exposant(3)}.<br>`
					this.MG32codeBase64 = codeBase64
											 this.MG32code_pour_modifier_la_figure = `
												 mtg32App.calculate("MG32svg${numero_de_l_exercice}");
												 mtg32App.display("MG32svg${numero_de_l_exercice}");
												 ` 	
					break;
				case 5: // Un problÃ¨me avec un cÃ´ne Vanille Chocolat.
					r = calcul(randint(20, 28) / 10)
					h1 = calcul(randint(20, 28) / 2)
					h2 = randint(1,3)

					if (this.sup2<3)
					if (this.sup2==1) // coefficient de rÃ©duction dÃ©cimal
						while (calcul(h2/h1)!=arrondi(h2/h1,1)) {
							r = calcul(randint(20, 28) / 10)
							h1 = calcul(randint(20, 28) / 2)
							h2 = randint(1,3)
						}
					else //coefficient de rÃ©duction rationnel
						while (calcul(h2/h1)==arrondi(h2/h1,1)) {
							r = calcul(randint(20, 28) / 10)
							h1 = calcul(randint(20, 28) / 2)
							h2 = randint(1,3)
						}	
					r2 = calcul(r*h2/h1)
					codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAANmcmH###8BAP8BAAAAAAAAAAAFKgAAAuAAAAAAAAAAAAAAAAAAAAET#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEAD0NWYXJpYWJsZUJvcm5lZQD#####AANhbmc#6SH7VEQtGAAAAAAAAAAAQBkh+1RELRg#qZmZmZmZmgAAATAABDIqcGkABDAuMDX#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAUB#eAAAAAAAQHqoUeuFHrj#####AAAAAQAHQ0NhbGN1bAD#####AAVtaW5pMQADMC4yAAAAAT#JmZmZmZmaAAAABAD#####AAVtYXhpMQABMgAAAAFAAAAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####AAdDdXJzZXVyAAAABQAAAAUAAAADAAAAAwAAAAQAAAAC#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAAAAAAUBAAAAABAAAAEAAQAAAAIBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAQAAAAUBAAAAABAAAADACAAAAAAAAD#wAAAAAAAABQABQEuAAAAAAAAAAAAG#####wAAAAEAC0NIb21vdGhldGllAAAAAAUAAAAC#####wAAAAEACkNPcGVyYXRpb24D#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAMAAAAJAQAAAAoAAAADAAAACgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UAAAAABQEAAAAADQACTzEAwBAAAAAAAABAEAAAAAAAAAUAAAAABwAAAAgAAAAIAAAAAAUAAAACAAAACQMAAAAJAQAAAAE#8AAAAAAAAAAAAAoAAAADAAAACQEAAAAKAAAABAAAAAoAAAADAAAACwAAAAAFAQAAAAANAAJJNQDAAAAAAAAAAEAIAAAAAAAABQAAAAAHAAAACv####8AAAABAAhDU2VnbWVudAEAAAAFAQAAAAAQAAABAQEAAAACAAAABwAAAAcBAAAABQEAAAABEAACazEAwAAAAAAAAABAAAAAAAAAAAEAAT#aw32sN9rDAAAADP####8AAAACAA9DTWVzdXJlQWJzY2lzc2UBAAAABQAEem9vbQAAAAkAAAALAAAADf####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAABQEAAAAAAAAAAAAAAADAGAAAAAAAAAAAAA0PAAH###8AAAABAAAAAgAAAAEAAAAAAAAAAAAAAAACAAAADgAAAAMA#####wH#AAAAEAABWgAAAAAAAAAAAEAIAAAAAAAABQABQHmoAAAAAABAd2hR64UeuAAAAAgA#####wAAABAAAAAKAAAADgAAAAYA#####wH#AAABEAAAAQEBAAAAEAA#8AAAAAAAAAAAAAcA#####wH#AAAAEAABTQAAAAAAAAAAAEAIAAAAAAAABQABwEgAAAAAAAAAAAASAAAACwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEwAAABEAAAADAP####8BAAAAAQ8AAk8yAQUAAUCA3AAAAAAAQICEKPXCj1wAAAAGAP####8BAAAAARAAAAEAAQAAABUAP#AAAAAAAAAAAAAHAP####8BAAAAAQ8AAkoyAQUAAMBAAAAAAAAAAAAAFv####8AAAABAAlDTG9uZ3VldXIA#####wAAABUAAAAXAAAAAwD#####AAAAAAAPAAFPAMAYAAAAAAAAQCQAAAAAAAAFAAFAYpAAAAAAAEBIQo9cKPXDAAAABgD#####AQAAAAAQAAABAAEAAAAZAUAD6BRQ79ycAAAABwD#####Af8AAAAQAAJJIgAAAAAAAAAAAEAIAAAAAAAABQABQDF7TwMpFiAAAAAaAAAABAD#####AAJoMQACMTAAAAABQCQAAAAAAAAAAAAEAP####8AAmgyAAE0AAAAAUAQAAAAAAAAAAAABAD#####AAFyAAMzLjUAAAABQAwAAAAAAAD#####AAAAAQARQ1N5bWV0cmllQ2VudHJhbGUA#####wAAABUAAAADAP####8BAAAAAQ8AAk8zAQUAAUCSQgAAAAAAQHe4UeuFHrcAAAAGAP####8BAAAAABAAAAEAAQAAACABQAPoFFDv3JwAAAADAP####8BAAAAAQsAAk80AQUAAUCSVgAAAAAAQH5YUeuFHrgAAAAGAP####8BAAAAABAAAAEAAQAAACIBQAPoFFDv3JwAAAAQAP####8AAAAZAAAACwD#####AQB#AAALAAJXNADANQAAAAAAAMAUAAAAAAAABQAAAAAXAAAAH#####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAABUAAAAXAAAACwD#####AQAAAAALAAJXNwBAAAAAAAAAAAAAAAAAAAAABQAAAAAgAAAAJv####8AAAABAAlDQ2VyY2xlT0EA#####wF#f38BAQAAACAAAAAn#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAACEAAAAo#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAADQACSTMBBQABAAAAKf####8AAAABAA9DUG9pbnRMaWVDZXJjbGUA#####wEAAAABCwACSzMBAQABQBX9VSbZZwcAAAAo#####wAAAAIAE0NNZXN1cmVBbmdsZU9yaWVudGUA#####wAIYW5ndGhldGEAAAAqAAAAIAAAACsAAAAEAP####8ABXRoZXRhAAhhbmd0aGV0YQAAAAoAAAAsAAAABAD#####AAN4JzEACy1zaW4odGhldGEp#####wAAAAEADENNb2luc1VuYWlyZf####8AAAACAAlDRm9uY3Rpb24DAAAACgAAAC0AAAAEAP####8AA3gnMgALLWNvcyh0aGV0YSkAAAAXAAAAGAQAAAAKAAAALQAAABUA#####wEAAAAACwACVzEAwAAAAAAAAABAAAAAAAAAAAUAAUATXOOpPArvAAAAKAAAABYA#####wAFYW5nbGUAAAAqAAAAIAAAADD#####AAAAAQASQ0FyY0RlQ2VyY2xlRGlyZWN0AP####8Bf39#AQEAAAAVAAAAFwAAACUAAAAVAP####8BAAAAAQsAAksyAQEAAT+3ICjs75hDAAAAMgAAABYA#####wAGYW5ncGhpAAAAFwAAABUAAAAzAAAABAD#####AANwaGkACXBpK2FuZ3BoaQAAAAkAAAAACgAAAAAAAAAKAAAANAAAAAQA#####wADeScxABNjb3ModGhldGEpKnNpbihwaGkpAAAACQIAAAAYBAAAAAoAAAAtAAAAGAMAAAAKAAAANQAAAAQA#####wADeScyABQtc2luKHRoZXRhKSpzaW4ocGhpKQAAABcAAAAJAgAAABgDAAAACgAAAC0AAAAYAwAAAAoAAAA1#####wAAAAEAF0NNZXN1cmVBbmdsZUdlb21ldHJpcXVlAP####8AAAAXAAAAFQAAACUAAAAEAP####8ABHBsYXQABkoyTzJXNAAAAAoAAAA4AAAABAD#####AAVkcm9pdAAGcGxhdC8yAAAACQMAAAAKAAAAOQAAAAFAAAAAAAAAAAAAAAwA#####wEAAAAAEAAAAQABAAAAFQAAABcAAAAMAP####8BAAAAABAAAAEAAQAAACAAAAAqAAAADAD#####AQAAAAAQAAABAAEAAAAgAAAAK#####8AAAACABNDTWFycXVlQW5nbGVPcmllbnRlAP####8BfwAAAAIAAAAAQDiyu8xLZZ0AAAAqAAAAIAAAACsB#####wAAAAEADENCaXNzZWN0cmljZQD#####AX8AAAAQAAABAQEAAAAqAAAAIAAAACsAAAAHAP####8BfwAAABAAAAEFAAFAebYKC41k5QAAAD######AAAAAgAGQ0xhdGV4AP####8BfwAAAMAUAAAAAAAAwCYAAAAAAAAAAABAEQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAClx2YXJ0aGV0YSAAAAAMAP####8BAAAAABAAAAEAAQAAABUAAAAzAAAACAD#####AAAAIgAAABgEAAAACgAAADUAAAAbAP####8BAAD#AAIAAAAAQDdS5Q2zo6IAAAAXAAAAFQAAADMBAAAAHAD#####AQAA#wAQAAABAQEAAAAXAAAAFQAAADMAAAAHAP####8BAAD#ABAAAAEFAAFAd7hgWcShNQAAAEUAAAAdAP####8BAAD#AAAAAAAAAAAAwBQAAAAAAAAAAABGEQAAAAAAAQAAAAEAAAABAAAAAAAAAAAAB1x2YXJwaGkAAAAEAP####8AAWsACHNpbihwaGkpAAAAGAMAAAAKAAAANQAAAAQA#####wAKdGVzdFBoaU51bAAnMS8oKHBoaT0wKSsoYWJzKHBoaS1wbGF0KTwwLjAwMDAwMDAwMSkpAAAACQMAAAABP#AAAAAAAAAAAAAJAAAAAAkIAAAACgAAADUAAAABAAAAAAAAAAAAAAAJBAAAABgAAAAACQEAAAAKAAAANQAAAAoAAAA5AAAAAT4RLgvoJtaVAAAACAD#####AAAAGQAAAAoAAABJAAAABgD#####AQAAAAEQAAABAAEAAAAiAD#wAAAAAAAAAAAABwD#####AQAAAAELAAJKNAEFAAHAS4AAAAAAAAAAAEsAAAASAP####8BZmZmAAEAAAAiAAAATAAAABUA#####wEAAAAAEAAAAQUAAT#wl+m6eQJhAAAATQAAAAYA#####wEAAAAAEAAAAQABAAAATgBAA+gUUO#cnP####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8BAAAAABAAAAEFAAAAACMAAABPAAAAEwD#####AAAAIwAAAE0AAAAUAP####8BAAAAAA0AAkk0AQUAAQAAAFH#####AAAAAgAHQ1JlcGVyZQD#####AAAAAAEBAAAAIgAAAFIAAABMAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAACwD#####AQAAAAAQAAABBQAAAABMAAAAQwAAAAgA#####wAAAFAAAAAYBAAAAAoAAAA1AAAACwD#####AQAAAAAQAAABBQAAAABOAAAAVf####8AAAACAA1DTGlldURlUG9pbnRzAP####8BAH9#AQEAAABWAAAAZAAAAAAATgAAAAUAAABOAAAATwAAAFAAAABVAAAAVv####8AAAABAAhDVmVjdGV1cgD#####AQAA#wAQAAABAAEAAAAiAAAAVAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AQAAAAAQAAABBQAAAABTAAAACgAAAC4AAAAKAAAANgAAACIA#####wEAAAAAEAAAAQUAAAAAUwAAAAoAAAAvAAAACgAAADcAAAAhAP####8B#wAAABAAAAEAAQAAACIAAABZAAAAACEA#####wEAfwAAEAAAAQABAAAAIgAAAFoAAAAAIAD#####AWZmZgEBAAAAWQAAAGQAAAAAACsAAAAGAAAAKwAAACwAAAAtAAAALgAAADYAAABZ#####wAAAAEADENTdXJmYWNlTGlldQD#####AX9#fwAAAAUAAABdAAAAIwD#####AX9#fwAAAAUAAABXAAAAEgD#####Af8AAAEBAAAAGQAAABv#####AAAAAQANQ0RlbWlEcm9pdGVPQQD#####Af8AAAANAAABAQEAAAAQAAAAE#####8AAAABAA5DUG9pbnRMaWVQb2ludAD#####Af8AAAAQAAFVAEAgAAAAAAAAwCoAAAAAAAAFAAAAABQAAAANAP####8AAXUAAAAQAAAAEwAAAGL#####AAAAAQARQ1BvaW50UGFyQWJzY2lzc2UA#####wH#AAAAEAACSTIAAAAAAAAAAABACAAAAAAAAAUAAAAAGQAAABsAAAAKAAAAYwAAACUA#####wEAAAAACwACSTEAwBAAAAAAAABAEAAAAAAAAAUAAAAAZP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAADQAAAQABAAAAGQAAAGX#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAAZAAAAZgAAABIA#####wEAAAAAAQAAABkAAABlAAAAEwD#####AAAAZwAAAGgAAAAUAP####8BAAAAAAsAAkoxAMAoAAAAAAAAwBAAAAAAAAAFAAIAAABpAAAAHwD#####AICAgAEBAAAAGQAAAGUAAABqAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAAIgD#####AQAAAAAPAAFJAD#wAAAAAAAAQBAAAAAAAAAFAAAAAGsAAAAKAAAALgAAAAoAAAA2AAAAIgD#####AQAAAAAPAAFKAQUAAAAAawAAAAoAAAAvAAAACgAAADcAAAAkAP####8BAAAAAA0AAAEBAQAAABkAAABsAAAAIgD#####AQAAAAAPAAFLAEAQAAAAAAAAwC4AAAAAAAAFAAAAAGsAAAABAAAAAAAAAAAAAAAYBAAAAAoAAAA1AAAAJAD#####AQAAAAANAAABAQEAAAAZAAAAbwAAACQA#####wEAAAAADQAAAQEBAAAAGQAAAG0AAAAhAP####8B#wAAABAAAAEAAQAAABkAAABsAAAAACEA#####wEAfwAAEAAAAQABAAAAGQAAAG0AAAAAIQD#####AQAA#wAQAAABAAEAAAAZAAAAbwD#####AAAAAQAPQ1N5bWV0cmllQXhpYWxlAP####8AAABw#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8BAAD#Af####8NQH3AAAAAAABAgkAAAAAAAAIBzMz#AAAAAAAAAAAAAAABAAAAAAAAAAAAEyhPLEksSixLKSBpbnZpc2libGUAAAAAAAkAAABxAAAAbgAAAHAAAAByAAAAcwAAAHQAAABtAAAAbAAAAG######AAAAAQAQQ01hY3JvQXBwYXJpdGlvbgD#####AQAA#wH#####DUB+cAAAAAAAQIMYAAAAAAACAczM#wAAAAAAAAAAAAAAAQAAAAAAAAAAABEoTyxJLEosSykgdmlzaWJsZQAAAAAACQAAAHEAAABuAAAAcAAAAHIAAABzAAAAdAAAAG0AAABsAAAAbwAAAAAfAP####8AgICAAQEAAAAZAAAAbAAAAG0AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAAiAP####8B2NjYABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABrAAAACgAAAB4AAAABAAAAAAAAAAAAAAAiAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAUAAAAAeAAAAAoAAAAeAAAAAQAAAAAAAAAAAAAAJQD#####AQAAAAAPAAFBAQUAAAAAegAAAA0A#####wAEYWJzMQAAABkAAABsAAAAewAAAAQA#####wADUmF5AARhYnMxAAAACgAAAHwAAAAmAP####8BAAAAABAAAAEFAAAAABkAAABsAAAACQIAAAAKAAAAfQAAABgEAAAACgAAADEAAAAmAP####8BAAAAABAAAAEFAAAAABkAAABtAAAACQIAAAAKAAAAfQAAABgDAAAACgAAADEAAAARAP####8AAAAZAAAAfgAAAAsA#####wEAAAAAEAAAAQUAAAAAfwAAAIAAAAAgAP####8Af39#AQEAAACBAAAAeAEAAAAAMAAAAAYAAAAwAAAAMQAAAH4AAAB#AAAAgAAAAIEAAAAjAP####8A##8AAAAABQAAAIIAAAAiAP####8BAAAAABAAAAEFAAAAAGsAAAABAAAAAAAAAAAAAAAJAQAAAAEAAAAAAAAAAAAAAAoAAAB9AAAAEgD#####AQAAAAEBAAAAGQAAAIQAAAATAP####8AAABxAAAAhQAAABQA#####wEAAAAAEAAAAQUAAQAAAIYAAAALAP####8B#wD#ABAAAAEFAAAAAIcAAABKAAAACwD#####Af8A#wAQAAABBQAAAACIAAAAJAAAAAwA#####wEAAAAAEAAAAQACAAAAiAAAAIkAAAAHAP####8BAAAAABAAAAEFAAE#tLY8pd6vvwAAAIr#####AAAAAQAOQ09iamV0RHVwbGlxdWUA#####wAAAAAAAACKAAAADQD#####AAFhAAAAGQAAAGwAAAB7AAAAIgD#####AWZmZgAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAeAAAAAkCAAAACgAAAI0AAAAYBAAAAAoAAAABAAAACQIAAAAKAAAAjQAAABgDAAAACgAAAAEAAAAfAP####8A5ubmAAEAAAAZAAAAbAAAAG8AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAAiAP####8BAAAAABAAAlMiAMA5AAAAAAAAwC4AAAAAAAAFAAAAAI8AAAABAAAAAAAAAAAAAAAKAAAAHAAAACUA#####wEAAAAADwABUwDARIAAAAAAAMAiAAAAAAAABQAAAACQAAAADQD#####AAVhYnMxMQAAABkAAABqAAAAkQAAAAQA#####wABcwAFYWJzMTEAAAAKAAAAkgAAACwA#####wAAAAAAAACR#####wAAAAEADkNUZXN0RXhpc3RlbmNlAP####8ACEV4aXN0RGVzAAAAkgAAAAQA#####wAKdGVzdFNFZ2FsTwAOMS8oMS1FeGlzdERlcykAAAAJAwAAAAE#8AAAAAAAAAAAAAkBAAAAAT#wAAAAAAAAAAAACgAAAJUAAAAIAP####8AAAAZAAAACgAAAJYAAAAEAP####8AA3knMAALa14yKlJheV4yL3MAAAAJAwAAAAkC#####wAAAAEACkNQdWlzc2FuY2UAAAAKAAAASAAAAAFAAAAAAAAAAAAAAC4AAAAKAAAAfQAAAAFAAAAAAAAAAAAAAAoAAACTAAAABAD#####AAN4JzAAFHJhYyhSYXleMi15JzBeMi9rXjIpAAAAGBIAAAAJAQAAAC4AAAAKAAAAfQAAAAFAAAAAAAAAAAAAAAkDAAAALgAAAAoAAACYAAAAAUAAAAAAAAAAAAAALgAAAAoAAABIAAAAAUAAAAAAAAAAAAAAIgD#####Af8AAAAQAAABBQAAAABrAAAACgAAAJkAAAAKAAAAmAAAAAsA#####wH#AAAAEAAAAQUAAAAAmgAAAHUAAAAGAP####8BAAAAABAAAAEBAQAAAJoAP#MzMzMzMzMAAAAGAP####8BAAAAABAAAAEBAQAAAJsAP#MzMzMzMzMAAAATAP####8AAACdAAAAhQAAABQA#####wEAAAAAEAAAAQUAAgAAAJ4AAAATAP####8AAACcAAAAhQAAABQA#####wEAAAAAEAAAAQUAAgAAAKAAAAAZAP####8BAAAAAQEAAAAZAAAAnwAAAKEAAAAVAP####8BAAAAAAsAAlczAMAkAAAAAAAAQBgAAAAAAAAFAAE#0#omyqGlpQAAAKL#####AAAAAQANQ1BvaW50UHJvamV0ZQD#####AQAAAAALAAJXMgDALgAAAAAAAEAUAAAAAAAABQAAAACjAAAAZgAAACYA#####wEAAAAACwACVzUAwCAAAAAAAABAIAAAAAAAAAUAAAAApAAAAKP#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAJAgAAAAkHAAAACgAAADUAAAABAAAAAAAAAAAAAAAJBgAAAAoAAAA1AAAACgAAADoAAAAKAAAASAAAAAkBAAAAAQAAAAAAAAAAAAAACgAAAEgAAAAEAP####8ACHRlc3RTaW50ABYxLyhhYnMocyk8PWFicyhrKSpSYXkpAAAACQMAAAABP#AAAAAAAAAAAAAJBgAAABgAAAAACgAAAJMAAAAJAgAAABgAAAAACgAAAEgAAAAKAAAAfQAAAAwA#####wAAAAAAEAAAAQACAAAAkQAAAJoAAAAMAP####8AAAAAABAAAAEAAgAAAJEAAACbAAAADAD#####AX9#fwAQAAABAAEAAACRAAAApQAAAAcA#####wEAAAAACwACVzYBBQABP+kwagu4xeQAAACpAAAAIAD#####AX9#fwABAAAAqgAAAFAAAAAAAKMAAAAFAAAAowAAAKQAAAClAAAAqQAAAKr#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8A2NjYAAAAqwAAAAFAJAAAAAAAAAAAAKoAAAACAAAAqgAAAKsAAAAgAP####8BAAAAAAIAAAClAAAAeAAAAAAAowAAAAMAAACjAAAApAAAAKUAAAAIAP####8AAAAZAAAACgAAAKYAAAALAP####8B#wD#ABAAAAEFAAAAAJEAAACuAAAADAD#####AX9#fwAQAAABAAEAAACvAAAAgQAAADEA#####wB#f38AAACwAAAAAUA1AAAAAAAAAAAAMAAAAAcAAAAwAAAAMQAAAH4AAAB#AAAAgAAAAIEAAACwAAAABwD#####AX9#fwAQAAABBQABP+jGPF4uJ0YAAACwAAAAIAD#####AX9#fwABAAAAsgAAAFABAAAAADAAAAAIAAAAMAAAADEAAAB+AAAAfwAAAIAAAACBAAAAsAAAALIAAAAxAP####8Af39#AAAAswAAAAFAJAAAAAAAAAAAALIAAAACAAAAsgAAALMAAAAsAP####8AAAAAAAAArQAAAAgA#####wAAAJEAAAAKAAAApgAAAAsA#####wH#AAAAEAAAAQUAAAAAgQAAALYAAAAgAP####8BAAAAAAIAAAC3AAAAZAEAAAAAMAAAAAcAAAAwAAAAMQAAAH4AAAB#AAAAgAAAAIEAAAC3AAAALAD#####AAAAAAAAALgAAAALAP####8B#wAAABAAAAEFAAAAAIQAAACXAAAAEgD#####AQAAAAACAAAAGQAAALoAAAAVAP####8BAAAAABAAAAEFAAFAAnKZ09yUFQAAALsAAAAMAP####8Bf39#ABAAAAEAAQAAABkAAAC8AAAABwD#####AX9#fwAQAAABBQABP+nN99SrrBcAAAC9AAAAEgD#####AX9#fwABAAAAGQAAAL4AAAAxAP####8Af39#AAAAvQAAAAFANAAAAAAAAAAAALwAAAACAAAAvAAAAL0AAAAxAP####8Af39#AAAAvwAAAAFAJAAAAAAAAAAAAL4AAAACAAAAvgAAAL8AAAAsAP####8AAAAAAAAAuwAAAAwA#####wEAAAAAEAAAAQACAAAAiQAAAJEAAAAHAP####8Bf39#ABAAAAEFAAE#wdH0IWEZJQAAAMMAAAAGAP####8Bf39#ABAAAAEAAQAAAMQBP#MzMzMzMzMAAAAMAP####8BAAAAABAAAAEAAgAAAJEAAACIAAAAHgD#####AX9#fwAQAAABBQAAAADFAAAAxgAAAAwA#####wF#f38AEAAAAQABAAAAxAAAAMcAAAAxAP####8Af39#AAAAyAAAAAFAJAAAAAAAAAAAAMQAAAAEAAAAxAAAAMUAAADHAAAAyAAAAAwA#####wF#f38AEAAAAQABAAAAkQAAAIsAAAAxAP####8Af39#AAAAygAAAAFAJAAAAAAAAAAAAIsAAAACAAAAiwAAAMoAAAAsAP####8AAAAAAAAAwwAAACwA#####wAAAAAAAADGAAAADAD#####AQAAAAAQAAABAQEAAACRAAAAjv####8AAAACABVDTGlldU9iamV0UGFyVmFyaWFibGUA#####wC9vb0AAADOAAAAAUA5AAAAAAAAAAAAAQAAAAMAAAABAAAAjgAAAM4AAAAiAP####8AAAAAABAAAk8nAMA5AAAAAAAAwCoAAAAAAAAFAAAAAI8AAAABAAAAAAAAAAAAAAAJAQAAAAoAAAAcAAAACgAAAB3#####AAAAAQAQQ0Ryb2l0ZVBhcmFsbGVsZQD#####Aebm5gAQAAABAAEAAADQAAAAbgAAAAwA#####wDm5uYAEAAAAQABAAAAkQAAAH4AAAAeAP####8BpKSkABAAAlAiAAAAAAAAAAAAQAgAAAAAAAAFAAAAANEAAADSAAAAMwD#####Aebm5gAQAAABAAEAAADQAAAAcQAAAAwA#####wDm5uYAEAAAAQABAAAAfwAAAJEAAAAeAP####8BpKSkABAAAlEiAMA7AAAAAAAAwCIAAAAAAAAFAAAAANQAAADVAAAAEQD#####AAAA0AAAANMAAAALAP####8BpKSkABAAAlAnAAAAAAAAAAAAQAgAAAAAAAAFAAAAANYAAADXAAAAIAD#####AKSkpAEBAAAA2AAAAHgBAAAAACsAAAAeAAAAKwAAACwAAAAtAAAALgAAAC8AAAA2AAAANwAAAGwAAABtAAAAbgAAAHEAAAB4AAAAegAAAHsAAAB8AAAAfQAAAH4AAAB#AAAAjwAAAJAAAACRAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAAIwD#####AP8AAAAAAAUAAADZAAAAEwD#####AAAAZwAAAGAAAAAUAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAA2wAAABQA#####wH#AAAAEAACSiIAAAAAAAAAAABACAAAAAAAAAUAAgAAANsAAAAfAP####8A5ubmAAEAAAAZAAAAGwAAAN0AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAgAMQ0NvbW1lbnRhaXJlAP####8B#wAAAf####8QQH+4AAAAAABAeyhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAABFpPT00AAAAIAP####8AAAAZAAAAAT#weuFHrhR7AAAACwD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAkQAAAOAAAAA0AP####8AAAAAAMA0AAAAAAAAwCgAAAAAAAAAAADhEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAVMAAAATAP####8AAAAaAAAAhQAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAADjAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAOMAAAAMAP####8AAAAAABAAAAEBAQAAAJAAAADlAAAABgD#####AQAAAAEQAAABAQEAAADQAT#wAAAAAAAAAAAAHgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA5wAAAOYAAAAMAP####8Af39#ABAAAAEBAQAAANAAAADoAAAADAD#####AAAAAAAQAAABAQEAAAAZAAAA5QAAAAwA#####wAAAAAAEAAAAQEBAAAAGQAAAJH#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAQEAAADQAAAAAT#ZmZmZmZmaAAAAABMA#####wAAAOkAAADsAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAO0AAAAUAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAA7QAAABMA#####wAAAOsAAADsAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAPAAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAA8AAAAAgA#####wAAANAAAAAYBAAAAAoAAAA1AAAACwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAA8gAAAPMAAAARAP####8AAADQAAAA9AAAAAsA#####wEAAAAAEAAAAEAIAAAAAAAAAAAAAAAAAAAFAAAAAO4AAAD1AAAADAD#####AAAAAAAQAAABAQEAAAD0AAAA0AAAAAwA#####wAAAAAAEAAAAQEBAAAA0AAAAO4AAAAMAP####8AAAAAABAAAAEBAQAAAO4AAAD2AAAADAD#####AAAAAAAQAAABAQEAAAD2AAAA9P####8AAAABAAlDUG9seWdvbmUA#####wAAAAABAQAAAAUAAAD0AAAA0AAAAO4AAAD2AAAA9AAAABEA#####wAAANAAAADuAAAACwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGQAAAPwAAAALAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAA9QAAABEA#####wAAABkAAAD+AAAACwD#####AQAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAAAA#QAAAP8AAAAMAP####8AAAAAABAAAAEBAQAAAP4AAAAZAAAADAD#####AAAAAAAQAAABAQEAAAAZAAAA#QAAAAwA#####wAAAAAAEAAAAQEBAAAA#QAAAQAAAAAMAP####8AAAAAABAAAAEBAQAAAQAAAAD+AAAANgD#####AAAAAAEBAAAABQAAAP4AAAAZAAAA#QAAAQAAAAD+AAAABgD#####AQAAAAEQAAABAQEAAAAQAT#wAAAAAAAAAAAANQD#####AQAAAAEBAAAAEAAAAAE#yZmZmZmZmgAAAAATAP####8AAAEGAAABBwAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAEIAAAAFAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAQgAAAAMAP####8B#wAAABAAAAEAAQAAAQoAAAEJ#####wAAAAEAB0NNaWxpZXUA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAANAAAACQAAAANwD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGQAAANAAAAAOAP####8BAAAAAMAqAAAAAAAAwBwAAAAAAAAAAAEMEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAB0AAAA3AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB5AAAAGQAAAA4A#####wEAAAAAwBwAAAAAAAAAAAAAAAAAAAAAAQ8QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAHgAAAAQA#####wACaDMABWgxLWgyAAAACQEAAAAKAAAAHAAAAAoAAAAdAAAADgD#####AQAAAADANQAAAAAAAMAiAAAAAAAAAAABDRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAEAAAERAAAAGP##########"
					if (!sortie_html) texte = `\\begin{minipage}{0.7 \\linewidth} \n\t`
					else texte=``
					texte += `Un cÃ´ne de glace d'une marque cÃ©lÃ¨bre a pour rayon ${tex_nombre(r)}${sp()}cm et pour hauteur SO${sp()}=${sp()}${tex_nombre(h1)}${sp()}cm.<br>`
					texte+=`Le fabricant a coulÃ© au fond de ce cÃ´ne du chocolat sur une hauteur SO' de ${h2}${sp()}cm.<br>`
					texte += num_alpha(0) + ` Calculer le volume total du cÃ´ne.<br>`					
					texte += num_alpha(1) + ` En dÃ©duire le volume de chocolat prÃ©sent dans le fond du cÃ´ne.<br>`
					texte += num_alpha(2) + ` DÃ©duire des deux premiÃ¨res questions le volume de glace permettant de remplir le cÃ´ne.<br>`
					texte += num_alpha(3) + ` Si la glace avait Ã©tÃ© mise dans le cÃ´ne avant le chocolat, quelle serait la hauteur atteinte par la glace dans le cÃ´ne ?<br>`
					texte += num_alpha(4) + ` Quelle serait alors l'Ã©paisseur de chocolat au dessus de la glace ?<br>`
					if (sortie_html) texte += `Le point O peut Ãªtre dÃ©placÃ© et on peut changer l'angle de vue &#x3C6; `
					else texte+=`\n\t \\end{minipage} \n\t \\begin{minipage}{0.3 \\linewidth} \n\t \\begin{tikzpicture}[scale=0.8]
					\\definecolor{hhhhhh}{rgb}{0,0,0}
					\\definecolor{phphph}{rgb}{0.5,0.5,0.5}
					\\definecolor{ofofof}{rgb}{0.5,0.5,0.5}
					\\definecolor{ffffhh}{rgb}{1,1,0}
					\\definecolor{enenen}{rgb}{0.9,0.9,0.9}
					\\definecolor{dpdpdp}{rgb}{0.85,0.85,0.85}
					\\definecolor{bdbdbd}{rgb}{0.74,0.74,0.74}
					\\definecolor{alalal}{rgb}{0.64,0.64,0.64}
					\\definecolor{ffhhhh}{rgb}{1,0,0}
					\\clip (40.89,0) rectangle (0,22.58);
					\\fill[color=black] (4.641,21.063) circle (0.063);
					\\node at (4.234, 20.625) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.438cm} {0.547cm} \\selectfont] {$\\text{O}$};
					\\draw [color=ofofof , dotted, line width = 0.4](7.847,20.165)--(7.675,20.12)--(7.495,20.076)--(7.306,20.036)--(7.111,19.998)--(6.909,19.964)--(6.7,19.932)--(6.486,19.903)--(6.267,19.878)--(6.043,19.856)--(5.816,19.837)--(5.585,19.821)--(5.351,19.809)--(5.116,19.8)--(4.88,19.795)--(4.642,19.793)--(4.405,19.795)--(4.169,19.8)--(3.933,19.809)--(3.7,19.821)--(3.469,19.836)--(3.242,19.855)--(3.018,19.877)--(2.799,19.903)--(2.584,19.931)--(2.376,19.963)--(2.173,19.998)--(1.978,20.035)--(1.789,20.076)--(1.609,20.119)--(1.437,20.165)--(1.273,20.213)--(1.119,20.263)--(0.974,20.316)--(0.84,20.371)--(0.716,20.427)--(0.603,20.486)--(0.5,20.546)--(0.409,20.607)--(0.33,20.67)--(0.263,20.734)--(0.207,20.798)--(0.164,20.863)--(0.133,20.929)--(0.114,20.996)--(0.108,21.062)--(0.114,21.128)--(0.132,21.195)--(0.163,21.261)--(0.206,21.326)--(0.262,21.391)--(0.329,21.454)--(0.408,21.517)--(0.499,21.578)--(0.601,21.638)--(0.714,21.697)--(0.838,21.753)--(0.972,21.808)--(1.117,21.861)--(1.271,21.911)--(1.434,21.96)--(1.606,22.005)--(1.787,22.049)--(1.975,22.089)--(2.17,22.127)--(2.373,22.161)--(2.581,22.193)--(2.795,22.222)--(3.015,22.247)--(3.238,22.269)--(3.466,22.288)--(3.696,22.304)--(3.93,22.316)--(4.165,22.325)--(4.402,22.33)--(4.639,22.332)--(4.876,22.33)--(5.113,22.325)--(5.348,22.316)--(5.581,22.304)--(5.812,22.289)--(6.04,22.27)--(6.263,22.248)--(6.483,22.222)--(6.697,22.194)--(6.906,22.162)--(7.108,22.127)--(7.304,22.09)--(7.492,22.049)--(7.672,22.006)--(7.845,21.96)--(8.008,21.912)--(8.162,21.862)--(8.307,21.809)--(8.441,21.754)--(8.565,21.698)--(8.679,21.639)--(8.781,21.579)--(8.872,21.518)--(8.951,21.455)--(9.019,21.391)--(9.074,21.327)--(9.117,21.262)--(9.149,21.196)--(9.167,21.129)--(9.174,21.063)--(9.167,20.997)--(9.149,20.93)--(9.118,20.864)--(9.075,20.799)--(9.02,20.734)--(8.952,20.671)--(8.873,20.608)--(8.782,20.547)--(8.68,20.487)--(8.567,20.428)--(8.443,20.372)--(8.309,20.317)--(8.164,20.264)--(8.01,20.214)--cycle;
					
					\\fill[color = ffffhh, opacity = 0.2](7.847,20.165)--(7.675,20.12)--(7.495,20.076)--(7.306,20.036)--(7.111,19.998)--(6.909,19.964)--(6.7,19.932)--(6.486,19.903)--(6.267,19.878)--(6.043,19.856)--(5.816,19.837)--(5.585,19.821)--(5.351,19.809)--(5.116,19.8)--(4.88,19.795)--(4.642,19.793)--(4.405,19.795)--(4.169,19.8)--(3.933,19.809)--(3.7,19.821)--(3.469,19.836)--(3.242,19.855)--(3.018,19.877)--(2.799,19.903)--(2.584,19.931)--(2.376,19.963)--(2.173,19.998)--(1.978,20.035)--(1.789,20.076)--(1.609,20.119)--(1.437,20.165)--(1.273,20.213)--(1.119,20.263)--(0.974,20.316)--(0.84,20.371)--(0.716,20.427)--(0.603,20.486)--(0.5,20.546)--(0.409,20.607)--(0.33,20.67)--(0.263,20.734)--(0.207,20.798)--(0.164,20.863)--(0.133,20.929)--(0.114,20.996)--(0.108,21.062)--(0.114,21.128)--(0.132,21.195)--(0.163,21.261)--(0.206,21.326)--(0.262,21.391)--(0.329,21.454)--(0.408,21.517)--(0.499,21.578)--(0.601,21.638)--(0.714,21.697)--(0.838,21.753)--(0.972,21.808)--(1.117,21.861)--(1.271,21.911)--(1.434,21.96)--(1.606,22.005)--(1.787,22.049)--(1.975,22.089)--(2.17,22.127)--(2.373,22.161)--(2.581,22.193)--(2.795,22.222)--(3.015,22.247)--(3.238,22.269)--(3.466,22.288)--(3.696,22.304)--(3.93,22.316)--(4.165,22.325)--(4.402,22.33)--(4.639,22.332)--(4.876,22.33)--(5.113,22.325)--(5.348,22.316)--(5.581,22.304)--(5.812,22.289)--(6.04,22.27)--(6.263,22.248)--(6.483,22.222)--(6.697,22.194)--(6.906,22.162)--(7.108,22.127)--(7.304,22.09)--(7.492,22.049)--(7.672,22.006)--(7.845,21.96)--(8.008,21.912)--(8.162,21.862)--(8.307,21.809)--(8.441,21.754)--(8.565,21.698)--(8.679,21.639)--(8.781,21.579)--(8.872,21.518)--(8.951,21.455)--(9.019,21.391)--(9.074,21.327)--(9.117,21.262)--(9.149,21.196)--(9.167,21.129)--(9.174,21.063)--(9.167,20.997)--(9.149,20.93)--(9.118,20.864)--(9.075,20.799)--(9.02,20.734)--(8.952,20.671)--(8.873,20.608)--(8.782,20.547)--(8.68,20.487)--(8.567,20.428)--(8.443,20.372)--(8.309,20.317)--(8.164,20.264)--(8.01,20.214)(7.847,20.165);
					\\draw [color=black , line width = 0.8](4.641,8.629)--(9.15,20.933);
					\\draw [color=black , line width = 0.8](4.641,8.629)--(0.131,20.933);
					\\draw [color=dpdpdp , line width = 0.4](4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629)--(4.641,8.629);
					
					\\draw [color=dpdpdp , line width = 0.4](4.14,10.025)--(4.138,10.019)--(4.137,10.013)--(4.137,10.007)--(4.138,10.001)--(4.14,9.995)--(4.143,9.99)--(4.146,9.984)--(4.151,9.978)--(4.156,9.972)--(4.163,9.966)--(4.17,9.961)--(4.178,9.955)--(4.187,9.95)--(4.196,9.944)--(4.207,9.939)--(4.218,9.934)--(4.23,9.929)--(4.243,9.924)--(4.256,9.92)--(4.27,9.915)--(4.285,9.911)--(4.301,9.907)--(4.317,9.903)--(4.333,9.899)--(4.35,9.896)--(4.368,9.892)--(4.386,9.889)--(4.405,9.886)--(4.424,9.884)--(4.443,9.881)--(4.463,9.879)--(4.483,9.877)--(4.504,9.875)--(4.524,9.874)--(4.545,9.872)--(4.566,9.871)--(4.587,9.871)--(4.609,9.87)--(4.63,9.87)--(4.651,9.87)--(4.673,9.87)--(4.694,9.871)--(4.715,9.871)--(4.736,9.872)--(4.757,9.874)--(4.778,9.875)--(4.798,9.877)--(4.818,9.879)--(4.838,9.881)--(4.857,9.884)--(4.876,9.886)--(4.895,9.889)--(4.913,9.892)--(4.931,9.896)--(4.948,9.899)--(4.965,9.903)--(4.981,9.907)--(4.996,9.911)--(5.011,9.915)--(5.025,9.92)--(5.038,9.924)--(5.051,9.929)--(5.063,9.934)--(5.074,9.939)--(5.085,9.944)--(5.094,9.95)--(5.103,9.955)--(5.111,9.961)--(5.119,9.966)--(5.125,9.972)--(5.13,9.978)--(5.135,9.984)--(5.138,9.99)--(5.141,9.995)--(5.143,10.001)--(5.144,10.007)--(5.144,10.013)--(5.143,10.019)--(5.142,10.025);
					
					\\draw [color=dpdpdp , line width = 0.4](3.639,11.421)--(3.635,11.409)--(3.633,11.397)--(3.634,11.385)--(3.636,11.373)--(3.639,11.361)--(3.645,11.35)--(3.652,11.338)--(3.661,11.326)--(3.672,11.315)--(3.685,11.303)--(3.699,11.292)--(3.715,11.281)--(3.733,11.27)--(3.752,11.259)--(3.773,11.249)--(3.796,11.239)--(3.82,11.229)--(3.845,11.219)--(3.872,11.21)--(3.9,11.201)--(3.93,11.193)--(3.96,11.184)--(3.993,11.176)--(4.026,11.169)--(4.06,11.162)--(4.096,11.155)--(4.132,11.149)--(4.169,11.143)--(4.207,11.138)--(4.246,11.133)--(4.286,11.128)--(4.326,11.124)--(4.367,11.121)--(4.408,11.118)--(4.45,11.115)--(4.492,11.113)--(4.534,11.112)--(4.577,11.111)--(4.619,11.11)--(4.662,11.11)--(4.705,11.111)--(4.747,11.112)--(4.789,11.113)--(4.831,11.115)--(4.873,11.118)--(4.914,11.121)--(4.955,11.124)--(4.995,11.128)--(5.035,11.133)--(5.074,11.138)--(5.112,11.143)--(5.149,11.149)--(5.186,11.155)--(5.221,11.162)--(5.255,11.169)--(5.289,11.176)--(5.321,11.184)--(5.352,11.193)--(5.381,11.201)--(5.409,11.21)--(5.436,11.219)--(5.462,11.229)--(5.486,11.239)--(5.508,11.249)--(5.529,11.259)--(5.548,11.27)--(5.566,11.281)--(5.582,11.292)--(5.596,11.303)--(5.609,11.315)--(5.62,11.326)--(5.629,11.338)--(5.636,11.35)--(5.642,11.361)--(5.646,11.373)--(5.648,11.385)--(5.648,11.397)--(5.646,11.409)--(5.643,11.421);
					
					\\draw [color=dpdpdp , line width = 0.4](3.138,12.817)--(3.132,12.799)--(3.13,12.781)--(3.13,12.763)--(3.133,12.745)--(3.139,12.728)--(3.147,12.71)--(3.158,12.692)--(3.172,12.675)--(3.188,12.657)--(3.207,12.64)--(3.228,12.623)--(3.252,12.607)--(3.279,12.59)--(3.308,12.574)--(3.339,12.559)--(3.373,12.544)--(3.409,12.529)--(3.447,12.514)--(3.487,12.5)--(3.53,12.487)--(3.574,12.474)--(3.62,12.462)--(3.669,12.45)--(3.718,12.439)--(3.77,12.428)--(3.823,12.418)--(3.878,12.409)--(3.933,12.4)--(3.991,12.392)--(4.049,12.384)--(4.108,12.378)--(4.169,12.372)--(4.23,12.367)--(4.292,12.362)--(4.354,12.358)--(4.417,12.355)--(4.481,12.353)--(4.545,12.352)--(4.609,12.351)--(4.673,12.351)--(4.737,12.352)--(4.8,12.353)--(4.864,12.355)--(4.927,12.358)--(4.989,12.362)--(5.051,12.367)--(5.113,12.372)--(5.173,12.378)--(5.232,12.384)--(5.291,12.392)--(5.348,12.4)--(5.404,12.409)--(5.458,12.418)--(5.511,12.428)--(5.563,12.439)--(5.613,12.45)--(5.661,12.462)--(5.707,12.474)--(5.751,12.487)--(5.794,12.5)--(5.834,12.514)--(5.872,12.529)--(5.908,12.544)--(5.942,12.559)--(5.973,12.574)--(6.002,12.59)--(6.029,12.607)--(6.053,12.623)--(6.074,12.64)--(6.093,12.657)--(6.11,12.675)--(6.123,12.692)--(6.134,12.71)--(6.143,12.728)--(6.148,12.745)--(6.151,12.763)--(6.151,12.781)--(6.149,12.799)--(6.144,12.817);
					
					\\draw [color=dpdpdp , line width = 0.4](2.637,14.213)--(2.63,14.189)--(2.626,14.165)--(2.627,14.141)--(2.631,14.117)--(2.638,14.094)--(2.649,14.07)--(2.664,14.046)--(2.682,14.023)--(2.704,14)--(2.729,13.977)--(2.758,13.955)--(2.79,13.932)--(2.825,13.911)--(2.864,13.889)--(2.906,13.869)--(2.95,13.848)--(2.998,13.828)--(3.049,13.809)--(3.103,13.791)--(3.16,13.773)--(3.219,13.756)--(3.28,13.739)--(3.345,13.723)--(3.411,13.708)--(3.48,13.694)--(3.55,13.681)--(3.623,13.668)--(3.698,13.657)--(3.774,13.646)--(3.852,13.636)--(3.931,13.627)--(4.011,13.619)--(4.093,13.612)--(4.176,13.606)--(4.259,13.601)--(4.343,13.597)--(4.428,13.594)--(4.513,13.592)--(4.598,13.591)--(4.683,13.591)--(4.769,13.592)--(4.854,13.594)--(4.938,13.597)--(5.022,13.601)--(5.106,13.606)--(5.188,13.612)--(5.27,13.619)--(5.35,13.627)--(5.43,13.636)--(5.507,13.646)--(5.584,13.657)--(5.658,13.668)--(5.731,13.681)--(5.802,13.694)--(5.87,13.708)--(5.937,13.723)--(6.001,13.739)--(6.063,13.756)--(6.122,13.773)--(6.178,13.791)--(6.232,13.809)--(6.283,13.828)--(6.331,13.848)--(6.376,13.869)--(6.418,13.889)--(6.456,13.911)--(6.491,13.932)--(6.523,13.955)--(6.552,13.977)--(6.577,14)--(6.599,14.023)--(6.617,14.046)--(6.632,14.07)--(6.643,14.094)--(6.651,14.117)--(6.655,14.141)--(6.655,14.165)--(6.652,14.189)--(6.645,14.213);
					
					\\draw [color=dpdpdp , line width = 0.4](2.136,15.609)--(2.127,15.579)--(2.123,15.549)--(2.123,15.519)--(2.128,15.489)--(2.137,15.46)--(2.151,15.43)--(2.17,15.401)--(2.192,15.371)--(2.22,15.343)--(2.251,15.314)--(2.287,15.286)--(2.327,15.258)--(2.371,15.231)--(2.42,15.204)--(2.472,15.178)--(2.528,15.153)--(2.588,15.128)--(2.651,15.104)--(2.719,15.081)--(2.789,15.059)--(2.863,15.037)--(2.94,15.017)--(3.02,14.997)--(3.104,14.978)--(3.189,14.96)--(3.278,14.944)--(3.369,14.928)--(3.462,14.914)--(3.557,14.9)--(3.654,14.888)--(3.753,14.877)--(3.854,14.867)--(3.956,14.858)--(4.059,14.851)--(4.164,14.844)--(4.269,14.839)--(4.374,14.836)--(4.481,14.833)--(4.587,14.832)--(4.694,14.832)--(4.801,14.833)--(4.907,14.836)--(5.013,14.839)--(5.118,14.844)--(5.222,14.851)--(5.325,14.858)--(5.427,14.867)--(5.528,14.877)--(5.627,14.888)--(5.724,14.9)--(5.819,14.914)--(5.912,14.928)--(6.003,14.944)--(6.092,14.96)--(6.178,14.978)--(6.261,14.997)--(6.341,15.017)--(6.418,15.037)--(6.492,15.059)--(6.563,15.081)--(6.63,15.104)--(6.693,15.128)--(6.753,15.153)--(6.809,15.178)--(6.862,15.204)--(6.91,15.231)--(6.954,15.258)--(6.994,15.286)--(7.03,15.314)--(7.062,15.343)--(7.089,15.371)--(7.112,15.401)--(7.13,15.43)--(7.144,15.46)--(7.153,15.489)--(7.158,15.519)--(7.159,15.549)--(7.154,15.579)--(7.146,15.609);
					
					\\draw [color=dpdpdp , line width = 0.4](1.634,17.005)--(1.624,16.969)--(1.619,16.933)--(1.62,16.897)--(1.626,16.861)--(1.637,16.826)--(1.653,16.79)--(1.676,16.755)--(1.703,16.72)--(1.735,16.685)--(1.773,16.651)--(1.816,16.617)--(1.864,16.584)--(1.917,16.551)--(1.975,16.519)--(2.038,16.488)--(2.105,16.458)--(2.177,16.428)--(2.254,16.399)--(2.334,16.371)--(2.419,16.345)--(2.508,16.319)--(2.6,16.294)--(2.696,16.27)--(2.796,16.248)--(2.899,16.227)--(3.005,16.207)--(3.114,16.188)--(3.226,16.17)--(3.341,16.154)--(3.457,16.14)--(3.576,16.126)--(3.697,16.114)--(3.819,16.104)--(3.943,16.095)--(4.068,16.087)--(4.194,16.081)--(4.321,16.077)--(4.449,16.074)--(4.577,16.072)--(4.705,16.072)--(4.832,16.074)--(4.96,16.077)--(5.087,16.081)--(5.213,16.087)--(5.338,16.095)--(5.462,16.104)--(5.585,16.114)--(5.705,16.126)--(5.824,16.14)--(5.941,16.154)--(6.055,16.17)--(6.167,16.188)--(6.276,16.207)--(6.382,16.227)--(6.485,16.248)--(6.585,16.27)--(6.681,16.294)--(6.774,16.319)--(6.862,16.345)--(6.947,16.371)--(7.028,16.399)--(7.104,16.428)--(7.176,16.458)--(7.243,16.488)--(7.306,16.519)--(7.364,16.551)--(7.417,16.584)--(7.465,16.617)--(7.508,16.651)--(7.546,16.685)--(7.578,16.72)--(7.606,16.755)--(7.628,16.79)--(7.644,16.826)--(7.656,16.861)--(7.662,16.897)--(7.662,16.933)--(7.657,16.969)--(7.647,17.005);
					
					\\draw [color=dpdpdp , line width = 0.4](1.133,18.4)--(1.121,18.359)--(1.116,18.317)--(1.116,18.275)--(1.123,18.233)--(1.136,18.192)--(1.156,18.15)--(1.181,18.109)--(1.213,18.068)--(1.251,18.028)--(1.295,17.988)--(1.346,17.948)--(1.402,17.91)--(1.464,17.872)--(1.531,17.834)--(1.604,17.798)--(1.683,17.762)--(1.767,17.728)--(1.856,17.694)--(1.95,17.662)--(2.049,17.63)--(2.152,17.6)--(2.26,17.571)--(2.372,17.544)--(2.489,17.518)--(2.609,17.493)--(2.733,17.469)--(2.86,17.448)--(2.99,17.427)--(3.124,17.408)--(3.26,17.391)--(3.399,17.376)--(3.539,17.362)--(3.682,17.35)--(3.827,17.339)--(3.973,17.33)--(4.12,17.323)--(4.268,17.318)--(4.417,17.314)--(4.566,17.313)--(4.715,17.313)--(4.864,17.314)--(5.013,17.318)--(5.161,17.323)--(5.309,17.33)--(5.455,17.339)--(5.599,17.35)--(5.742,17.362)--(5.883,17.376)--(6.021,17.391)--(6.157,17.408)--(6.291,17.427)--(6.421,17.448)--(6.548,17.469)--(6.672,17.493)--(6.793,17.518)--(6.909,17.544)--(7.021,17.571)--(7.129,17.6)--(7.233,17.63)--(7.331,17.662)--(7.425,17.694)--(7.515,17.728)--(7.598,17.762)--(7.677,17.798)--(7.75,17.834)--(7.818,17.872)--(7.88,17.91)--(7.936,17.948)--(7.986,17.988)--(8.03,18.028)--(8.068,18.068)--(8.1,18.109)--(8.126,18.15)--(8.145,18.192)--(8.158,18.233)--(8.165,18.275)--(8.166,18.317)--(8.16,18.359)--(8.148,18.4);
					
					\\draw [color=dpdpdp , line width = 0.4](0.632,19.796)--(0.619,19.749)--(0.612,19.701)--(0.613,19.653)--(0.62,19.605)--(0.636,19.558)--(0.658,19.51)--(0.687,19.463)--(0.724,19.417)--(0.767,19.37)--(0.818,19.325)--(0.875,19.28)--(0.939,19.235)--(1.01,19.192)--(1.087,19.149)--(1.17,19.108)--(1.26,19.067)--(1.356,19.028)--(1.458,18.989)--(1.565,18.952)--(1.678,18.916)--(1.797,18.882)--(1.92,18.849)--(2.048,18.817)--(2.181,18.787)--(2.319,18.759)--(2.46,18.732)--(2.606,18.707)--(2.755,18.684)--(2.907,18.663)--(3.063,18.643)--(3.221,18.625)--(3.382,18.609)--(3.545,18.595)--(3.71,18.583)--(3.877,18.573)--(4.045,18.565)--(4.215,18.559)--(4.385,18.555)--(4.555,18.553)--(4.726,18.553)--(4.896,18.555)--(5.066,18.559)--(5.236,18.565)--(5.404,18.573)--(5.571,18.583)--(5.736,18.595)--(5.899,18.609)--(6.06,18.625)--(6.219,18.643)--(6.374,18.663)--(6.527,18.684)--(6.676,18.707)--(6.821,18.732)--(6.963,18.759)--(7.1,18.787)--(7.233,18.817)--(7.361,18.849)--(7.485,18.882)--(7.603,18.916)--(7.716,18.952)--(7.823,18.989)--(7.925,19.028)--(8.021,19.067)--(8.111,19.108)--(8.194,19.149)--(8.272,19.192)--(8.342,19.235)--(8.406,19.28)--(8.464,19.325)--(8.514,19.37)--(8.558,19.417)--(8.594,19.463)--(8.623,19.51)--(8.646,19.558)--(8.661,19.605)--(8.669,19.653)--(8.669,19.701)--(8.663,19.749)--(8.649,19.796);
					
					\\draw [color=dpdpdp , line width = 0.4](0.131,21.192)--(0.116,21.138)--(0.108,21.085)--(0.109,21.031)--(0.118,20.977)--(0.135,20.924)--(0.16,20.87)--(0.193,20.818)--(0.234,20.765)--(0.283,20.713)--(0.34,20.662)--(0.404,20.611)--(0.476,20.561)--(0.556,20.512)--(0.643,20.464)--(0.737,20.418)--(0.838,20.372)--(0.946,20.327)--(1.06,20.284)--(1.181,20.242)--(1.308,20.202)--(1.441,20.163)--(1.58,20.126)--(1.724,20.091)--(1.874,20.057)--(2.028,20.025)--(2.188,19.995)--(2.351,19.967)--(2.519,19.941)--(2.69,19.917)--(2.865,19.895)--(3.044,19.875)--(3.225,19.857)--(3.408,19.841)--(3.594,19.828)--(3.782,19.816)--(3.971,19.807)--(4.162,19.8)--(4.353,19.796)--(4.545,19.794)--(4.737,19.794)--(4.928,19.796)--(5.12,19.8)--(5.31,19.807)--(5.499,19.816)--(5.687,19.828)--(5.873,19.841)--(6.056,19.857)--(6.238,19.875)--(6.416,19.895)--(6.591,19.917)--(6.762,19.941)--(6.93,19.967)--(7.094,19.995)--(7.253,20.025)--(7.407,20.057)--(7.557,20.091)--(7.701,20.126)--(7.84,20.163)--(7.973,20.202)--(8.1,20.242)--(8.221,20.284)--(8.336,20.327)--(8.444,20.372)--(8.545,20.418)--(8.639,20.464)--(8.725,20.512)--(8.805,20.561)--(8.877,20.611)--(8.942,20.662)--(8.998,20.713)--(9.047,20.765)--(9.088,20.818)--(9.121,20.87)--(9.146,20.924)--(9.163,20.977)--(9.172,21.031)--(9.173,21.085)--(9.165,21.138)--(9.15,21.192);
					
					\\draw [color=black , line width = 0.8](0.131,21.192)--(0.12,21.157)--(0.113,21.121)--(0.108,21.085)--(0.108,21.05)--(0.111,21.014)--(0.118,20.978)--(0.128,20.943)--(0.142,20.907)--(0.159,20.872)--(0.18,20.837)--(0.205,20.802)--(0.232,20.767)--(0.264,20.732)--(0.299,20.698)--(0.337,20.664)--(0.379,20.63)--(0.424,20.597)--(0.472,20.564)--(0.524,20.531)--(0.579,20.499)--(0.637,20.467)--(0.699,20.436)--(0.763,20.405)--(0.831,20.375)--(0.901,20.345)--(0.975,20.316)--(1.051,20.287)--(1.13,20.259)--(1.212,20.232)--(1.297,20.205)--(1.385,20.179)--(1.475,20.154)--(1.567,20.13)--(1.662,20.106)--(1.759,20.083)--(1.859,20.06)--(1.96,20.039)--(2.064,20.018)--(2.17,19.998)--(2.278,19.979)--(2.388,19.961)--(2.499,19.944)--(2.612,19.927)--(2.727,19.912)--(2.843,19.897)--(2.961,19.884)--(3.08,19.871)--(3.2,19.859)--(3.322,19.848)--(3.444,19.838)--(3.568,19.829)--(3.692,19.821)--(3.817,19.814)--(3.942,19.808)--(4.069,19.803)--(4.195,19.799)--(4.322,19.796)--(4.449,19.794)--(4.577,19.793)--(4.704,19.793)--(4.832,19.794)--(4.959,19.796)--(5.086,19.799)--(5.213,19.803)--(5.339,19.808)--(5.465,19.814)--(5.589,19.821)--(5.714,19.829)--(5.837,19.838)--(5.96,19.848)--(6.081,19.859)--(6.201,19.871)--(6.32,19.884)--(6.438,19.897)--(6.554,19.912)--(6.669,19.927)--(6.782,19.944)--(6.894,19.961)--(7.003,19.979)--(7.111,19.998)--(7.217,20.018)--(7.321,20.039)--(7.423,20.06)--(7.522,20.083)--(7.619,20.106)--(7.714,20.13)--(7.807,20.154)--(7.897,20.179)--(7.984,20.205)--(8.069,20.232)--(8.151,20.259)--(8.23,20.287)--(8.306,20.316)--(8.38,20.345)--(8.451,20.375)--(8.518,20.405)--(8.583,20.436)--(8.644,20.467)--(8.702,20.499)--(8.757,20.531)--(8.809,20.564)--(8.857,20.597)--(8.902,20.63)--(8.944,20.664)--(8.982,20.698)--(9.017,20.732)--(9.049,20.767)--(9.077,20.802)--(9.101,20.837)--(9.122,20.872)--(9.139,20.907)--(9.153,20.943)--(9.164,20.978)--(9.17,21.014)--(9.173,21.05)--(9.173,21.085)--(9.169,21.121)--(9.161,21.157)--(9.15,21.192);
					
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(7.847,20.165);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(6.909,19.964);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(5.816,19.837);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(4.642,19.793);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(3.469,19.836);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(2.376,19.963);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(1.437,20.165);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(0.716,20.427);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(0.263,20.734);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(0.108,21.062);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(0.262,21.391);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(0.714,21.697);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(1.434,21.96);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(2.373,22.161);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(3.466,22.288);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(4.639,22.332);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(5.812,22.289);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(6.906,22.162);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(7.845,21.96);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(8.565,21.698);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(9.019,21.391);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(9.174,21.063);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(9.02,20.734);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(8.567,20.428);
					\\draw [color=bdbdbd , dotted, line width = 0.4](4.641,8.629)--(7.847,20.165);
					\\fill[color=black] (4.641,13.603) circle (0.063);
					\\node at (3.641, 13.884) [align=left,inner sep = 0pt, outer sep = 0pt,below right,black,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {$\\text{O'}$};
					\\draw [color=enenen , line width = 0.4](4.641,8.629)--(5.051,20.948);
					\\draw [color=enenen , line width = 0.4](7.818,21.953)--(4.641,8.629);
					\\draw [color=alalal , dotted, line width = 0.4](6.424,13.512)--(6.405,13.486)--(6.381,13.46)--(6.352,13.435)--(6.319,13.411)--(6.281,13.386)--(6.239,13.363)--(6.192,13.34)--(6.142,13.318)--(6.087,13.296)--(6.028,13.276)--(5.966,13.256)--(5.899,13.237)--(5.83,13.219)--(5.757,13.203)--(5.682,13.187)--(5.603,13.172)--(5.522,13.159)--(5.439,13.147)--(5.353,13.136)--(5.266,13.126)--(5.177,13.118)--(5.086,13.111)--(4.994,13.105)--(4.901,13.1)--(4.808,13.097)--(4.714,13.095)--(4.62,13.095)--(4.526,13.096)--(4.432,13.098)--(4.339,13.102)--(4.246,13.107)--(4.155,13.114)--(4.065,13.121)--(3.977,13.13)--(3.89,13.141)--(3.805,13.152)--(3.723,13.165)--(3.643,13.179)--(3.566,13.194)--(3.491,13.21)--(3.42,13.227)--(3.352,13.245)--(3.288,13.265)--(3.227,13.285)--(3.17,13.306)--(3.117,13.328)--(3.068,13.35)--(3.023,13.373)--(2.983,13.397)--(2.947,13.421)--(2.916,13.446)--(2.889,13.472)--(2.867,13.497)--(2.85,13.523)--(2.838,13.549)--(2.83,13.576)--(2.827,13.602)--(2.83,13.628)--(2.837,13.655)--(2.849,13.681)--(2.866,13.707)--(2.888,13.732)--(2.914,13.758)--(2.945,13.782)--(2.981,13.807)--(3.021,13.831)--(3.065,13.854)--(3.114,13.876)--(3.167,13.898)--(3.223,13.919)--(3.284,13.939)--(3.348,13.959)--(3.416,13.977)--(3.487,13.994)--(3.561,14.011)--(3.638,14.026)--(3.718,14.04)--(3.8,14.053)--(3.885,14.064)--(3.972,14.074)--(4.06,14.084)--(4.15,14.091)--(4.241,14.098)--(4.333,14.103)--(4.427,14.107)--(4.52,14.109)--(4.614,14.11)--(4.709,14.11)--(4.802,14.108)--(4.896,14.105)--(4.989,14.101)--(5.081,14.095)--(5.171,14.088)--(5.261,14.08)--(5.348,14.07)--(5.434,14.059)--(5.518,14.047)--(5.599,14.034)--(5.677,14.019)--(5.753,14.004)--(5.826,13.987)--(5.896,13.969)--(5.962,13.95)--(6.024,13.931)--(6.083,13.91)--(6.138,13.889)--(6.189,13.867)--(6.236,13.844)--(6.279,13.82)--(6.317,13.796)--(6.351,13.771)--(6.38,13.746)--(6.404,13.721)--(6.423,13.695)--(6.438,13.669)--(6.448,13.643)--(6.453,13.617)--(6.453,13.59)--(6.448,13.564)--cycle;
					
					\\fill[color = ffhhhh, opacity = 0.2](6.424,13.512)--(6.405,13.486)--(6.381,13.46)--(6.352,13.435)--(6.319,13.411)--(6.281,13.386)--(6.239,13.363)--(6.192,13.34)--(6.142,13.318)--(6.087,13.296)--(6.028,13.276)--(5.966,13.256)--(5.899,13.237)--(5.83,13.219)--(5.757,13.203)--(5.682,13.187)--(5.603,13.172)--(5.522,13.159)--(5.439,13.147)--(5.353,13.136)--(5.266,13.126)--(5.177,13.118)--(5.086,13.111)--(4.994,13.105)--(4.901,13.1)--(4.808,13.097)--(4.714,13.095)--(4.62,13.095)--(4.526,13.096)--(4.432,13.098)--(4.339,13.102)--(4.246,13.107)--(4.155,13.114)--(4.065,13.121)--(3.977,13.13)--(3.89,13.141)--(3.805,13.152)--(3.723,13.165)--(3.643,13.179)--(3.566,13.194)--(3.491,13.21)--(3.42,13.227)--(3.352,13.245)--(3.288,13.265)--(3.227,13.285)--(3.17,13.306)--(3.117,13.328)--(3.068,13.35)--(3.023,13.373)--(2.983,13.397)--(2.947,13.421)--(2.916,13.446)--(2.889,13.472)--(2.867,13.497)--(2.85,13.523)--(2.838,13.549)--(2.83,13.576)--(2.827,13.602)--(2.83,13.628)--(2.837,13.655)--(2.849,13.681)--(2.866,13.707)--(2.888,13.732)--(2.914,13.758)--(2.945,13.782)--(2.981,13.807)--(3.021,13.831)--(3.065,13.854)--(3.114,13.876)--(3.167,13.898)--(3.223,13.919)--(3.284,13.939)--(3.348,13.959)--(3.416,13.977)--(3.487,13.994)--(3.561,14.011)--(3.638,14.026)--(3.718,14.04)--(3.8,14.053)--(3.885,14.064)--(3.972,14.074)--(4.06,14.084)--(4.15,14.091)--(4.241,14.098)--(4.333,14.103)--(4.427,14.107)--(4.52,14.109)--(4.614,14.11)--(4.709,14.11)--(4.802,14.108)--(4.896,14.105)--(4.989,14.101)--(5.081,14.095)--(5.171,14.088)--(5.261,14.08)--(5.348,14.07)--(5.434,14.059)--(5.518,14.047)--(5.599,14.034)--(5.677,14.019)--(5.753,14.004)--(5.826,13.987)--(5.896,13.969)--(5.962,13.95)--(6.024,13.931)--(6.083,13.91)--(6.138,13.889)--(6.189,13.867)--(6.236,13.844)--(6.279,13.82)--(6.317,13.796)--(6.351,13.771)--(6.38,13.746)--(6.404,13.721)--(6.423,13.695)--(6.438,13.669)--(6.448,13.643)--(6.453,13.617)--(6.453,13.59)--(6.448,13.564)(6.424,13.512);
					\\node at (3.953, 8.694) [align=left,below right ,black,,font= \\sf \\fontsize {0.469cm} {0.586cm} \\selectfont] {S};
					\\draw [color=black , dotted, line width = 0.4](4.641,8.629)--(9.174,21.063);
					\\draw [color=ofofof , dotted, line width = 0.4](4.641,13.603)--(6.454,13.603);
					\\draw [color=black , dotted, line width = 0.4](4.641,21.063)--(9.174,21.063);
					\\draw [color=black , dotted, line width = 0.4](4.641,21.063)--(4.641,8.629);
					\\draw [color=black , dotted, line width = 0.4](4.641,13.987)--(4.641,13.603);
					\\draw [color=black , dotted, line width = 0.4](4.641,13.603)--(5.041,13.603);
					\\draw [color=black , dotted, line width = 0.4](5.041,13.603)--(5.041,13.987);
					\\draw [color=black , dotted, line width = 0.4](5.041,13.987)--(4.641,13.987);
					\\draw [color=black , dotted, line width = 0.4](4.641,13.987)--(4.641,13.603)--(5.041,13.603)--(5.041,13.987)--(4.641,13.987)--cycle;
					\\draw [color=black , dotted, line width = 0.4](4.641,21.447)--(4.641,21.063);
					\\draw [color=black , dotted, line width = 0.4](4.641,21.063)--(5.041,21.063);
					\\draw [color=black , dotted, line width = 0.4](5.041,21.063)--(5.041,21.447);
					\\draw [color=black , dotted, line width = 0.4](5.041,21.447)--(4.641,21.447);
					\\draw [color=black , dotted, line width = 0.4](4.641,21.447)--(4.641,21.063)--(5.041,21.063)--(5.041,21.447)--(4.641,21.447)--cycle;
					\\end{tikzpicture} \n\t \\end{minipage}`
					texte_corr = num_alpha(0) + ` Le volume du cÃ´ne est $\\\dfrac{A_\\text{base}}{3}\\times \\text{hauteur}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r)}\\pi}{3} \\times ${tex_nombre(h1)}$ cm${exposant(3)} $= \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} $\\approx ${tex_nombrec(arrondi(r * r * h1 * Math.PI / 3,3))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(1) + ` Le cÃ´ne de chocolat est une rÃ©duction du cÃ´ne complet. Le coefficient de rÃ©duction est $\\dfrac{${tex_nombre(h2)}}{${tex_nombre(h1)}}`
					if (!Number.isInteger(h1) || pgcd(h2, h1) > 1) texte_corr += `=${tex_fraction_reduite(h2 * 10, h1 * 10)}$.<br>`
					else texte_corr += `.$<br>`
					texte_corr += ` Dans une rÃ©duction de coefficient k, les volumes sont multipliÃ©s par k${exposant(3)}.<br>`
					texte_corr+= `Donc le volume du cÃ´ne de hauteur SO' est : $\\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3 \\times \\dfrac{${tex_nombrec(r * r * h1)}}{3}\\pi$ cm${exposant(3)} $ \\approx ${tex_nombrec(arrondi(Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3,3))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(2) + ` Le volume de glace est la diffÃ©rence entre les deux volumes prÃ©cÃ©dents :<br>`
					texte_corr += `$${tex_nombrec(arrondi(r * r * h1 * Math.PI / 3,3))}$ cm${exposant(3)}$ - ${tex_nombrec(arrondi(Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3,3))}$ cm${exposant(3)} $ \\approx ${tex_nombrec(arrondi(r * r * h1 * Math.PI / 3-Math.PI * h2 ** 3 * r * r / h1 ** 2 / 3,2))}$ cm${exposant(3)}.<br>`
					texte_corr += num_alpha(3) + ` Si on verse la glace au fond du cÃ´ne, on obtient une nouvelle rÃ©duction du cÃ´ne complet.<br>`
					texte_corr += `Soit k\' le coefficient de cette rÃ©duction, on a : k\'${exposant(3)} $= 1- \\text{k}^3$`
					texte_corr +=`, d'oÃ¹ k\' `
					texte_corr += `$= \\sqrt[3]{1-{\\text{k}^3}}$.<br>`
					texte_corr += `Donc k\' = $\\sqrt[3]{1 - \\left(${tex_fraction_reduite(h2 * 10, h1 * 10)}\\right)^3} \\approx ${tex_nombre(arrondi(Math.cbrt(1-(h2/h1)**3),4))}$.<br>`
					texte_corr += `On en dÃ©duit que la hauteur de glace est approximativement : $${tex_nombre(arrondi(Math.cbrt(1-(h2/h1)**3),4))} \\times ${tex_nombre(h1)}$ cm $\\approx ${tex_nombre(arrondi(h1*Math.cbrt(1-(h2/h1)**3),4))}$ cm.<br>`
					texte_corr += num_alpha(4) + ` L'Ã©paisseur de chocolat est alors de : $${tex_nombre(h1)}\\text{ cm}-${tex_nombre(arrondi(h1*Math.cbrt(1-(h2/h1)**3),4))} \\text{ cm}\\approx ${tex_nombre(arrondi(10*(h1-h1*Math.cbrt(1-(h2/h1)**3)),3))}$ mm !`
					this.MG32codeBase64 = codeBase64
					this.MG32code_pour_modifier_la_figure = `
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r", "${r}");
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h1", "${h1}");
							 mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h2", "${h2}");							 
							 mtg32App.calculate("MG32svg${numero_de_l_exercice}");
							 mtg32App.display("MG32svg${numero_de_l_exercice}");
							 `
					break;
			}


			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			liste_de_question_to_contenu(this);


	//	}

	}

	this.besoin_formulaire_numerique = ['Type d\'exercices', 3, '1 : Calcul d\' aire et de volumes\n 2 : ProblÃ¨me complexe\n 3 : MÃ©lange'];
	this.besoin_formulaire2_numerique = ['Coefficient de rÃ©duction(problÃ¨mes de type1)', 3, '1 : DÃ©cimal\n 2 : Non dÃ©cimal\n 3 : DÃ©cimal ou non'];

}
/**
 * Trouver les coordonnÃ©es d'un point transformÃ© d'un autre par une des transformations du plan
 * @Auteur Jean-Claude Lhote
 * 3G10-1
 */
function Transformations_du_plan_et_coordonnees() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Trouver les coordonnÃ©es de l'image d'un point par une transformation du plan";
	this.consigne = "";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1; // 1 calcul de l'hypotÃ©nuse 2 calcul d'un cÃ´tÃ© de l'angle droit 
	sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;
	this.liste_packages = 'tkz-euclide';
	this.nouvelle_version = function (numero_de_l_exercice) {
	this.type_exercice = 'MG32';
	this.MG32editable=false;
	this.taille_div_MG32 = [700, 700];
	this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAAAEAACAEwAAgBIAAIAaAACBDAAAAAAFHAAAAtIAAAEBAAAAAAAAAAEAAAB9#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAADgABTwDAKAAAAAAAAAAAAAAAAAAABQABQHXYAAAAAABAdjhR64UeuP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAEOAAFJAMAYAAAAAAAAAAAAAAAAAAAFAAFAOQAAAAAAAAAAAAL#####AAAAAQAJQ0Ryb2l0ZUFCAP####8AAAAAABAAAAEAAQAAAAEAAAAD#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wAAAAAAEAAAAQABAAAAAQAAAAT#####AAAAAQAJQ0NlcmNsZU9BAP####8BAAAAAAEAAAABAAAAA#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAFAAAABv####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAABAAAAEFAAEAAAAHAAAACQD#####AAAAAAEOAAFKAMAoAAAAAAAAwBAAAAAAAAAFAAIAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAADAAAACQEBAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABAApDVW5pdGV4UmVwAP####8ABHVuaXQAAAAK#####wAAAAEAC0NIb21vdGhldGllAP####8AAAAB#####wAAAAEACkNPcGVyYXRpb24DAAAAAT#wAAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAv#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAAAEAACVyIBAQAAAAADAAAADP####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAN#####wAAAAEAB0NDYWxjdWwA#####wAHbmJncmFkeAACMjAAAAABQDQAAAAAAAAAAAARAP####8AB25iZ3JhZHkAAjIwAAAAAUA0AAAAAAAA#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AFEdyYWR1YXRpb25BeGVzUmVwZXJlAAAAGwAAAAgAAAADAAAACgAAAA8AAAAQ#####wAAAAEAE0NBYnNjaXNzZU9yaWdpbmVSZXAAAAAAEQAFYWJzb3IAAAAK#####wAAAAEAE0NPcmRvbm5lZU9yaWdpbmVSZXAAAAAAEQAFb3Jkb3IAAAAKAAAACwAAAAARAAZ1bml0ZXgAAAAK#####wAAAAEACkNVbml0ZXlSZXAAAAAAEQAGdW5pdGV5AAAACv####8AAAABABBDUG9pbnREYW5zUmVwZXJlAAAAABEAAAAAABAAAAEFAAAAAAoAAAAOAAAAEgAAAA4AAAATAAAAFgAAAAARAAAAAAAQAAABBQAAAAAKAAAADQAAAAAOAAAAEgAAAA4AAAAUAAAADgAAABMAAAAWAAAAABEAAAAAABAAAAEFAAAAAAoAAAAOAAAAEgAAAA0AAAAADgAAABMAAAAOAAAAFQAAAAwAAAAAEQAAABYAAAAOAAAADwAAAA8AAAAAEQAAAAAAEAAAAQUAAAAAFwAAABkAAAAMAAAAABEAAAAWAAAADgAAABAAAAAPAAAAABEAAAAAABAAAAEFAAAAABgAAAAb#####wAAAAEACENTZWdtZW50AAAAABEBAAAAABAAAAEAAQAAABcAAAAaAAAAFwAAAAARAQAAAAAQAAABAAEAAAAYAAAAHAAAAAQAAAAAEQEAAAAACwABVwDAFAAAAAAAAMA0AAAAAAAABQABP9xWeJq83w4AAAAd#####wAAAAIACENNZXN1cmVYAAAAABEABnhDb29yZAAAAAoAAAAfAAAAEQAAAAARAAVhYnN3MQAGeENvb3JkAAAADgAAACD#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAQAAABEAZmZmAAAAHwAAAA4AAAAPAAAAHwAAAAIAAAAfAAAAHwAAABEAAAAAEQAFYWJzdzIADTIqYWJzb3ItYWJzdzEAAAANAQAAAA0CAAAAAUAAAAAAAAAAAAAADgAAABIAAAAOAAAAIQAAABYAAAAAEQEAAAAAEAAAAQUAAAAACgAAAA4AAAAjAAAADgAAABMAAAAZAQAAABEAZmZmAAAAJAAAAA4AAAAPAAAAHwAAAAUAAAAfAAAAIAAAACEAAAAjAAAAJAAAAAQAAAAAEQEAAAAACwABUgBAIAAAAAAAAMAgAAAAAAAABQABP9EbToG06B8AAAAe#####wAAAAIACENNZXN1cmVZAAAAABEABnlDb29yZAAAAAoAAAAmAAAAEQAAAAARAAVvcmRyMQAGeUNvb3JkAAAADgAAACcAAAAZAQAAABEAZmZmAAAAJgAAAA4AAAAQAAAAJgAAAAIAAAAmAAAAJgAAABEAAAAAEQAFb3JkcjIADTIqb3Jkb3Itb3JkcjEAAAANAQAAAA0CAAAAAUAAAAAAAAAAAAAADgAAABMAAAAOAAAAKAAAABYAAAAAEQEAAAAAEAAAAQUAAAAACgAAAA4AAAASAAAADgAAACoAAAAZAQAAABEAZmZmAAAAKwAAAA4AAAAQAAAAJgAAAAUAAAAmAAAAJwAAACgAAAAqAAAAK#####8AAAACAAxDQ29tbWVudGFpcmUAAAAAEQFmZmYAAAAAAAAAAABAGAAAAAAAAAAAAB8LAAH###8AAAABAAAAAAAAAAEAAAAAAAAAAAALI1ZhbChhYnN3MSkAAAAZAQAAABEAZmZmAAAALQAAAA4AAAAPAAAAHwAAAAQAAAAfAAAAIAAAACEAAAAtAAAAGwAAAAARAWZmZgAAAAAAAAAAAEAYAAAAAAAAAAAAJAsAAf###wAAAAEAAAAAAAAAAQAAAAAAAAAAAAsjVmFsKGFic3cyKQAAABkBAAAAEQBmZmYAAAAvAAAADgAAAA8AAAAfAAAABgAAAB8AAAAgAAAAIQAAACMAAAAkAAAALwAAABsAAAAAEQFmZmYAwCAAAAAAAAA#8AAAAAAAAAAAACYLAAH###8AAAACAAAAAQAAAAEAAAAAAAAAAAALI1ZhbChvcmRyMSkAAAAZAQAAABEAZmZmAAAAMQAAAA4AAAAQAAAAJgAAAAQAAAAmAAAAJwAAACgAAAAxAAAAGwAAAAARAWZmZgDAHAAAAAAAAAAAAAAAAAAAAAAAKwsAAf###wAAAAIAAAABAAAAAQAAAAAAAAAAAAsjVmFsKG9yZHIyKQAAABkBAAAAEQBmZmYAAAAzAAAADgAAABAAAAAmAAAABgAAACYAAAAnAAAAKAAAACoAAAArAAAAMwAAABEA#####wABeAABMwAAAAFACAAAAAAAAAAAABEA#####wABeQABMgAAAAFAAAAAAAAAAAAAABYA#####wAAAAAAEAABQQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAADgAAADUAAAAOAAAANgAAABEA#####wACeDEAAi0z#####wAAAAEADENNb2luc1VuYWlyZQAAAAFACAAAAAAAAAAAABEA#####wACeTEAATIAAAABQAAAAAAAAAAAAAARAP####8AAngyAAEyAAAAAUAAAAAAAAAAAAAAEQD#####AAJ5MgABMQAAAAE#8AAAAAAAAAAAABYA#####wEAAAAAEAACTyIAwDEAAAAAAADAQQAAAAAAAAYAAAAACgAAAA4AAAA6AAAADgAAADv#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAoAAAA8AAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAUAIKPXCj1wmAAAAPQAAABEA#####wAEYmlzMQABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAADwAAAAOAAAAPwAAAA8A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAD4AAABAAAAABQD#####AAAAAAEQAAJkMQEAAT#szMzMzMzNAAAAPAAAAEEAAAADAP####8BAAAAARAAAAEAAQAAADwBP#AAAAAAAAAAAAAEAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQFkAAAAAAAAAAABDAAAAEQD#####AAN4eCcAATEAAAABP#AAAAAAAAAAAAAMAP####8AAAA8AAAADgAAAEUAAAAPAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABEAAAARgAAAAUA#####wAAAAABEAABZADAEvfO2RaIAD#wAAAAAAAAAAE#7ChslIjsKgAAADwAAABHAAAAAwD#####AQAAAAEQAAABAAEAAAA8AD#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAcBYv######+AAAASQAAABEA#####wADeXknAAExAAAAAT#wAAAAAAAAAAAADAD#####AAAAPAAAAA4AAABLAAAADwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASgAAAEwAAAAFAP####8AAAAAARAAAmQnAQABP+zMzMzMzM0AAAA8AAAATQAAAB0A#####wEAAAAAEAAAAQABAAAACgAAADwAAAAcAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAUARrhR64UeuAAAATwAAABEA#####wAEYmlzMgABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAADwAAAAOAAAAUQAAAA8A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFAAAABSAAAABQD#####AAAAAAEQAAJkMgEAAT#szMzMzMzNAAAAPAAAAFMAAAARAP####8ACUFmZmljaGVPJwABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAAAEAAAABP#AAAAAAAAAAAAAPAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA8AAAAVgAAAAwA#####wAAAAEAAAANAwAAAAE#8AAAAAAAAAAAAA4AAABVAAAADwD#####AAAAAAAOAAJPJwAAAAAAAAAAAEAIAAAAAAAACQAAAAA8AAAAWP####8AAAABAAhDVmVjdGV1cgD#####Af8AAAAQAAABAAIAAAABAAAAVwAAAAARAP####8ACkFmZmljaGVPTycAATEAAAABP#AAAAAAAAD#####AAAAAQARQ1BvaW50UGFyTXVsdFZlY3QA#####wEAAAAADgACTzMAQDkAAAAAAABACAAAAAAAAAMAAAAAAQAAAFoAAAANAwAAAAE#8AAAAAAAAAAAAA4AAABbAAAAHgD#####AP8AAAAQAAABAAIAAAABAAAAXAAAAAAfAP####8B#wAAABAAAAEFAAAAAAEAAABdAAAAAT#gAAAAAAAAAAAABgD#####Af8AAAAQAAABAAIAAABeAAAAXf####8AAAACAAlDQ2VyY2xlT1IA#####wH#AAAAAgAAAF4AAAABP8mZmZmZmZoAAAAACAD#####AAAAXwAAAGAAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAYQAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAABh#####wAAAAIABkNMYXRleAD#####AP8AAADAMgAAAAAAAMAxAAAAAAAAAAAAYxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABNcb3ZlcnJpZ2h0YXJyb3cge3Z9#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAABAAAAAwAAAAFAJAAAAAAAAAAAAAcA#####wEAAAAAAQAAAAEAAABlAAAACAD#####AAAAVAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAZwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAABnAAAACAD#####AAAATgAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAagAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABqAAAACAD#####AAAAQgAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAbQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABtAAAACAD#####AAAASAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAcAAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABwAAAAGwD#####AAAAAAEAAAByEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyhkKQAAABsA#####wAAAAAAQAAAAAAAAADAGAAAAAAAAAAAAGwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAEKGQnKQAAABsA#####wAAAAABAAAAbxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAABsA#####wAAAAAAwDUAAAAAAABAFAAAAAAAAAAAAGkQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAARAP####8AAnhCAAExAAAAAT#wAAAAAAAAAAAAEQD#####AAJ5QgABMQAAAAE#8AAAAAAAAAAAABEA#####wACeEMAATEAAAABP#AAAAAAAAAAAAARAP####8AAnlDAAExAAAAAT#wAAAAAAAAAAAAFgD#####AAAAAAAQAAFCAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAOAAAAdwAAAA4AAAB4AAAAFgD#####AAAAAAAQAAFDAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAOAAAAeQAAAA4AAAB6AAAADv##########"
	this.MG32codeBase64corr = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAQAAAAYAEHN5bcOpdHJpZSBheGlhbGUADFBvaW50CmRyb2l0ZQAAAAIAAAAGAAAAABr#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAAAAAAH#####AAAAAAAAAAAACf##########AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMv####8AAAABAApDQ29uc3RhbnRlQAAAAAAAAAAAAAABAP####8AAnkyAAExAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0MQABMQAAAAI#8AAAAAAAAAAAAAEA#####wADeFAxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDEAAi0x#####wAAAAEADENNb2luc1VuYWlyZQAAAAI#8AAAAAAAAP####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAAAH#####AAAAAQALQ1BvaW50SW1hZ2UB#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAI#####wAAAAEAB0NNaWxpZXUA#####wEAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAAAAAAJ#####wAAAAEACENTZWdtZW50Af####8AAAD#ABAAAAEAAQAAAAAAAAAKAAAABwH#####AAAA#wAQAAABAAEAAAAKAAAACf####8AAAACAAlDQ2VyY2xlT1IA#####wEAAP8AAQAAAAoAAAACP8mZmZmZmZoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAN#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAAOAAAABwD#####AQAAAAAQAAABAAEAAAAKAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8AAAAAAA0AAAEBAQAAAAoAAAAQ#####wAAAAEACUNDZXJjbGVPQQD#####AAAAAAEBAAAACgAAAA8AAAAJAP####8AAAARAAAAEgAAAAoA#####wAAAP8AEgAAAQcAAgAAABP#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAAKAAAADwAAAAUA#####wAAAP8AEgAAAQcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAf####8AAAD#AAEAAAAFAAAACgAAAA8AAAAWAAAAFAAAAAr#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQB#####wD#AAAAAQAAAAALAAAADwH#####AP8AAAABAAAAAAwAAAABAAABoP####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2AAAAAkAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAADgABTwDAKAAAAAAAAAAAAAAAAAAABQABQHXYAAAAAABAdjhR64UeuP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAASAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAEOAAFJAMAYAAAAAAAAAAAAAAAAAAAFAAFAOQAAAAAAAAAAAAL#####AAAAAQAJQ0Ryb2l0ZUFCAP####8AAAAAABAAAAEAAQAAAAEAAAADAAAACwD#####AAAAAAASAAABAAEAAAABAAAABAAAAAwA#####wEAAAAAAQAAAAEAAAADAAAACQD#####AAAABQAAAAYAAAAKAP####8BAAAAABIAAAEFAAEAAAAHAAAACgD#####AAAAAAEOAAFKAMAoAAAAAAAAwBAAAAAAAAAFAAIAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAADAAAACQEBAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAI#8AAAAAAAAAAAAAI#8AAAAAAAAP####8AAAABAApDVW5pdGV4UmVwAP####8ABHVuaXQAAAAK#####wAAAAEAC0NIb21vdGhldGllAP####8AAAAB#####wAAAAEACkNPcGVyYXRpb24DAAAAAj#wAAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAsAAAAFAP####8BAAAAABAAAlciAQEAAAAAAwAAAAz#####AAAAAQAJQ0xvbmd1ZXVyAP####8AAAABAAAADQAAAAEA#####wAHbmJncmFkeAACMjAAAAACQDQAAAAAAAAAAAABAP####8AB25iZ3JhZHkAAjIwAAAAAkA0AAAAAAAA#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AFEdyYWR1YXRpb25BeGVzUmVwZXJlAAAAGwAAAAgAAAADAAAACgAAAA8AAAAQ#####wAAAAEAE0NBYnNjaXNzZU9yaWdpbmVSZXAAAAAAEQAFYWJzb3IAAAAK#####wAAAAEAE0NPcmRvbm5lZU9yaWdpbmVSZXAAAAAAEQAFb3Jkb3IAAAAKAAAAFgAAAAARAAZ1bml0ZXgAAAAK#####wAAAAEACkNVbml0ZXlSZXAAAAAAEQAGdW5pdGV5AAAACv####8AAAABABBDUG9pbnREYW5zUmVwZXJlAAAAABEAAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABkAAAATAAAAHwAAAAARAAAAAAASAAABBQAAAAAKAAAAGAAAAAAZAAAAEgAAABkAAAAUAAAAGQAAABMAAAAfAAAAABEAAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABgAAAAAGQAAABMAAAAZAAAAFQAAABcAAAAAEQAAABYAAAAZAAAADwAAAAUAAAAAEQAAAAAAEgAAAQUAAAAAFwAAABkAAAAXAAAAABEAAAAWAAAAGQAAABAAAAAFAAAAABEAAAAAABIAAAEFAAAAABgAAAAbAAAABwAAAAARAQAAAAAQAAABAAEAAAAXAAAAGgAAAAcAAAAAEQEAAAAAEAAAAQABAAAAGAAAABwAAAATAAAAABEBAAAAAAsAAVcAwBQAAAAAAADANAAAAAAAAAUAAT#cVniavN8OAAAAHf####8AAAACAAhDTWVzdXJlWAAAAAARAAZ4Q29vcmQAAAAKAAAAHwAAAAEAAAAAEQAFYWJzdzEABnhDb29yZAAAABkAAAAg#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQEAAAARAGZmZgAAAB8AAAAZAAAADwAAAB8AAAACAAAAHwAAAB8AAAABAAAAABEABWFic3cyAA0yKmFic29yLWFic3cxAAAAGAEAAAAYAgAAAAJAAAAAAAAAAAAAABkAAAASAAAAGQAAACEAAAAfAAAAABEBAAAAABIAAAEFAAAAAAoAAAAZAAAAIwAAABkAAAATAAAAIQEAAAARAGZmZgAAACQAAAAZAAAADwAAAB8AAAAFAAAAHwAAACAAAAAhAAAAIwAAACQAAAATAAAAABEBAAAAAAsAAVIAQCAAAAAAAADAIAAAAAAAAAUAAT#RG06BtOgfAAAAHv####8AAAACAAhDTWVzdXJlWQAAAAARAAZ5Q29vcmQAAAAKAAAAJgAAAAEAAAAAEQAFb3JkcjEABnlDb29yZAAAABkAAAAnAAAAIQEAAAARAGZmZgAAACYAAAAZAAAAEAAAACYAAAACAAAAJgAAACYAAAABAAAAABEABW9yZHIyAA0yKm9yZG9yLW9yZHIxAAAAGAEAAAAYAgAAAAJAAAAAAAAAAAAAABkAAAATAAAAGQAAACgAAAAfAAAAABEBAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABkAAAAqAAAAIQEAAAARAGZmZgAAACsAAAAZAAAAEAAAACYAAAAFAAAAJgAAACcAAAAoAAAAKgAAACv#####AAAAAgAMQ0NvbW1lbnRhaXJlAAAAABEBZmZmAAAAAAAAAAAAQBgAAAAAAAAAAAAfCwAB####AAAAAQAAAAAAAAACAAAAAAAAAAAACyNWYWwoYWJzdzEpAAAAIQEAAAARAGZmZgAAAC0AAAAZAAAADwAAAB8AAAAEAAAAHwAAACAAAAAhAAAALQAAACMAAAAAEQFmZmYAAAAAAAAAAABAGAAAAAAAAAAAACQLAAH###8AAAABAAAAAAAAAAIAAAAAAAAAAAALI1ZhbChhYnN3MikAAAAhAQAAABEAZmZmAAAALwAAABkAAAAPAAAAHwAAAAYAAAAfAAAAIAAAACEAAAAjAAAAJAAAAC8AAAAjAAAAABEBZmZmAMAgAAAAAAAAP#AAAAAAAAAAAAAmCwAB####AAAAAgAAAAEAAAACAAAAAAAAAAAACyNWYWwob3JkcjEpAAAAIQEAAAARAGZmZgAAADEAAAAZAAAAEAAAACYAAAAEAAAAJgAAACcAAAAoAAAAMQAAACMAAAAAEQFmZmYAwBwAAAAAAAAAAAAAAAAAAAAAACsLAAH###8AAAACAAAAAQAAAAIAAAAAAAAAAAALI1ZhbChvcmRyMikAAAAhAQAAABEAZmZmAAAAMwAAABkAAAAQAAAAJgAAAAYAAAAmAAAAJwAAACgAAAAqAAAAKwAAADMAAAABAP####8AAXgAATMAAAACQAgAAAAAAAAAAAABAP####8AAXkAATIAAAACQAAAAAAAAAAAAAAfAP####8AAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAA1AAAAGQAAADYAAAABAP####8AAngxAAItMwAAAAMAAAACQAgAAAAAAAAAAAABAP####8AAnkxAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAJ4MgABMgAAAAJAAAAAAAAAAAAAAAEA#####wACeTIAATEAAAACP#AAAAAAAAAAAAAfAP####8BAAAAABAAAk8iAMAxAAAAAAAAwEEAAAAAAAAGAAAAAAoAAAAZAAAAOgAAABkAAAA7#####wAAAAEACUNEcm9pdGVPbQD#####AQAAAAASAAABAAEAAAAKAAAAPAAAAAI#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAFACCj1wo9cJgAAAD0AAAABAP####8ABGJpczEAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAA8AAAAGQAAAD8AAAAFAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA+AAAAQAAAABQA#####wAAAAABEAACZDEBAAI#7MzMzMzMzQAAADwAAABBAAAAEgD#####AQAAAAESAAABAAEAAAA8AT#wAAAAAAAAAAAAEwD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAUBZAAAAAAAAAAAAQwAAAAEA#####wADeHgnAAExAAAAAj#wAAAAAAAAAAAAFwD#####AAAAPAAAABkAAABFAAAABQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARAAAAEYAAAAUAP####8AAAAAARAAAWQAwBL3ztkWiAA#8AAAAAAAAAADP+wobJSI7CoAAAA8AAAARwAAABIA#####wEAAAABEgAAAQABAAAAPAA#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAHAWL#######gAAAEkAAAABAP####8AA3l5JwABMQAAAAI#8AAAAAAAAAAAABcA#####wAAADwAAAAZAAAASwAAAAUA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEoAAABMAAAAFAD#####AAAAAAEQAAJkJwEAAz#szMzMzMzNAAAAPAAAAE0AAAAkAP####8BAAAAABIAAAEAAQAAAAoAAAA8AAAAAwAAAAI#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAFAEa4UeuFHrgAAAE8AAAABAP####8ABGJpczIAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAA8AAAAGQAAAFEAAAAFAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAAUgAAABQA#####wAAAAABEAACZDIBAAI#7MzMzMzMzQAAADwAAABTAAAAAQD#####AAlBZmZpY2hlTycAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAABAAAAAj#wAAAAAAAAAAAABQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAPAAAAFYAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAVQAAAAUA#####wAAAAAADgACTycAAAAAAAAAAABACAAAAAAAAAkAAAAAPAAAAFj#####AAAAAQAIQ1ZlY3RldXIA#####wH#AAAAEAAAAQACAAAAAQAAAFcAAAAAAQD#####AApBZmZpY2hlT08nAAExAAAAAj#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhck11bHRWZWN0AP####8BAAAAAA4AAk8zAEA5AAAAAAAAQAgAAAAAAAADAAAAAAEAAABaAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAWwAAACUA#####wD#AAAAEAAAAQACAAAAAQAAAFwAAAAAJgD#####Af8AAAASAAABBQAAAAABAAAAXQAAAAI#4AAAAAAAAAAAAAsA#####wH#AAAAEgAAAQACAAAAXgAAAF0AAAAIAP####8B#wAAAAIAAABeAAAAAj#JmZmZmZmaAAAAAAkA#####wAAAF8AAABgAAAACgD#####Af8AAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGEAAAAKAP####8B#wAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAYf####8AAAACAAZDTGF0ZXgA#####wD#AAAAwDIAAAAAAADAMQAAAAAAAAAAAGMQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAATXG92ZXJyaWdodGFycm93IHt2ff####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAAQAAAAMAAAACQCoAAAAAAAAAAAAMAP####8BAAAAAAEAAAABAAAAZQAAAAkA#####wAAAFQAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGcAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAZwAAAAkA#####wAAAE4AAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAGoAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAagAAAAkA#####wAAAEIAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAG0AAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAbQAAAAkA#####wAAAEgAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAHAAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAcAAAACMA#####wAAAAAAwCIAAAAAAADAPQAAAAAAAAAAAHIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAIKGQjTCgzKSkAAAAjAP####8AAAAAAEAQAAAAAAAAwC########wAAABsEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAABChkJykAAAAjAP####8AAAAAAEBHgAAAAAAAwEqAAAAAAAAAAABvEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAACChkI0woMSkpAAAAIwD#####AAAAAADATgAAAAAAAMBDf#######AAAAaRAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDIpKQAAAAEA#####wACeEIAATEAAAACP#AAAAAAAAAAAAABAP####8AAnlCAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ4QwABMQAAAAI#8AAAAAAAAAAAAAEA#####wACeUMAATEAAAACP#AAAAAAAAAAAAAfAP####8AAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAB3AAAAGQAAAHgAAAAfAP####8AAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAB5AAAAGQAAAHoAAAABAP####8AA3hBJwABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeUEnAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAN4QicAATUAAAACQBQAAAAAAAAAAAABAP####8AA3lCJwABMwAAAAJACAAAAAAAAAAAAAEA#####wADeEMnAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN5QycAATQAAAACQBAAAAAAAAAAAAABAP####8AAnQxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0MgABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDMAATEAAAACP#AAAAAAAAAAAAABAP####8AAnQ0AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0NQABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDYAATEAAAACP#AAAAAAAAAAAAABAP####8AAnQ3AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0OAABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDkAATEAAAACP#AAAAAAAAAAAAABAP####8AA3QxMAABMQAAAAI#8AAAAAAAAAAAAAEA#####wADdDExAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN0MTIAATEAAAACP#AAAAAAAAAAAAABAP####8AA3QxMwABMQAAAAI#8AAAAAAAAAAAAAEA#####wADdDE0AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN4UDEAATEAAAACP#AAAAAAAAAAAAABAP####8AA3hQMgABMgAAAAJAAAAAAAAAAAAAAAEA#####wADeFAzAAEzAAAAAkAIAAAAAAAAAAAAAQD#####AAN4UDQAATQAAAACQBAAAAAAAAAAAAABAP####8AA3hQNQABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeFA2AAE2AAAAAkAYAAAAAAAAAAAAAQD#####AAN4UDcAATcAAAACQBwAAAAAAAAAAAABAP####8AA3hQOAABOAAAAAJAIAAAAAAAAAAAAAEA#####wADeFA5AAE5AAAAAkAiAAAAAAAAAAAAAQD#####AAR4UDEwAAIxMAAAAAJAJAAAAAAAAAAAAAEA#####wAEeFAxMQACMTEAAAACQCYAAAAAAAAAAAABAP####8ABHhQMTIAAjEyAAAAAkAoAAAAAAAAAAAAAQD#####AAR4UDEzAAIxMwAAAAJAKgAAAAAAAAAAAAEA#####wAEeFAxNAACMTQAAAACQCwAAAAAAAAAAAABAP####8AA3lQMQACLTQAAAADAAAAAkAQAAAAAAAAAAAAAQD#####AAN5UDIAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wADeVAzAAItNQAAAAMAAAACQBQAAAAAAAAAAAABAP####8AA3lQNAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDUAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wADeVA2AAItMQAAAAMAAAACP#AAAAAAAAAAAAABAP####8AA3lQOAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDkAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wAEeVAxMAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAR5UDExAAItMQAAAAMAAAACP#AAAAAAAAAAAAABAP####8ABHlQMTIAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wAEeVAxMwACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAR5UDE0AAItMQAAAAMAAAACP#AAAAAAAAAAAAAfAP####8B#wAAABIAAlAxAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAkQAAABkAAACfAAAAHwD#####Af8AAAASAAJQMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJIAAAAZAAAAoAAAAB8A#####wH#AAAAEgACUDMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACTAAAAGQAAAKEAAAAfAP####8B#wAAABIAAlA0AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAlAAAABkAAACiAAAAHwD#####Af8AAAASAAJQNQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJUAAAAZAAAAowAAAB8A#####wH#AAAAEgACUDYAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACWAAAAGQAAAKQAAAABAP####8AA3lQNwACLTEAAAADAAAAAj#wAAAAAAAAAAAAHwD#####Af8AAAASAAJQNwAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJcAAAAZAAAAsgAAAB8A#####wH#AAAAEgACUDgAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACYAAAAGQAAAKUAAAAfAP####8B#wAAABIAAlA5AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAmQAAABkAAACmAAAAHwD#####Af8AAAASAANQMTAAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACaAAAAGQAAAKcAAAAfAP####8B#wAAABIAA1AxMQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJsAAAAZAAAAqAAAAB8A#####wH#AAAAEgADUDEyAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAnAAAABkAAACpAAAAHwD#####Af8AAAASAANQMTMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACdAAAAGQAAAKoAAAAfAP####8B#wAAABIAA1AxNAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJ4AAAAZAAAAqwAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACDAAAABQD#####AAAA#wESAANQJzEAAAAAAAAAAABACAAAAAAAAAkAAAAArAAAALsAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAhAAAAAUA#####wAAAP8BEgADUCcyAAAAAAAAAAAAQAgAAAAAAAAJAAAAAK0AAAC9AAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIUAAAAFAP####8AAAD#ARIAA1AnMwAAAAAAAAAAAEAIAAAAAAAACQAAAACuAAAAvwAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACGAAAABQD#####AAAA#wESAANQJzQAAAAAAAAAAABACAAAAAAAAAkAAAAArwAAAMEAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAhwAAAAUA#####wAAAP8BEgADUCc1AAAAAAAAAAAAQAgAAAAAAAAJAAAAALAAAADDAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIgAAAAFAP####8AAAD#ARIAA1AnNgAAAAAAAAAAAEAIAAAAAAAACQAAAACxAAAAxQAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACJAAAABQD#####AAAA#wESAANQJzcAAAAAAAAAAABACAAAAAAAAAkAAAAAswAAAMcAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAigAAAAUA#####wAAAP8BEgADUCc4AAAAAAAAAAAAQAgAAAAAAAAJAAAAALQAAADJAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIsAAAAFAP####8AAAD#ARIAA1AnOQAAAAAAAAAAAEAIAAAAAAAACQAAAAC1AAAAywAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACMAAAABQD#####AAAA#wESAARQJzEwAAAAAAAAAAAAQAgAAAAAAAAJAAAAALYAAADNAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAI0AAAAFAP####8AAAD#ARIABFAnMTEAAAAAAAAAAABACAAAAAAAAAkAAAAAtwAAAM8AAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAjgAAAAUA#####wAAAP8BEgAEUCcxMgAAAAAAAAAAAEAIAAAAAAAACQAAAAC4AAAA0QAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACPAAAABQD#####AAAA#wESAARQJzEzAAAAAAAAAAAAQAgAAAAAAAAJAAAAALkAAADTAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAJAAAAAFAP####8AAAD#ARIABFAnMTQAAAAAAAAAAABACAAAAAAAAAkAAAAAugAAANUAAAABAP####8AA3hPNQABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeE82AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN4TzcAATUAAAACQBQAAAAAAAAAAAABAP####8AA3hPOAABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeE85AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEwAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzExAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEyAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEzAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzE0AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN5TzUAATUAAAACQBQAAAAAAAAAAAABAP####8AA3lPNgABNgAAAAJAGAAAAAAAAAAAAAEA#####wADeU83AAE3AAAAAkAcAAAAAAAAAAAAAQD#####AAN5TzgAATgAAAACQCAAAAAAAAAAAAABAP####8AA3lPOQABOQAAAAJAIgAAAAAAAAAAAAEA#####wAEeU8xMAACMTAAAAACQCQAAAAAAAAAAAABAP####8ABHlPMTEAAjExAAAAAkAmAAAAAAAAAAAAAQD#####AAR5TzEyAAIxMgAAAAJAKAAAAAAAAAAAAAEA#####wAEeU8xMwACMTMAAAACQCoAAAAAAAAAAAABAP####8ABHlPMTQAAjE0AAAAAkAsAAAAAAAAAAAAHwD#####Af8AAAASAAJPNQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANcAAAAZAAAA4QAAAB8A#####wH#AAAAEgACTzYAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADYAAAAGQAAAOIAAAAfAP####8B#wAAABIAAk83AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA2QAAABkAAADjAAAAHwD#####Af8AAAASAAJPOAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANoAAAAZAAAA5AAAAB8A#####wEAAP8AEgACTzkAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADbAAAAGQAAAOUAAAAfAP####8B#wAAABIAA08xMAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANwAAAAZAAAA5gAAAB8A#####wH#AAAAEgADTzExAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA3QAAABkAAADnAAAAHwD#####Af8AAAASAANPMTIAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADeAAAAGQAAAOgAAAAfAP####8B#wAAABIAA08xMwAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAN8AAAAZAAAA6QAAAB8A#####wH#AAAAEgADTzE0AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA4AAAABkAAADqAAAABAD#####AAAAQgAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAALwAAAD1AAAABgD#####AQAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAAAAvAAAAPYAAAAHAP####8AAAD#ABAAAAEAAQAAALwAAAD3AAAABwD#####AAAA#wAQAAABAAEAAAD3AAAA9gAAAAgA#####wEAAP8AAQAAAPcAAAACP8mZmZmZmZoAAAAACQD#####AAAA+AAAAPoAAAAKAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwABAAAA+wAAAAoA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAD7AAAAGwD#####AA1DYXJyw6kgZGlyZWN0AAAABQAAAAIAAAACAAAA9wAAAP0AAAAHAAAAAP4BAAAAABAAAAEAAQAAAPcAAAD9AAAACwAAAAD+AAAAAAASAAABAQEAAAD3AAAA#wAAAAwAAAAA#gAAAAABAQAAAPcAAAD9AAAACQAAAAD+AAABAAAAAQEAAAAKAQAAAP4AAAD#ABIAAAEHAAIAAAECAAAADQAAAAD+AAAA9wAAAP0AAAAFAQAAAP4AAAD#ABIAAAEHAAAAAQMAAAEEAAAABwD#####AAAA#wAQAAABAAEAAAD3AAAA#QAAAAcA#####wAAAP8AEAAAAQABAAAA#QAAAQUAAAAHAP####8AAAD#ABAAAAEAAQAAAQUAAAEDAAAABwD#####AAAA#wAQAAABAAEAAAEDAAAA9wAAAA4A#####wAAAP8AAQAAAAUAAAD3AAAA#QAAAQUAAAEDAAAA9wAAAA8A#####wD#AAAAAQAAAAD4AAAADwD#####AP8AAAABAAAAAPkAAAAbAP####8AEHN5bcOpdHJpZSBheGlhbGUAAAASAAAABgAAAAIAAAC+AAAAVAAAAAEAAAABDQACeDMAATIAAAACQAAAAAAAAAAAAAABAAAAAQ0AAnkzAAExAAAAAj#wAAAAAAAAAAAAAQAAAAENAANiaXMAATEAAAACP#AAAAAAAAAAAAABAAAAAQ0AAXQAATEAAAACP#AAAAAAAAAAAAABAAAAAQ0AAnhQAAExAAAAAj#wAAAAAAAAAAAAAQAAAAENAAJ5UAACLTEAAAADAAAAAj#wAAAAAAAAAAAABAAAAAENAAAAVAAAAAUBAAABDQAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAL4AAAEUAAAABgAAAAENAQAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAAAAvgAAARUAAAAHAQAAAQ0AAAD#ABAAAAEAAQAAAL4AAAEWAAAABwEAAAENAAAA#wAQAAABAAEAAAEWAAABFQAAAAgAAAABDQEAAP8AAQAAARYAAAACP8mZmZmZmZoAAAAACQAAAAENAAABFwAAARkAAAAKAAAAAQ0AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwACAAABGgAAAAcAAAABDQEAAAAAEAAAAQABAAABFgAAARsAAAALAAAAAQ0AAAAAABIAAAEBAQAAARYAAAEcAAAADAAAAAENAAAAAAEBAAABFgAAARsAAAAJAAAAAQ0AAAEdAAABHgAAAAoAAAABDQAAAP8AEgAAAQcAAgAAAR8AAAANAAAAAQ0AAAEWAAABGwAAAAUAAAABDQAAAP8AEgAAAQcAAAABIAAAASEAAAAOAQAAAQ0AAAD#AAEAAAAFAAABFgAAARsAAAEiAAABIAAAARYAAAAPAQAAAQ0A#wAAAAEBAAABFwAAAA8BAAABDQD#AAAAAQEAAAEYAAAAGwD#####ABBzeW3DqXRyaWUgYXhpYWxlAAAAEgAAAAYAAAACAAAAwAAAAEgAAAABAAAAASYAAngzAAEyAAAAAkAAAAAAAAAAAAAAAQAAAAEmAAJ5MwABMQAAAAI#8AAAAAAAAAAAAAEAAAABJgADYmlzAAExAAAAAj#wAAAAAAAAAAAAAQAAAAEmAAF0AAExAAAAAj#wAAAAAAAAAAAAAQAAAAEmAAJ4UAABMQAAAAI#8AAAAAAAAAAAAAEAAAABJgACeVAAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAQAAAABJgAAAEgAAAAFAQAAASYAAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADAAAABLQAAAAYAAAABJgEAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAAAAMAAAAEuAAAABwEAAAEmAAAA#wAQAAABAAEAAADAAAABLwAAAAcBAAABJgAAAP8AEAAAAQABAAABLwAAAS4AAAAIAAAAASYBAAD#AAEAAAEvAAAAAj#JmZmZmZmaAAAAAAkAAAABJgAAATAAAAEyAAAACgAAAAEmAAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAATMAAAAHAAAAASYBAAAAABAAAAEAAQAAAS8AAAE0AAAACwAAAAEmAAAAAAASAAABAQEAAAEvAAABNQAAAAwAAAABJgAAAAABAQAAAS8AAAE0AAAACQAAAAEmAAABNgAAATcAAAAKAAAAASYAAAD#ABIAAAEHAAIAAAE4AAAADQAAAAEmAAABLwAAATQAAAAFAAAAASYAAAD#ABIAAAEHAAAAATkAAAE6AAAADgEAAAEmAAAA#wABAAAABQAAAS8AAAE0AAABOwAAATkAAAEvAAAADwEAAAEmAP8AAAABAwAAATAAAAAPAQAAASYA#wAAAAEDAAABMQAAABsA#####wAQc3ltw6l0cmllIGF4aWFsZQAAABIAAAAGAAAAAgAAAMIAAABOAAAAAQAAAAE#AAJ4MwABMgAAAAJAAAAAAAAAAAAAAAEAAAABPwACeTMAATEAAAACP#AAAAAAAAAAAAABAAAAAT8AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAABPwABdAABMQAAAAI#8AAAAAAAAAAAAAEAAAABPwACeFAAATEAAAACP#AAAAAAAAAAAAABAAAAAT8AAnlQAAItMQAAAAMAAAACP#AAAAAAAAAAAAAEAAAAAT8AAABOAAAABQEAAAE#AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAwgAAAUYAAAAGAAAAAT8BAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwAAAADCAAABRwAAAAcBAAABPwAAAP8AEAAAAQABAAAAwgAAAUgAAAAHAQAAAT8AAAD#ABAAAAEAAQAAAUgAAAFHAAAACAAAAAE#AQAA#wABAAABSAAAAAI#yZmZmZmZmgAAAAAJAAAAAT8AAAFJAAABSwAAAAoAAAABPwAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAFMAAAABwAAAAE#AQAAAAAQAAABAAEAAAFIAAABTQAAAAsAAAABPwAAAAAAEgAAAQEBAAABSAAAAU4AAAAMAAAAAT8AAAAAAQEAAAFIAAABTQAAAAkAAAABPwAAAU8AAAFQAAAACgAAAAE#AAAA#wASAAABBwACAAABUQAAAA0AAAABPwAAAUgAAAFNAAAABQAAAAE#AAAA#wASAAABBwAAAAFSAAABUwAAAA4BAAABPwAAAP8AAQAAAAUAAAFIAAABTQAAAVQAAAFSAAABSAAAAA8BAAABPwD#AAAAAQIAAAFJAAAADwEAAAE#AP8AAAABAgAAAUr#####AAAAAQAJQ1JvdGF0aW9uAP####8AAADrAAAAAkBWgAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAxAAAAVgAAAAHAP####8AAAD#ABAAAAEBAQAAAMQAAADr#####wAAAAIAGkNNYXJxdWVBbmdsZU9yaWVudGVEaXJlY3RlAP####8AAAD#AQEAAAABQDAAAAAAAAAAAADEAAAA6wAAAVkAAAAABwD#####AAAA#wAQAAABAQEAAADrAAABWf####8AAAABABJDQXJjRGVDZXJjbGVEaXJlY3QA#####wD#AAAAAQAAAOsAAADEAAABWQAAAA8A#####wD#AAAAAQEAAAFcAAAADwD#####AP8AAAABAQAAAVoAAAApAP####8AAADsAAAAAwAAAAJAVoAAAAAAAAAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMYAAAFgAAAABwD#####AAAA#wAQAAABAQEAAADGAAAA7AAAAAcA#####wAAAP8AEAAAAQEBAAAA7AAAAWEAAAAPAP####8A#wAAAAECAAABYwAAAA8A#####wD#AAAAAQIAAAFi#####wAAAAIAHENNYXJxdWVBbmdsZU9yaWVudGVJbmRpcmVjdGUA#####wAAAP8AAQAAAAFAMAAAAAAAAAAAAMYAAADsAAABYQH#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wD#AAAAAQAAAOwAAADGAAABYf####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAA7QAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMgAAAFoAAAABwD#####AAAA#wAQAAABAQEAAADIAAAA7QAAAAcA#####wAAAP8AEAAAAQEBAAAA7QAAAWkAAAAPAP####8A#wAAAAEBAAABawAAAA8A#####wD#AAAAAQEAAAFqAAAADQD#####AAAAAQAAAO4AAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADKAAABbgAAACUA#####wAAAP8AEAAAAQABAAAAygAAAW8BAAAAJQD#####AQAA#wAQAAABAAEAAAABAAAA7gEAAAAHAP####8A#wAAABAAAAEBAQAAAO4AAAFvAAAABwD#####AP8AAAAQAAABAQEAAAABAAAAygAAAAEA#####wACazEAATIAAAACQAAAAAAAAAAAAAABAP####8AAmsyAAItNAAAAAMAAAACQBAAAAAAAAAAAAAXAP####8AAADvAAAAGQAAAXQAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADMAAABdgAAAAcA#####wAAAP8AEAAAAQEBAAAA7wAAAXcAAAATAP####8B#wAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABP+TbfTXiMrkAAAF4AAAAIQD#####AP8AAAAAAXkAAAAYAP####8AAAACAAlDRm9uY3Rpb24AAAAAGQAAAXQAAAACP#AAAAAAAAAAAAF5AAAAAgAAAXkAAAF5AAAAFwD#####AAAA8AAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAXUAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADOAAABewAAAAcA#####wAAAP8AEAAAAQEBAAABfAAAAPAAAAAHAP####8AAAD#ABAAAAEBAQAAAPAAAADOAAAAEwD#####Af8AAAASAAFMAAAAAAAAAAAAQAgAAAAAAAAFAAE#5DMPSjR2ZQAAAX4AAAAhAP####8A#wAAAAABfwAAABgAAAAALwAAAAAZAAABdQAAAAI#8AAAAAAAAAAAAX8AAAACAAABfwAAAX8AAAApAP####8AAADxAAAAAkBOAAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAA0AAAAYEAAAAHAP####8AAAD#ABAAAAEBAQAAANAAAADxAAAABwD#####AAAA#wAQAAABAQEAAADxAAABggAAACsA#####wD#AAAAAQAAAPEAAADQAAABggAAACoA#####wAAAP8BAQAAAAFAMAAAAAAAAAAAANAAAADxAAABggEAAAAPAP####8A#wAAAAEDAAABhAAAAA8A#####wD#AAAAAQMAAAGDAAAAKQD#####AAAA8gAAAAMAAAACQE4AAAAAAAAAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADSAAABiQAAAAcA#####wAAAP8AEAAAAQEBAAAA0gAAAPIAAAAHAP####8AAAD#ABAAAAEBAQAAAPIAAAGKAAAALQD#####AP8AAAABAAAA8gAAANIAAAGKAAAADwD#####AP8AAAABAgAAAYsAAAAPAP####8A#wAAAAECAAABjAAAACwA#####wAAAP8AAQAAAAFAMAAAAAAAAAAAANIAAADyAAABigEAAAApAP####8AAADzAAAAAkBeAAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAA1AAAAZEAAAAHAP####8AAAD#ABAAAAEBAQAAANQAAADzAAAABwD#####AAAA#wAQAAABAQEAAAGSAAAA8wAAACoA#####wAAAP8BAQAAAAFAMAAAAAAAAAAAANQAAADzAAABkgEAAAArAP####8A#wAAAAEAAADzAAAA1AAAAZIAAAApAP####8AAAD0AAAAAwAAAAJAXgAAAAAAAAAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAANYAAAGXAAAABwD#####AAAA#wAQAAABAQEAAADWAAAA9AAAAAcA#####wAAAP8AEAAAAQEBAAAA9AAAAZgAAAAsAP####8AAAD#AAEAAAABQDAAAAAAAAAAAADWAAAA9AAAAZgBAAAALQD#####AP8AAAABAAAA9AAAANYAAAGY#####wAAAAEADUNUcmFuc1BhclZlY3QA#####wAAAXAAAAAFAP####8BAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAABAAABnQAAACUA#####wAAAP8AEAAAAQABAAAAAQAAAZ4BAAAADv##########"

	this.liste_questions = [];
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let xA,yA,xB,yB,xC,yC,k=[],xO,yO,k1,k2
		let xP=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] // ces nombres sont juste lÃ  pour compter combien il y en a... ils seront remplacÃ©s plus tard par les coordonnÃ©es utiles ou pas.
		let yP=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] // comme pour t, je n'utiliserai pas le premier Ã©lÃ©ment pour coller aux index.
		let xO5,xO6,xO7,xO8,xO9,xO10,xO11,xO12,xO13,xO14
		let yO5,yO6,yO7,yO8,yO9,yO10,yO11,yO12,yO13,yO14
		let bis1=0,bis2=0,xx=0,yy=0,AfficheO=0,AfficheOO=0,t=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] // il y a 14 transformations mais je n'utilise pas t[0] pour coller avec les index.
		let texte=``,texte_corr=``,lettre1=[`A`,`B`,`C`],lettre2=[`O\'`,`A`,`B`] // si t[i]=0 alors la transformation concernÃ©e n'existe pas, si t[i]=1, on la dessine.
		let point=[[]]
		let transformation=parseInt(this.sup)-1
		let liste_type_de_questions=[[1,2,3,4],[1,2,3,4,7],[1,2,3,4,7,8],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10,11,12,13,14]]
		let choix_transformation=combinaison_listes(liste_type_de_questions[transformation],3)
		for (let j=0;j<3;j++) 
		if (choix_transformation[j]==10) k[j]=choice([2,2,2,2,4,4,4,4,5,10])*randint(-1,1,[0]) // rapport d'homothÃ©tie < 1 (plus ou moins  0.5, 0.25, 0.2 ou 0,1 ) avec une frÃ©quence divisÃ©e par 4 pour 0.2 et 0.1.
		else k[j]=choice([1,2,2,3,3,4,4,5,5,2.5])*randint(-1,1,[0]) // rapport d'homothÃ©tie >=1 (plus ou - 1,2,2.5, 3, 4 ou 5 avec des frÃ©quences divisÃ©es par 2 pour 1 et 2.5) 

		xA=randint(-10,10) // Point A
		yA=randint(-10,10)
		xB=randint(-10,10,[xA]) // Point B
		yB=randint(-10,10)
		xC=randint(-10,10) // Point C
		yC=randint(-10,10,[yA,yB])
		xO=randint(-3,3,[0])  // Point O' (origine du repÃ¨re dans lequel les transformations sont simples (centre des rotations et point d'intersection des axes))
		yO=randint(-3,3,[0])
	
		point[0]=image_point_par_transformation(choix_transformation[0],[xA,yA],[xO,yO],[xO,yO],k[0])
		while (point[0][0]<-13 || point[0][0]>13 || point[0][1]<-13 || point [0][1]>14) { // on teste si A est dans la fenÃªtre sinon on en choisit un autre
			xA=randint(-10,10) // Point A
			yA=randint(-10,10)
			point[0]=image_point_par_transformation(choix_transformation[0],[xA,yA],[xO,yO],[xO,yO],k[0])
		}

		if (choix_transformation[1]>4) point[1]=image_point_par_transformation(choix_transformation[1],[xB,yB],[xA,yA],[xA,yA],k[1])
		else point[1]=image_point_par_transformation(choix_transformation[1],[xB,yB],[xO,yO]) // si c'est une symÃ©trie, l'axe passe par O'
		while (point[1][0]<-13 || point[1][0]>13 || point[1][1]<-13 || point [1][1]>14) { // on teste si on est dans les clous, sinon on choisit un autre point B
			xB=randint(-10,10,[xA]) // Point B
			yB=randint(-10,10)
			if (choix_transformation[1]>4) point[1]=image_point_par_transformation(choix_transformation[1],[xB,yB],[xA,yA],[xA,yA],k[1])
			else point[1]=image_point_par_transformation(choix_transformation[1],[xB,yB],[xO,yO]) // si c'est une symÃ©trie, l'axe passe par O'
		}
		if (choix_transformation[2]>4) point[2]=image_point_par_transformation(choix_transformation[2],[xC,yC],[xB,yB],[xB,yB],k[2])
		else point[2]=image_point_par_transformation(choix_transformation[2],[xC,yC],[xO,yO]) // si c'est une symÃ©trie, l'axe passe par O'
		while (point[2][0]<-13 || point[2][0]>13 || point[2][1]<-13 || point [2][1]>14) { // on vÃ©rifie que C est dans le repÃ¨re sinon on change le point C.
			xC=randint(-10,10) // Point C
			yC=randint(-10,10,[yA,yB])
			if (choix_transformation[2]>4) point[2]=image_point_par_transformation(choix_transformation[2],[xC,yC],[xB,yB],[xB,yB],k[2])
			else point[2]=image_point_par_transformation(choix_transformation[2],[xC,yC],[xO,yO]) // si c'est une symÃ©trie, l'axe passe par O'
		}
		// les points sont choisis, on Ã©crit l'Ã©noncÃ©	
		for (let i=0;i<3;i++) {
			switch (choix_transformation[i]){
				case 1 :
					bis1=1
					t[1]=1
					if (i==0) {
						xP[1]=xA
						yP[1]=yA
					}
					else if (i==1) {
						xP[1]=xB
						yP[1]=yB
					}
					else {
						xP[1]=xC
						yP[1]=yC
					}
					texte += `Donner les coordonnÃ©es du symÃ©trique de $${lettre1[i]}$ par rapport Ã  la droite $(d_1)$.<br>`
					texte_corr += `Le symÃ©trique de $${lettre1[i]}$ par rapport Ã  $(d_1)$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break

				case 2 :
					bis2=1
					t[2]=1
					if (i==0) {
						xP[2]=xA
						yP[2]=yA
					}
					else if (i==1) {
						xP[2]=xB
						yP[2]=yB
					}
					else {
						xP[2]=xC
						yP[2]=yC
					}
					texte += `Donner les coordonnÃ©es du symÃ©trique de $${lettre1[i]}$ par rapport Ã  la droite $(d_2)$.<br>`
					texte_corr += `Le symÃ©trique de $${lettre1[i]}$ par rapport Ã  $(d_2)$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break

				case 3 :
					xx=1
					t[3]=1
					if (i==0) {
						xP[3]=xA
						yP[3]=yA
					}
					else if (i==1) {
						xP[3]=xB
						yP[3]=yB
					}
					else {
						xP[3]=xC
						yP[3]=yC
					}					
					texte += `Donner les coordonnÃ©es du symÃ©trique de $${lettre1[i]}$ par rapport Ã  la droite $(d)$.<br>`
					texte_corr += `Le symÃ©trique de $${lettre1[i]}$ par rapport Ã  $(d)$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break

				case 4 :
					yy=1
					t[4]=1
					if (i==0) {
						xP[4]=xA
						yP[4]=yA
					}
					else if (i==1) {
						xP[4]=xB
						yP[4]=yB
					}	
					else {
						xP[4]=xC
						yP[4]=yC
					}					
					texte += `Donner les coordonnÃ©es du symÃ©trique de $${lettre1[i]}$ par rapport Ã  la droite $(d\')$.<br>`
					texte_corr += `Le symÃ©trique de $${lettre1[i]}$ par rapport Ã  $(d\')$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break
		
				case 5 :
					AfficheO=1
					t[5]=1
					if (i==0) {
						xP[5]=xA
						yP[5]=yA
						xO5=xO
						yO5=yO
					}
					else if (i==1) {
						xP[5]=xB
						yP[5]=yB
						xO5=xA
						yO5=yA
					}	
					else {
						xP[5]=xC
						yP[5]=yC
						xO5=xB
						yO5=yB
					}	
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90Â° dans le sens anti-horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90Â° dans le sens anti-horaire a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break

				case 6 :
					AfficheO=1
					t[6]=1
					if (i==0) {
						xP[6]=xA
						yP[6]=yA
						xO6=xO
						yO6=yO
					}
					else if (i==1) {
						xP[6]=xB
						yP[6]=yB
						xO6=xA
						yO6=yA
					}	
					else {
						xP[6]=xC
						yP[6]=yC
						xO6=xB
						yO6=yB
					}						
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90Â° dans le sens horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90Â° dans le sens horaire a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break
			
				case 7 :
					AfficheO=1
					t[7]=1
					if (i==0) {
						xP[7]=xA
						yP[7]=yA
						xO7=xO
						yO7=yO
					}
					else if (i==1) {
						xP[7]=xB
						yP[7]=yB
						xO7=xA
						yO7=yA
					}	
					else {
						xP[7]=xC
						yP[7]=yC
						xO7=xB
						yO7=yB
					}	
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la symÃ©trie de centre $${lettre2[i]}$.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la symÃ©trie de centre $${lettre2[i]}$ a pour coordonnÃ©es ($${tex_nombrec(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break
		
				case 11 :
					AfficheO=1
					t[11]=1
					if (i==0) {
						xP[11]=xA
						yP[11]=yA
						xO11=xO
						yO11=yO
					}
					else if (i==1) {
						xP[11]=xB
						yP[11]=yB
						xO11=xA
						yO11=yA
					}	
					else {
						xP[11]=xC
						yP[11]=yC
						xO11=xB
						yO11=yB
					}	
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60Â° dans le sens anti-horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60Â° dans le sens anti-horaire a pour coordonnÃ©es ($${tex_nombre(calcul(point[i][0],2))};${tex_nombre(calcul(point[i][1],2))}$).<br>`
				break

				case 12 :
					AfficheO=1
					t[12]=1
					if (i==0) {
						xP[12]=xA
						yP[12]=yA
						xO12=xO
						yO12=yO
					}
					else if (i==1) {
						xP[12]=xB
						yP[12]=yB
						xO12=xA
						yO12=yA
					}	
					else {
						xP[12]=xC
						yP[12]=yC
						xO12=xB
						yO12=yB
					}	
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60Â° dans le sens horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60Â° dans le sens horaire a pour coordonnÃ©es ($${tex_nombre(calcul(point[i][0],2))};${tex_nombre(calcul(point[i][1],2))}$).<br>`
				break
		
				case 13 :
					AfficheO=1
					
				case 12 :
					AfficheO=1
					t[13]=1
					if (i==0) {
						xP[13]=xA
						yP[13]=yA
						xO13=xO
						yO13=yO
					}
					else if (i==1) {
						xP[13]=xB
						yP[13]=yB
						xO13=xA
						yO13=yA
					}	
					else {
						xP[13]=xC
						yP[13]=yC
						xO13=xB
						yO13=yB
					}	
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120Â° dans le sens anti-horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120Â° dans le sens anti-horaire a pour coordonnÃ©es ($${tex_nombre(calcul(point[i][0],2))};${tex_nombre(calcul(point[i][1],2))}$).<br>`
				break

				case 14 :
					AfficheO=1
					t[14]=1
					if (i==0) {
						xP[14]=xA
						yP[14]=yA
						xO14=xO
						yO14=yO
					}
					else if (i==1) {
						xP[14]=xB
						yP[14]=yB
						xO14=xA
						yO14=yA
					}	
					else {
						xP[14]=xC
						yP[14]=yC
						xO14=xB
						yO14=yB
					}
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120Â° dans le sens horaire.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120Â° dans le sens horaire a pour coordonnÃ©es ($${tex_nombre(calcul(point[i][0],2))};${tex_nombre(calcul(point[i][1],2))}$).<br>`
				break
			
				case 8 :
					AfficheO=1
					t[8]=1
					if (i==0) {
						xP[8]=xA
						yP[8]=yA
						xO8=xO
						yO8=yO
					}
					else if (i==1) {
						xP[8]=xB
						yP[8]=yB
						xO8=xA
						yO8=yA
					}	
					else {
						xP[8]=xC
						yP[8]=yC
						xO8=xB
						yO8=yB
					}
					// AfficheOO=1
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]}.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]} a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break
			
				case 9 :
					AfficheO=1
					t[9]=1
					k1=k[i]
					if (i==0) {
						xP[9]=xA
						yP[9]=yA
						xO9=xO
						yO9=yO
					}
					else if (i==1) {
						xP[9]=xB
						yP[9]=yB
						xO9=xA
						yO9=yA
					}	
					else {
						xP[9]=xC
						yP[9]=yC
						xO9=xB
						yO9=yB
					}
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par l'homothÃ©tie de centre $${lettre2[i]}$ et de rapport $${tex_nombre(k[i])}$.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par l'homothÃ©tie de centre $${lettre2[i]}$ et de rapport $${tex_nombre(k[i])}$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break

				case 10 :
					AfficheO=1
					t[10]=1
					k2=k[i]
					if (i==0) {
						xP[10]=xA
						yP[10]=yA
						xO10=xO
						yO10=yO
					}
					else if (i==1) {
						xP[10]=xB
						yP[10]=yB
						xO10=xA
						yO10=yA
					}	
					else {
						xP[10]=xC
						yP[10]=yC
						xO10=xB
						yO10=yB
					}
					texte += `Donner les coordonnÃ©es de l'image de $${lettre1[i]}$ par l'homothÃ©tie de centre $${lettre2[i]}$ et de rapport $${tex_fraction_reduite(1,k[i])}$.<br>`
					texte_corr += `L'image de $${lettre1[i]}$ par l'homothÃ©tie de centre $${lettre2[i]}$ et de rapport $${tex_fraction_reduite(1,k[i])}$ a pour coordonnÃ©es ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`
				break
			}
		}
		if (sortie_html) {
			this.type_exercice = 'MG32'; // on pilote les figures ci-dessous
			/*
			boolÃ©ens permettant l'affichage des Ã©lÃ©ments si =1 et le masquage si =0
		bis1 affiche la droite de coefficient directeur 1 passant par O'
			bis2 affiche la droite de coefficient directeur -1 passant par O'
			xx' affiche la droite horizontale passant par O'
			yy' affiche la droite verticale passant par O'
			AfficheO' affiche O' comme son nom l'indique.
			AfficheOO' affiche le vecteur OO' vecteur de translation
			
			*/

			this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y", "${yA}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x", "${xA}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yB", "${yB}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yC", "${yC}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y2", "${yO}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x2", "${xO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yy'", "${yy}"); mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xx'", "${xx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis1", "${bis1}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheO\'", "${AfficheO}"); mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheOO\'", "${AfficheOO}");
			
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "x", "${xA}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "y", "${yA}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xB", "${xB}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yB", "${yB}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xC", "${xC}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yC", "${yC}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP1", "${xP[1]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP1", "${yP[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP2", "${xP[2]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP2", "${yP[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP3", "${xP[3]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP3", "${yP[3]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP4", "${xP[4]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP4", "${yP[4]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP5", "${xP[5]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP5", "${yP[5]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP6", "${xP[6]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP6", "${yP[6]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP7", "${xP[7]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP7", "${yP[7]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP8", "${xP[8]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP8", "${yP[8]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP9", "${xP[9]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP9", "${yP[9]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP10", "${xP[10]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP10", "${yP[10]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP11", "${xP[11]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP11", "${yP[11]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP12", "${xP[12]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP12", "${yP[12]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP13", "${xP[13]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP13", "${yP[13]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP14", "${xP[14]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP14", "${yP[14]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO5", "${xO5}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO5", "${yO5}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO6", "${xO6}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO6", "${yO6}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO7", "${xO7}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO7", "${yO7}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO8", "${xO8}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO8", "${yO8}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO9", "${xO9}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO9", "${yO9}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO10", "${xO10}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO10", "${yO10}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO11", "${xO11}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO11", "${yO11}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO12", "${xO12}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO12", "${yO12}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO13", "${xO13}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO13", "${yO13}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO14", "${xO14}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO14", "${yO14}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t1", "${t[1]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t2", "${t[2]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t3", "${t[3]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t4", "${t[4]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t5", "${t[5]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t6", "${t[6]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t7", "${t[7]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t8", "${t[8]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t9", "${t[9]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t10", "${t[10]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t11", "${t[11]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t12", "${t[12]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t13", "${t[13]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t14", "${t[14]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k1", "${k1}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k2", "${k2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "y2", "${yO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "x2", "${xO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yy'", "${yy}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xx'", "${xx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheO\'", "${AfficheO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheOO\'", "${AfficheOO}");			
			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			liste_de_question_to_contenu_sans_numero(this)

		}
		else {
			texte = ``
			texte_cor=``
			this.liste_questions.push(texte) // on envoie la question
			this.liste_corrections.push(texte_corr)
			liste_de_question_to_contenu_sans_numero(this);
		}
		


	}
	this.besoin_formulaire_numerique = ['Transformations',5, '1 : SymÃ©tries axiales (6Ã¨me)\n 2 : SymÃ©tries axiales et centrales (5Ã¨me)\n 3 : SymÃ©tries et translations (4Ã¨me)\n 4 : SymÃ©tries, translations, rotations et homothÃ©ties\n 5 : Les mÃªmes plus des rotations compliquÃ©es\n'];

}

/**
* Passer d'une Ã©criture en base 10 Ã  l'Ã©criture dans une autre base ou inversement
*
* * Convertir en base 10
* * Convertir vers une base entre 2 et 7
* * Trouver le plus grand nombre Ã  3 ou 4 chiffres d'une base ainsi que son successeur et le convertir en base 10 ou le plus petit et son prÃ©decesseur
*
* @Auteur RÃ©mi Angot
*/
function Passer_d_une_base_a_l_autre() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Passer de la base 10 Ã  une autre base et inversement";
	this.consigne = "";
	this.nb_questions = 3;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = ['vers_base_10',choice(['vers_base_n_3_chiffres','vers_base_n_4_chiffres']),choice(['plus_grand_4_chiffres','plus_grand_3_chiffres','plus_petit_4_chiffres','plus_petit_3_chiffres'])];
		if (this.nb_questions > 3) {
			type_de_questions_disponibles = ['vers_base_10','vers_base_n_3_chiffres','vers_base_n_4_chiffres','plus_grand_4_chiffres','plus_grand_3_chiffres','plus_petit_4_chiffres','plus_petit_3_chiffres'];
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, b, n, m, chiffre1, chiffre2, chiffre3, chiffre4, cpt = 0; i < this.nb_questions && cpt < 50;) {
			b = randint(2,7);
			switch (liste_type_de_questions[i]) {
				case 'vers_base_10':
					n = randint(1,b-1)*10+randint(0,b-1);
					m = randint(1,b-1)*1000+randint(0,b-1)*100+randint(0,b-1)*10+randint(0,b-1);
					texte = `Les nombre $(${n})_${b}$ et $(${m})_${b}$ sont Ã©crits en base ${b}. Donner leur Ã©criture en base 10.`;
					texte_corr = `$(${n})_${b}=${n.toString()[0]}\\times${b}+${n.toString()[1]}=${parseInt(n,b)}$`;
					texte_corr += `<br>$(${m})_${b}=${m.toString()[0]}\\times${b}^3+${m.toString()[1]}\\times${b}^2+${m.toString()[2]}\\times${b}+${m.toString()[3]}=${parseInt(m,b)}$`;
				break;
				case 'vers_base_n_3_chiffres':
					chiffre1 = randint(1,b-1);
					chiffre2 = randint(0,b-1);
					chiffre3 = randint(0,b-1);
					n = chiffre1*b**2+chiffre2*b+chiffre3;
					texte = `Ãcrire en base ${b} le nombre ${n}.`;
					texte_corr = `$${n}=${b}\\times${Math.floor(n/b)}+${mise_en_evidence(n%b)}$`;
					texte_corr += `<br>$${Math.floor(n/b)}=${b}\\times${mise_en_evidence(chiffre1)}+${mise_en_evidence(chiffre2)}$`;
					texte_corr += `<br> Finalement $${n}=(${chiffre1}${chiffre2}${chiffre3})_${b}$`
				break;
				case 'vers_base_n_4_chiffres':
					chiffre1 = randint(1,b-1);
					chiffre2 = randint(0,b-1);
					chiffre3 = randint(0,b-1);
					chiffre4 = randint(0,b-1);
					n = chiffre1*b**3+chiffre2*b**2+chiffre3*b+chiffre4;
					texte = `Ãcrire en base ${b} le nombre ${n}.`;
					texte_corr = `$${n}=${b}\\times${Math.floor(n/b)}+${mise_en_evidence(n%b)}$`;
					texte_corr += `<br>$${Math.floor(n/b)}=${b}\\times${Math.floor(Math.floor(n/b)/b)}+${mise_en_evidence(Math.floor(n/b)%b)}$`;
					texte_corr += `<br>$${Math.floor(Math.floor(n/b)/b)}=${b}\\times${mise_en_evidence(chiffre1)}+${mise_en_evidence(chiffre2)}$`;
					texte_corr += `<br> Finalement $${n}=(${chiffre1}${chiffre2}${chiffre3}${chiffre4})_${b}$`
				break;
				case 'plus_grand_4_chiffres':
					texte = `Quel est le plus grand nombre Ã  4 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son successeur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					texte_corr = `En base ${b} les chiffres sont 0`;
					for (let i = 1; i < b; i++) {
						texte_corr += `, ${i}`
					}
					texte_corr += ` donc le plus grand nombre Ã  4 chiffres est $(${b-1}${b-1}${b-1}${b-1})_${b}$ et son successeur immÃ©diat est $(10000)_${b}$.` 
					texte_corr += `<br> $(10000)_${b}=1\\times${b}^4=${tex_nombre(b**4)}$ donc $(${b-1}${b-1}${b-1}${b-1})_${b}=${b**4}-1=${tex_nombre(b**4-1)}$.`
				break;
				case 'plus_grand_3_chiffres':
					texte = `Quel est le plus grand nombre Ã  3 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son successeur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					texte_corr = `En base ${b} les chiffres sont 0`;
					for (let i = 1; i < b; i++) {
						texte_corr += `, ${i}`
					}
					texte_corr += ` donc le plus grand nombre Ã  3 chiffres est $(${b-1}${b-1}${b-1})_${b}$ et son successeur immÃ©diat est $(1000)_${b}$.` 
					texte_corr += `<br> $(1000)_${b}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(${b-1}${b-1}${b-1})_${b}=${b**3}-1=${tex_nombre(b**3-1)}$.`
				break;
				case 'plus_petit_4_chiffres':
					texte = `Quel est le plus petit nombre Ã  4 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son prÃ©dÃ©cesseur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					texte_corr = `En base ${b} les chiffres sont 0`;
					for (let i = 1; i < b; i++) {
						texte_corr += `, ${i}`
					}
					texte_corr += ` donc le plus petit nombre Ã  4 chiffres est $(1000)_${b}$ et son prÃ©dÃ©cesseur immÃ©diat est $(${b-1}${b-1}${b-1})_${b}$.` 
					texte_corr += `<br> $(1000)_${b}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(${b-1}${b-1}${b-1})_${b}=${b**3}-1=${tex_nombre(b**3-1)}$.`
				break;
				case 'plus_petit_3_chiffres':
					texte = `Quel est le plus petit nombre Ã  3 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son prÃ©dÃ©cesseur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					texte_corr = `En base ${b} les chiffres sont 0`;
					for (let i = 1; i < b; i++) {
						texte_corr += `, ${i}`
					}
					texte_corr += ` donc le plus petit nombre Ã  3 chiffres est $(100)_${b}$ et son prÃ©dÃ©cesseur immÃ©diat est $(${b-1}${b-1})_${b}$.` 
					texte_corr += `<br> $(100)_${b}=1\\times${b}^2=${tex_nombre(b**2)}$ donc $(${b-1}${b-1})_${b}=${b**2}-1=${tex_nombre(b**2-1)}$.`
				break;
				
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}


/**
* Passer d'une Ã©criture en base 10 Ã  l'Ã©criture dans une autre base ou inversement
*
* * Convertir en base 10
* * Convertir vers une base entre 2 et 7
* * Trouver le plus grand nombre Ã  3 ou 4 chiffres d'une base ainsi que son successeur et le convertir en base 10 ou le plus petit et son prÃ©decesseur
*
* @Auteur RÃ©mi Angot
*/
function Passer_de_la_base_12_ou_16_a_la_10() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Passer de la base 12 ou 16 Ã  la base 10 et inversement";
	this.consigne = "";
	this.nb_questions = 3;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.spacing = 1;
	sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es

		let type_de_questions_disponibles = ['vers_base_10','vers_base_n_3_chiffres']
		if (this.nb_questions==3) {
			type_de_questions_disponibles.push(choice(['vers_base_n_4_chiffres','plus_grand_4_chiffres','plus_petit_4_chiffres','plus_petit_3_chiffres']))
		}
		 
		
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let	b = choice([12,16]);
		if (b==12) {
			this.introduction = 'Les symboles que lâon utilise en base 12 sont les dix chiffres habituels, la lettre A pour dÃ©signer 10 unitÃ©s et la lettre B pour dÃ©signer 11 unitÃ©s.';
		} else {
			this.introduction = 'Les symboles que lâon utilise en base 16 sont les dix chiffres habituels, la lettre A pour dÃ©signer 10 unitÃ©s, B pour 11 unitÃ©s, C pour 12 unitÃ©s, D pour 13 unitÃ©s, ';
			this.introduction +='E pour 14 unitÃ©s et F pour 15 unitÃ©s.'
		}
		for (let i = 0, texte, texte_corr, n, m, chiffre1, chiffre2, chiffre3, chiffre4, cpt = 0; i < this.nb_questions && cpt < 50;) {
			switch (liste_type_de_questions[i]) {
				case 'vers_base_10':
					if (b==12) {
						n = choice([choice(['A','B'])+randint(0,9),randint(1,9)+choice(['A','B']),choice(['A','B'])+choice(['A','B'])]) 
						m = choice(['A','B',randint(1,9)])+choice(['A','B',randint(0,9)])+choice(['A','B',randint(0,9)])+choice(['A','B',randint(0,9)]);
					}	
					if (b==16) {
						n = choice(['A','B','C','D','E','F',randint(1,9).toString()])+choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
						m = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9'])+choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9'])+choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
					}				
					texte = `Les nombre $(${n})_{${b}}$ et $(${m})_{${b}}$ sont Ã©crits en base ${b}. Donner leur Ã©criture en base 10.`;
					texte_corr = `$(${n})_{${b}}=${valeur_base(n.toString()[0])}\\times${b}+${valeur_base(n.toString()[1])}=${tex_nombre(parseInt(n,b))}$`;
					if (b==12) { //m est un nombre Ã  4 chiffres
						texte_corr += `<br>$(${m})_{${b}}=${valeur_base(m.toString()[0])}\\times${b}^3+${valeur_base(m.toString()[1])}\\times${b}^2+${valeur_base(m.toString()[2])}\\times${b}+${valeur_base(m.toString()[3])}=${tex_nombre(parseInt(m,b))}$`;
					} else { //m est un nombre Ã  3 chiffres
						texte_corr += `<br>$(${m})_{${b}}=${valeur_base(m.toString()[0])}\\times${b}^2+${valeur_base(m.toString()[1])}\\times${b}+${valeur_base(m.toString()[2])}=${tex_nombre(parseInt(m,b))}$`;
					}
				break;
				case 'vers_base_n_3_chiffres':
					if (b==12) {
						chiffre1 = choice(['A','B',randint(1,9).toString()])
						chiffre2 = choice(['A','B',randint(0,9).toString()])
						chiffre3 = choice(['A','B',randint(1,9).toString()])
					} else {
						chiffre1 = choice(['A','B','C','D','E','F','1','2','3','4','5','6','7','8','9']);
						chiffre2 = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
						chiffre3 = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
					}
					n = valeur_base(chiffre1)*b**2+valeur_base(chiffre2)*b+valeur_base(chiffre3);
					texte = `Ãcrire en base ${b} le nombre ${nombre_avec_espace(n)}.`;
					texte_corr = `$${tex_nombre(n)}=${b}\\times${Math.floor(n/b)}+${mise_en_evidence(n%b)}$`;
					texte_corr += `<br>$${Math.floor(n/b)}=${b}\\times${mise_en_evidence(valeur_base(chiffre1))}+${mise_en_evidence(valeur_base(chiffre2))}$`;
					texte_corr += `<br> Finalement $${tex_nombre(n)}=(${chiffre1}${chiffre2}${chiffre3})_{${b}}$`
				break;
				case 'vers_base_n_4_chiffres':
					if (b==12) {
						chiffre1 = choice(['A','B',randint(1,9).toString()])
						chiffre2 = choice(['A','B',randint(0,9).toString()])
						chiffre3 = choice(['A','B',randint(1,9).toString()])
						chiffre4 = choice(['A','B',randint(1,9).toString()])
					} else {
						chiffre1 = choice(['A','B','C','D','E','F','1','2','3','4','5','6','7','8','9']);
						chiffre2 = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
						chiffre3 = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
						chiffre4 = choice(['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9']);
					}
					n = valeur_base(chiffre1)*b**3+valeur_base(chiffre2)*b**2+valeur_base(chiffre3)*b+valeur_base(chiffre4);
					texte = `Ãcrire en base ${b} le nombre ${nombre_avec_espace(n)}.`;
					texte_corr = `$${tex_nombre(n)}=${b}\\times${Math.floor(n/b)}+${mise_en_evidence(n%b)}$`;
					texte_corr += `<br>$${tex_nombre(Math.floor(n/b))}=${b}\\times${Math.floor(Math.floor(n/b)/b)}+${mise_en_evidence(Math.floor(n/b)%b)}$`;
					texte_corr += `<br>$${tex_nombre(Math.floor(Math.floor(n/b)/b))}=${b}\\times${mise_en_evidence(valeur_base(chiffre1))}+${mise_en_evidence(valeur_base(chiffre2))}$`;
					texte_corr += `<br> Finalement $${tex_nombre(n)}=(${chiffre1}${chiffre2}${chiffre3}${chiffre4})_{${b}}$`
				break;
				case 'plus_grand_4_chiffres':
					texte = `Quel est le plus grand nombre Ã  4 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son successeur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					if (b==12) {
						texte_corr = `En base ${b} le plus grand chiffre est $B$`
						texte_corr += ` donc le plus grand nombre Ã  4 chiffres est $(BBBB)_{${b}}$ et son successeur immÃ©diat est $(10000)_{${b}}$.` 
						texte_corr += `<br> $(10000)_{${b}}=1\\times${b}^4=${tex_nombre(b**4)}$ donc $(BBBB)_{${b}}=${b**4}-1=${tex_nombre(b**4-1)}$.`
					} else {
						texte_corr = `En base ${b} le plus grand chiffre est $F$`
						texte_corr += ` donc le plus grand nombre Ã  4 chiffres est $(FFFF)_{${b}}$ et son successeur immÃ©diat est $(10000)_{${b}}$.` 
						texte_corr += `<br> $(10000)_{${b}}=1\\times${b}^4=${tex_nombre(b**4)}$ donc $(FFFF)_{${b}}=${b**4}-1=${tex_nombre(b**4-1)}$.`
					}
				break;
				case 'plus_grand_3_chiffres':
					texte = `Quel est le plus grand nombre Ã  3 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son successeur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					if (b==12) {
						texte_corr = `En base ${b} le plus grand chiffre est $B$`
						texte_corr += ` donc le plus grand nombre Ã  3 chiffres est $(BBB)_{${b}}$ et son successeur immÃ©diat est $(1000)_{${b}}$.` 
						texte_corr += `<br> $(1000)_{${b}}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(BBB)_{${b}}=${b**3}-1=${tex_nombre(b**3-1)}$.`
					} else {
						texte_corr = `En base ${b} le plus grand chiffre est $F$`
						texte_corr += ` donc le plus grand nombre Ã  3 chiffres est $(FFF)_{${b}}$ et son successeur immÃ©diat est $(1000)_{${b}}$.` 
						texte_corr += `<br> $(1000)_{${b}}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(FFF)_{${b}}=${b**3}-1=${tex_nombre(b**3-1)}$.`
					}
				break;
				case 'plus_petit_4_chiffres':
					texte = `Quel est le plus petit nombre Ã  4 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son prÃ©dÃ©cesseur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					if (b==12) {
						texte_corr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $B$`
						texte_corr += ` donc le plus petit nombre Ã  4 chiffres est $(1000)_{${b}}$ et son prÃ©dÃ©cesseur immÃ©diat est $(BBB)_{${b}}$.` 
						texte_corr += `<br> $(1000)_{${b}}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(BBB)_{${b}}=${b**3}-1=${tex_nombre(b**3-1)}$.`
					} else {
						texte_corr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $F$`
						texte_corr += ` donc le plus petit nombre Ã  4 chiffres est $(1000)_{${b}}$ et son prÃ©dÃ©cesseur immÃ©diat est $(FFF)_{${b}}$.` 
						texte_corr += `<br> $(1000)_{${b}}=1\\times${b}^3=${tex_nombre(b**3)}$ donc $(FFF)_{${b}}=${b**3}-1=${tex_nombre(b**3-1)}$.`
					}
				break;
				case 'plus_petit_3_chiffres':
					texte = `Quel est le plus petit nombre Ã  3 chiffres que l'on peut Ã©crire en base ${b}.`;
					texte +=`<br>Comment s'Ã©crit son prÃ©dÃ©cesseur immÃ©diat en base ${b} ? En dÃ©duire l'Ã©criture en base 10 de ces 2 nombres.`;
					if (b==12) {
						texte_corr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $B$`
						texte_corr += ` donc le plus petit nombre Ã  3 chiffres est $(100)_{${b}}$ et son prÃ©dÃ©cesseur immÃ©diat est $(BB)_{${b}}$.` 
						texte_corr += `<br> $(100)_{${b}}=1\\times${b}^2=${tex_nombre(b**2)}$ donc $(BB)_{${b}}=${b**2}-1=${tex_nombre(b**2-1)}$.`
					} else {
						texte_corr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $F$`
						texte_corr += ` donc le plus petit nombre Ã  3 chiffres est $(100)_{${b}}$ et son prÃ©dÃ©cesseur immÃ©diat est $(FF)_{${b}}$.` 
						texte_corr += `<br> $(100)_{${b}}=1\\times${b}^2=${tex_nombre(b**2)}$ donc $(FF)_{${b}}=${b**2}-1=${tex_nombre(b**2-1)}$.`
					}
				break;
				
				
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
}


/**
* ProblÃ¨mes de variations en pourcentage
*
* * Situations variÃ©es : prix soldÃ© ou augmentÃ©, effectif d'un collÃ¨ge ou lycÃ©e, facture, population d'une ville
* 
* * Calculer le rÃ©sultat d'une Ã©volution 
* * Exprimer l'Ã©volution en pourcentage
* * Retrouver la situation initiale
* * MÃ©lange des 3 types de problÃ¨mes
* @Auteur RÃ©mi Angot
* 3P10
*/
function Evolutions_en_pourcentage() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Variations en pourcentage";
	this.consigne = "";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 4; // type de questions

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let type_de_questions_disponibles = [];
		if (this.sup==1) {
			type_de_questions_disponibles = ['finale'];
		}
		if (this.sup==2) {
			type_de_questions_disponibles = ['evolution'];
		}
		if (this.sup==3) {
			type_de_questions_disponibles = ['initiale'];
		}
		if (this.sup==4) {
			type_de_questions_disponibles = ['finale','evolution','initiale'];
		}
		let type_de_situations_disponibles = ['prix','etablissement','facture','population'];
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		let liste_type_de_situations = combinaison_listes(type_de_situations_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, depart, arrive, taux, coeff, cpt = 0; i < this.nb_questions && cpt < 50;) {

			switch (liste_type_de_situations[i]) {
				case 'prix':
					depart = choice([calcul(randint(11,99)/10),randint(11,99),randint(11,99)*10]);
					taux = choice([10,20,30,40,60]);
					taux *= choice([-1,1]);
					coeff = tex_nombrec(1+taux/100)
					arrive = calcul(depart*(1+taux/100));
					switch (liste_type_de_questions[i]){
						case 'finale' :
						if (taux>0) {
							texte = `Un article coÃ»tait $${tex_prix(depart)}$ â¬ et son prix a augmentÃ© de $${taux}~\\%$. Calculer son nouveau prix.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_prix(depart)}\\times ${coeff} = ${tex_prix(arrive)}$`
							texte_corr += `<br>Le nouveau prix de cet article est ${tex_prix(arrive)} â¬.`
						} else {
							texte = `Un article coÃ»tait $${tex_prix(depart)}$ â¬ et son prix est soldÃ© Ã  $${taux}~\\%$. Calculer son nouveau prix.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_prix(depart)}\\times ${coeff} = ${tex_prix(arrive)}$`
							texte_corr += `<br>Le nouveau prix de cet article est ${tex_prix(arrive)} â¬.`
						}
						break;
						case 'initiale' :
						if (taux>0) {
							texte = `AprÃ¨s une augmentation de $${taux}~\\%$ un article coÃ»te maintenant $${tex_prix(arrive)}$ â¬. Calculer son prix avant l'augmentation.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\%=${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`
							texte_corr += `<br>$${tex_prix(arrive)}\\div ${coeff} = ${tex_prix(depart)}$`
							texte_corr += `<br>Avant l'augmentation cet article coÃ»tait ${tex_prix(depart)} â¬.`
						} else {
							texte = `SoldÃ© Ã  $${taux}~\\%$ un article coÃ»te maintenant $${tex_prix(arrive)}$ â¬. Calculer son prix avant les soldes.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`
							texte_corr += `<br>$${tex_prix(arrive)}\\div ${coeff} = ${tex_prix(depart)}$`
							texte_corr += `<br>Avant les soldes cet article coÃ»tait ${tex_prix(depart)} â¬.`
						}
						break;
						case 'evolution' :
						if (taux>0) {
							texte = `Un article qui coÃ»tait $${tex_prix(depart)}$ â¬ coÃ»te maintenant $${tex_prix(arrive)}$ â¬. Exprimer l'augmentation du prix en pourcentage.`
							texte_corr = `$${tex_prix(arrive)}\\div ${tex_prix(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%+${taux}~\\%$`
							texte_corr += `<br>Le prix a Ã©tÃ© multipliÃ© par ${coeff}, il a donc augmentÃ© de $${taux}~\\%$.`
						} else {
							texte = `Un article qui coÃ»tait $${tex_prix(depart)}$ â¬ coÃ»te maintenant $${tex_prix(arrive)}$ â¬. Exprimer la rÃ©duction du prix en pourcentage.`
							texte_corr = `$${tex_prix(arrive)}\\div ${tex_prix(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%${taux}~\\%$`
							texte_corr += `<br>Le prix a Ã©tÃ© multipliÃ© par ${coeff}, il a donc diminuÃ© de $${abs(taux)}~\\%$.`
						}
						break;
					}
				break;
				case 'etablissement':
					//Le nombre d'Ã©lÃ¨ve doit Ãªtre entier
					//Multiple de 50 et multiple de 2%
					//Multiple de 20 et multiple de 5%
					//Multiple de 100 et n%
					switch (randint(1,3)){
						case 1 : 
							depart = 50*randint(7,24);
							taux = 2*randint(1,5);
						break;
						case 2 : 
							depart = 20*randint(17,60);
							taux = 5*randint(1,3);
						break;
						case 3 : 
							depart = 100*randint(4,12);
							taux = randint(1,11);
						break;
					}
					arrive = calcul(depart*(1+taux/100));
					coeff = tex_nombrec(1+taux/100)
					let date = new Date()
					let cetteAnnee = date.getFullYear();
					let anneeDerniere = cetteAnnee-1;
					let etablissement = choice(['collÃ¨ge','lycÃ©e']);
					switch (liste_type_de_questions[i]){
						case 'finale' :
						if (taux>0) {
							texte = `Un ${etablissement} avait $${tex_nombre(depart)}$ Ã©lÃ¨ves en ${anneeDerniere}. Depuis, le nombre d'Ã©lÃ¨ves a augmentÃ© de $${taux}~\\%$. Calculer le nombre d'Ã©lÃ¨ves dans ce ${etablissement} cette annÃ©e.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_nombre(depart)}\\times ${coeff} = ${tex_nombre(arrive)}$`
							texte_corr += `<br>Il y a maintenant ${string_nombre(arrive)} Ã©lÃ¨ves dans ce ${etablissement}.`
						} else {
							texte = `Un ${etablissement} avait $${tex_nombre(depart)}$ Ã©lÃ¨ves en ${anneeDerniere}. Depuis, le nombre d'Ã©lÃ¨ves a diminuÃ© de $${abs(taux)}~\\%$. Calculer le nombre d'Ã©lÃ¨ves dans ce ${etablissement} cette annÃ©e.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_nombre(depart)}\\times ${coeff} = ${tex_nombre(arrive)}$`
							texte_corr += `<br>Il y a maintenant ${string_nombre(arrive)} Ã©lÃ¨ves dans ce ${etablissement}.`
						}
						break;
						case 'initiale' :
						if (taux>0) {
							texte = `Depuis ${anneeDerniere} le nombre d'Ã©lÃ¨ves d'un ${etablissement} a augmentÃ© de $${taux}~\\%$. Il y a maintenant $${tex_nombre(arrive)}$ Ã©lÃ¨ves. Calculer le nombre d'Ã©lÃ¨ves en ${anneeDerniere} dans cet Ã©tablissement.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le nombre initial d'Ã©lÃ¨ves, on va donc diviser le nombre actuel d'Ã©lÃ¨ves par ${coeff}.`
							texte_corr += `<br>$${tex_nombre(arrive)}\\div ${coeff} = ${tex_nombre(depart)}$`
							texte_corr += `<br>En ${anneeDerniere}, il y avait ${string_nombre(depart)} Ã©lÃ¨ves dans ce ${etablissement}.`
						} else {
							texte = `Depuis ${anneeDerniere} le nombre d'Ã©lÃ¨ves d'un ${etablissement} a diminuÃ© de $${taux}~\\%$. Il y a maintenant $${tex_nombre(arrive)}$ Ã©lÃ¨ves. Calculer le nombre d'Ã©lÃ¨ves en ${anneeDerniere} dans cet Ã©tablissement.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le nombre initial d'Ã©lÃ¨ves, on va donc diviser le nombre actuel d'Ã©lÃ¨ves par ${coeff}.`
							texte_corr += `<br>$${tex_nombre(arrive)}\\div ${coeff} = ${tex_nombre(depart)}$`
							texte_corr += `<br>En ${anneeDerniere}, il y avait ${string_nombre(depart)} Ã©lÃ¨ves dans ce ${etablissement}.`
						}
						break;
						case 'evolution' :
						texte = `En ${anneeDerniere}, il y avait $${tex_nombre(depart)}$ Ã©lÃ¨ves dans un ${etablissement}. En ${cetteAnnee}, ils sont $${tex_nombre(arrive)}$. Exprimer la variation du nombre d'Ã©lÃ¨ves de cet Ã©tablissement en pourcentage.`
						if (taux>0) {
							texte_corr = `$${tex_nombre(arrive)}\\div ${tex_nombre(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%+${taux}~\\%$`
							texte_corr += `<br>Le nombre d'Ã©lÃ¨ves a Ã©tÃ© multipliÃ© par ${coeff}, il a donc augmentÃ© de $${taux}~\\%$.`
						} else {
							texte = `Un article qui coÃ»tait $${tex_nombre(depart)}$ â¬ coÃ»te maintenant $${tex_nombre(arrive)}$ â¬. Exprimer la rÃ©duction du prix en pourcentage.`
							texte_corr = `$${tex_nombre(arrive)}\\div ${tex_prix(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%${taux}~\\%$`
							texte_corr += `<br>Le nombre d'Ã©lÃ¨ves a Ã©tÃ© multipliÃ© par ${coeff}, il a donc diminuÃ© de $${abs(taux)}~\\%$.`
						}
						break;
					}
				break;
				case 'facture':
					depart = randint(700,1400);
					taux = randint(1,12);
					taux *= choice([-1,1]);
					coeff = tex_nombrec(1+taux/100)
					arrive = calcul(depart*(1+taux/100));
					let facture = choice(["ma facture annuelle d'Ã©lectricitÃ©","ma facture annuelle de gaz","ma taxe d'habitation","mon ordinateur","mon vÃ©lo Ã©lectrique"])
					switch (liste_type_de_questions[i]){
						case 'finale' :
						if (taux>0) {
							texte = `Le prix de ${facture} Ã©tait de $${tex_prix(depart)}$ â¬ l'annÃ©e derniÃ¨re et il a augmentÃ© de $${taux}~\\%$. Calculer son nouveau prix.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_prix(depart)}\\times ${coeff} = ${tex_prix(arrive)}$`
							texte_corr += `<br>Le prix de ${facture} est maintenant de ${tex_prix(arrive)} â¬.`
						} else {
							texte = `Le prix de ${facture} Ã©tait de $${tex_prix(depart)}$ â¬ l'annÃ©e derniÃ¨re et il a diminuÃ© de $${abs(taux)}~\\%$. Calculer son nouveau prix.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_prix(depart)}\\times ${coeff} = ${tex_prix(arrive)}$`
							texte_corr += `<br>Le prix de ${facture} est maintenant de ${tex_prix(arrive)} â¬.`
						}
						break;
						case 'initiale' :
						if (taux>0) {
							texte = `AprÃ¨s une augmentation de $${taux}~\\%$ le prix de ${facture} est maintenant $${tex_prix(arrive)}$ â¬. Calculer son prix avant l'augmentation.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\%=${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`
							texte_corr += `<br>$${tex_prix(arrive)}\\div ${coeff} = ${tex_prix(depart)}$`
							texte_corr += `<br>Avant l'augmentation le prix de ${facture} Ã©tait de ${tex_prix(depart)} â¬.`
						} else {
							texte = `AprÃ¨s une diminution de $${abs(taux)}~\\%$ ${facture} coÃ»te maintenant $${tex_prix(arrive)}$ â¬. Calculer son prix avant les soldes.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`
							texte_corr += `<br>$${tex_prix(arrive)}\\div ${coeff} = ${tex_prix(depart)}$`
							texte_corr += `<br>Avant la diminution le prix de ${facture} Ã©tait de ${tex_prix(depart)} â¬.`
						}
						break;
						case 'evolution' :
						if (taux>0) {
							texte = `Le prix de ${facture} est passÃ© de $${tex_prix(depart)}$ â¬ Ã  $${tex_prix(arrive)}$ â¬. Exprimer cette augmentation en pourcentage.`
							texte_corr = `$${tex_prix(arrive)}\\div ${tex_prix(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%+${taux}~\\%$`
							texte_corr += `<br>Le prix a Ã©tÃ© multipliÃ© par ${coeff}, il a donc augmentÃ© de $${taux}~\\%$.`
						} else {
							texte = `Le prix de ${facture} est passÃ© de $${tex_prix(depart)}$ â¬ Ã  $${tex_prix(arrive)}$ â¬. Exprimer cette diminution en pourcentage.`
							texte_corr = `$${tex_prix(arrive)}\\div ${tex_prix(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%${taux}~\\%$`
							texte_corr += `<br>Le prix a Ã©tÃ© multipliÃ© par ${coeff}, il a donc diminuÃ© de $${abs(taux)}~\\%$.`
						}
						break;
					}
				break;
				case 'population':
					depart = choice([randint(11,99)*1000,randint(11,99)*10000]);
					taux = randint(5,35);
					taux *= choice([-1,1]);
					coeff = tex_nombrec(1+taux/100)
					arrive = calcul(depart*(1+taux/100));
					let nb = randint(5,15);
					switch (liste_type_de_questions[i]){
						case 'finale' :
						if (taux>0) {
							texte = `Il y a ${nb} ans, la population d'une ville Ã©tait de $${tex_nombre(depart)}$ habitants. Depuis, elle a augmentÃ© de $${taux}~\\%$. Calculer le nombre d'habitants actuel de cette ville.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_nombre(depart)}\\times ${coeff} = ${tex_nombre(arrive)}$`
							texte_corr += `<br>La population de cette ville est maintenant de $${tex_nombre(arrive)}$ habitants.`
						} else {
							texte = `Il y a ${nb} ans, la population d'une ville Ã©tait de $${tex_nombre(depart)}$ habitants. Depuis, elle a diminuÃ© de $${abs(taux)}~\\%$. Calculer le nombre d'habitants actuel de cette ville.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.`
							texte_corr += `<br>$${tex_nombre(depart)}\\times ${coeff} = ${tex_nombre(arrive)}$`
							texte_corr += `<br>La population de cette ville est maintenant de $${tex_nombre(arrive)}$ habitants.`
						}
						break;
						case 'initiale' :
						if (taux>0) {
							texte = `En ${nb} ans, la population d'une ville a augmentÃ© de $${taux}~\\%$ et est maintenant $${tex_nombre(arrive)}$ habitants. Calculer sa population d'il y a ${nb} ans.`
							texte_corr = `Une augmentation de $${taux}~\\%$ revient Ã  multiplier par $100~\\% + ${taux}~\\%=${100+taux}~\\% = ${coeff}$.<br>Pour retrouver la population initiale, on va donc diviser le nombre d'habitants actuel par ${coeff}.`
							texte_corr += `<br>$${tex_nombre(arrive)}\\div ${coeff} = ${tex_nombre(depart)}$`
							texte_corr += `<br>Il y a ${nb} ans cette ville comptait $${tex_nombre(depart)}$ habitants.`
						} else {
							texte = `En ${nb} ans, la population d'une ville a diminuÃ© de $${abs(taux)}~\\%$ et est maintenant $${tex_nombre(arrive)}$ habitants. Calculer sa population d'il y a ${nb} ans.`
							texte_corr = `Une diminution de $${abs(taux)}~\\%$ revient Ã  multiplier par $100~\\% ${taux}~\\% = ${100+taux}~\\% = ${coeff}$.<br>Pour retrouver la population initiale, on va donc diviser le nombre d'habitants actuel par ${coeff}.`
							texte_corr += `<br>$${tex_nombre(arrive)}\\div ${coeff} = ${tex_nombre(depart)}$`
							texte_corr += `<br>Il y a ${nb} ans cette ville comptait $${tex_nombre(depart)}$ habitants.`
						}
						break;
						case 'evolution' :
						if (taux>0) {
							texte = `En ${nb} ans, la population d'une ville est passÃ© de $${tex_nombre(depart)}$ habitants Ã  $${tex_nombre(arrive)}$. Exprimer cette augmentation en pourcentage.`
							texte_corr = `$${tex_nombre(arrive)}\\div ${tex_nombre(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%+${taux}~\\%$`
							texte_corr += `<br>La population a Ã©tÃ© multipliÃ©e par ${coeff} elle a donc augmentÃ© de $${abs(taux)}~\\%$.`
						} else {
							texte = `En ${nb} ans, la population d'une ville est passÃ© de $${tex_nombre(depart)}$ habitants Ã  $${tex_nombre(arrive)}$. Exprimer cette diminution en pourcentage.`
							texte_corr = `$${tex_nombre(arrive)}\\div ${tex_nombre(depart)} = ${coeff} =  ${100+taux}~\\% = 100~\\%${taux}~\\%$`
							texte_corr += `<br>La population a Ã©tÃ© multipliÃ©e par ${coeff} elle a donc diminuÃ© de $${abs(taux)}~\\%$.`
						}
						break;
					}
				break;
			}

			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 4, '1 : DÃ©terminer le rÃ©sultat aprÃ¨s une variation en pourcentage\n2 : Exprimer une variation en pourcentage\n3 : Calculer la valeur initiale en connaissant la variation et la situation finale\n4 : MÃ©lange des 3 types de problÃ¨mes'];
}


/**
* DÃ©terminer le coefficient de proportionnalitÃ© associÃ© Ã  une Ã©volution en pourcentage ou l'inverse
*
* 
* @Auteur RÃ©mi Angot
* 3P10-1
*/
function Coefficient_evolution() {
	'use strict';
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "Coefficient multiplicateur d'une variation en pourcentage";
	this.consigne = "ComplÃ©ter.";
	this.nb_questions = 4;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.sup = 1;

	this.nouvelle_version = function (numero_de_l_exercice) {
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let texte_aide = '- Augmenter un nombre de $t$ % revient Ã  le multiplier par $1+\\dfrac{t}{100}$.';
		texte_aide += '<br>'
		texte_aide += '<br>- Diminuer un nombre de $t$ % revient Ã  le multiplier par $1-\\dfrac{t}{100}$.'
		texte_aide += '<br>'
		texte_aide += '<br><b>Exemples</b> :'
		texte_aide += '<br>- Diminuer un nombre de 20 % revient Ã  le multiplier par $1-\\dfrac{20}{100}=1-0,20=0,8$.'
		texte_aide += '<br><br>- Augmenter un nombre de 5 % revient Ã  le multiplier par $1+\\dfrac{5}{100}=1+0,05=1,05$.'

		this.bouton_aide = modal_url(numero_de_l_exercice,'/aide/3P10');

		let type_de_questions_disponibles = [];
		if (this.sup==1) {
			type_de_questions_disponibles = ['coef+','coef-'];
		}
		if (this.sup==2) {
			type_de_questions_disponibles = ['taux+','taux-'];
		}
		if (this.sup==3) {
			type_de_questions_disponibles = ['coef+','coef-','taux+','taux-'];
		}
		let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
		for (let i = 0, texte, texte_corr, taux, coeff, cpt = 0; i < this.nb_questions && cpt < 50;) {
			taux = choice([randint(1,9)*10,randint(1,9)]);
			switch (liste_type_de_questions[i]){
				case 'coef+' :
				texte = `Augmenter de ${taux} % revient Ã  multiplier par...`;
				coeff = tex_prix(calcul(1+taux/100));
				texte_corr = `Augmenter de ${taux} % revient Ã  multiplier par ${coeff} car $100~\\% + ${taux}~\\% = ${100+taux}~\\%$.`;
				break;
				case 'coef-' :
				texte = `Diminuer de ${taux} % revient Ã  multiplier par...`;
				coeff = tex_prix(calcul(1-taux/100));
				texte_corr = `Diminuer de ${taux} % revient Ã  multiplier par ${coeff} car $100~\\% - ${taux}~\\% = ${100-taux}~\\%$.`;
				break;
				case 'taux+' :
				coeff = tex_nombrec(1+taux/100);
				texte = `Multiplier par ${coeff} revient Ã ...`;
				texte_corr = `Multiplier par ${coeff} revient Ã  augmenter de ${taux} % car $${coeff} = ${100+taux}~\\% = 100~\\% + ${taux}~\\%$.`;
				break;
				case 'taux-' :
				coeff = tex_nombrec(1-taux/100);
				texte = `Multiplier par ${coeff} revient Ã ...`;
				texte_corr = `Multiplier par ${coeff} revient Ã  diminuer de ${taux} % car $${coeff} = ${100-taux}~\\% = 100~\\% - ${taux}~\\%$.`;
				break;
			}
			if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte);
				this.liste_corrections.push(texte_corr);
				i++;
			}
			cpt++;
		}
		liste_de_question_to_contenu(this);
	}
	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : DÃ©terminer le coefficient\n2 : Exprimer une variation en pourcentage\n3 : MÃ©lange des 2 types de questions'];
}

/**
* Banque de problÃ¨mes utilisant le thÃ©orÃ¨me de ThalÃ¨s et diffÃ©rentes propriÃ©tÃ©s de gÃ©omÃ©trie
* @Auteur RÃ©mi Angot
* 3G20-1
*/
function Problemes_Thales(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "ProblÃ¨mes avec le thÃ©orÃ¨me de ThalÃ¨s";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	

	this.nouvelle_version = function(numero_de_l_exercice){
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let texte='';
		let texte_corr='';
		let type_de_questions = randint(1,2);
		let A,B,C,D,M,N,x,k,y,p,p2,codage1,codage2,codage3,codage4,sMN,sBD,sCote,texte1,texte2,texte3,texte4,labels,BC,BD,MN
		

			switch (type_de_questions){
				case 1 :
				x = randint(6,10);
				k = calcul(randint(12,19)/10);
				y = calcul(randint(30,50)/10);
				[A,B,C,D,E]=creerNomDePolygone(5)
				texte = `On sait que $${A}${E}=${tex_nombre(x)}$ cm ; $${A}${D}=${tex_nombrec(k*x)}$ cm et $${E}${B}=${tex_nombre(y)}$ cm.<br>`;
				texte += `Calculer la valeur exacte de $${D}${C}$.`
				if (sortie_html) {
					// Pour le svg toutes les longueurs sont multipliÃ©es par 20
					let fig1 = `<div><svg width="450" height="300" viewBox="-40 -40 450 300" xmlns="http://www.w3.org/2000/svg">
					  <polygon points="0,0 ${calcul(k*x*20)},0 ${calcul(k*x*20)},${calcul(k*y*20)}  " fill="none" stroke="black" />
					  <line x1="${calcul(x*20)}" y1="0" x2="${calcul(x*20)}" y2="${calcul(y*20)}" stroke="black" /> //[BE]
					  <polyline points="${calcul(x*20-10)},0 ${calcul(x*20-10)},10 ${calcul(x*20)},10" fill="none" stroke="black" />  //Angle droit en E
					  <polyline points="${calcul(k*x*20-10)},0 ${calcul(k*x*20-10)},10 ${calcul(k*x*20)},10" fill="none" stroke="black" />  //Angle droit en D
					  <text x="-10" y="-10" text-anchor="middle" alignment-baseline="central">${A}</text> 
					  <text x="${calcul(x*20)}" y="-10" text-anchor="middle" alignment-baseline="central">${E}</text> 
					  <text x="${calcul(x*20)}" y="${calcul(y*20+10)}" text-anchor="middle" alignment-baseline="central">${B}</text> 
					  <text x="${calcul(k*x*20+10)}" y="-10" text-anchor="middle" alignment-baseline="central">${D}</text>
					  <text x="${calcul(k*x*20+10)}" y="${calcul(k*y*20+10)}" text-anchor="middle" alignment-baseline="central">${C}</text>
					</svg></div>`

					let fig2 = `<div><svg width="450" height="300" viewBox="-40 -260 450 300" xmlns="http://www.w3.org/2000/svg">
					  <polygon points="0,0 ${calcul(k*x*20)},0 ${calcul(k*x*20)},${calcul(-k*y*20)}  " fill="none" stroke="black" />
					  <line x1="${calcul(x*20)}" y1="0" x2="${calcul(x*20)}" y2="${calcul(-y*20)}" stroke="black" /> //[BE]
					  <polyline points="${calcul(x*20-10)},0 ${calcul(x*20-10)},-10 ${calcul(x*20)},-10" fill="none" stroke="black" />  //Angle droit en E
					  <polyline points="${calcul(k*x*20-10)},0 ${calcul(k*x*20-10)},-10 ${calcul(k*x*20)},-10" fill="none" stroke="black" />  //Angle droit en D
					  <text x="-10" y="-10" text-anchor="middle" alignment-baseline="central">${A}</text> 
					  <text x="${calcul(x*20)}" y="10" text-anchor="middle" alignment-baseline="central">${E}</text> 
					  <text x="${calcul(x*20)}" y="${calcul(-y*20-10)}" text-anchor="middle" alignment-baseline="central">${B}</text> 
					  <text x="${calcul(k*x*20+10)}" y="10" text-anchor="middle" alignment-baseline="central">${D}</text>
					  <text x="${calcul(k*x*20+10)}" y="${calcul(-k*y*20-10)}" text-anchor="middle" alignment-baseline="central">${C}</text>
					</svg></div>`					

					texte += choice([fig1,fig2])

					

				} else {
					let fig1 = `\\begin{tikzpicture}[scale=.6]
\\draw (0,0)--(${calcul(k*x)},0)--(${calcul(k*x)},${-k*y})--cycle;
\\draw (${x},0)--(${x},${-y});
\\draw (${x},0) rectangle ++(-.5,-.5);
\\draw (${calcul(k*x)},0) rectangle ++(-.5,-.5);
\\node [above left] at (0,0) {${A}};
\\node [above] at (${x},0) {${E}};
\\node [above right] at (${k*x},0) {${D}};
\\node [below right] at (${k*x},${-k*y}) {${C}};
\\node [below] at (${x},${-y}) {${B}};
\\end{tikzpicture}`

				let fig2 = `\\begin{tikzpicture}[scale=.6]
\\draw (0,0)--(${calcul(k*x)},0)--(${calcul(k*x)},${k*y})--cycle;
\\draw (${x},0)--(${x},${y});
\\draw (${x},0) rectangle ++(.5,.5);
\\draw (${calcul(k*x)},0) rectangle ++(.5,.5);
\\node [below left] at (0,0) {${A}};
\\node [below] at (${x},0) {${E}};
\\node [below right] at (${k*x},0) {${D}};
\\node [above right] at (${k*x},${k*y}) {${C}};
\\node [above] at (${x},${y}) {${B}};
\\end{tikzpicture}`

				texte += '<br>'+choice([fig1,fig2])

				}
					
				texte_corr = `Les droites $(${E}${B})$ et $(${D}${C})$ sont perpendiculaires Ã  la mÃªme droite $(${A}${D})$, elles sont donc parallÃ¨les entre elles.`
				texte_corr += `<br>De plus les points $${A}$, $${E}$, $${D}$  et $${A}$, $${B}$, $${C}$ sont alignÃ©s dans cet ordre donc d'aprÃ¨s le thÃ©orÃ¨me de ThalÃ¨s on a :`				
				texte_corr += `<br><br>$\\dfrac{${A}${E}}{${A}${D}}=\\dfrac{${E}${B}}{${D}${C}}=\\dfrac{${A}${B}}{${A}${C}}$`
				texte_corr += `<br><br>$\\dfrac{${tex_nombre(x)}}{${tex_nombrec(k*x)}}=\\dfrac{${tex_nombre(y)}}{${D}${C}}$`
				texte_corr += `<br><br>$${D}${C}=\\dfrac{${tex_nombrec(k*x)}\\times${tex_nombre(y)}}{${tex_nombre(x)}}=${tex_nombrec(k*y)}$`
				break;


				case 2 : 
					let [nomA,nomB,nomC,nomD] = creerNomDePolygone(4,['M','N'])
					BC = randint(2,6)
					BD = 2*BC
					MN = calcul(BD*choice([0.2,0.3,0.4]))
					A = point(0,4,nomA,'above')
					B = point(7,4,nomB,'above')
					C = point(7,0,nomC,'below')
					D = point(0,0,nomD,'below')
					p = polygone(A,B,C,D)
					codage1 = codageAngleDroit(D,A,B)
					codage2 = codageAngleDroit(A,B,C)
					codage3 = codageAngleDroit(B,C,D)
					codage4 = codageAngleDroit(C,D,A)
					M = pointSurSegment(A,B,longueur(A,B)/3,'M','above')
					N = pointSurSegment(A,D,longueur(A,D)/3,'N','left')
					sMN = segment(M,N)
					sBD = segment(B,D)
					sCote = segment(point(N.x-1.3,N.y),point(D.x-1.3,D.y))
					sCote.styleExtremites='<->'
					texte1 = texteParPoint('?',milieu(point(N.x-1.5,N.y),point(D.x-1.5,D.y)),'gauche')
					texte2 = texteSurSegment(nombre_avec_espace(BD)+' cm',B,D)
					texte3 = texteSurSegment(nombre_avec_espace(MN)+' cm',M,N)
					texte4 = texteSurSegment(nombre_avec_espace(BC)+' cm',B,C)

					labels = labelPoint(M,N,A,B,C,D)

					texte = `Sur la figure ci-dessous $${nomA+nomB+nomC+nomD}$ est un rectangle et $(MN)$ est parallÃ¨le Ã  la diagonale $(${nomB+nomD})$.`
					texte += `<br>Calculer la longueur $${nomD+'N'}$ au millimÃ¨tre prÃ¨s.<br><br>`
					texte += mathalea2d({
						xmin : -2,
						xmax : 9,
						ymin : -1.5,
						ymax : 5,
						scale : .8
					}, p,codage1,codage2,codage3,codage4,sMN,sBD,sCote,texte1,texte2,texte3,texte4,labels)

					texte_corr = `Dans le triangle $${nomA+nomB+nomD}$, $M$ est un point de $[${nomA+nomB}]$, $N$ est un point de $[${nomA+nomD}]$ et $(MN)$ est parallÃ¨le Ã  $(${nomB+nomD})$ donc d'aprÃ¨s le thÃ©orÃ¨me de ThalÃ¨s on a : `
					texte_corr += `<br><br> $${tex_fraction(nomA+'M',nomA+nomB)}=${tex_fraction(nomA+'N',nomA+nomD)}=${tex_fraction('MN',nomB+nomD)}$`
					texte_corr += `<br><br> $${tex_fraction(nomA+'M',nomA+nomB)}=${tex_fraction(nomA+'N',BC)}=${tex_fraction(tex_nombre(MN),tex_nombre(BD))}$`
					texte_corr += `<br><br> $${nomA}N = ${tex_fraction(BC+'\\times'+tex_nombre(MN),BD)}=${tex_nombre(arrondi(calcul(BC*MN/BD),1))}$ cm`
					texte_corr += `<br><br> Les points $${nomA}$, $N$ et $${nomD}$ sont alignÃ©s dans cet ordre donc $N${nomD}=${nomA+nomD}-${nomA}N= ${BC}-${tex_nombre(arrondi(calcul(BC*MN/BD),1))}=${tex_nombre(arrondi(calcul(BC-BC*MN/BD),1))}$ cm.`
				break;
				}
			
	this.liste_questions[0]=texte;
	this.liste_corrections[0]=texte_corr;
	liste_de_question_to_contenu(this);
	// this.besoin_formulaire_numerique = ['Type de questions',2,"1 : Donner l'Ã©galitÃ©\n2 : ComplÃ©ter une Ã©galitÃ© avec une addition ou une soustraction"];
	// this.besoin_formulaire2_case_a_cocher = ['Sans figures']
	}
}
/**
 * 3G23 reconnaitre des triangles Ã©gaux
 * @author Jean-Claude Lhote et SÃ©bastien Lozano
 */
function TrianglesSemblables() {
	'use strict'
	Exercice.call(this)
	this.beta = false;
	this.titre = "ReconnaÃ®tre des triangles semblables dans diffÃ©rentes configurations";
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.nouvelle_version = function(numero_de_l_exercice){
		let coeff=50
		this.liste_questions = []; // Liste de questions
		this.liste_corrections = []; // Liste de questions corrigÃ©es
		let texte='';
		let texte_corr='';
		let type_de_questions = randint(1,1);
		switch (type_de_questions){
			case 1 :
				let trouve=false,aireABC,A,B,C,M,p,q,r,s,X,G,Gq,nom1,grid;
				// on gÃ©nÃ¨re le triangle ABC avec une contrainte sur son aire
				while (!trouve) {
				A=point(choice([0,3]),choice([0,3]),'A'); // le point A !
				B=point(choice([6,9]),choice([6,9]),'B'); // le point B !
				C=rotation(B,A,90,'C'); // le point C Ã  partir de B par rotation autour de A!
				C.x+=choice([0,3,6]); // on dÃ©cale l'abscise de C de 0, 3 ou 6 !
				C.y+=choice([-3,0,3]); // on dÃ©cale l'abscise de C de -3, 0 ou 3 !
				p=polygone(A,B,C); // on trace le polygone ABC
				aireABC=aireTriangle(p); // Je savais bien que cette formule servirait un jour !
				if (aireABC<11&&aireABC>5) trouve=true;
				};
				G=barycentre(p); // le barycentre de ABC
				let angleChoisi1 = choice([0,90,270]); 
				p=rotation(p,G,angleChoisi1); // on tourne ABC de faÃ§on alÃ©atoire autour de son barycentre
				p.couleurDeRemplissage='gray';//remplissage de ABC
				p.opaciteDeRemplissage=0.2;//0.5;//remplissage de ABC
				nom1=nommePolygone(p,'ABC',0.4); // on  nomme ABC en plaÃ§ant A,B et C Ã  0,4
				grid=grille(-3,-3,27,18, 'gray',0.4,1); // on trace une grille
				M=point(9,12); // un point M fixe pour tourner autour				
				q=rotation(p,M,90); // on fait tourner ABC autour de M de 90Â°
				// on a besoin de rÃ©cupÃ©rer le polygone non tracÃ©
				let q_non_trace = polygone(q.listePoints);
				Gq=barycentre(q); // on construit son barycentre
				//let angleChoisi2 = 270; 
				let angleChoisi2 = choice([0,90,180,270]); 
				r=rotation(q,Gq,angleChoisi2); // on fait tourner q encore autour de son barycentre
				X=milieu(r.listePoints[0],r.listePoints[1]); // on place le milieu des deux premiers points de la figure obtenue qui sont les images des points A et B initiaux	
				s=rotation(r,X,180); // on fait topurner r autour du milieu des deux extremites du plus grand cÃ´tÃ©
				r.couleurDeRemplissage='red'; // solution 1 en rouge
				r.opaciteDeRemplissage=0.2;//0.5; // 
				s.couleurDeRemplissage='blue'; //solution 2 en bleu
				s.opaciteDeRemplissage=0.2;//0.5; //
				// mes ajouts par rapport Ã  la figure de JC				
				// on fixe une place pour D et E
				let D = r.listePoints[0];
				D.nom='D';
				let E = r.listePoints[1];
				E.nom='E';
				// on crÃ©e un tableau avec les noms proposÃ© pour les points				
				let tabPointsNames= ['F','G','H','I'];				
				// on mÃ©lange le tableau 
				tabPointsNames=shuffle(tabPointsNames);
				//on place les deux solutions
				let I=r.listePoints[2];
				//I.nom='I';
				I.nom=tabPointsNames[0];
				let I1=rotation(I,X,180)
				//I1.nom='I1';
				I1.nom=tabPointsNames[1];
				// on place les mauvaises solutions
				let F = point(I1.x+1,I1.y+1);
				//F.nom='F';
				F.nom=tabPointsNames[2];
				let L = point(I.x-1,I.y-3);
				//L.nom='L';
				L.nom=tabPointsNames[3];
				//on trace le segment [DE] en pointillÃ©s pour que la figure soit plus lisible
				let sgmt_DE =  segment(D,E,'blue');
				sgmt_DE.pointilles = true;
				sgmt_DE.epaisseur=1.5;

				// on prÃ©pare la fenetre mathalea2d
				let fenetreMathalea2D = {xmin:-3,ymin:-3,xmax:27,ymax:18,pixelsParCm:20,scale:0.5}

				// on prÃ©pare les corrections
				let centre_rot = {
					sol1:pointIntersectionDD(droite(p.listePoints[1],E),droite(D,p.listePoints[0])),
					sol2:pointIntersectionDD(droite(E,p.listePoints[0]),droite(p.listePoints[1],D))
				};
				let vect_trans = {
					sol1:vecteur(p.listePoints[1],E),
					sol2:vecteur(p.listePoints[1],D)
				};
				let transformationAnimee = {
					sol1:``,
					//nature_sol1:``,
					sol2:``,
					//nature_sol2:``
				};
				// pour construire les droites et les centres passant par les centres de rotations
				let d,d1,d2,d3,d4,d5,J1,J2;
				switch (angleChoisi2) {
					case 0:
						transformationAnimee.sol1=rotationAnimee(p,M,90,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol1=`rotation`;
						// la 1ere compo
						d= droite(M,Gq);
						d1=rotation(d,M,-45);
						d2=rotation(d,Gq,0);
						J1=pointIntersectionDD(d1,d2); // centre de la composÃ©e, ici l'angle vaut 90
						//2eme compo
						d3=droite(J1,X);
						d4=rotation(d3,J1,-45);
						d5=rotation(d3,X,90);
						J2=pointIntersectionDD(d4,d5);// centre aprÃ¨s la seconde composition angle 270 Ã  2pi prÃ¨s						
						transformationAnimee.sol2=rotationAnimee(p,J2,-90,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol2=`rotation`;
						break;
					case 90:						
						transformationAnimee.sol1=rotationAnimee(p,centre_rot.sol1,180,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol1=`rotation`;
						transformationAnimee.sol2=translationAnimee(p,vect_trans.sol2,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol2=`translation`;
						break;
					case 180:
						// la 1ere compo
						d= droite(M,Gq);
						d1=rotation(d,M,-45);
						d2=rotation(d,Gq,90);
						J1=pointIntersectionDD(d1,d2); // centre de la composÃ©e, ici l'angle vaut 270 Ã  2pi prÃ¨s
						//2eme compo
						d3=droite(J1,X);
						d4=rotation(d3,J1,-135);
						d5=rotation(d3,X,90);
						J2=pointIntersectionDD(d4,d5);// centre aprÃ¨s la seconde composition angle 450 Ã  2pi prÃ¨s						
						transformationAnimee.sol1=rotationAnimee(p,J1,-90,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol1=`rotation`;
						transformationAnimee.sol2=rotationAnimee(p,J2,90,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol2=`rotation`;
						break;
					case 270:
						transformationAnimee.sol1=translationAnimee(p,vect_trans.sol1,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol1=`translation`;						
						transformationAnimee.sol2=rotationAnimee(p,centre_rot.sol2,180,'begin="0s" dur="4s" repeatCount="indefinite"');
						//transformationAnimee.nature_sol2=`rotation`;
						break; 
				}
				// DE = AB
				let seg_DE_corr = segment(D,E,'blue');
				seg_DE_corr.epaisseur = 2;
				let seg_AB_corr = segment(p.listePoints[0],p.listePoints[1],'blue');
				seg_AB_corr.epaisseur = 2;
				//DI = AC ou EI1 = AC
				let seg_DI_corr = segment(D,I,'red');
				let seg_EI1_corr = segment(E,I1,'red');
				seg_DI_corr.epaisseur = 2;
				seg_EI1_corr.epaisseur = 2;
				let seg_AC_corr = segment(p.listePoints[0],p.listePoints[2],'red');
				seg_AC_corr.epaisseur = 2;
				//EI = BC ou DI1 = BC
				let seg_EI_corr = segment(E,I,'green');
				let seg_DI1_corr = segment(D,I1,'green');
				seg_EI_corr.epaisseur = 2;
				seg_DI1_corr.epaisseur = 2;
				let seg_BC_corr = segment(p.listePoints[1],p.listePoints[2],'green');				
				seg_BC_corr.epaisseur = 2;
				// angle ABC = DEI ou ABC = EDI1
				let ang_ABC = angleOriente(p.listePoints[0],p.listePoints[1],p.listePoints[2]);
				let ang_DEI = angleOriente(D,E,I);
				let ang_EDI1 = angleOriente(E,D,I1);
				// angle BCA = EID ou  BCA = DI1E
				let ang_BCA = angleOriente(p.listePoints[1],p.listePoints[2],p.listePoints[0]);
				let ang_EID = angleOriente(E,I,D);
				let ang_EI1D = angleOriente(E,I1,D);
				// angle CAB = IDE ou CAB = I1ED
				let ang_CAB = angleOriente(p.listePoints[2],p.listePoints[0],p.listePoints[1]);
				let ang_IDE = angleOriente(I,D,E);
				let ang_I1ED = angleOriente(I1,E,D);				

				let codages_correction = {
					sol1:[
						// les segments						
						seg_AB_corr,
						seg_DE_corr,						
						codeSegments('Ã', 'blue', p.listePoints[0], p.listePoints[1], D,E ),
						seg_AC_corr,
						seg_DI_corr,
						codeSegments('||', 'red', p.listePoints[0], p.listePoints[2], D,I ),
						seg_BC_corr,
						seg_EI_corr,						
						codeSegments('O', 'green', p.listePoints[1], p.listePoints[2], I,E ),
						//les angles
						arc(pointSurSegment(p.listePoints[1], p.listePoints[0], 0.8), p.listePoints[1], ang_ABC,true,'red'),
						arc(pointSurSegment(E, D, 0.8), E, ang_DEI,true,'red'),
						arc(pointSurSegment(p.listePoints[2], p.listePoints[1], 0.8), p.listePoints[2], ang_BCA,true,'blue'),
						arc(pointSurSegment(I, E, 0.8), I, ang_EID,true,'blue'),
						arc(pointSurSegment(p.listePoints[0], p.listePoints[2], 0.8), p.listePoints[0], ang_CAB,true,'green'),
						arc(pointSurSegment(D, I, 0.8), D, ang_IDE,true,'green')
					],
					sol2:[
						//les segments
						seg_AB_corr,
						seg_DE_corr,						
						codeSegments('Ã', 'blue', p.listePoints[0], p.listePoints[1], D,E ),
						seg_BC_corr,
						seg_DI1_corr,
						codeSegments('O', 'green', p.listePoints[1], p.listePoints[2], D,I1 ),
						seg_AC_corr,
						seg_EI1_corr,
						codeSegments('||', 'red', p.listePoints[0], p.listePoints[2], E,I1 ),
						// les angles
						arc(pointSurSegment(p.listePoints[1], p.listePoints[0], 0.8), p.listePoints[1], ang_ABC,true,'red'),
						arc(pointSurSegment(D, E, 0.8), D, ang_EDI1,true,'red'),
						arc(pointSurSegment(p.listePoints[2], p.listePoints[1], 0.8), p.listePoints[2], ang_BCA,true,'blue'),
						arc(pointSurSegment(I1, E, 0.8), I1, ang_EI1D,true,'blue'),
						arc(pointSurSegment(p.listePoints[0], p.listePoints[2], 0.8), p.listePoints[0], ang_CAB,true,'green'),
						arc(pointSurSegment(E, I1, 0.8), E, ang_I1ED,true,'green')
					]
				}

				// on crÃ©e un objet pour stocker les figures et les corrections
				let figures = {
					enonce:`
						OÃ¹ placer le point M pour que les triangles ABC et DEM soient Ã©gaux ? 
						<br>En F ? En G? En H ? En I ?
						<br>
						${mathalea2d(
							fenetreMathalea2D,
							p,
							nom1,
							grid,
							tracePoint(D,E,I,I1,F,L),
							labelPoint(D,E,I,I1,F,L),
							sgmt_DE,
							//r,
							//s
						)}`,
					corr_solution1:`
						Les triangles $ABC$ et $DE${I.nom}$ ont les mÃªmes longueurs et les mÃªmes angles.
						<br> ${texte_en_couleur(`Donc le point ${I.nom} est un point qui convient`)}
						<br>
						${mathalea2d(
							fenetreMathalea2D,
							p,
							nom1,
							grid,
							tracePoint(D,E,I,I1,F,L),
							labelPoint(D,E,I,I1,F,L),
							sgmt_DE,
							r,
							//s,
							codages_correction.sol1
						)}`,
					corr_solution2:`
						Les triangles $ABC$ et $DE${I1.nom}$ ont les mÃªmes longueurs et les mÃªmes angles.		
						<br> ${texte_en_couleur(`Donc le point ${I1.nom} est un point qui convient`)}
						<br>
						${mathalea2d(
							fenetreMathalea2D,
							p,
							nom1,
							grid,
							tracePoint(D,E,I,I1,F,L),
							labelPoint(D,E,I,I1,F,L),
							sgmt_DE,
							//r,
							s,
							codages_correction.sol2
						)}`,
					corr_animmee_sol1:`
						Les triangles $ABC$ et $DE${I.nom}$ ont les mÃªmes longueurs et les mÃªmes angles.						
						<br> ${texte_en_couleur(`Donc le point ${I.nom} est un point qui convient`)}
						<br>						
						${mathalea2d(
							fenetreMathalea2D,
							p,
							nom1,
							grid,
							//tracePoint(D,E,I,I1,F,L),
							tracePoint(I1,F,L),
							//labelPoint(D,E,I,I1,F,L),
							labelPoint(I1,F,L),
							nommePolygone(r,'DE'+I.nom,0.4),
							//sgmt_DE,
							r,
							transformationAnimee.sol1,
							codages_correction.sol1
						)}`,
					corr_animmee_sol2:`
						Les triangles $ABC$ et $DE${I1.nom}$ ont les mÃªmes longueurs et les mÃªmes angles.
						<br> ${texte_en_couleur(`Donc le point ${I1.nom} est un point qui convient`)}
						<br>
						Une solution est donc le point ${I1.nom}
						<br>
						${mathalea2d(
							fenetreMathalea2D,
							p,
							nom1,
							grid,
							//tracePoint(D,E,I,I1,F,L),
							tracePoint(I,F,L),
							//labelPoint(D,E,I,I1,F,L),
							labelPoint(I,F,L),
							nommePolygone(s,'DE'+I1.nom,0.4),
							//sgmt_DE,
							//r,
							s,
							transformationAnimee.sol2,
							codages_correction.sol2
						)}`
				}
				//texte=mathalea2d({xmin:-3,ymin:-3,xmax:27,ymax:18,pixelsParCm:20,scale:0.5},p,nom1,grid,r,s)
				texte = `${figures.enonce}`;
				if (this.beta) {
					texte += `<br>${texte_gras(`===== PremiÃ¨re solution ======`)}<br>${figures.corr_animmee_sol1}`;
					texte += `<br><br>${texte_gras(`===== Seconde solution ======`)}<br>${figures.corr_animmee_sol2}`;
				} else {
					texte_corr += `<br>${texte_gras(`===== PremiÃ¨re solution ======`)}<br>${figures.corr_animmee_sol1}`;
					texte_corr += `<br><br>${texte_gras(`===== Seconde solution ======`)}<br>${figures.corr_animmee_sol2}`;
				}
				this.liste_questions[0]=texte;
				this.liste_corrections[0]=texte_corr;
				liste_de_question_to_contenu(this);
				break;
			
		}
	}
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 3F10
*/
function Image_antecedent_depuis_tableau_ou_fleche() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lectures d'images et d'antÃ©cÃ©dents depuis un tableau de valeurs";
  this.consigne = "";
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions = 4;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
	let a = randint(-20,20);
	let b = randint(-20,20,[a]);
	let c = randint(-20,20,[a,b]);
	let d = randint(-20,20,[a,b,c]);
	let e = randint(-20,20,[a,b,c,d]);
	let f = randint(-20,20,[a,b,c,d,e]);
	// a->b ; c->d ; e->d ; d->a ; f->c
	let ligneX = [a,c,e,d,f]
	let ligneY = [b,d,d,a,c]
	shuffle2tableaux(ligneX,ligneY) // mÃ©lange les 2 lignes de la mÃªme maniÃ¨re
	this.introduction = "Voici un tableau de valeurs d'une fonction $f$ : "
	this.introduction += '<br><br>'
	this.introduction += `$\\def\\arraystretch{1.5}\\begin{array}{|l|c|c|c|c|c|}
	\\hline
	x & ${ligneX[0]} & ${ligneX[1]} & ${ligneX[2]} & ${ligneX[3]} & ${ligneX[4]} \\\\
	\\hline
	f(x) & ${ligneY[0]} & ${ligneY[1]} & ${ligneY[2]} & ${ligneY[3]} & ${ligneY[4]} \\\\
	\\hline
	\\end{array}
	$
	`
	let texte = `Quelle est l'image de $${a}$ par la fonction $f$ ?`
	let texte_corr = `L'image de $${a}$ par la fonction $f$ est $${b}$, on note $f(${a})=${b}$.`
	this.liste_questions.push(texte)
	this.liste_corrections.push(texte_corr)

	texte = `Quelle est l'image de $${c}$ par la fonction $f$ ?`
	texte_corr = `L'image de $${c}$ par la fonction $f$ est $${d}$, on note $f(${c})=${d}$.`
	this.liste_questions.push(texte)
	this.liste_corrections.push(texte_corr)

	let texte3 = `Quels sont les antÃ©cÃ©dents de $${a}$ par la fonction $f$ ?`
	let texte_corr3 = `$${a}$ a un seul antÃ©cÃ©dent par la fonction $f$ qui est $${d}$, on note $f(${d})=${a}$.`
	
	let texte4 = `Quels sont les antÃ©cÃ©dents de $${d}$ par la fonction $f$ ?`
	let texte_corr4 = `$${d}$ a deux antÃ©cÃ©dents par la fonction $f$ qui sont $${c}$ et $${e}$, on note $f(${c})=f(${e})=${d}$.`
	
	if (choice([true,false])) { // Une fois sur 2 on inverse les questions 3 et 4
		this.liste_questions.push(texte3)
		this.liste_corrections.push(texte_corr3)	
		this.liste_questions.push(texte4)
		this.liste_corrections.push(texte_corr4)	
	} else {
		this.liste_questions.push(texte4)
		this.liste_corrections.push(texte_corr4)	
		this.liste_questions.push(texte3)
		this.liste_corrections.push(texte_corr3)
	}

	texte = `Recopier et complÃ©ter : $f(${c})=\\ldots$`
	texte_corr = `$f(${c})=${d}$`
	this.liste_questions.push(texte)
	this.liste_corrections.push(texte_corr)

	texte = `Recopier et complÃ©ter : $f(\\ldots)=${c}$`
	texte_corr = `$f(${f})=${c}$`
	this.liste_questions.push(texte)
	this.liste_corrections.push(texte_corr)
	
	liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}
/**
 * @Auteur StÃ©phane Guyon
 */
function calcul_coordonnees_vecteurs(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©terminer les coordonnÃ©es d'un vecteur.";
   
    this.nb_questions = 2;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 
    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1];
        
           
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, ux,uy,xA,yA,xB,yB,xC,yC,xD,yD,texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) 
    {
    type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                  
                    xA=randint(0,5)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    ux=randint(1,5)*choice([-1,1])
                    uy=randint(1,5)*choice([-1,1])
                    xB=xA+ux
                  
                    yB=yA+uy
                   
                   
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,\\vec i,\\vec j)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ et $B\\left(${xB};${yB}\\right)$`
                    texte += `<br>DÃ©terminer les coordonnÃ©es du vecteur $\\overrightarrow{AB}$ `;
                                   
                    
                   
                    texte_corr = `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re,`
                    texte_corr +=` <br>alors on a : $\\overrightarrow{AB}\\begin{pmatrix}x_B-x_A  \\\\y_B-y_A\\end{pmatrix}$<br>`
                    texte_corr +=` <br>On applique ici aux donnÃ©es de l'Ã©noncÃ© :`
                    texte_corr+=` $\\overrightarrow{AB}\\begin{pmatrix}${xB}-${ecriture_parenthese_si_negatif(xA)}  \\\\${yB}-${ecriture_parenthese_si_negatif(yA)}\\end{pmatrix}$<br>`
                    texte_corr+=`Ce qui donne au final : $\\overrightarrow{AB}\\begin{pmatrix}${xB-xA}  \\\\${yB-yA}\\end{pmatrix}$<br>` 
                   

                     ;   
                   break ;
             case 2 : 

                  
                   
                   break ;
  
            
            } 
            if (this.liste_questions.indexOf(texte)==-1)
                { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
}
/**
 * 2G12
 * @Auteur StÃ©phane Guyon
 */
function Nature_polygone(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©terminer la nature d'un polygone.";
   
    this.nb_questions = 2;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 
    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5];
        
           
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,ux,uy,d,e,g,xA,yA,xB,yB,xC,yC,xD,yD,AB,XAB,YAB,XAC,YAC,XBC,YBC,AC,BC,XAD,YAD,AD,XDC,YDC,DC,t,l,xI0,xI1,yI0,yI1,xJ0,xJ1,yJ0,yJ1, A,B,C,D,T,L,P,texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) 
    {
    type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                  
                    xA=randint(0,5)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    ux=randint(1,5)*choice([-1,1])
                    uy=randint(1,5)*choice([-1,1])
                    xB=xA+ux
                  
                    yB=yA+uy
                   
                    xC=xA-uy
                    yC=yA+ux
                      XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                   XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA)
                   XBC=(xC-xB)*(xC-xB)
                   YBC=(yC-yB)*(yC-yB)
                   AC=XAC+YAC;
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,I,J)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right)$ et $C\\left(${xC};${yC}\\right)$`
                    texte += `<br>DÃ©terminer la nature du triangle $ABC$ `;
                                   
                    
                    texte_corr = `A partir du repÃ¨re, on a envie de prouver que$ABC$ est un triangle isocÃ¨le en $A$.`
                    texte_corr +=`<br> On calcule donc sÃ©parÃ©ment les distances $AB$ et $AC$ `
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB=\\sqrt{\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}}$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    if (AB%100==0 && AB!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10\\sqrt{${tex_nombre((AB))/100}}$<br>`}
                    if (AB%81==0 && AB!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9\\sqrt{${tex_nombre((AB))/81}}$<br>`}
                    if (AB%64==0 && AB!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8\\sqrt{${tex_nombre((AB))/64}}$<br>`}
                    if (AB%49==0 && AB!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7\\sqrt{${tex_nombre((AB))/49}}$<br>`}
                     if (AB%36==0&& AB!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6\\sqrt{${tex_nombre((AB))/36}}$<br>`}
                     if (AB%25==0 && AB!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5\\sqrt{${tex_nombre((AB))/25}}$<br>`}
                     if (AB%64!=0 && AB%16==0&& AB!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4\\sqrt{${tex_nombre((AB))/16}}$<br>`}
                    if (AB%81!=0 && AB%9==0 && AB!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3\\sqrt{${tex_nombre((AB))/9}}$<br>`}
                    if (AB%16!=0 && AB%64!==0 &&AB%4==0 && AB!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2\\sqrt{${tex_nombre((AB))/4}}$<br>`}
                      if (AB==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10$<br>`}
                    if (AB==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9$<br>`}
                      if (AB==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8$<br>`}
                      if (AB==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7$<br>`}
                      if (AB==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6$<br>`}
                      if (AB==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5$<br>`}
                      if (AB==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4$<br>`}
                      if (AB==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3$<br>`}
                      if (AB==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2$<br>`}
                      if (AB==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=1$<br>`}

                    texte_corr +=`De mÃªme : $AC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } AC=\\sqrt{${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } AC=\\sqrt{${tex_nombre(XAC+YAC)}}$<br>`
                    if (AC%100==0 && AC!=100)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=10\\sqrt{${tex_nombre((AC))/100}}$<br>`}
                    if (AC%81==0 && AC!=81)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=9\\sqrt{${tex_nombre((AC))/81}}$<br>`}
                    if (AC%64==0 && AC!=64)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=8\\sqrt{${tex_nombre((AC))/64}}$<br>`}
                    if (AC%49==0 && AC!=49)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=7\\sqrt{${tex_nombre((AC))/49}}$<br>`}
                     if (AC%36==0&& AC!=36)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=6\\sqrt{${tex_nombre((AC))/36}}$<br>`}
                     if (AC%25==0 && AC!=25)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=5\\sqrt{${tex_nombre((AC))/25}}$<br>`}
                     if (AC%64!=0 && AC%16==0&& AC!=16)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=4\\sqrt{${tex_nombre((AC))/16}}$<br>`}
                    if (AC%81!=0 && AC%9==0 && AC!=9)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=3\\sqrt{${tex_nombre((AC))/9}}$<br>`}
                    if (AC%16!=0 && AC%64!==0 &&AC%4==0 && AC!=4)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=2\\sqrt{${tex_nombre((AC))/4}}$<br>`}
                      if (AC==100)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=10$<br>`}
                    if (AC==81)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=9$<br>`}
                      if (AC==64)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=8$<br>`}
                      if (AC==49)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=7$<br>`}
                      if (AC==36)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=6$<br>`}
                      if (AC==25)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=5$<br>`}
                      if (AC==16)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=4$<br>`}
                      if (AC==9)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=3$<br>`}
                      if (AC==4)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=2$<br>`}
                      if (AC==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=1$<br>`}

                    texte_corr +=`On observe que $AC=AB$ donc le triangle $ABC$ est isocÃ¨le.`
                    texte_corr +=`<br>On calcule $BC$ pour vÃ©rifier s'il est ou non  Ã©quilatÃ©ral.`
                    texte_corr +=`<br>On obtient : $BC=\\sqrt{${XBC}+${YBC}}=\\sqrt{${tex_nombre(XBC+YBC)}}$<br>`
                     if (XBC+YBC==XAB+YAB){texte_corr+=`Le triangle $ABC$ est Ã©quilatÃ©ral.`}
                        else {texte_corr +=`Le triangle $ABC$ est simplement isocÃ¨le, il n'est pas Ã©quilatÃ©ral.`}

                     ;   
                   break ;
             case 2 : 

                  
                    xA=randint(0,5)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    ux=randint(1,5)*choice([-1,1])
                    uy=randint(1,5)*choice([-1,1])
                    xB=xA+ux;
                    yB=yA+uy;
                    xC=xA-uy;
                    yC=yA+ux;
                      XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                   XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA)
                   XBC=(xC-xB)*(xC-xB)
                   YBC=(yC-yB)*(yC-yB)
                   AC=XAC+YAC;
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,I,J)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right)$ et $C\\left(${xC};${yC}\\right)$`
                    texte += `<br>DÃ©terminer la nature du triangle $ABC$ `;
       
                                   
                    
                    texte_corr = `A partir du repÃ¨re, on a envie de prouver que$ABC$ est un triangle rectangle en $A$.`
                      texte_corr +=`<br> Pour vÃ©rifier que le triangle est rectabgle, on va utiliser la rÃ©ciproque du thÃ©orÃ¨me de Pythagore.`
                    texte_corr +=`<br> On calcule donc sÃ©parÃ©ment les distances $AB^{2}$ ; $AC^{2}$ et $BC^{2}$ pour vÃ©rifier si $BC^{2}=AB^{2}+AC^{2}$ .`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB^{2}=\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB^{2}=\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB^{2}={${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB^{2}={${tex_nombre(XAB+YAB)}}$<br>`
                   
                    texte_corr +=`De mÃªme : $AC^{2}={\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } AC^{2}={${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } AC^{2}={${tex_nombre(XAC+YAC)}}$<br>`
               
                    texte_corr +=`Enfin : $BC^{2}={\\left(${xB}-${ecriture_parenthese_si_negatif(xB)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yB)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } BC^{2}={${XBC}+${YBC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } BC^{2}={${tex_nombre(XBC+YBC)}}$<br>`
                    texte_corr +=`On observe que $AC^{2}+AB^{2}=${tex_nombre(XAC+YAC+XAB+YAB)} ~~et~~ BC^{2}={${tex_nombre(XBC+YBC)}}$.`
                    texte_corr +=`<br>On en dÃ©duit que $BC^{2}=AC^{2}+AB^{2}$.`
                    texte_corr +=`<br>D'aprÃ¨s la rÃ©ciproque du thÃ©orÃ¨me de Pythagore,  le triangle ABC est rectangle en A.`                     ;   
                   break ;
            case 3:
                   xA=randint(0,9)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(1,5)*choice([-1,1])
                   uy=randint(1,5)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=xA-ux
                   yC=yA-uy
                   xD=xC+ux
                   yD=yC+uy
                   xI0= fraction_simplifiee(xA+xD,2)[0]
                   xI1= fraction_simplifiee(xA+xD,2)[1]
                   yI0= fraction_simplifiee(yA+yD,2)[0]
                   yI1= fraction_simplifiee(yA+yD,2)[1]
                   xJ0= fraction_simplifiee(xB+xC,2)[0]
                   xJ1= fraction_simplifiee(xB+xC,2)[1]
                   yJ0= fraction_simplifiee(yB+yC,2)[0]
                   yJ1= fraction_simplifiee(yB+yC,2)[1]
                   XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                   XAD=(xD-xA)*(xD-xA)
                   YAD=(yD-yA)*(yD-yA);
                   AD=XAD+YAD;
                     XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA)
                     AC=XAC+YAC;
                       g =grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a=axes(xmin=-9,ymin=-9,xmax=9,ymax=9,thick=.2,step=1)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                 
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les 4 points suivants :<br>`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte +=` $C\\left(${xC};${yC}\\right)$ ; $D\\left(${xD};${yD}\\right).$`
                    texte += `<br>DÃ©montrer que $ABDC$ est un losange.`;
                                   
                    texte_corr = `<br>Pour prouver que $ABDC$ est un losange, il y a deux stratÃ©gies :<br>`
                    texte_corr +=`$~~~~~~~~$<B>1.</B> On calcule les quatre longueurs du quadrilatÃ¨re et on prouve leur Ã©galitÃ©.<br>`
                    texte_corr+=`$\\phantom{~~~~~~~~}$Un quadrilatÃ¨re qui possÃ¨de quatre cÃ´tÃ©s de mÃªme longueur est un losange.<br>`
                    texte_corr+=`$~~~~~~~~$<B>2. </B> On prouve que $ABDC$ est un parallÃ©logramme, puis il sufit de prouver qu'il possÃ¨de deux cÃ´tÃ©s consÃ©cutifs de mÃªme longueur.<br>`
                    texte_corr+=`$\\phantom{~~~~~~~~}$ Un parallÃ©logramme qui possÃ¨de deux cÃ´tÃ©s consÃ©cutifs de mÃªme longueur est un losange`
                    texte_corr+=`<br>Les deux dÃ©monstrations se valent. On choisit ici la <B>dÃ©monstration nÂ°2</B>, plus variÃ©e, mais la nÂ°1 est valable.<br>`
                    texte_corr+=`<B>DÃ©monstration :</B><br>`
                    texte_corr+=`On veut prouver que $ABDC$ est un parallÃ©logramme :`
                    texte_corr += `<br>On sait que ABDC est un parallÃ©logramme si et seulement si ses diagonales se coupent en leur milieu.`
                    texte_corr += `<br>On cherche donc les coordonnÃ©es du milieu de chacune des deux diagonales du quadrilatÃ¨re, pour prouver qu'elles sont identiques. :`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re ,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AD]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_D}{2};\\dfrac{y_A+y_D}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xD)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yD)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xD)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yD)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                   texte_corr +=`<br> Les coordonnÃ©es du point $J$ milieu de $[BC]$ sont `
                    texte_corr +=`$J\\left(\\dfrac{x_B+x_C}{2};\\dfrac{y_B+y_C}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_J=\\dfrac{${xB}+${ecriture_parenthese_si_negatif(xC)}}{2} \\\\ y_J=\\dfrac{${yB}+${ecriture_parenthese_si_negatif(yC)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_J=\\dfrac{${tex_nombre(xB+xC)}}{2}\\\\y_J=\\dfrac{${tex_nombre(yB+yC)}}{2}\\end{cases}$`
                    if (xJ1!=1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};\\dfrac{${yJ0}}{${yJ1}};\\right)$`}
                    if (xJ1==1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};\\dfrac{${yJ0}}{${yJ1}}\\right)$`}
                    if (xJ1!=1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};${yJ0}\\right)$`}
                    if (xJ1==1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};${yJ0}\\right)$`}
                     texte_corr += `<br>On observe que $I$ et $J$ ont les mÃªmes coordonnÃ©es, donc les deux diagonales du quadrilatÃ¨re se coupent en leur milieu.`
                    texte_corr += `<br>$ABDC$ est donc un parallÃ©logramme.`
                    texte_corr += `<br>On calcule maintenant deux cotÃ©s consÃ©cutifs : $AB$ et $AC$ par exemple.`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB=\\sqrt{\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}}.$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    if (AB%100==0 && AB!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10\\sqrt{${tex_nombre((AB))/100}}$<br>`}
                    if (AB%81==0 && AB!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9\\sqrt{${tex_nombre((AB))/81}}$<br>`}
                    if (AB%64==0 && AB!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8\\sqrt{${tex_nombre((AB))/64}}$<br>`}
                    if (AB%49==0 && AB!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7\\sqrt{${tex_nombre((AB))/49}}$<br>`}
                     if (AB%36==0&& AB!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6\\sqrt{${tex_nombre((AB))/36}}$<br>`}
                     if (AB%25==0 && AB!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5\\sqrt{${tex_nombre((AB))/25}}$<br>`}
                     if (AB%64!=0 && AB%16==0&& AB!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4\\sqrt{${tex_nombre((AB))/16}}$<br>`}
                    if (AB%81!=0 && AB%9==0 && AB!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3\\sqrt{${tex_nombre((AB))/9}}$<br>`}
                    if (AB%16!=0 && AB%64!==0 &&AB%4==0 && AB!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2\\sqrt{${tex_nombre((AB))/4}}$<br>`}
                      if (AB==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10$<br>`}
                    if (AB==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9$<br>`}
                      if (AB==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8$<br>`}
                      if (AB==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7$<br>`}
                      if (AB==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6$<br>`}
                      if (AB==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5$<br>`}
                      if (AB==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4$<br>`}
                      if (AB==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3$<br>`}
                      if (AB==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2$<br>`}
                     if (AB==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=1$<br>`}
                     texte_corr +=`On procÃ¨de de mÃªme pour $AC$: $AC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AC=\\sqrt{${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AC=\\sqrt{${tex_nombre(XAC+YAC)}}$<br>`
                    if (AC%100==0 && AC!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=10\\sqrt{${tex_nombre((AC))/100}}$<br>`}
                    if (AC%81==0 && AC!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=9\\sqrt{${tex_nombre((AC))/81}}$<br>`}
                    if (AC%64==0 && AC!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=8\\sqrt{${tex_nombre((AC))/64}}$<br>`}
                    if (AC%49==0 && AC!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=7\\sqrt{${tex_nombre((AC))/49}}$<br>`}
                     if (AC%36==0&& AC!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=6\\sqrt{${tex_nombre((AC))/36}}$<br>`}
                     if (AC%25==0 && AC!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=5\\sqrt{${tex_nombre((AC))/25}}$<br>`}
                     if (AC%64!=0 && AC%16==0&& AC!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=4\\sqrt{${tex_nombre((AC))/16}}$<br>`}
                    if (AC%81!=0 && AC%9==0 && AC!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=3\\sqrt{${tex_nombre((AC))/9}}$<br>`}
                    if (AC%16!=0 && AC%64!==0 &&AC%4==0 && AC!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=2\\sqrt{${tex_nombre((AC))/4}}$<br>`}
                      if (AC==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=10$<br>`}
                    if (AC==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=9$<br>`}
                      if (AC==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=8$<br>`}
                      if (AC==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=7$<br>`}
                      if (AC==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=6$<br>`}
                      if (AC==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=5$<br>`}
                      if (AC==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=4$<br>`}
                      if (AC==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=3$<br>`}
                      if (AC==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=2$<br>`}
                     if (AD==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=1$<br>`}
                      texte_corr +=`<br>On observe que $AB=AC$, $ABDC$ est donc bien un losange.`
                  ;
               break;
                case 4:
                   xA=randint(0,6)*choice([-1,1])
                   yA=randint(0,6)*choice([-1,1])
                   ux=randint(1,3)*choice([-1,1])
                   uy=randint(1,3)*choice([-1,1])
                   a=randint(2,4)
                   xB=xA+ux*a
                   yB=yA+uy*a
                   xC=xA-uy
                   yC=yA+ux
                   xD=xC+ux*a
                   yD=yC+uy*a
                                  
                   xI0= fraction_simplifiee(xA+xD,2)[0]
                   xI1= fraction_simplifiee(xA+xD,2)[1]
                   yI0= fraction_simplifiee(yA+yD,2)[0]
                   yI1= fraction_simplifiee(yA+yD,2)[1]
                   xJ0= fraction_simplifiee(xB+xC,2)[0]
                   xJ1= fraction_simplifiee(xB+xC,2)[1]
                   yJ0= fraction_simplifiee(yB+yC,2)[0]
                   yJ1= fraction_simplifiee(yB+yC,2)[1]
                   XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                    XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA);
                   AC=XAC+YAC;
                   XAD=(xD-xA)*(xD-xA)
                   YAD=(yD-yA)*(yD-yA);
                   AD=XAD+YAD;
                   XBC=(xB-xC)*(xB-xC)
                   YBC=(yB-yC)*(yB-yC);
                   BC=XBC+YBC;
                       g =grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a=axes(xmin=-9,ymin=-9,xmax=9,ymax=9,thick=.2,step=1)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                 
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les 4 points suivants :<br>`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte +=` $C\\left(${xC};${yC}\\right)$ ; $D\\left(${xD};${yD}\\right).$`
                    texte += `<br>DÃ©montrer que $ABDC$ est un rectangle.`;
                                   
                    texte_corr = `<br>Pour prouver que $ABDC$ est un rectangle, il y a pluieurs stratÃ©gies :<br>`
                    texte_corr +=`$~~~~~~~~$<B>1.</B> On prouve avec la rÃ©ciproque du thÃ©orÃ¨me de Pythagore que $ABDC$ possÃ¨de un angle droit,<br>`
                    texte_corr+=`$puis on prouve qu'il a ses cÃ´tÃ©s opposÃ©s de mÃªme longueur.<br>`
                    texte_corr+=`$~~~~~~~~$<B>2. </B> On prouve que $ABDC$ est un parallÃ©logramme, puis il sufit de prouver que ses diagonales sont de mÃªme longueur.<br>`
                    texte_corr+=`$\\phantom{~~~~~~~~}$ Un parallÃ©logramme qui a ses diagonales de mÃªme longueur est un rectangle.`
                    texte_corr+=`<br>Plusiurs dÃ©monstrations se valent. On choisit ici la <B>dÃ©monstration nÂ°2</B>, mais d'autres idÃ©es sont valables.<br>`
                    texte_corr+=`<B>DÃ©monstration :</B><br>`
                    texte_corr+=`On veut prouver que $ABDC$ est un parallÃ©logramme :`
                    texte_corr += `<br>On sait que $ABDC$ est un parallÃ©logramme si et seulement si ses diagonales se coupent en leur milieu.`
                    texte_corr += `<br>On cherche donc les coordonnÃ©es du milieu de chacune des deux diagonales du quadrilatÃ¨re, pour prouver qu'elles sont identiques. :`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re ,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AD]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_D}{2};\\dfrac{y_A+y_D}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xD)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yD)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xD)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yD)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                   texte_corr +=`<br> Les coordonnÃ©es du point $J$ milieu de $[BC]$ sont `
                    texte_corr +=`$J\\left(\\dfrac{x_B+x_C}{2};\\dfrac{y_B+y_C}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_J=\\dfrac{${xB}+${ecriture_parenthese_si_negatif(xC)}}{2} \\\\ y_J=\\dfrac{${yB}+${ecriture_parenthese_si_negatif(yC)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_J=\\dfrac{${tex_nombre(xB+xC)}}{2}\\\\y_J=\\dfrac{${tex_nombre(yB+yC)}}{2}\\end{cases}$`
                    if (xJ1!=1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};\\dfrac{${yJ0}}{${yJ1}};\\right)$`}
                    if (xJ1==1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};\\dfrac{${yJ0}}{${yJ1}}\\right)$`}
                    if (xJ1!=1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};${yJ0}\\right)$`}
                    if (xJ1==1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};${yJ0}\\right)$`}
                     texte_corr += `<br>On observe que $I$ et $J$ ont les mÃªmes coordonnÃ©es, donc les deux diagonales du quadrilatÃ¨re se coupent en leur milieu.`
                    texte_corr += `<br>$ABDC$ est donc un parallÃ©logramme.`
                    texte_corr += `<br>On calcule maintenant les diagonales de $ABDC$ : $AD$ et $BC$ par exemple.`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AD=\\sqrt{\\left(x_D-x_A\\right)^{2}+\\left(y_D-y_A\\right)^{2}}.$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AD=\\sqrt{\\left(${xD}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yD}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AD=\\sqrt{${XAD}+${YAD}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AD=\\sqrt{${tex_nombre(XAD+YAD)}}$<br>`
                    if (AD%100==0 && AD!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=10\\sqrt{${tex_nombre((AD))/100}}$<br>`}
                    if (AD%81==0 && AD!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=9\\sqrt{${tex_nombre((AD))/81}}$<br>`}
                    if (AD%64==0 && AD!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=8\\sqrt{${tex_nombre((AD))/64}}$<br>`}
                    if (AD%49==0 && AD!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=7\\sqrt{${tex_nombre((AD))/49}}$<br>`}
                     if (AD%36==0&& AD!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=6\\sqrt{${tex_nombre((AD))/36}}$<br>`}
                     if (AD%25==0 && AD!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=5\\sqrt{${tex_nombre((AD))/25}}$<br>`}
                     if (AD%64!=0 && AD%16==0&& AD!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=4\\sqrt{${tex_nombre((AD))/16}}$<br>`}
                    if (AD%81!=0 && AD%9==0 && AD!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=3\\sqrt{${tex_nombre((AD))/9}}$<br>`}
                    if (AD%16!=0 && AD%64!==0 &&AD%4==0 && AD!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=2\\sqrt{${tex_nombre((AD))/4}}$<br>`}
                      if (AD==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=10$<br>`}
                    if (AD==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=9$<br>`}
                      if (AD==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=8$<br>`}
                      if (AD==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=7$<br>`}
                      if (AD==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=6$<br>`}
                      if (AD==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=5$<br>`}
                      if (AD==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=4$<br>`}
                      if (AD==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=3$<br>`}
                      if (AD==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=2$<br>`}
                     if (AD==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=1$<br>`}
                     texte_corr +=`On procÃ¨de de mÃªme pour $BC$: $BC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xB)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yB)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } BC=\\sqrt{${XBC}+${YBC}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } BC=\\sqrt{${tex_nombre(XBC+YBC)}}$<br>`
                    if (BC%100==0 && BC!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=10\\sqrt{${tex_nombre((BC))/100}}$<br>`}
                    if (BC%81==0 && BC!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=9\\sqrt{${tex_nombre((BC))/81}}$<br>`}
                    if (BC%64==0 && BC!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=8\\sqrt{${tex_nombre((BC))/64}}$<br>`}
                    if (BC%49==0 && BC!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=7\\sqrt{${tex_nombre((BC))/49}}$<br>`}
                     if (BC%36==0&& BC!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=6\\sqrt{${tex_nombre((BC))/36}}$<br>`}
                     if (BC%25==0 && BC!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=5\\sqrt{${tex_nombre((BC))/25}}$<br>`}
                     if (BC%64!=0 && BC%16==0&& BC!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=4\\sqrt{${tex_nombre((BC))/16}}$<br>`}
                    if (BC%81!=0 && BC%9==0 && BC!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=3\\sqrt{${tex_nombre((BC))/9}}$<br>`}
                    if (BC%16!=0 && BC%64!==0 &&BC%4==0 && BC!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=2\\sqrt{${tex_nombre((BC))/4}}$<br>`}
                      if (BC==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=10$<br>`}
                    if (BC==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=9$<br>`}
                      if (BC==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=8$<br>`}
                      if (BC==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=7$<br>`}
                      if (BC==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=6$<br>`}
                      if (BC==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=5$<br>`}
                      if (BC==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=4$<br>`}
                      if (BC==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=3$<br>`}
                      if (BC==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=2$<br>`}
                     if (BC==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=1$<br>`}
                      texte_corr +=`<br>On observe que $BC=AD$, $ABDC$ est donc bien un rectangle.`
                        
                  ;
               break;
             case 5:
                   xA=randint(0,9)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(1,9)*choice([-1,1])
                   uy=randint(1,9)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=xA-uy
                   yC=yA+ux
                   xD=xC+ux
                   yD=yC+uy
                                  
                   xI0= fraction_simplifiee(xA+xD,2)[0]
                   xI1= fraction_simplifiee(xA+xD,2)[1]
                   yI0= fraction_simplifiee(yA+yD,2)[0]
                   yI1= fraction_simplifiee(yA+yD,2)[1]
                   xJ0= fraction_simplifiee(xB+xC,2)[0]
                   xJ1= fraction_simplifiee(xB+xC,2)[1]
                   yJ0= fraction_simplifiee(yB+yC,2)[0]
                   yJ1= fraction_simplifiee(yB+yC,2)[1]
                   XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                    XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA);
                   AC=XAC+YAC;
                   XAD=(xD-xA)*(xD-xA)
                   YAD=(yD-yA)*(yD-yA);
                   AD=XAD+YAD;
                   XBC=(xB-xC)*(xB-xC)
                   YBC=(yB-yC)*(yB-yC);
                   BC=XBC+YBC;
                       g =grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a=axes(xmin=-9,ymin=-9,xmax=9,ymax=9,thick=.2,step=1)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                 
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les 4 points suivants :<br>`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte +=` $C\\left(${xC};${yC}\\right)$ ; $D\\left(${xD};${yD}\\right).$`
                    texte += `<br>DÃ©montrer que $ABDC$ est un carrÃ©.`;
                                   
                    texte_corr = `<br>Pour prouver que $ABDC$ est un carrÃ©, il y a pluieurs stratÃ©gies :<br>`
                    texte_corr +=`Dans cette correction, on propose de procÃ©der par Ã©tapes :<br>`
                    texte_corr+=`On va prouver d'abord que $ABDC$ est un parallÃ©logramme en utilisant les milieux des diagonales.<br>`
                    texte_corr+=`puis on prouvera qu'il est un rectangle en comparant ses diagonales.<br>`
                    texte_corr+=`<br>Enfin, en vÃ©rifiant qu'il a deux cÃ´tÃ©s consÃ©cutifs de mÃªme longueur, on aura prouvÃ© qu'il est un carrÃ©. `

                    texte_corr+=`<br><B>DÃ©monstration :</B><br>`
                    texte_corr+=`<B>1. On prouve que $ABDC$ est un parallÃ©logramme :</B>`
                    texte_corr += `<br>On sait que $ABDC$ est un parallÃ©logramme si et seulement si ses diagonales se coupent en leur milieu.`
                    texte_corr += `<br>On cherche donc les coordonnÃ©es du milieu de chacune des deux diagonales du quadrilatÃ¨re, pour prouver qu'elles sont identiques. :`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re ,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AD]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_D}{2};\\dfrac{y_A+y_D}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xD)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yD)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xD)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yD)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                   texte_corr +=`<br> Les coordonnÃ©es du point $J$ milieu de $[BC]$ sont `
                    texte_corr +=`$J\\left(\\dfrac{x_B+x_C}{2};\\dfrac{y_B+y_C}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_J=\\dfrac{${xB}+${ecriture_parenthese_si_negatif(xC)}}{2} \\\\ y_J=\\dfrac{${yB}+${ecriture_parenthese_si_negatif(yC)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_J=\\dfrac{${tex_nombre(xB+xC)}}{2}\\\\y_J=\\dfrac{${tex_nombre(yB+yC)}}{2}\\end{cases}$`
                    if (xJ1!=1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};\\dfrac{${yJ0}}{${yJ1}};\\right)$`}
                    if (xJ1==1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};\\dfrac{${yJ0}}{${yJ1}}\\right)$`}
                    if (xJ1!=1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};${yJ0}\\right)$`}
                    if (xJ1==1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};${yJ0}\\right)$`}
                     texte_corr += `<br>On observe que $I$ et $J$ ont les mÃªmes coordonnÃ©es, donc les deux diagonales du quadrilatÃ¨re se coupent en leur milieu.`
                    texte_corr += `<br>$ABDC$ est donc un parallÃ©logramme.`
                    texte_corr += `<br><B>2. On prouve que $ABDC$ est un rectangle :</B>`
                      texte_corr += `<br>On calcule maintenant les diagonales de $ABDC$ : $AD$ et $BC$ .`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AD=\\sqrt{\\left(x_D-x_A\\right)^{2}+\\left(y_D-y_A\\right)^{2}}.$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AD=\\sqrt{\\left(${xD}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yD}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AD=\\sqrt{${XAD}+${YAD}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AD=\\sqrt{${tex_nombre(XAD+YAD)}}$<br>`
                    if (AD%100==0 && AD!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=10\\sqrt{${tex_nombre((AD))/100}}$<br>`}
                    if (AD%81==0 && AD!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=9\\sqrt{${tex_nombre((AD))/81}}$<br>`}
                    if (AD%64==0 && AD!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=8\\sqrt{${tex_nombre((AD))/64}}$<br>`}
                    if (AD%49==0 && AD!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=7\\sqrt{${tex_nombre((AD))/49}}$<br>`}
                     if (AD%36==0&& AD!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=6\\sqrt{${tex_nombre((AD))/36}}$<br>`}
                     if (AD%25==0 && AD!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=5\\sqrt{${tex_nombre((AD))/25}}$<br>`}
                     if (AD%64!=0 && AD%16==0&& AD!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=4\\sqrt{${tex_nombre((AD))/16}}$<br>`}
                    if (AD%81!=0 && AD%9==0 && AD!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=3\\sqrt{${tex_nombre((AD))/9}}$<br>`}
                    if (AD%16!=0 && AD%64!==0 &&AD%4==0 && AD!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=2\\sqrt{${tex_nombre((AD))/4}}$<br>`}
                      if (AD==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=10$<br>`}
                    if (AD==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=9$<br>`}
                      if (AD==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=8$<br>`}
                      if (AD==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=7$<br>`}
                      if (AD==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=6$<br>`}
                      if (AD==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=5$<br>`}
                      if (AD==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=4$<br>`}
                      if (AD==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=3$<br>`}
                      if (AD==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=2$<br>`}
                     if (AD==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AD=1$<br>`}
                     texte_corr +=`On procÃ¨de de mÃªme pour $BC$: $BC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xB)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yB)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } BC=\\sqrt{${XBC}+${YBC}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } BC=\\sqrt{${tex_nombre(XBC+YBC)}}$<br>`
                    if (BC%100==0 && BC!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=10\\sqrt{${tex_nombre((BC))/100}}$<br>`}
                    if (BC%81==0 && BC!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=9\\sqrt{${tex_nombre((BC))/81}}$<br>`}
                    if (BC%64==0 && BC!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=8\\sqrt{${tex_nombre((BC))/64}}$<br>`}
                    if (BC%49==0 && BC!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=7\\sqrt{${tex_nombre((BC))/49}}$<br>`}
                     if (BC%36==0&& BC!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=6\\sqrt{${tex_nombre((BC))/36}}$<br>`}
                     if (BC%25==0 && BC!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=5\\sqrt{${tex_nombre((BC))/25}}$<br>`}
                     if (BC%64!=0 && BC%16==0&& BC!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=4\\sqrt{${tex_nombre((BC))/16}}$<br>`}
                    if (BC%81!=0 && BC%9==0 && BC!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=3\\sqrt{${tex_nombre((BC))/9}}$<br>`}
                    if (BC%16!=0 && BC%64!==0 &&BC%4==0 && BC!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=2\\sqrt{${tex_nombre((BC))/4}}$<br>`}
                      if (BC==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=10$<br>`}
                    if (BC==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=9$<br>`}
                      if (BC==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=8$<br>`}
                      if (BC==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=7$<br>`}
                      if (BC==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=6$<br>`}
                      if (BC==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=5$<br>`}
                      if (BC==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=4$<br>`}
                      if (BC==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=3$<br>`}
                      if (BC==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=2$<br>`}
                     if (BC==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } BC=1$<br>`}
                      texte_corr +=`<br>On observe que $BC=AD$, $ABDC$ est donc bien un rectangle.`
                        texte_corr += `<br><B>3. On prouve que $ABDC$ est un carrÃ© :</B>`
                      texte_corr += `<br>On calcule maintenant deux cÃ´tÃ©s consÃ©cutilfs de $ABDC$ : $AB$ et $AC$ par exemple.`  
                       texte_corr +=` <br>$AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    if (AB%100==0 && AB!=100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10\\sqrt{${tex_nombre((AB))/100}}$<br>`}
                    if (AB%81==0 && AB!=81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9\\sqrt{${tex_nombre((AB))/81}}$<br>`}
                    if (AB%64==0 && AB!=64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8\\sqrt{${tex_nombre((AB))/64}}$<br>`}
                    if (AB%49==0 && AB!=49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7\\sqrt{${tex_nombre((AB))/49}}$<br>`}
                     if (AB%36==0&& AB!=36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6\\sqrt{${tex_nombre((AB))/36}}$<br>`}
                     if (AB%25==0 && AB!=25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5\\sqrt{${tex_nombre((AB))/25}}$<br>`}
                     if (AB%64!=0 && AB%16==0&& AB!=16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4\\sqrt{${tex_nombre((AB))/16}}$<br>`}
                    if (AB%81!=0 && AB%9==0 && AB!=9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3\\sqrt{${tex_nombre((AB))/9}}$<br>`}
                    if (AB%16!=0 && AB%64!==0 &&AB%4==0 && AB!=4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2\\sqrt{${tex_nombre((AB))/4}}$<br>`}
                      if (AB==100)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=10$<br>`}
                    if (AB==81)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=9$<br>`}
                      if (AB==64)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=8$<br>`}
                      if (AB==49)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=7$<br>`}
                      if (AB==36)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=6$<br>`}
                      if (AB==25)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=5$<br>`}
                      if (AB==16)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=4$<br>`}
                      if (AB==9)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=3$<br>`}
                      if (AB==4)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=2$<br>`}
                      if (AB==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=1$<br>`}

                    texte_corr +=`De mÃªme : $AC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } AC=\\sqrt{${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } AC=\\sqrt{${tex_nombre(XAC+YAC)}}$<br>`
                    if (AC%100==0 && AC!=100)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=10\\sqrt{${tex_nombre((AC))/100}}$<br>`}
                    if (AC%81==0 && AC!=81)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=9\\sqrt{${tex_nombre((AC))/81}}$<br>`}
                    if (AC%64==0 && AC!=64)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=8\\sqrt{${tex_nombre((AC))/64}}$<br>`}
                    if (AC%49==0 && AC!=49)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=7\\sqrt{${tex_nombre((AC))/49}}$<br>`}
                     if (AC%36==0&& AC!=36)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=6\\sqrt{${tex_nombre((AC))/36}}$<br>`}
                     if (AC%25==0 && AC!=25)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=5\\sqrt{${tex_nombre((AC))/25}}$<br>`}
                     if (AC%64!=0 && AC%16==0&& AC!=16)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=4\\sqrt{${tex_nombre((AC))/16}}$<br>`}
                    if (AC%81!=0 && AC%9==0 && AC!=9)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=3\\sqrt{${tex_nombre((AC))/9}}$<br>`}
                    if (AC%16!=0 && AC%64!==0 &&AC%4==0 && AC!=4)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=2\\sqrt{${tex_nombre((AC))/4}}$<br>`}
                      if (AC==100)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=10$<br>`}
                    if (AC==81)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=9$<br>`}
                      if (AC==64)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=8$<br>`}
                      if (AC==49)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=7$<br>`}
                      if (AC==36)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=6$<br>`}
                      if (AC==25)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=5$<br>`}
                      if (AC==16)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=4$<br>`}
                      if (AC==9)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=3$<br>`}
                      if (AC==4)
                        { texte_corr +=`$\\phantom{De mÃªme :  } AC=2$<br>`}
                      if (AC==1)
                        { texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=1$<br>`}

                    texte_corr +=`On observe que $AC=AB$ donc $ABDC$ est bien un carrÃ©.`
                  ;
               break;
            
            } 
            if (this.liste_questions.indexOf(texte)==-1)
                { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
}

/**
 * 2G11
 * @Auteur StÃ©phane Guyon
 */
function Milieu(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©terminer les coordonnÃ©es milieu dâun segment dans un repÃ¨re";
   
    this.nb_questions = 2;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4];
     if (this.sup == 1) {
            type_de_questions_disponibles = [1] 
        }
      if (this.sup == 2) {
            type_de_questions_disponibles = [2] 
           }
    if (this.sup == 3) {
            type_de_questions_disponibles = [3,4] 
           }
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,ux,uy,d,e,g,xA,yA,xB,yB,xC,yC,xD,yD,AB,XAB,YAB,XAC,YAC,AC,t,l,xI0,xI1,yI0,yI1,xJ0,xJ1,yJ0,yJ1, A,B,C,D,T,L,P,texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) 
    {
    type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                     xA=randint(0,9)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    xB=randint(0,5)*choice([-1,1])
                    yB=randint(0,5)*choice([-1,1])
                    if (xB==xA&&yA==yB) {xB=xB+randint(1,5)*choice([-1,1])}
                   
                    XAB=(xB-xA)*(xB-xA)
                    YAB=(yB-yA)*(yB-yA);
                    AB=XAB+YAB;
                    xI0= fraction_simplifiee(xA+xB,2)[0]
                    xI1= fraction_simplifiee(xA+xB,2)[1]
                    yI0= fraction_simplifiee(yA+yB,2)[0]
                    yI1= fraction_simplifiee(yA+yB,2)[1]
                    
                    g = grille(-9,-9,9,9)               
                    A = point(xA,yA,'A')
                    B = point(xB,yB,'B')
                    a = axes(-9,-9,9,9)
                    s = segment(A,B,'blue')
                    T = tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L = labelPoint(A,B)
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,I,J)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ et $B\\left(${xB};${yB}\\right)$`
                    texte += `<br>DÃ©terminer les coordonnÃ©es du point $I$ milieu du segment $[AB]$ `;
                     
                    texte_corr = mathalea2d({
                      xmin : -9,
                      ymin : -9,
                      xmax : 9,
                      ymax : 9
                    },a,g,T,s,L);


                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AB]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_B}{2};\\dfrac{y_A+y_B}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xB)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yB)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xB)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yB)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                   

                     ;   
                   break ;
             case 2 : 
        
                    
                     xA=randint(0,9)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    xI=randint(0,5)*choice([-1,1])
                    yI=randint(0,5)*choice([-1,1])
                      if (xI==xA&&yI==yA) {xI=xI+randint(1,5)*choice([-1,1])}
                    
                    XAB=(xB-xA)*(xB-xA)
                    YAB=(yB-yA)*(yB-yA);
                    AB=XAB+YAB;
                    xI0= fraction_simplifiee(xA+xB,2)[0]
                    xI1= fraction_simplifiee(xA+xB,2)[1]
                    yI0= fraction_simplifiee(yA+yB,2)[0]
                    yI1= fraction_simplifiee(yA+yB,2)[1]
                    g = grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a = axes(-9,-9,9,9)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,I,J)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ et $I\\left(${xI};${yI}\\right)$`
                    texte += `<br>DÃ©terminer les coordonnÃ©es du point $B$ tel que I soit le milieu du segment $[AB]$ `;
                                   
                    
                    texte_corr = mathalea2d({
                      xmin : -9,
                      ymin : -9,
                      xmax : 9,
                      ymax : 9
                    },T,L,g,a,s);

                    
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` <br>alors les coordonnÃ©es du point $I$ milieu de $[AB]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_B}{2};\\dfrac{y_A+y_B}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}${xI}=\\dfrac{${xA}+x_B}{2} \\\\ ${yI}=\\dfrac{${yA}+y_B}{2}\\end{cases}$`
                    texte_corr +=`$\\iff \\begin{cases}x_B=2\\times ${xI} -${ecriture_parenthese_si_negatif(xA)} \\\\ y_B=2\\times ${yI}-${ecriture_parenthese_si_negatif(yA)}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_B={${tex_nombre(2*xI-xA)}}\\\\y_B=${tex_nombre(2*yI-yA)}\\end{cases}$`
                   texte_corr += `<br>Au final : $B\\left( ${tex_nombre(2*xI-xA)};${tex_nombre(2*yI-yA)}\\right)$`
                   

                     ;   
                   break ;
             case 3 : 
                                 
                    xA=randint(0,9)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(1,9)*choice([-1,1])
                   uy=randint(1,9)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=randint(0,5)*choice([-1,1])
                   yC=randint(0,9)*choice([-1,1])
                    if (xC==xA&&yA==yC) {xC=xC+randint(1,5)*choice([-1,1])}
                   xD=xC+ux
                   yD=yC+uy
                   xI0= fraction_simplifiee(xA+xD,2)[0]
                   xI1= fraction_simplifiee(xA+xD,2)[1]
                   yI0= fraction_simplifiee(yA+yD,2)[0]
                   yI1= fraction_simplifiee(yA+yD,2)[1]
                   xJ0= fraction_simplifiee(xB+xC,2)[0]
                   xJ1= fraction_simplifiee(xB+xC,2)[1]
                   yJ0= fraction_simplifiee(yB+yC,2)[0]
                   yJ1= fraction_simplifiee(yB+yC,2)[1]
                       g =grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a=axes(xmin=-9,ymin=-9,xmax=9,ymax=9,thick=.2,step=1)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                 
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les 4 points suivants :<br>`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte +=` $C\\left(${xC};${yC}\\right)$ ; $D\\left(${xD};${yD}\\right).$`
                    texte += `<br>DÃ©terminer si le quadrilatÃ¨re $ABDC$ est un parallÃ©logramme.`;
                                   
                      texte_corr = mathalea2d({
                      xmin : -9,
                      ymin : -9,
                      xmax : 9,
                      ymax : 9
                    },T,L,g,a,s);

                    
                    texte_corr += `<br>On sait que ABDC est un parallÃ©logramme si et seulement si ses diagonales se coupent en leur milieu.$`
                    texte_corr += `<br>On cherche donc les coordonnÃ©es du milieu de chacune des deux diagonales du quadrilatÃ¨re :`
                    texte_corr += `On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re ,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AD]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_D}{2};\\dfrac{y_A+y_D}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xD)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yD)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xD)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yD)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                   texte_corr +=`<br> Les coordonnÃ©es du point $J$ milieu de $[BC]$ sont `
                    texte_corr +=`$J\\left(\\dfrac{x_B+x_C}{2};\\dfrac{y_B+y_C}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_J=\\dfrac{${xB}+${ecriture_parenthese_si_negatif(xC)}}{2} \\\\ y_J=\\dfrac{${yB}+${ecriture_parenthese_si_negatif(yC)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_J=\\dfrac{${tex_nombre(xB+xC)}}{2}\\\\y_J=\\dfrac{${tex_nombre(yB+yC)}}{2}\\end{cases}$`
                    if (xJ1!=1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};\\dfrac{${yJ0}}{${yJ1}};\\right)$`}
                    if (xJ1==1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};\\dfrac{${yJ0}}{${yJ1}}\\right)$`}
                    if (xJ1!=1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};${yJ0}\\right)$`}
                    if (xJ1==1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};${yJ0}\\right)$`}
                     texte_corr += `<br>On observe que $I$ et $J$ ont les mÃªmes coordonnÃ©es, donc les deux diagonales du quadrilatÃ¨re se coupent en leur milieu.`
                        texte_corr += `<br>$ABDC$ est donc un parallÃ©logramme.`

                    ;   
                   break ;
             case 4 : 
                    
                                     
              
                   xA=randint(0,9)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(1,9)*choice([-1,1])
                   uy=randint(1,9)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=randint(0,5)*choice([-1,1])
                   yC=randint(0,9)*choice([-1,1])
                   if (xC==xA&&yA==yC) {xC=xC+randint(1,5)*choice([-1,1])}
                   xD=xC+ux+randint(1,2)*choice([-1,1])
                   yD=yC+uy+randint(0,1)*choice([-1,1])
                   xI0= fraction_simplifiee(xA+xD,2)[0]
                   xI1= fraction_simplifiee(xA+xD,2)[1]
                   yI0= fraction_simplifiee(yA+yD,2)[0]
                   yI1= fraction_simplifiee(yA+yD,2)[1]
                   xJ0= fraction_simplifiee(xB+xC,2)[0]
                   xJ1= fraction_simplifiee(xB+xC,2)[1]
                   yJ0= fraction_simplifiee(yB+yC,2)[0]
                   yJ1= fraction_simplifiee(yB+yC,2)[1]
                    g = grille(-9,-9,9,9)               
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    a=axes(-9,-9,9,9)
                    s = segment(A,B,'blue')
                    T=tracePoint(A,B) // RepÃ¨re les points avec une croix
                    L=labelPoint(A,B)
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les 4 points suivants :<br>`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte +=` $C\\left(${xC};${yC}\\right)$ ; $D\\left(${xD};${yD}\\right).$`
                    texte += `<br>DÃ©terminer si le quadrilatÃ¨re $ABDC$ est un parallÃ©logramme.`;
                                   
                    texte_corr = mathalea2d({
                      xmin : -9,
                      ymin : -9,
                      xmax : 9,
                      ymax : 9
                    },T,L,g,a,s);

                    
                    texte_corr += `<br>On sait que ABDC est un parallÃ©logramme si et seulement si ses diagonales se coupent en leur milieu.$`
                    texte_corr += `<br>On cherche donc les coordonnÃ©es du milieu de chacune des deux diagonales du quadrilatÃ¨re :`
                    texte_corr += `On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $D(x_D;y_D)$ sont deux points d'un repÃ¨re ,`
                    texte_corr +=`<br> alors les coordonnÃ©es du point $I$ milieu de $[AD]$ sont `
                    texte_corr +=`$I\\left(\\dfrac{x_A+x_D}{2};\\dfrac{y_A+y_D}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_I=\\dfrac{${xA}+${ecriture_parenthese_si_negatif(xD)}}{2} \\\\ y_I=\\dfrac{${yA}+${ecriture_parenthese_si_negatif(yD)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_I=\\dfrac{${tex_nombre(xA+xD)}}{2}\\\\y_I=\\dfrac{${tex_nombre(yA+yD)}}{2}\\end{cases}$`
                    if (xI1!=1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};\\dfrac{${yI0}}{${yI1}};\\right)$`}
                    if (xI1==1 && yI1!=1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};\\dfrac{${yI0}}{${yI1}}\\right)$`}
                    if (xI1!=1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(\\dfrac{${xI0}}{${xI1}};${yI0}\\right)$`}
                    if (xI1==1 && yI1==1) {texte_corr += `  <br>Ce qui donne au final : $ I\\left(${xI0};${yI0}\\right)$`}
                    texte_corr +=`<br> Les coordonnÃ©es du point $J$ milieu de $[BC]$ sont `
                    texte_corr +=`$J\\left(\\dfrac{x_B+x_C}{2};\\dfrac{y_B+y_C}{2}\\right)$ <br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : `
                    texte_corr +=`$\\begin{cases}x_J=\\dfrac{${xB}+${ecriture_parenthese_si_negatif(xC)}}{2} \\\\ y_J=\\dfrac{${yB}+${ecriture_parenthese_si_negatif(yC)}}{2}\\end{cases}$`
                    texte_corr += `<br>On en dÃ©duit :  $\\begin{cases}x_J=\\dfrac{${tex_nombre(xB+xC)}}{2}\\\\y_J=\\dfrac{${tex_nombre(yB+yC)}}{2}\\end{cases}$`
                    if (xJ1!=1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};\\dfrac{${yJ0}}{${yJ1}};\\right)$`}
                    if (xJ1==1 && yJ1!=1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};\\dfrac{${yJ0}}{${yJ1}}\\right)$`}
                    if (xJ1!=1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(\\dfrac{${xJ0}}{${xJ1}};${yJ0}\\right)$`}
                    if (xJ1==1 && yJ1==1) {texte_corr += `  <br>Ce qui donne au final : $ J\\left(${xJ0};${yJ0}\\right)$`}
                     texte_corr += `<br>On observe que $I$ et $J$ n'ont pas les mÃªmes coordonnÃ©es, donc les deux diagonales du quadrilatÃ¨re ne se coupent pas en leur milieu.`
                        texte_corr += `<br>$ABDC$ n'est donc pas un parallÃ©logramme.`

                    ;   
                   break ;
            } 
            if (this.liste_questions.indexOf(texte)==-1)
                { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
     this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Application directe de la formule 2 : Application indirecte de la formule 3: CaractÃ©riser un parallÃ©logramme.'];
}  

/**
 * 2G10
 * @Auteur StÃ©phane Guyon
 */
function Distance(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Utiliser la distance entre deux points dans un repÃ¨re orthonormÃ©";
   
    this.nb_questions = 2;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3];
     if (this.sup == 1) {
            type_de_questions_disponibles = [1] 
        }
      if (this.sup == 2) {
            type_de_questions_disponibles = [2,3] 
        }
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,ux,uy,d,e,g,xA,yA,xB,yB,xC,yC,AB,XAB,YAB,XAC,YAC,AC,t,l, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) 
    {
    type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                    g =grille(-9,-9,9,9)
                    xA=randint(0,5)*choice([-1,1])
                    yA=randint(0,5)*choice([-1,1])
                    xB=randint(0,5)*choice([-1,1])
                    yB=randint(0,5)*choice([-1,1])
                    if (xB==xA&&yA==yB) {xB=xB+randint(1,5)*choice([-1,1])}
                    A = point(xA,yA,'A','red')
                    B = point(xB,yB,'B','red')
                    t=tracePoint(A,B)
                    l=labelPoint(A,B)
                    a=axes(-2,-9,9,9)
                    XAB=(xB-xA)*(xB-xA)
                    YAB=(yB-yA)*(yB-yA);
                    AB=XAB+YAB;
                
                    texte =`Dans un repÃ¨re orthonormÃ© $(O,I,J)$, on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ et $B\\left(${xB};${yB}\\right)$`
                    texte += `<br>Calculer la distance $AB$ en justifiant le calcul.`;
                                   
                    
                    texte_corr = `On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB=\\sqrt{\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}}.$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    if (extraire_racine_carree(AB)[0]!=1) texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=${tex_racine_carree(AB)}$<br>`
                   break ;
             case 2 : 
        
              
                   xA=randint(0,5)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(0,9)*choice([-1,1])
                   uy=randint(0,9)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=xA+uy*choice([-1,1])
                   yC=yA+ux*choice([-1,1])

                   XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                   XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA);
                   AC=XAC+YAC;
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right)$`
                    texte += `<br>Le point $C\\left(${xC};${yC}\\right)$ appartient-il au cercle de centre $A$ passant par $B$ ?`;
                                   
                    texte_corr = `Le point $C$ appartient au cercle de centre $A$ passant par $B$ si et seulement si $CA=CB.$`
                    texte_corr += `<br>On calcule sÃ©parÃ©ment donc ces deux distances :`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB=\\sqrt{\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}}$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=${tex_racine_carree(AB)}$<br>`
                    texte_corr +=`De mÃªme : $AC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } AC=\\sqrt{${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } AC=\\sqrt{${tex_nombre(XAC+YAC)}}$<br>`
                    if (extraire_racine_carree(AC)[0]!=1) texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=${tex_racine_carree(AC)}$<br>`
                    texte_corr +=`On observe que $AC=AB$ donc le point $A$ est Ã©quidistant de $B$ et $C$.`
                     texte_corr +=`<br>Le point $C$ appartient bien au cercle de centre $A$ et passant par $B$.`
                    ;   
                   break ;
             case 3 : 
        
              
                   xA=randint(0,5)*choice([-1,1])
                   yA=randint(0,9)*choice([-1,1])
                   ux=randint(0,9)*choice([-1,1])
                   uy=randint(0,9)*choice([-1,1])
                   xB=xA+ux
                   yB=yA+uy
                   xC=xA+uy*choice([-1,1])+randint(1,3)
                   yC=yA+ux*choice([-1,1])

                   XAB=(xB-xA)*(xB-xA)
                   YAB=(yB-yA)*(yB-yA);
                   AB=XAB+YAB;
                   XAC=(xC-xA)*(xC-xA)
                   YAC=(yC-yA)*(yC-yA);
                   AC=XAC+YAC;
                
                    texte =`Dans un repÃ¨re orthonormÃ© (O,I,J), on donne les points suivants :`
                    texte +=` $A\\left(${xA};${yA}\\right)$ ; $B\\left(${xB};${yB}\\right).$`
                    texte += `<br>Le point $C\\left(${xC};${yC}\\right)$ appartient-il au cercle de centre $A$ passant par $B$ ?`;
                                   
                    texte_corr = `Le point $C$ appartient au cercle de centre $A$ passant par $B$ si et seulement si $CA=CB.$`
                    texte_corr += `<br>On calcule sÃ©parÃ©ment donc ces deux distances :`
                    texte_corr += `<br>On sait d'aprÃ¨s le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d'un repÃ¨re orthonormÃ©,`
                    texte_corr +=` alors on a : $AB=\\sqrt{\\left(x_B-x_A\\right)^{2}+\\left(y_B-y_A\\right)^{2}}.$<br>`
                    texte_corr +=`On applique la relation Ã  l'Ã©noncÃ© : $AB=\\sqrt{\\left(${xB}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yB}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${XAB}+${YAB}}$<br>`
                    texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :        } AB=\\sqrt{${tex_nombre(XAB+YAB)}}$<br>`
                    if (extraire_racine_carree(AB)[0]!=1) texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AB=${tex_racine_carree(AB)}$<br>`
                    texte_corr +=`De mÃªme : $AC=\\sqrt{\\left(${xC}-${ecriture_parenthese_si_negatif(xA)}\\right)^{2}+\\left(${yC}-${ecriture_parenthese_si_negatif(yA)}\\right)^{2}}$<br>`
                    texte_corr += `$\\phantom{De mÃªme :       } AC=\\sqrt{${XAC}+${YAC}}$<br>`
                    texte_corr +=`$\\phantom{De mÃªme :       } AC=\\sqrt{${tex_nombre(XAC+YAC)}}$<br>`
                    if (extraire_racine_carree(AC)[0]!=1) texte_corr +=`$\\phantom{On applique la relation Ã  l'Ã©noncÃ© :   } AC=${tex_racine_carree(AC)}$<br>`    
                    texte_corr +=`On observe que $AC\\neq AB$ donc le point $C$ n'appartient pas au cercle de centre $A$ et passant par $B$`

                    ;   
                   break ;
            } 
            if (this.liste_questions.indexOf(texte)==-1)
                { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
     this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 2, '1 : Application directe de la formule 2 : Application en situation'];
}   

/**
 * 2N25
 * @Auteur StÃ©phane Guyon
 */
function union_et_intersection_intervalles_de_R()
{
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Utiliser et comprendre les symboles $\\cup $ et $\\cap $ avec les intervalles de $\\mathbb{R}$";
    this.consigne = "RÃ©pondre aux questions suivantes: :"
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,s, e,f,A,B,c1,c2,c3,c4, X1,X2,int,int1,int2, axe, texte, texte_corr, cpt=0; 
        i < this.nb_questions && cpt<50; ) 
        {
            type_de_questions = liste_type_de_questions[i];
        switch (type_de_questions)
            {
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
                case 1 : 
                    a = randint(1,15);
                        e=a+1;
                    b = randint(e,25);
                        e=b+1;
                    c = randint(e,35);
                        e=c+1;
                    d = randint(e,45);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a,'red');
                    B = point(5,0,b);
                    C = point(6,0,c);
                    D = point(9,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',0);
                    int2 = intervalle(C,D,'blue',0);


                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cap [${c};${d}].$`
                      ;
                        
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                    texte_corr += `<br>On cherche les rÃ©els qui sont Ã  la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`
                    texte_corr += `<br>On regarde la partie de l'intervalle qui est coloriÃ©e Ã  la fois en bleu et en rouge :<br>`
                    texte_corr += `<br>Les deux ensembles sont disjoints, ils n'ont aucun Ã©lÃ©ment en commun.<br>
                    $I=\\emptyset$`;                     
                    break ;
                case 2 : 
                    a = randint(1,15);
                        e=a+1;
                    b = randint(e,25);
                        e=b+1;
                    c = randint(e,35);
                        e=c+1;
                    d = randint(e,45);
                      s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(5,0,b);
                    C = point(6,0,c);
                    D = point(9,0,d);
                     c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',0);
                    int2 = intervalle(C,D,'blue',0);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cup [${c};${d}].$`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                    texte_corr += `<br>On cherche les rÃ©els qui sont ou bien dans $[${a};${b}]$, ou bien dans $[${c};${d}]$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e, soit en bleu, soit en rouge, soit en bleu et rouge :<br>`
                    texte_corr += `<br>Les deux ensembles sont disjoints, ils n'ont aucun Ã©lÃ©ment en commun.<br>
                    On ne peut pas simplifier l'Ã©criture de $I$ qui s'Ã©crit donc $I=[${a};${b}] \\cup [${c};${d}].$`;                     
                    break ;
                case 3 : 
                    a = randint(1,15);
                        e=a+4;
                    b = randint(29,45);
                        e=b-1;
                    c = randint(16,e);
                        e=b+1;
                    d = randint(e,65);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    C = point(5,0,c);
                    D = point(9,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cap [${c};${d}].$`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)

                    texte_corr += `<br>On cherche les rÃ©els qui sont Ã  la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`
                    texte_corr += `<br>On regarde la partie de l'intervalle qui est coloriÃ©e Ã  la fois en bleu et en rouge :<br>`
                     texte_corr += `$I=[${c};${b}]$`;                     
                    break ;
                case 4 : 
                   a = randint(1,15);
                        e=a+4;
                    b = randint(29,45);
                        e=b-1;
                    c = randint(16,e);
                        e=b+1;
                    d = randint(e,65);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    C = point(5,0,c);
                    D = point(9,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cup [${c};${d}].$`;
                     texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                     texte_corr += `<br>On cherche les rÃ©els qui sont ou bien dans $[${a};${b}]$, ou bien dans $[${c};${d}]$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e, soit en bleu, soit en rouge, soit en bleu et rouge :<br>`
                    texte_corr += `$I=[${a};${d}]$`;                     
                    break ;
                case 5 : 
                    a = randint(1,15);
                        e=a+15;
                    b = randint(e,35);
                        e=a+1;
                        f=b-10
                    c = randint(e,f);
                        e=c+1;
                    d = randint(e,f);
                     s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(9,0,b);
                    C = point(5,0,c);
                    D = point(7,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cap [${c};${d}].$`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                    texte_corr += `<br>On cherche les rÃ©els qui sont Ã  la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e en bleu et rouge :<br>`
                    texte_corr += `On observe que $[${c};${d}]\\subset [${a};${b}]$ donc $I=[${c};${d}].$`;                     
                    break ;
                 case 6 : 
                    a = randint(1,15);
                        e=a+15;
                    b = randint(e,35);
                        e=a+1;
                        f=b-10
                    c = randint(e,f);
                        e=c+1;
                    d = randint(e,f);
                       s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(9,0,b);
                    C = point(5,0,c);
                    D = point(7,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cup [${c};${d}].$`;
                     texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                     texte_corr += `<br>On cherche les rÃ©els qui sont ou bien dans $[${a};${b}]$, ou bien dans $[${c};${d}]$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e soit en bleu, soit en rouge, soit en bleu et rouge :<br>`
                    texte_corr += `On $[${c};${d}]\\subset [${a};${b}]$ donc $I=[${a};${b}].$`;                     
                    break ;
                case 7 : 
                    a = randint(1,15);
                        e=a+1;
                    b = randint(e,25);
                        e=b+1;
                    c = randint(e,35);
                        e=c+1;
                    d = randint(e,45);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a,'red');
                    B = point(5,0,b);
                    C = point(6,0,c);
                    D = point(9,0,d);
                    c1 = crochetG(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',0);
                    int2 = intervalle(C,D,'blue',0);


                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=]${a};${b}] \\cap [${c};${d}].$`
                      ;
                        
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                    texte_corr += `<br>On cherche les rÃ©els qui sont Ã  la fois dans $]${a};${b}]$ et dans $[${c};${d}]$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e en bleu et rouge :<br>`
                    texte_corr +=`<br>Aucun rÃ©el n'appartient aux deux ensembles.<br>
                    $I=\\emptyset$`;                     
                    break ;
                case 8 : 
                    a = randint(1,15);
                        e=a+1;
                    b = randint(e,25);
                        e=b+1;
                    c = randint(e,35);
                        e=c+1;
                    d = randint(e,45);
                      s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(5,0,b);
                    C = point(6,0,c);
                    D = point(9,0,d);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetD(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',0);
                    int2 = intervalle(C,D,'blue',0);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=[${a};${b}] \\cup [${c};${d}[.$`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                    texte_corr += `<br>On cherche les rÃ©els qui sont ou bien dans $[${a};${b}]$, ou bien dans $[${c};${d}[$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e soit en bleu, soit en rouge, soit en bleu et rouge :`
                    texte_corr += `<br>Les deux ensembles sont disjoints, ils n'ont aucun Ã©lÃ©ment en commun.<br>
                    On ne peut pas simplifier l'Ã©criture de $I$ qui s'Ã©crit donc $I=[${a};${b}] \\cup [${c};${d}[.$`;                     
                    break ;
                case 9 : 
                    a = randint(1,15);
                        e=a+4;
                    b = randint(29,45);
                        e=b-1;
                    c = randint(16,e);
                        e=b+1;
                    d = randint(e,65);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    C = point(5,0,c);
                    D = point(9,0,d);
                    c1 = crochetG(A,'red');
                    c2 = crochetD(B,'red');
                    c3 = crochetD(C,'blue');
                    c4 = crochetG(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=]${a};${b}[ \\cap [${c};${d}].$`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)

                    texte_corr += `<br>On cherche les rÃ©els qui sont Ã  la fois dans $]${a};${b}[$ et dans $[${c};${d}]$.`
                    texte_corr += `<br>On regarde la partie de l'intervalle qui est coloriÃ©e Ã  la fois en bleu et en rouge :<br>`
                     texte_corr += `$I=[${c};${b}[$`;                     
                    break ;
                case 10 : 
                   a = randint(1,15);
                        e=a+4;
                    b = randint(29,45);
                        e=b-1;
                    c = randint(16,e);
                        e=b+1;
                    d = randint(e,65);
                    s = segment(0,0,10,0);
                    s.styleExtremites = '->';
                    X1 = point(0,0);
                    X2 = point(12,0);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    C = point(5,0,c);
                    D = point(9,0,d);
                    c1 = crochetG(A,'red');
                    c2 = crochetD(B,'red');
                    c3 = crochetG(C,'blue');
                    c4 = crochetD(D,'blue');
                    int = intervalle(X1,X2,'black',0);
                    int1 = intervalle(A,B,'red',-0.1);
                    int2 = intervalle(C,D,'blue',0.1);
                    texte = `Donner si possible, une Ã©criture simplifiÃ©e de $I=]${a};${b}[ \\cup ]${c};${d}[.$`;
                     texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },int,int1,int2,A,B,C,D,c1,c2,c3,c4)
                     texte_corr += `<br>On cherche les rÃ©els qui sont ou bien dans $]${a};${b}[$, ou bien dans $]${c};${d}[$.`
                    texte_corr += `<br>On donc regarde la partie de l'intervalle qui est coloriÃ©e, soit en bleu, soit en rouge, soit en bleu et rouge :<br>`
                    texte_corr += `$I=]${a};${d}[$`;                     
                    break ;
            } 
            if (this.liste_questions.indexOf(texte)==-1)
                { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
}   
 
/**
 * 2N24
 * @StÃ©phane Guyon
 */
function intervalles_de_R(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Associer un intervalle de  $\\mathbb{R}$ Ã  une inÃ©quation et son schÃ©ma sur une droite graduÃ©e";
    this.consigne = "RÃ©pondre aux questions suivantes: :"
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e,s,X1,X2,X,A,B,c1,c2,int,int1, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
       
      
        s = segment(0,0,12,0);
        s.styleExtremites = '->';
        X1 = point(0,0);
        X2 = point(12,0);
       
            
        int = intervalle(X1,X2,'black',0);
    
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
                    a = randint(1,15);
                    b = randint(a,25);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    X = point(11.5,0);
                    c1 = crochetG(A,'red');
                    int1 = intervalle(A,X2,'red',-0.1);
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $x>${a}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1)
                    texte_corr += `<br>$I=]${a};+\\infty[$`;                     
                    break ;
                
                case 2 : 
                    a = randint(1,15);
                    b = randint(a,25); 
                    A = point(2,0,a);
                    B = point(6,0,b);
                     X2 = point(12,0);
                    c1 = crochetD(A,'red');
                    int1 = intervalle(A,X2,'red',-0.1);
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $x\\geqslant ${a}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,c1)
                    texte_corr += `$I=[${a};+\\infty[$`;
                    break ;

                case 3 : 
                    a = randint(1,15);
                    b = randint(a,25);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetD(A,'red');
                    int1 = intervalle(X1,A,'red',-0.1);
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $x<${a}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                    texte_corr = mathalea2d(-2,-2,15,2,s,int,int1,A,c1)
                    texte_corr += `$I=]-\\infty;${a}[$`; 
                    break ;
                
                case 4 : 
                    a = randint(1,15);
                    b = randint(a,25);
                     A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetG(A,'red');
                    int1 = intervalle(X1,A,'red',-0.1);
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $x\\leqslant ${a}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,c1)
                    texte_corr += `$I=]-\\infty;${a}]$`;
                    break ;
                
                case 5 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);  
                    A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetG(A,'red');
                    c2 = crochetD(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);                  
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $${a} < x < ${b}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                     texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                     texte_corr += `$I=]${a};${b}[$`;
                    break ;

                case 6 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);    
                     A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetD(A,'red');
                    c2 = crochetD(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);                  
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $${a}\\leqslant x<${b}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                                 texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                                 texte_corr += `$I=[${a};${b}[$`;
                    break ;
                
                case 7 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                       A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);  
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $${a}\\leqslant x\\leqslant ${b}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                      texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                      texte_corr += `$I=[${a};${b}]$`;
                    break ;
                
                case 8 :
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetG(A,'red');
                    c2 = crochetG(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);  
                    texte = `DÃ©terminer l'intervalle $I$ de $\\mathbb{R}$ correspondant Ã  l'inÃ©quation $${a}< x\\leqslant ${b}$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                      texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                      texte_corr += `$I=]${a};${b}]$`;
                    break ;
                
                case 9 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetG(A,'red');
                    c2 = crochetG(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);  
                    texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in ]${a};${b}]$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                    texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                    texte_corr += `$${a}< x\\leqslant ${b}$`;  
                     break ;
                case 10 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                    A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetD(A,'red');
                    c2 = crochetG(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);  
                    texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in [${a};${b}]$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`; 
                     texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)
                     texte_corr += `$${a}\\leqslant x\\leqslant ${b}$`;  
                     break ;
                case 11 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                     A = point(2,0,a);
                    B = point(6,0,b);
                    c1 = crochetD(A,'red');
                    c2 = crochetD(B,'red');
                    int1 = intervalle(A,B,'red',-0.1);  
                    texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in [${a};${b}[$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                       texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1,c2)  
                     texte_corr += `$${a}\\leqslant x< ${b}$`; 
                     break ;
                case 12 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                    A = point(2,0,a);
                    B = point(12,0,b);
                    c1 = crochetG(A,'red');
                    
                    int1 = intervalle(A,B,'red',-0.1);  texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in ]${a};+\\infty[ et reprÃ©senter l'intervalle sur une droite graduÃ©e.$`;
                       texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1)  
                       texte_corr += `$x > ${a}$`;    
                         break ;
                case 13 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                     A = point(7,0,a);
                    B = point(12,0,b);
                    c1 = crochetD(A,'red');
                    
                    int1 = intervalle(X1,A,'red',-0.1);
                    texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in ]-\\infty;${a}[$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                      texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1)  
                      texte_corr += `$x < ${a}$`; 
                         break ;   
                case 14 : 
                    a = randint(1,15);
                    c=a+1;
                    b = randint(c,25);
                       A = point(7,0,a);
                    B = point(12,0,b);
                    c1 = crochetG(A,'red');
                    
                    int1 = intervalle(X1,A,'red',-0.1);
                    texte = `DÃ©terminer l'inÃ©quation correspondant Ã  $x \\in ]-\\infty;${a}]$ et reprÃ©senter l'intervalle sur une droite graduÃ©e.`;
                      texte_corr = mathalea2d({
                      xmin : -2,
                      ymin : -2,
                      xmax : 15,
                      ymax : 2
                    },s,int,int1,A,B,c1)  
                      texte_corr += `$x \\leqslant ${a}$`;   
                         break ;

                
             } 
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    
}
/* auteur StÃ©phane Guyon*/

/**
 * 2N23
 * @Auteur StÃ©phane Guyon
 */
function valeur_absolue_et_equation(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "RÃ©soudre une Ã©quation avec des valeurs absolues";
    this.consigne = "RÃ©soudre dans $\\mathbb{R}$ les Ã©quations suivantes  :"
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 
    this.correction_detaille_disponible = true;
    sortie_html ? this.correction_detaillee = true : this.correction_detaillee = false;

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,2,2,2,2];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                a = randint(1,15)*choice([-1,1]);
                b = randint(1,15)*(-1);
                    
                    texte = `$\\vert x ${ecriture_algebrique(a)}\\vert =${b}$`;
                    {texte_corr = ` ${b} Ã©tant nÃ©gatif, il n'existe pas de solution Ã  cette Ã©quation. $S=\\emptyset$`;}
                   

                        
                    break ;
               case 2 : 
        
                a = randint(1,15)*choice([-1,1]);
                b = randint(1,15);
                c=-a;
                      texte = `$\\vert x ${ecriture_algebrique(a)}\\vert =${b}$`;
                   
                    texte_corr = `RÃ©soudre cette Ã©quation est Ã©quivalent Ã  rÃ©soudre ces deux Ã©quations :<br>
                    $x ${ecriture_algebrique(a)} =${b}$ et    $x ${ecriture_algebrique(a)} =${-b}$<br>
                    Il existe donc deux solutions Ã  cette Ã©quation :<br>
                    $x_1=${c} ${ecriture_algebrique(b)}$ et $x_2=${c} -${ecriture_parenthese_si_negatif(b)}$<br>
                    $S=\\{${c-b};${c+b}\\}$`;
                    if (this.correction_detaillee) {
                        let s = segment(point(0,0),point(12,0));
                        s.styleExtremites='->';
                        let x0 = point(3,0)
                        x0.nom = c-b
                        x0.positionLabel = 'below'
                        let A = point(6,0,c)
                        A.nom = c
                        A.positionLabel = 'below'
                        let x1 = point(9,0,c+b,'below')
                        x1.nom = c+b
                        x1.positionLabel = 'below'
                        let s1 = segmentAvecExtremites(x0,x1)
                        s1.color = 'blue'
                        s1.epaisseur = 2
                        let s2 = segmentAvecExtremites(x0,A)
                        let l = labelPoint(A,x0,x1)
                        let cote = segment(point(3,1),point(5.95,1))
                        cote.styleExtremites = '<->'
                        let texteCote = texteParPosition(b,4.5,1.6)
                        let cote2 = segment(point(6.05,1),point(9,1))
                        cote2.styleExtremites = '<->'
                        let texteCote2 = texteParPosition(b,7.5,1.6)
                        texte_corr += mathalea2d({xmin:-1,xmax:13,ymin:-2,ymax:2.5},
                            s,s1,s2,l,cote,texteCote,cote2,texteCote2)
                    }
                    break ;
        
            }
            

            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    
}

/**
 * 2N22
 * @Auteur StÃ©phane Guyon
 */
function valeur_absolue(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Utiliser la notion de valeur absolue d'une quantitÃ©";
    this.consigne = "DÃ©terminer la valeur du nombre proposÃ© :"
    this.nb_questions = 5;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                a = randint(1,150)*choice([-1,1]);
             
                    
                    texte = `$\\vert ${a}\\vert = \\dots$`;
                    if (a>0) {texte_corr = `$\\vert ${a}\\vert = ${a}$`;}
                    else {texte_corr = `$\\vert ${a}\\vert = ${-a}$`;}


                        
                    break ;
               case 2 : 
        
                a = randint(1,5);
             
                    
                    texte = `$\\vert \\pi - ${a}\\vert = \\dots$`;
                    if (a>3) {texte_corr = `On a : $\\pi - ${a}<0 $ donc $\\vert \\pi - ${a}\\vert = ${ a}-\\pi$`;}
                    else {texte_corr = `On a : $\\pi - ${a}>0 $ donc $\\vert \\pi - ${a}\\vert = \\pi - ${a }$`;}


                        
                    break ;
                 case 3 : 
        
                a = randint(2,5);
                b = randint(2,7,4); 
                c= Math.sqrt(b);

                    texte = `$\\vert \\sqrt{${b}} - ${a}\\vert = \\dots $`;
                  
                    if (c>a) {texte_corr = `On a : $${b} > ${a*a}$ donc $\\sqrt{${b}} > ${a}$ <br>
                        $\\sqrt{${b}}- ${a}$ est donc un nombre positif, il en resulte que  $\\vert \\sqrt{${b}} - ${a}\\vert = \\sqrt{${b}} - ${a}$`;}
                    else {texte_corr = `On a : $${b}< ${a*a}$ donc $\\sqrt{${b}} < ${a}$ <br>
                        $\\sqrt{${b}}- ${a}$ est donc un nombre nÃ©gatif, il en resulte que  $\\vert \\sqrt{${b}} -${a}\\vert = ${a}-\\sqrt{${b}}  $`;}


                        
                    break ;
        
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    
}

/**
 * 2N12-1
 * @Auteur StÃ©phane Guyon
 */
function identites_remarquables_et_racine_carree(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©velopper les identitÃ©s remarquables avec des racines carrÃ©es";
    this.consigne = "Effectuer les calculs suivants :"
    this.nb_questions = 5;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                a = randint(2,6)*choice([-1,1]);
                b= randint(2,11,[4,8,9]);
                c = randint(2,6);
                    
                    texte = `$\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}$`;
                    texte_corr = `$\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}=
                    \\left(${a} \\sqrt{${b}} \\right)^{2}+2\\times ${ecriture_parenthese_si_negatif(a)}\\sqrt{${b}}\\times ${c}+${c}^{2}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${ecriture_parenthese_si_negatif(a)}^{2}\\times ${b} ${ecriture_algebrique(2*a*c)}\\sqrt{${b}}+ ${c*c}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${a*a*b}${ecriture_algebrique(2*a*c)}\\sqrt{${b}}+${c*c}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${a*a*b+c*c}${ecriture_algebrique(2*a*c)}\\sqrt{${b}}$
                    `;


                        
                    break ;
                
            
                    
                case 2 : 

        
                a = randint(2,6)*choice([-1,1]);
                b= randint(2,11,[4,8,9]);
                c = randint(2,6);
                    
                    texte = `$\\left(${a} \\sqrt{${b}} -${c}\\right)^{2}$`;
                    texte_corr = `$\\left(${a} \\sqrt{${b}} -${c}\\right)^{2}=\\left(${a} \\sqrt{${b}} \\right)^{2}-2\\times ${ecriture_parenthese_si_negatif(a)}\\sqrt{${b}}\\times ${c}+${c}^{2}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${ecriture_parenthese_si_negatif(a)}^{2}\\times ${b} ${ecriture_algebrique(-2*a*c)}\\sqrt{${b}}+ ${c*c}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${a*a*b}${ecriture_algebrique(-2*a*c)}\\sqrt{${b}}+${c*c}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)^{2}}=${a*a*b+c*c}${ecriture_algebrique(-2*a*c)}\\sqrt{${b}}$

                    `;
                        break ;
            case 3 : 
                a = randint(2,6)*choice([-1,1]);
                b= randint(2,11,[4,8,9]);
                c = randint(2,6);
                    
                    texte = `$\\left(${a} \\sqrt{${b}} +${c}\\right)\\left(${a} \\sqrt{${b}}-${c}\\right)$`;
                    texte_corr = `$\\left(${a} \\sqrt{${b}} +${c}\\right)\\left(${a} \\sqrt{${b}}-${c}\\right)=\\left(${a} \\sqrt{${b}} \\right)^{2}-${c}^{2}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)\\left(${a} \\sqrt{${b}}-${c}\\right)}=${ecriture_parenthese_si_negatif(a)}^{2}\\times ${b}-${c*c}$<br>
                        $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)\\left(${a} \\sqrt{${b}}-${c}\\right)}=${a*a*b}-${c*c}$<br>
                        $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\right)\\left(${a} \\sqrt{${b}}-${c}\\right)}=${a*a*b-c*c}$
                    `;


                        
                    break ;
                case 4 : 
        
                a = randint(2,5)*choice([-1,1]);
                b= randint(3,11,[4,8,9]);
                c = randint(2,5);
                d= randint(3,11,[4,8,9,b,b*2,b*3,b*5]);
                    
                    texte = `$\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)^{2}$`;
                    texte_corr = `$\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)^{2}=
                    \\left(${a} \\sqrt{${b}} \\right)^{2}+2\\times ${ecriture_parenthese_si_negatif(a)}\\sqrt{${b}}\\times ${c}\\sqrt{${d}}+\\left(${c}\\sqrt{${d}}\\right)^{2}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)^{2}}=${ecriture_parenthese_si_negatif(a)}^{2}\\times ${b} +2\\times ${ecriture_parenthese_si_negatif(a)}
                    \\times \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(c)}    \\times\\sqrt{${d}}+ ${c*c}\\times ${d}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)^{2}}=${a*a*b} ${ecriture_algebrique(2*a*c)}\\sqrt{${b}\\times${d}} ${ecriture_algebrique(c*c*d)}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)^{2}}=${a*a*b+c*c*d}${ecriture_algebrique(2*a*c)}\\sqrt{${b*d}}

                    $`;

                        
                    break ;
            case 5 : 
                a = randint(2,6)*choice([-1,1]);
                b= randint(2,11,[4,8,9]);
                c = randint(2,6);
                d= randint(2,11,[4,8,9]);
                    texte = `$\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)\\left(${a} \\sqrt{${b}}-${c}\\sqrt{${d}}\\right)$`;
                    texte_corr = `$\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)\\left(${a} \\sqrt{${b}}-${c}\\sqrt{${d}}\\right)=
                    \\left(${a} \\sqrt{${b}} \\right)^{2}-\\left(${c}\\sqrt{${d}}\\right)^{2}$<br>
                $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)\\left(${a} \\sqrt{${b}}-${c}\\sqrt{${d}}\\right)}
                    =${ecriture_parenthese_si_negatif(a)}^{2}\\times ${b}-${c}^{2}\\times ${ecriture_parenthese_si_negatif(d)}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)\\left(${a} \\sqrt{${b}}-${c}\\sqrt{${d}}\\right)}
                    =${a*a*b}-${c*c*d}$<br>
                    $\\phantom{\\left(${a} \\sqrt{${b}} +${c}\\sqrt{${d}}\\right)\\left(${a} \\sqrt{${b}}-${c}\\sqrt{${d}}\\right)}
                    =${a*a*b-c*c*d}$
                    `;


                        
                    break ;
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    

}
/**
 * 2N12
 * @Auteur StÃ©phane Guyon
 */
function Double_distributivitÃ©_avec_racine_carree(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Appliquer la double distributivitÃ© avec les racines carrÃ©es";
    this.consigne = " Effectuer les calculs suivants :"
    this.nb_questions = 5;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
                case 1 : 
                    let a1=randint(2,9)*choice([-1,1]);
                    let a=randint(2,11,[4,8,9]);
                    let b1=randint(2,9)*choice([-1,1]);
                    let a2=randint(2,9);
                    let b2=randint(2,9)*choice([-1,1]);
                    let aa1=a1*a2*a;
                    let bb=b1*b2;
                    let aa2=a1*b2+b1*a2;
                    let aaa=aa1+bb
                    if (aa2==0) {
                            b2=-1*b2;
                            aa2=a1*b2+b1*a2;                    
                    }
                    texte = `$\\left(${a1}\\sqrt{${a}}${ecriture_algebrique(b1)}\\right)\\left(${a2}\\sqrt{${a}}${ecriture_algebrique(b2)}\\right)$`;
                    texte_corr = `$\\left(${a1}\\sqrt{${a}}${ecriture_algebrique(b1)}\\right)\\left(${a2}\\sqrt{${a}}${ecriture_algebrique(b2)}\\right)$<br>
                    
                    $=${a1}\\sqrt{${a}}\\times ${a2}\\sqrt{${a}}${ecriture_algebrique(a1)}\\sqrt{${a}} \\times ${ecriture_parenthese_si_negatif(b2)}
                    ${ecriture_algebrique(b1)} \\times ${a2}\\sqrt{${a}}${ecriture_algebrique(b1)} \\times ${ecriture_parenthese_si_negatif(b2)}$<br>
                    $=${a1}\\times ${a}\\times ${a2}+ \\left( ${a1} \\times ${ecriture_parenthese_si_negatif(b2)} 
                    ${ecriture_algebrique(b1)} \\times ${a2}\\right)\\sqrt{${a}} ${ecriture_algebrique(bb)}$<br>
                    $= ${aa1}${ecriture_algebrique(aa2)} \\sqrt{${a}}${ecriture_algebrique(bb)}$<br>
                    $=${aa2} \\sqrt{${a}}${ecriture_algebrique(aaa)}$`;

                        
                    break ;
                case 2 : 
                    let c1=randint(2,9)*choice([-1,1]);
                    let c=randint(2,11,[4,8,9]);
                    let d1=randint(2,9)*choice([-1,1]);
                    let d2=randint(2,9);
                    let c2=randint(2,9);
                    let cc1=c1*d2;
                    let cc2=c1*c2;
                    let dd=d1*d2;
                    let dd1 = d1*c2;
                    let dd2=dd-cc2*c;
                    let dd3=cc1-dd1;
                    texte = `$\\left(${c1}\\sqrt{${c}}${ecriture_algebrique(d1)}\\right)\\left(${d2} ${ecriture_algebrique(c2)}\\sqrt{${c}}\\right)$`;
                    texte_corr = `$\\left(${c1}\\sqrt{${c}}${ecriture_algebrique(d1)}\\right)\\left(${d2}${ecriture_algebrique(c2)}\\sqrt{${c}}\\right)$<br>
                    $=${c1}\\sqrt{${c}}\\times ${d2}${ecriture_algebrique(c1)}\\sqrt{${c}} \\times ${ecriture_parenthese_si_negatif(c2)}\\sqrt{${c}}${ecriture_algebrique(d1)} \\times ${d2}  ${ecriture_algebrique(d1)}  \\times ${c2}\\sqrt{${c}}$<br>
                    $= ${cc1}\\sqrt{${c}} ${ecriture_algebrique(cc2)}\\times ${c} ${ecriture_algebrique(dd)} ${ecriture_algebrique(dd1)} \\sqrt{${c}}   $<br>
                    $=${dd3}\\sqrt{${c}}${ecriture_algebrique(dd2)}$`;
                    break ;

                    
            
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    

}


/**
 * 2N21
 * @Auteur StÃ©phane Guyon
 */
function parite()
{
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©terminer la paritÃ© d'une expression";
    this.consigne = "Soit $n$ un entier naturel."
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice)
    {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) 
        {
            type_de_questions = liste_type_de_questions[i];
        switch (type_de_questions)
            {
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                a = randint(2,6);
                b= randint(2,11,[4,8,9]);
                c = randint(2,6);
                    
                    texte = `Que peut-on dire de la paritÃ© de ${a}$n$ ?`;
                        if (a%2==0 && a!=2) {
                        texte_corr = `${a}$n=2\\times ${tex_nombre(a/2)}n$<br>
                        Comme $${tex_nombre(a/2)}n$ est un entier naturel, ${a}$n$ s'Ã©crit comme le double d'un entier naturel, il est donc pair`;
                        }
                        if (a==2) {
                        texte_corr = `${a}$n=2\\times n$<br>
                        Comme $n$ est un entier naturel, ${a}$n$ s'Ã©crit comme le double d'un entier naturel, il est donc pair`;
                        }
                   
                        if (a==3) {
                        texte_corr = `${a}$n=2n+n$<br>
                            Comme $n$ est un entier naturel, $2 n$ est un nombre pair.<br>
                            Si $n$ est pair, $2n+n$ est la somme de deux nombres pairs, il sera donc pair. <br>
                            Si $n$ est impair, $2n+n$ est la somme d'un nombre pair et d'un impair, il sera donc impair. <br>
                            Au final, ${a}$n$ a donc la mÃªme paritÃ© que $n$.`;
                            }
                        if  (a%2!=0 && a!=3) {
                        texte_corr = `${a}$n=2\\times ${tex_nombre((a-1)/2)}n+n$<br>
                            Comme $${tex_nombre((a-1)/2)}n$ est un entier naturel, $2\\times ${tex_nombre((a-1)/2)}n$ est un nombre pair.<br>
                            Si $n$ est pair, $2\\times${tex_nombre((a-1)/2)}n+n$ est la somme de deux nombres pairs, il sera donc pair. <br>
                            Si $n$ est impair, $2\\times${tex_nombre((a-1)/2)}n+n$ est la somme d'un nombre pair et d'un impair, il sera donc impair. <br>
                            Au final, ${a}$n$ a donc la mÃªme paritÃ© que $n$.`;
                            }
                        
                                        
                    break ;
                case 2 : 
                a = randint(2,6);
                b= randint(2,11);
                c = randint(2,6);
                    
                    texte = `Que peut-on dire de la paritÃ© de $${a}n+${b}$ ?`;
                
                    if (a%2==0 && b%2==0 && a!=2) {
                        texte_corr = `$${a}n+${b}=2\\times ${tex_nombre(a/2)}n+${b}$<br>
                        Comme $${tex_nombre(a/2)}n$ est un entier naturel, $2\\times ${tex_nombre(a/2)}n$ est donc un nombre pair<br>
                        ${b} est aussi un nombre pair.
                        $${a}n+${b}$ est donc la somme de deux nombres pairs, il est donc pair`;}
                    if (a%2==0 && b%2!=0 && a!=2) {
                        texte_corr = `$${a}n+${b}=2\\times ${tex_nombre(a/2)}n+${b}$<br>
                        Comme $${tex_nombre(a/2)}n$ est un entier naturel, $2\\times ${tex_nombre(a/2)}n$ est donc un nombre pair<br>
                        ${b} est un nombre impair.
                        $${a}n+${b}$ est donc la somme d'un nombre pair et d'un nombre impair. Il est donc impair`;}


                    if (a==2 && b%2==0) {
                        texte_corr = `Comme $n$ est un entier naturel, $2n$ est un nombre pair<br>
                        ${b} est aussi un nombre pair.
                        $${a}n+${b}$ est donc la somme de deux nombres pairs, il est donc pair`;}
                    
                    if ( a==2 && b%2!=0) {
                        texte_corr = `
                        Comme $n$ est un entier naturel, $2n$ est un nombre pair<br>
                        ${b} est un nombre impair.<br>
                        $2n+${b}$ est donc la somme d'un nombre pair et d'un nombre impair. Il est donc impair`;
                                }
                    if (a==3 && b%2==0) {                   
                        texte_corr = `$${a}n+${b}=2n+n+${b}$<br>
                        Comme $n$ est un entier naturel, $2n$ est un nombre pair.<br>
                        ${b} est un nombre pair. <br>
                        $2n + ${b}$ est donc un nombre pair. <br>
                        $${a}n+${b}=2n+${b}+n$ est donc la somme d'un nombre pair et de $n$, il a donc la mÃªme paritÃ© que $n$.`;
                            }
                    if (a==3 && b%2!=0) {                   
                        texte_corr = `$${a}n+${b}=2n+n+${b}$<br>
                        Comme $n$ est un entier naturel, $2n$ est un nombre pair.<br>
                        ${b} est un nombre impair. <br>
                        $2n + ${b}$ est donc un nombre impair. <br>
                        $${a}n+${b}=2n+${b}+n$ est donc la somme d'un nombre impair et de $n$, il a donc la paritÃ© contraire de $n$.`;
                            }
                    if (a%2!=0 && b%2==0 && a!=3) {
                        texte_corr = `${a}$n=2\\times ${tex_nombre((a-1)/2)}n+n+${b}$<br>
                        Comme $${tex_nombre((a-1)/2)}n$ est un entier naturel, $2 ${tex_nombre((a-1)/2)}n$ est donc un nombre pair<br>
                        ${b} est aussi un nombre pair.<br>
                        $${tex_nombre((a-1)/2)}n +${b}$ est donc un nombre pair.<br>
                        $${a}n+${b}=2\\times${tex_nombre((a-1)/2)}n+${b}+n$ est donc la somme d'un nombre pair et de $n$, il a donc la mÃªme paritÃ© que $n$.`;
                            }
                    if (a%2!=0 && b%2!=0 && a!=3) {
                        texte_corr = `$${a}n+${b}=2\\times ${tex_nombre((a-1)/2)}n+n+${b}$<br>
                        Comme $${tex_nombre((a-1)/2)}n$ est un entier naturel, $2 \\times ${tex_nombre((a-1)/2)}n$ est donc un nombre pair<br>
                        ${b} est un nombre impair.<br>
                        $2\\times${tex_nombre((a-1)/2)}n +${b}$ est une somme d'un nombre pair et d'un nombre impair, c'est donc un nombre impair.<br>
                        $${a}n+${b}=2\\times${tex_nombre((a-1)/2)}n+${b}+n$ est donc la somme d'un nombre impair et de $n$,  il a donc la paritÃ© contraire de $n$.`;
                            }           
                        
                    break ;
                    
            case 3 : 
                a = randint(2,6);
                b= randint(2,11);
                c = randint(2,6);
                    
                    texte = `Que peut-on dire de la paritÃ© de $${a}n^{2}$ ?`;
                
            
                    if (a==2) {
                        texte_corr = `
                        Comme $n^{2}$ est un entier naturel, $2n^{2}$ est un nombre pair<br>
                        `;} 
                
                    if (a%2==0 && a!=2) {
                        texte_corr = `$${a}n^{2}=2\\times ${tex_nombre(a/2)}n^{2}$<br>
                        Comme $${tex_nombre(a/2)}n^{2}$ est un entier naturel, $2\\times ${tex_nombre(a/2)}n^{2}$ est donc un nombre pair<br>
                        `;}
                    if (a%2==2) {
                        texte_corr = `Comme $n^{2}$ est un entier naturel, $2n^{2}$ est un nombre pair<br>
                        `;}
                    if (a%2!=0 && a!=3) {
                        texte_corr = `$${a}n^{2}=2\\times ${tex_nombre((a-1)/2)}n^{2}+n^{2}$<br>
                        Comme $${tex_nombre((a-1)/2)}n^{2}$ est un entier naturel, $2\\times ${tex_nombre((a-1)/2)}n^{2}$ est donc un nombre pair<br>
                        $${a}n^{2}$ est donc la somme d'un nombre pair et de $n^{2}$. Il a donc la mÃªme paritÃ© que $n^{2}$<br>
                        Or, on sait d'aprÃ¨s le cours (dÃ©monstration fondamentale) que $n^{2}$ et $n$ ont la mÃªme paritÃ©.<br>
                        Donc $${a}n^{2}$ a la mÃªme paritÃ© que $n$`;}
                break ;
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
                }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    
}


/**
 * 2N20
 * @Auteur StÃ©phane Guyon
 */
function ensemble_de_nombres(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©terminer le plus petit ensemble de nombres dans lequel le nombre proposÃ© appartient";
    this.consigne = "DÃ©terminer le plus petit ensemble de nombres dans lequel le nombre proposÃ© appartient. :"
    this.nb_questions = 5;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
            
                case 1 : 
        
                a = randint(0,150);
                
                    
                    texte = `$${a} \\in \\dots$`;
                    texte_corr = `$${a}$ est un entier naturel, on a donc $${a}\\in \\mathbb{N}$
                    `;


                        
                    break ;
                case 2 : 
        
                a = randint(0,150)*(-1);
                
                    
                    texte = `$${a} \\in \\dots$`;
                    texte_corr = `$${a}$ est un entier relatif, on a donc $${a}\\in \\mathbb{Z}$
                    `;


                        
                    break ;
                case 3 : 
        
                d = randint(0,9);
                b = randint(0,9)*choice([-1,1]);
                c = randint(0,9);
                a=b+c/10+d/100;
                a=a*choice([-1,1])
                    
                    texte = `$${tex_nombrec(b+c/10+d/100)}\\in \\dots$`;
                    texte_corr = `$${tex_nombrec(b+c/10+d/100)}$ est un nombre dÃ©cimal, on a donc $${tex_nombrec(b+c/10+d/100)}\\in \\mathbb{D}$
                    `;


                        
                    break ;
                    case 4 : 
        
                a = randint(2,16);
                b = randint(0,9);
                c = randint(0,9);
                
                    
                    texte = `$\\sqrt{${tex_nombrec(a*a)}}\\in \\dots$`;
                    texte_corr = `$\\sqrt{${a*a}}=${a}$  est un entier naturel, on a donc $\\sqrt{${tex_nombrec(a*a)}}\\in \\mathbb{N}$
                    `;


                        
                    break ; 
                    case 5 : 
        
                a = randint(2,16);
                b = randint(2,6);
                c = randint(0,9);
            
                    
                    texte = `$\\dfrac{${tex_nombrec(b*a)}}{${a}}\\in \\dots$`;
                    texte_corr = `$\\dfrac{${tex_nombrec(b*a)}}{${a}}=\\dfrac{${b}\\times ${a}}{${a}}=${b}$  est un entier naturel, on a donc $\\dfrac{${tex_nombrec(b*a)}}{${a}}\\in \\mathbb{N}$
                    `;


                        
                    break ; 
                case 6 : 
        
                a = choice([3,5,7,11,13,17,19,23,29,31,37,39,41,43,47,53,57,61,67,71,73,79,83,87,89]);
                b = choice([3,5,7,11,13,17,19,23,29,31,37,39,41,43,47,53,57,61,67,71,73,79,83,87,89],[a]);
                
            
                    
                    texte = `$\\dfrac{${a}}{${b}}\\in \\dots$`;
                    texte_corr = `$\\dfrac{${a}}{${b}}$ n'est pas un nombre dÃ©cimal. On a donc $\\dfrac{${a}}{${b}}\\in \\mathbb{Q}$
                    `;


                        
                    break ; 
                case 7 : 
        
                
                b = choice([4,5,8,10]);
                a= randint(4,100);
                while (a%b==0)
                    {a=randint(4,100);}
                
                
            
                    
                    texte = `$\\dfrac{${a}}{${b}}\\in \\dots$`;
                    texte_corr = `$\\dfrac{${a}}{${b}}=${tex_nombre(a/b)}$  est un nombre dÃ©cimal. On a donc $\\dfrac{${a}}{${b}}\\in \\mathbb{D}$
                    `;


                        
                    break ; 
            case 8 : 
        
                
                a = randint(2,100,[4,9,16,25,36,49,64,81]);
                texte = `$\\sqrt{${a}} \\in \\dots$`;
                texte_corr = `$\\sqrt{${a}}$  est un nombre irrationnel. On a donc $\\sqrt{${a}}\\in \\mathbb{R}$
                    `;


                        
                    break ; 
            case 9 : 
                a=randint(2,9)
                texte = `$${a}\\pi \\in \\dots$`;
                texte_corr = `$${a}\\pi$   est un nombre irrationnel. On a donc $${a}\\pi \\in \\mathbb{R}$
                    `;


                        
                    break ; 
        
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    
}

/**
 * 2N10-1
 * @Auteur StÃ©phane Guyon
 */
function proprietes_racine_carree(){

    Exercice.call(this); // HÃ©ritage de la classe Exercice()
        this.titre = "ConnaÃ®tre les propriÃ©tÃ©s calculatoires des racines carrÃ©es";
        this.consigne = "Effectuer, si possible, les calculs suivants :"
        this.nb_questions = 5;
        this.nb_cols = 2;
        this.nb_cols_corr = 2;
        this.sup = 1 ; //
        this.nouvelle_version = function(numero_de_l_exercice){
        this.liste_questions = []; // Liste de questions
        this.liste_corrections = []; // Liste de questions corrigÃ©es
        let type_de_questions_disponibles = [1,2,3,4,5,6,7];
        let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
        for (let i = 0, a,b,c,d,e, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
                type_de_questions = liste_type_de_questions[i];
        switch (type_de_questions){
                            // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                            // Combien de chiffres ? Quelles valeurs ?
                
                    case 1 :
            
                    a = randint(2,9)*choice([-1,1]);
                    b= randint(2,11,[4,8,9]);
                    c=a*a*b;
                    d=a*a
                        texte = `$\\left(${a} \\sqrt{${b}}\\right)^{2}$`;
                        texte_corr = `$\\left(${a} \\sqrt{${b}}\\right)^{2}=${a}^{2}\\times \\left(\\sqrt{${b}}\\right)^{2}$
                        $\\phantom{\\left(${a} \\sqrt{${b}}\\right)^{2}}$<br>
                        $\\phantom{\\left(${a} \\sqrt{${b}}\\right)^{2}}=${d}\\times ${b}$<br>
                        $\\phantom{\\left(${a} \\sqrt{${b}}\\right)^{2}}=${c}$`;
                            
                        break ;
                    case 2 :
            
                    a = randint(2,9)*choice([-1,1]);
                    c = randint(2,9)*choice([-1,1]);
                    d = randint(2,9)*choice([-1,1]);
                    b= randint(2,11,[4,8,9]);
                    e=c*d;
                
        
                        texte = `$ ${c} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(d)} \\sqrt{${b}}$`;
                        texte_corr = `$ ${c} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(d)} \\sqrt{${b}}=${c}\\times ${ecriture_parenthese_si_negatif(d)} \\sqrt{${b}} \\times \\sqrt{${b}}$<br>
                        $\\phantom{${c} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(d)} \\sqrt{${b}}}=${e}\\times ${b}$<br>
                        $\\phantom{${c} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(d)} \\sqrt{${b}}}=${e*b}$`;
                            
                        break ;
                    case 3 :
            
                    a = randint(2,9)*choice([-1,1]);
                    c = randint(2,9)*choice([-1,1]);
                    d = randint(2,9)*choice([-1,1]);
                    b= randint(2,11,[4,8,9]);
                    e=c*d;
                
        
                        texte = `$ ${a} \\sqrt{${b}}\\left( ${c}  ${ecriture_algebrique(d)}\\sqrt{${b}}\\right)$`;
                        texte_corr = `$${a} \\sqrt{${b}}\\left( ${c}  ${ecriture_algebrique(d)}\\sqrt{${b}}\\right)=
                        ${a} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(c)}${ecriture_algebrique(a)} \\sqrt{${b}}\\times ${ecriture_parenthese_si_negatif(d)}\\sqrt{${b}}$<br>
                        $\\phantom{${a} \\sqrt{${b}}\\left( ${c}  ${ecriture_algebrique(d)}\\sqrt{${b}}\\right)}=${a*c}\\sqrt{${b}}${ecriture_algebrique(a)}\\times ${ecriture_parenthese_si_negatif(d)}*${b}$<br>
                        $\\phantom{${a} \\sqrt{${b}}\\left( ${c}  ${ecriture_algebrique(d)}\\sqrt{${b}}\\right)}=${a*c}\\sqrt{${b}}${ecriture_algebrique(a*d*b)}$`;
                            
                        break ;
                        case 4 :
            
                    a = randint(2,9)
                
                    d = randint(2,9);
                    b= randint(2,11,[4,8,9]);
                    c = randint(2,19,[4,8,9,12,16,18,b]);
                    e=c*d;
                
        
                        texte = `$  \\sqrt{${b}}+\\sqrt{${c}}$`;
                        texte_corr = `$  \\sqrt{${b}}+\\sqrt{${c}}$ n'est pas simplifiable`;
                            
                        break ;
                case 5 :
            
                
                    b= randint(2,11);
                    c = randint(2,11,[b]);
                    e=c*d;
                
        
                        texte = `$  \\sqrt{${b*b}}+\\sqrt{${c*c}}$`;
                        texte_corr = `$  \\sqrt{${b*b}}+\\sqrt{${c*c}}=${b}+${c}=${b+c}$ `;
                            
                        break ;
                    case 6 :
            
                
                    b= randint(2,11);
                    c = randint(2,7,[b]);
                    d=b*b*c;
                
        
                        texte = `$ \\sqrt{\\dfrac{${d}}{${c}}}$`;
                        texte_corr = `$ \\sqrt{\\dfrac{${d}}{${c}}}= \\sqrt{\\dfrac{${b}^{2}\\times${c}}{${c}}}$<br>
                        $\\phantom{\\sqrt{\\dfrac{${d}}{${c}}}}=\\sqrt{${b}^{2}}$<br>
                        $\\phantom{\\sqrt{\\dfrac{${d}}{${c}}}}=${b}$ `;
                            
                        break ;
                    case 7 :
            
                
                    b= randint(2,11,[4,9]);
                    c = randint(2,7,[b]);
                    d=b*c;
                
        
                        texte = `$ \\sqrt{${d}}\\times \\sqrt{${c}}$`;
                        texte_corr = `$ \\sqrt{${d}}\\times \\sqrt{${c}}=\\sqrt{${d}\\times${c}}$<br>
                        $\\phantom{\\sqrt{${d}}\\times \\sqrt{${c}}}=\\sqrt{${b}\\times${c}\\times${c}}$<br>
                        $\\phantom{\\sqrt{${d}}\\times \\sqrt{${c}}}=${c}\\sqrt{${b}}$ `;
                            
                        break ;
                    
                }		
                if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                    this.liste_questions.push(texte);
                    this.liste_corrections.push(texte_corr);
                    i++;
                }
                cpt++;	
            }
            liste_de_question_to_contenu(this);
        }
        
    }
 
/**
 * 2N11-1
 * @Auteur StÃ©phane Guyon
 */
function Simplifier_une_somme_de_racines_carrees() {
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Simplifier une somme de racines carrÃ©es";
    this.consigne = " Simplifier une somme de racines carrÃ©es"
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1; //
    this.nouvelle_version = function (numero_de_l_exercice) {
        this.liste_questions = []; // Liste de questions
        this.liste_corrections = []; // Liste de questions corrigÃ©es

        for (let i = 0, a1, a2, a3, b1, b2, b3, c, d1, d2, d3, f1, f2, f3, f, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

            let e1 = randint(2, 8) * choice([-1, 1]);
            let e2 = randint(2, 8) * choice([-1, 1]);
            let e3 = randint(2, 8) * choice([-1, 1]);
            let a1 = randint(2, 11)
            let a2 = randint(2, 11, [a1])
            let a3 = randint(2, 11, [a1, a2])
            let b1 = a1 * a1
            let b2 = a2 * a2
            let b3 = a3 * a3
            let c = randint(2, 11, [4, 8, 9])
            let d1 = c * b1
            let d2 = c * b2
            let d3 = c * b3
            let f1 = e1 * a1
            let f2 = e2 * a2
            let f3 = e3 * a3
            let f = f1 + f2 + f3

            texte = `Ãcrire $A=${e1}\\sqrt{${d1}} ${ecriture_algebrique(e2)}\\sqrt{${d2}} ${ecriture_algebrique(e3)}\\sqrt{${d3}}$ sous la forme $a\\sqrt{${c}}$ oÃ¹ $a$ est un entier:`
            texte_corr = `On cherche le plus grand carrÃ© parfait diviseur de ${d1}, ${d2} et ${d3}. <br>
                On trouve $${d1}=${b1} \\times ${c}~~$, $~~${d2}=${b2} \\times ${c}~~$	et $${d3}=${b3} \\times ${c}$<br>
                On a donc  : $\\sqrt{${d1}}=\\sqrt{${a1}^{2} \\times ${c} }=${a1}\\times \\sqrt{${c}}$,
                $~~\\sqrt{${d2}}=\\sqrt{${a2}^{2} \\times ${c} }=${a2}\\times \\sqrt{${c}}~$ et
                $~\\sqrt{${d3}}=\\sqrt{${a3}^{2} \\times ${c} }=${a3}\\times \\sqrt{${c}}$<br>
                On en dÃ©duit que : $A=${e1}\\times${a1}\\times \\sqrt{${c}} ${ecriture_algebrique(e2)}\\times ${a2}\\times \\sqrt{${c}}${ecriture_algebrique(e3)}\\times ${a3}\\times \\sqrt{${c}}$<br>
                $A=${f1}\\times \\sqrt{${c}} ${ecriture_algebrique(f2)}\\times \\sqrt{${c}}${ecriture_algebrique(f3)}\\times \\sqrt{${c}}$		<br>
                $A=	(${f1}${ecriture_algebrique(f2)}${ecriture_algebrique(f3)})\\times \\sqrt{${c}} = ${f}\\sqrt{${c}}$`

            if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;
        }
        liste_de_question_to_contenu(this);
    }
    this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 2, "1 : En donnat la racine carrÃ©e unitÃ©\n2 : Sans indication"];
}
/**
 * 2N10
 * @Auteur StÃ©phane Guyon
 */
function Existence_d_une_racine_carree(){
Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Existence d'une racine carrÃ©e";
    this.consigne = " Dire si le nombre proposÃ© existe ou non, en justifiant."
    this.nb_questions = 5;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 1 ; // 

    this.nouvelle_version = function(numero_de_l_exercice){
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1,2,3,4,5,6,7,8] ;
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) ;
    for (let i = 0, a,b, texte, texte_corr, cpt=0; i < this.nb_questions && cpt<50; ) {
            type_de_questions = liste_type_de_questions[i];
    switch (type_de_questions){
                        // Cas par cas, on dÃ©finit le type de nombres que l'on souhaite
                        // Combien de chiffres ? Quelles valeurs ?
                case 1 : 
                    let a=randint(2,9);
                    texte = `$\\sqrt{\\sqrt{${a}}}$`;
                    texte_corr = `$\\sqrt{${a}}$ existe car ${a} est un nombre positif.<br>
                    $\\sqrt{${a}}$ est un rÃ©el positif donc $\\sqrt{\\sqrt{${a}}}$ existe bien.`;
                    break ;
                case 2 :    
                    let b=randint(2,9)*(-1);
                    texte = `$\\sqrt{${b}}$`;
                    texte_corr =  `$\\sqrt{${b}}$ n'existe pas car $${b}$ est un nombre nÃ©gatif. La racine carrÃ©e n'est dÃ©finie que pour les rÃ©els positifs ou nul. `; 
                    break ;
                case 3 :    
                    let c=randint(2,9)*(-1);
                    let d=c*c;
                    texte = `$\\sqrt{\\left(${c}\\right)^{2}}$`;
                    texte_corr =  `$\\sqrt{\\left(${c}\\right)^{2}}$ existe pas car $\\left(${c}\\right)^{2}=${d}$ est un nombre positif.`; 
                    break ;
                case 4 :    
                    let e=randint(2,9);
                    texte = `$-\\sqrt{${e}}$`;
                    texte_corr =  `$-\\sqrt{${e}}$ existe car ${e} est un nombre positif. Le signe - est placÃ© devant le symbole radical, le nombre $-\\sqrt{${e}}$ est donc nÃ©gatif. `; 
                    break ;
                case 5 :    
                    let f=randint(2,9)*(-1);
                    let g=f*f;
                    texte = `$\\sqrt{-\\left(${f}\\right)^{2}}$`;
                    texte_corr =  `$\\sqrt{-\\left(${f}\\right)^{2}}$ n'existe pas car $-\\left(${f}\\right)^{2}=-${g}$  est un nombre nÃ©gatif. La racine carrÃ©e n'est dÃ©finie que pour les rÃ©els positifs ou nul. . `; 
                    break ;
                case 6 :    
                    let h=randint(2,3);
                    texte = `$\\sqrt{${h}-\\pi}$`;
                    texte_corr =  `$\\sqrt{${h}-\\pi}$ n'existe pas car $\\pi>3$ donc $${h}-\\pi$  est un nombre nÃ©gatif. La racine carrÃ©e n'est dÃ©finie que pour les rÃ©els positifs ou nul. . `; 
                    break ;
                case 7 :    
                    let i=randint(4,5);
                    texte = `$\\sqrt{${i}-\\pi}$`;
                    texte_corr =  `$\\sqrt{${i}-\\pi}$ existe car $\\pi\\approx 3,14$ donc $${i}-\\pi$  est un nombre positif.`; 
                    break ; 
                case 8 :    
                    let j=randint(2,12);
                    texte = `$\\sqrt{-${j}^{2}}$`;
                    texte_corr =  `$-${j}^{2}=-${j*j}$ est un rÃ©el nÃ©gatif donc sa racine carrÃ©e n'est pas dÃ©finie.`; 
                    break ; 
            }       
            if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;  
        }
        liste_de_question_to_contenu(this);
    }
    

}

/**
 * 2N11
 * @Auteur StÃ©phane Guyon
 */
function Extraire_un_carre_parfait_d_une_racine_carree() {
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Ecrire le nombre proposÃ© sous la forme $a\\sqrt{b}$";
    this.consigne = " Ecrire le nombre proposÃ© sous la forme $a\\sqrt{b}$ oÃ¹ $a$ est un entier et $b$ le plus petit entier possible:";
    this.nb_questions = 4;
    this.nb_cols = 2;
    this.nb_cols_corr = 2;
    this.sup = 2; //

    this.nouvelle_version = function (numero_de_l_exercice) {
        this.liste_questions = []; // Liste de questions
        this.liste_corrections = []; // Liste de questions corrigÃ©es

        for (let i = 0, a, b, c, d, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
            a = randint(2, 11)
            b = a * a
            c = randint(2, 7, [4])
            d = c * b
            if (this.sup == 1)
                texte = `Ecrire $\\sqrt{ ${d} } $ sous la forme $a\\sqrt{ ${c} } $ oÃ¹ $a$ est un entier:`
            texte_corr = `On cherche le plus grand carrÃ© parfait diviseur de ${d}, c'est ${b}.
                            On a donc la dÃ©composition : $${d}=${c} \\times ${b}=${c} \\times ${a}^{2}$ qui permet d'Ã©crire que
                            $\\sqrt{${d}}=\\sqrt{${a}^{2} \\times ${c} }=${a}\\times \\sqrt{${c}}$`
            if (this.sup == 2)
                texte = `Ecrire $\\sqrt{ ${d} } $ sous la forme $a\\sqrt{ b } $ oÃ¹ $a$ est un entier et $b$ le plus petit entier possible:`
            texte_corr = `On cherche le plus grand carrÃ© parfait diviseur de ${d}, c'est ${b}.
                            On a donc la dÃ©composition : $${d}=${c} \\times ${b}=${c} \\times ${a}^{2}$ qui permet d'Ã©crire que
                            $\\sqrt{${d}}=\\sqrt{${a}^{2} \\times ${c} }=${a}\\times \\sqrt{${c}}$`
            if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;
        }
        liste_de_question_to_contenu(this);
    }
    this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 2, "1 : En donnat la racine carrÃ©e unitÃ©\n2 : Sans indication"];
}
/**
 * DÃ©velopper avec les 3 identitÃ©s remarquables
* @auteur Jean-Claude Lhote
* 2L10
*/
function Developper_Identites_remarquables2() {
    'use strict';
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "DÃ©velopper avec les identitÃ©s remarquables";
    this.consigne = "DÃ©velopper les expressions suivantes.";
    this.nb_cols = 1;
    this.nb_cols_corr = 1;
    this.spacing = 1;
    this.spacing_corr = 1;
    this.nb_questions = 5;
    this.sup = 1;

    this.nouvelle_version = function (numero_de_l_exercice) {
        this.liste_questions = []; // Liste de questions
        this.liste_corrections = []; // Liste de questions corrigÃ©es
        let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
        [1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
        [1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
        let type_de_questions_disponibles = [];
        if (this.sup == 1) {
            type_de_questions_disponibles = [1, 2, 3] // coef de x = 1
        }
        else if (this.sup == 2) {
            type_de_questions_disponibles = [4, 5, 6]  // coef de x > 1
        }
        else { type_de_questions_disponibles = [7, 8, 9] }  // coef de x relatif

        let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
        for (let i = 0, texte, texte_corr, cpt = 0, a, b, type_de_questions, fraction = [], ds, ns; i < this.nb_questions && cpt < 50;) {
            type_de_questions = liste_type_de_questions[i];
            a = randint(1, 9);
            b = randint(2, 9);
            fraction = choice(liste_fractions);
            ns = fraction[0]
            ds = fraction[1]
            switch (type_de_questions) {
                case 1:
                    texte = `$(x+${a})^2$`; // (x+a)Â²
                    texte_corr = `$(x+${a})^2=x^2+2 \\times ${a} \\times x+${a}^2=x^2+${2 * a}x+${a * a}$`;
                    break;
                case 2:
                    texte = `$(x-${a})^2$`  // (x-a)Â²
                    texte_corr = `$(x-${a})^2=x^2-2 \\times ${a} \\times x+${a}^2=x^2-${2 * a}x+${a * a}$`;
                    break;
                case 3:
                    texte = `$(x-${a})(x+${a})$`    // (x-a)(x+a)
                    texte_corr = `$(x-${a})(x+${a})=x^2-${a}^2=x^2-${a * a}$`;
                    break;
                case 4:
                    texte = `$(${b}x+${a})^2$`; //(bx+a)Â²  b>1
                    texte_corr = `$(${b}x+${a})^2=(${b}x)^2+2 \\times ${b}x \\times ${a} + ${a}^2=${b * b}x^2+${2 * b * a}x+${a * a}$`;
                    break;
                case 5:
                    texte = `$(${b}x-${a})^2$`; //(bx-a)Â² b>1
                    texte_corr = `$(${b}x-${a})^2=(${b}x)^2-2 \\times ${b}x \\times ${a} + ${a}^2=${b * b}x^2-${2 * b * a}x+${a * a}$`;
                    break;
                case 6:
                    texte = `$(${b}x-${a})(${b}x+${a})$`; //(bx-a)(bx+a) b>1
                    texte_corr = `$(${b}x-${a})(${b}x+${a})=(${b}x)^2-${a}^2=${b * b}x^2-${a * a}$`;
                    break;
                case 7:
                    texte = `$\\left(${tex_fraction(ns, ds)}x+${a}\\right)^2$`; // (kx+a)Â² k rationnel 
                    texte_corr = `$\\left(${tex_fraction(ns, ds)}x+${a}\\right)^2=\\left(${tex_fraction(ns, ds)}x\\right)^2+2 \\times ${tex_fraction(ns, ds)}x \\times ${a} + ${a}^2=\\left(${tex_fraction(ns, ds)}x+${a}\\right)^2=${tex_fraction(ns * ns, ds * ds)}x^2+${tex_fraction_reduite(ns * 2 * a, ds)}x+${a * a}$`;
                    break;
                case 8:
                    texte = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)^2$`; // (kx-a)Â² k rationnel 
                    texte_corr = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)^2=\\left(${tex_fraction(ns, ds)}x\\right)^2-2 \\times ${tex_fraction(ns, ds)}x \\times ${a} + ${a}^2=${tex_fraction(ns * ns, ds * ds)}x^2-${tex_fraction_reduite(ns * 2 * a, ds)}x+${a * a}$`;
                    break;
                case 9:
                    //  (bx-a)(bx+a) avec a entier et b rationnel simple
                    texte = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)$`; // b>1
                    texte_corr = `$\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)=\\left(${tex_fraction(ns, ds)}x\\right)^2-${a}^2=${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}$`;
                    break;
            }
            if (this.liste_questions.indexOf(texte) == -1) {
                // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;
        }
        liste_de_question_to_contenu(this);
    }
    this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Coefficient de x Ã©gal Ã  1\n 2 : Coefficient de x supÃ©rieur Ã  1\n 3 : Coefficient de x relatif'];
}
/**
 * Factoriser en utilisant les 3 identitÃ©s remarquables 
* @auteur Jean-Claude Lhote
* 2L11
*/
function Factoriser_Identites_remarquables2() {
    'use strict';
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Factoriser avec les identitÃ©s remarquables";
    this.consigne = "Factoriser les expressions suivantes.";
    this.nb_cols = 1;
    this.nb_cols_corr = 1;
    this.spacing = 1;
    this.spacing_corr = 1;
    this.nb_questions = 5;
    this.sup = 1;

    this.nouvelle_version = function (numero_de_l_exercice) {
        this.liste_questions = []; // Liste de questions
        this.liste_corrections = []; // Liste de questions corrigÃ©es
        let liste_fractions = [[1, 2], [1, 3], [2, 3], [1, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5],
        [1, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [1, 8], [3, 8], [5, 8], [7, 8],
        [1, 9], [2, 9], [4, 9], [5, 9], [7, 9], [8, 9], [1, 10], [3, 10], [7, 10], [9, 10]]
        let type_de_questions_disponibles = [];
        if (this.sup == 1) {
            type_de_questions_disponibles = [1, 2, 3] // coef de x = 1
        }
        else if (this.sup == 2) {
            type_de_questions_disponibles = [4, 5, 6]  // coef de x > 1
        }
        else { type_de_questions_disponibles = [7, 8, 9] }  // coef de x rationnel

        let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
        for (let i = 0, texte, texte_corr, cpt = 0, a, b, fraction = [], ns, ds, type_de_questions; i < this.nb_questions && cpt < 50;) {
            type_de_questions = liste_type_de_questions[i];
            a = randint(1, 9);
            b = randint(2, 9);
            fraction = choice(liste_fractions);
            ns = fraction[0]
            ds = fraction[1]
            switch (type_de_questions) {
                case 1:
                    texte = `$x^2+${2 * a}x+${a * a}$`; // (x+a)Â²
                    texte_corr = `$x^2+${2 * a}x+${a * a}=x^2+2 \\times ${a} \\times x+${a}^2=(x+${a})^2$`;
                    break;
                case 2:
                    texte = `$x^2-${2 * a}x+${a * a}$`  // (x-a)Â²
                    texte_corr = `$x^2-${2 * a}x+${a * a}=(x-${a})^2=x^2-2 \\times ${a} \\times x+${a}^2=(x-${a})^2$`;
                    break;
                case 3:
                    texte = `$x^2-${a * a}$`    // (x-a)(x+a)
                    texte_corr = `$x^2-${a * a}=x^2-${a}^2=(x-${a})(x+${a})$`;
                    break;
                case 4:
                    texte = `$${b * b}x^2+${2 * b * a}x+${a * a}$`; //(bx+a)Â²  b>1
                    texte_corr = `$${b * b}x^2+${2 * b * a}x+${a * a}=(${b}x)^2+2 \\times ${b}x \\times {a} + ${a}^2=(${b}x+${a})^2$`;
                    break;
                case 5:
                    texte = `$${b * b}x^2-${2 * b * a}x+${a * a}$`; //(bx-a)Â² b>1
                    texte_corr = `$${b * b}x^2-${2 * b * a}x+${a * a}=(${b}x)^2-2 \\times ${b}x \\times {a} + ${a}^2=(${b}x-${a})^2$`;
                    break;
                case 6:
                    texte = `$${b * b}x^2-${a * a}$`; //(bx-a)(bx+a) b>1
                    texte_corr = `$${b * b}x^2-${a * a}=(${b}x)^2-${a}^2=(${b}x-${a})(${b}x+${a})$`;
                    break;
                case 7:

                    texte = `$${tex_fraction(ns * ns, ds * ds)}x^2+${tex_fraction(2 * ns * a, ds)}x+${a * a}$`; // (kx+a)Â² k rationnel 
                    texte_corr = `$${tex_fraction(ns * ns, ds * ds)}x^2+${tex_fraction(ns * 2 * a, ds)}x+${a * a}=\\left(${tex_fraction(ns, ds)}x\\right)^2+2 \\times ${tex_fraction(ns, ds)}x \\times ${a} + ${a}^2=\\left(${tex_fraction(ns, ds)}x+${a}\\right)^2$`;
                    break;
                case 8:
                    texte = `$${tex_fraction(ns * ns, ds * ds)}x^2-${tex_fraction(2 * ns * a, ds)}x+${a * a}$`; // (kx-a)Â² k rationnel 
                    texte_corr = `$${tex_fraction(ns * ns, ds * ds)}x^2-${tex_fraction(ns * 2 * a, ds)}x+${a * a}=\\left(${tex_fraction(ns, ds)}x\\right)^2-2 \\times ${tex_fraction(ns, ds)}x \\times ${a} + ${a}^2=\\left(${tex_fraction(ns, ds)}x-${a}\\right)^2$`;
                    break;
                case 9:
                    //  (bx-a)(bx+a) avec a entier et b rationnel simple
                    texte = `$${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}$`; // b>1
                    texte_corr = `$${tex_fraction(ns * ns, ds * ds)}x^2-${a * a}=\\left(${tex_fraction(ns, ds)}x\\right)^2-${a}^2=\\left(${tex_fraction(ns, ds)}x-${a}\\right)\\left(${tex_fraction(ns, ds)}x+${a}\\right)$`;
                    break;
            }
            if (this.liste_questions.indexOf(texte) == -1) {
                // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
                this.liste_questions.push(texte);
                this.liste_corrections.push(texte_corr);
                i++;
            }
            cpt++;
        }
        liste_de_question_to_contenu(this);
    }
    this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Coefficient de x Ã©gal Ã  1\n 2 : Coefficient de x supÃ©rieur Ã  1\n 3 : Coefficient de x rationnel'];
}
/**
 * 1N10
 * @Auteur Gaelle Morvan
 */
function Terme_d_une_suite_definie_explicitement(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©terminer les termes d'une suite dÃ©finie de faÃ§on explicite";
	this.consigne = "Une suite Ã©tant donnÃ©e, calculer le terme demandÃ©.";
	this.nb_questions = 4;

	this.nouvelle_version = function(){
		this.liste_questions = []; // Vide la liste de questions
    this.liste_corrections = []; // Vide la liste de questions corrigÃ©es
    
    let type_de_questions_disponibles = [1, 2, 3];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, k;
      i < this.nb_questions && cpt < 50;

      ) {
      switch (liste_type_de_questions[i]) {
        case 1: //fonction affine
          a = randint(1, 7)*choice([-1,1]);
          b = randint(1, 10)*choice([-1,1]);
          k = randint(0, 20);
			
          texte = `Soit $(u_n)$ une suite dÃ©finie pour tout entier $n\\in\\mathbb{N}$ par $u_n = `;
          if (a == 1) {texte += `n`}
          else 
            if (a == -1) {texte += `-n`}
            else {texte += `${a}n`};

          if (b > 0) {texte += `+${b}$.`} 
          else {texte += `${b}$.`};
          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `Dans l'expression de $u_n$ on remplace $n$ par ${k}, on obtient : $u_{${k}} =`;
          if (a == 1) {
            texte_corr += `${k} ${ecriture_algebrique(b)}`
          } else {
            if (a == -1) {
              texte_corr += `-${k} ${ecriture_algebrique(b)}`
            } else {
              texte_corr += `${a} \\times ${k} ${ecriture_algebrique(b)}`
            }
          }
          texte_corr += `=${a*k+b}$.`;
          break;
        
        case 2: //fonction polynome de degrÃ© 2
          a = randint(1,5)*choice([-1,1]);
          b = randint(0,5)*choice([-1,1]);
          c = randint(0,9)*choice([-1,1]);
          k = randint(0,9);

          texte = `Soit $(u_n)$ une suite dÃ©finie pour tout entier $n\\in\\mathbb{N}$ par $u_n = `;
          if (a == 1) {
            texte += `n^2$`
          } else {
            if (a == -1) {
              texte += `-n^2$`
            } else {
              texte += `${a}n^2$`
            }
          };
          if (b == 1) {texte += `$+n$`};
          if (b > 1) {texte += `$+${b}n$`};
          if (b == -1) {texte += `$-n$`};
          if (b < -1) {texte += `$${b}n$`};
          if (c > 0) {texte += `$+${c}$.`};
          if (c < 0) {texte += `$${c}$.`}
          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = `;
          if (a == 1) {texte_corr += `${k}^2`}
          else {
            if (a == -1) {texte_corr += `-${k}^2`} 
            else {
              texte_corr += `${a}\\times ${k}^2`
            }
          };
          if (b == 1) {
            texte_corr += `+${k}`
          } else {
            if (b == -1) {
              texte_corr += `-${k}`
            } else {
              texte_corr += `${ecriture_algebrique(b)}\\times ${k}`
            }            
          }
          texte_corr += `${ecriture_algebrique(c)}=${a*k*k+b*k+c}$.`;
          break;
        
        case 3: //fonction homographique
          a = randint(1,5)*choice([-1,1]);
          b = randint(1,5)*choice([-1,1]);
          c = randint(2,4);
          d = randint(1,7);
          k = randint(1,9);

          texte = `Soit $(u_n)$ une suite dÃ©finie pour tout entier $n\\in\\mathbb{N}$ par $u_n = \\dfrac{`;
          if (a == 1) {texte += `n`}
          else 
            if (a == -1) {texte += `-n`}
            else {texte += `${a}n`};
          if (b > 0) {texte += `+${b}}{`}
          else {texte += `${b}}{`};
          if (c == 1) {texte += `n`}
          else   
            if (c == -1) {texte += `-n`}
            else {texte += `${c}n`};
          if (d > 0) {texte += `+${d}}$.`}
          else {texte += `${d}}$.`};
          
          texte += `<br>Calculer $u_{${k}}$.`;
          frac=fraction(a*k+b,c*k+d)
          texte_corr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = \\dfrac{${a}\\times ${k} ${ecriture_algebrique(b)}}{${c}\\times ${k}
          ${ecriture_algebrique(d)}} = ` +frac.texFraction()
          if (pgcd(a*k+b,c*k+d)!=1) texte_corr+=`=`+frac.texFractionSimplifiee()
          texte_corr+=`$.`
          break;
      }
      
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte); // Sinon on enregistre la question dans liste_questions
				this.liste_corrections.push(texte_corr); // On fait pareil pour la correction
				i++; // On passe Ã  la question suivante
			}
			cpt++;	// Sinon on incrÃ©mente le compteur d'essai pour avoir une question nouvelle
		}
		liste_de_question_to_contenu(this); // La liste de question et la liste de la correction
		// sont transformÃ©s en chaine de caractÃ¨re (avec une liste HTML ou LaTeX suivant le contexte)
	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
	// On aurait pu ajouter un formulaire pour rÃ©gler le niveau de difficultÃ© Ã  l'aide de l'attribut this.sup
}


/**
 * 1N11
 * @Auteur Gaelle Morvan
 */
function Terme_d_une_suite_definie_par_recurrence(){
	Exercice.call(this); // HÃ©ritage de la classe Exercice()
	this.titre = "DÃ©terminer les termes d'une suite dÃ©finie par rÃ©currence";
	this.consigne = "Une suite Ã©tant donnÃ©e, calculer le terme demandÃ©.";
	this.nb_questions = 4;

	this.nouvelle_version = function(){
		this.liste_questions = []; // Vide la liste de questions
    this.liste_corrections = []; // Vide la liste de questions corrigÃ©es
    
    let type_de_questions_disponibles = [1, 2, 3, 4];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, u, a, b, k;
      i < this.nb_questions && cpt < 50;

      ) {
      switch (liste_type_de_questions[i]) {
        case 1: //suite arithmÃ©tique
          a = randint(1, 10)*choice([-1,1]);
          u = randint(0, 10)*choice([-1,1]);
          k = randint(2, 10);
			
          texte = `Soit $(u_n)$ une suite dÃ©finie par $u_0=${u}$ et pour tout entier $n\\in\\mathbb{N}$ par $u_{n+1} = u_n ${ecriture_algebrique(a)}$.`;

          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `On calcule successivent les termes jusqu'Ã  obtenir $u_{${k}}$ :`;
          for (
            let indice =0; indice < k; indice++ 
          ){
            texte_corr += `<br> $u_{${indice+1}} = ${mise_en_evidence('u_{' + indice + '}', arcenciel(indice,true))} ${ecriture_algebrique(a)} = 
              ${mise_en_evidence(u, arcenciel(indice,true))} + ${a} = ${mise_en_evidence(u + a, arcenciel(indice+1,true))}$`;
            u = u + a;
          }
          break;
        
        case 2: //suite gÃ©omÃ©trique
          a = randint(2,5)*choice([-1,1]);
          u = randint(1,9)*choice([-1,1]);
          k = randint(2,6);

          texte = `Soit $(u_n)$ une suite dÃ©finie par $u_0=${u}$ et pour tout entier $n\\in\\mathbb{N}$ par $u_{n+1} = u_n \\times ${ecriture_parenthese_si_negatif(a)}$.`;

          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `On calcule successivent les termes jusqu'Ã  obtenir $u_${k}$ :`;
          for (
            let indice =0; indice < k; indice++ 
          ){
            texte_corr += `<br> $u_{${indice+1}} = ${mise_en_evidence('u_{' + indice + '}', arcenciel(indice,true))} \\times ${ecriture_parenthese_si_negatif(a)} = 
              ${mise_en_evidence(u, arcenciel(indice,true))} \\times ${ecriture_parenthese_si_negatif(a)} = ${mise_en_evidence(u * a, arcenciel(indice+1,true))}$`;
            u = u * a;
          }
          break;
        
        case 3: //suite arithmÃ©tico-gÃ©omÃ©trique
          a = randint(2,5)*choice([-1,1]);
          b = randint(1,5)*choice([-1,1]);
          u = randint(1,5)*choice([-1,1]);
          k = randint(2,6);

          texte = `Soit $(u_n)$ une suite dÃ©finie par $u_0=${u}$ et pour tout entier $n\\in\\mathbb{N}$ par $u_{n+1} = ${a} u_n ${ecriture_algebrique(b)}$.`;
          
          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `On calcule successivent les termes jusqu'Ã  obtenir $u_${k}$ :`;
          for (
            let indice =0; indice < k; indice++ 
          ){
            texte_corr += `<br> $u_{${indice+1}} = ${a}\\times ${mise_en_evidence('u_{' + indice + '}', arcenciel(indice,true))} ${ecriture_algebrique(b)}=`;
            texte_corr += `${a} \\times ${ecriture_parenthese_si_negatif(mise_en_evidence(u, arcenciel(indice,true)))} ${ecriture_algebrique(b)} = 
            ${mise_en_evidence(a*u+b, arcenciel(indice+1,true))}$`;
            u = u * a + b;
          }
          break;

        case 4: // suite de la forme u(n+1) = a +- u(n)^2
          a = randint(1,5)*choice([-1,1]);
          b = choice([-1,1]);
          u = randint(1,5)*choice([-1,1]);
          k = randint(2,3);

          texte = `Soit $(u_n)$ une suite dÃ©finie par $u_0=${u}$ et pour tout entier $n\\in\\mathbb{N}$ par $u_{n+1} = ${a} ${signe(b)} u_n^2$.`;
                    
          texte += `<br>Calculer $u_{${k}}$.`;
			
          texte_corr = `On calcule successivent les termes jusqu'Ã  obtenir $u_${k}$ :`;
          for (
            let indice =0; indice < k; indice++ 
          ){
            texte_corr += `<br> $u_{${indice+1}} = ${a} ${signe(b)} (${mise_en_evidence('u_{' + indice + '}', arcenciel(indice,true))})^2=`;
            texte_corr += `${a} ${signe(b)} ${ecriture_parenthese_si_negatif(mise_en_evidence(u, arcenciel(indice,true)))}^2 = 
              ${mise_en_evidence(tex_nombre(a+b*u*u), arcenciel(indice+1,true))}$`;
            u = a + b * u * u;
          }
          break;
      }
      
			
			if (this.liste_questions.indexOf(texte)==-1){ // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
				this.liste_questions.push(texte); // Sinon on enregistre la question dans liste_questions
				this.liste_corrections.push(texte_corr); // On fait pareil pour la correction
				i++; // On passe Ã  la question suivante
			}
			cpt++;	// Sinon on incrÃ©mente le compteur d'essai pour avoir une question nouvelle
		}
		liste_de_question_to_contenu(this); // La liste de question et la liste de la correction
		// sont transformÃ©s en chaine de caractÃ¨re (avec une liste HTML ou LaTeX suivant le contexte)
	}
	//this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
	// On aurait pu ajouter un formulaire pour rÃ©gler le niveau de difficultÃ© Ã  l'aide de l'attribut this.sup
}


/**
 * Calcul de discriminant pour identifier la forme graphique associÃ©e (0 solution dans IR, 1 ou 2)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 1E10
*/
function Calcul_discriminant() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calcul du discriminant d'une Ã©quation du second degrÃ©";
  this.consigne = "Pour chaque Ã©quation, calculer le discriminant et dÃ©terminer le nombre de solutions de cette Ã©quation dans $\\mathbb{R}$.";
  this.nb_questions = 6;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  if (sortie_html) {
    this.spacing_corr = 2
  }
  this.correction_detaillee_disponible = true;
  sortie_html ? correction_detaillee = true : correction_detaillee = false ;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_types_equations = combinaison_listes(["0solution","1solution","2solutions"],this.nb_questions)
    for (let i = 0, texte, texte_corr, a, b, c, delta, x1, x2, y1, y2, cpt = 0;i < this.nb_questions && cpt < 50;) {
      switch (liste_types_equations[i]) {
        case "0solution": 
          k = randint(1,5);
          x1 = randint(-3,3,[0]);
          y1 = randint(1,5);
          if (choice(['+','-'])=='+') { // k(x-x1)^2 + y1 avec k>0 et y1>0
            a = k;
            b = -2 * k * x1;
            c = k * x1 * x1 + y1;
          } else { // -k(x-x1)^2 -y1 avec k>0 et y1>0
            a = -k;
            b = 2 * k * x1;
            c = - k * x1 * x1 - y1
          }
          texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
          if (b == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique(c)}=0$`
          }
          texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
          texte_corr += `<br>$\\Delta<0$ donc l'Ã©quation n'admet pas de solution.`
          texte_corr += `<br>$\\mathcal{S}=\\emptyset$`
          break;
        case "1solution": // k(x-x1)^2
          k = randint(-5,5,[0]);
          x1 = randint(-5,5,[0]);
          a = k;
          b = -2 * k * x1;
          c = k * x1 * x1;
          texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
          if (b == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique(c)}=0$`
          }
          if (c == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x=0$`
          }
          texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
          texte_corr += `<br>$\\Delta=0$ donc l'Ã©quation admet une unique solution.`
          //texte_corr += `<br>$\\mathcal{S}={${x1}}$`
          break;
          case "2solutions": // k(x-x1)^2
          k = randint(1,5);
          x1 = randint(-3,3);
          y1 = randint(1,5);
          if (choice(['+','-'])=='+') { // k(x-x1)^2 + y1 avec k>0 et y1<0
            y1 *=-1;
            a = k;
            b = -2 * k * x1;
            c = k * x1 * x1 + y1;
          } else { // -k(x-x1)^2 -y1 avec k>0 et y1>0
            a = -k;
            b = 2 * k * x1;
            c = - k * x1 * x1 + y1
          }
          texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
          if (b == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique(c)}=0$`
          }
          if (c == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x=0$`
          }
          texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
          texte_corr += `<br>$\\Delta>0$ donc l'Ã©quation admet deux solutions.`
          //texte_corr += `<br>$\\mathcal{S}=\\emptyset$`
          break;
        default:
          break;
      }
      if (this.correction_detaillee){
        let f = x => a * x**2 + b * x + c
        let graphique = courbe(f)
        graphique.color = 'blue';
        let s = segment(point(-10,0),point(10,0));
        s.epaisseur = 3;
        s.color = 'red';
        let r = repere({afficheNumeros:false,legendeX : '', legendeY : ''})
        texte_corr += '<br><br>'
        texte_corr += `ReprÃ©sentation graphique de $f : x \\mapsto ${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique_sauf1(c)}$ : `
        texte_corr +='<br><br>'
        texte_corr += mathalea2d({xmin : -10, ymin : -10, xmax : 10, ymax : 10 , pixelsParCm : 15},
          graphique,r,s) 
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}


/**
 * Calcul de discriminant pour identifier la forme graphique associÃ©e (0 solution dans IR, 1 ou 2)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 1E11
*/
function Resoudre_equation_degre_2() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "RÃ©soudre une Ã©quation du second degrÃ©";
  this.consigne = "RÃ©soudre dans $\\mathbb{R}$ les Ã©quations suivantes.";
  this.nb_questions = 6;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing_corr = 3;
  this.sup = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = combinaison_listes(['solutionsEntieres','factorisationParx','pasDeSolution','ax2+c','solutionsReelles','solutionDouble'],this.nb_questions)
    for (let i = 0, texte, texte_corr, a, b, c, delta, x1, x2, y1, y2, k, cpt = 0;i < this.nb_questions && cpt < 50;) {
      if (liste_type_de_questions[i]=="solutionsEntieres"){
        // k(x-x1)(x-x2)
        x1 = randint(-5,2,[0]);
        x2 = randint(x1+1,5,[0,-x1]);
        k = randint(-4,4,[0]);
        a = k;
        b = -k * x1 -k * x2;
        c = k * x1 * x2
        texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
        
        texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
        texte_corr += `<br>$\\Delta>0$ donc l'Ã©quation admet deux solutions : $x_1 = \\dfrac{-b-\\sqrt{\\Delta}}{2a}$ et $x_2 = \\dfrac{-b+\\sqrt{\\Delta}}{2a}$`
        texte_corr += `<br>$x_1 =\\dfrac{${-b}-\\sqrt{${b*b-4*a*c}}}{${2*a}}=${x1}$`
        texte_corr += `<br>$x_2 =\\dfrac{${-b}+\\sqrt{${b*b-4*a*c}}}{${2*a}}=${x2}$`
        texte_corr += `<br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{${x1} ; ${x2}\\right\\}$.`  
      }
      if (liste_type_de_questions[i]=="solutionDouble"){
        // (dx+e)^2=d^2x^2+2dex+e^2
        let d = randint(-11,11,[-1,1,0])
        let e = randint(-11,11,[0,-1,1])
        a = d*d;
        b = 2*d*e;
        c = e*e
        texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
        
        texte_corr = `Il est possible de factoriser le membre de gauche : $(${d}x${ecriture_algebrique(e)})^2=0$. `
        texte_corr += `On a alors une solution double : $${tex_fraction_signe(-e,d)}`
        if (e%d==0){
          texte_corr += `=${-e/d}$.`
        } else {
          texte_corr +='$.'
        }
        texte_corr += `<br> Si on ne voit pas cette factorisation, on peut utiliser le discriminant.`
        texte_corr += `<br>$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
        texte_corr += `<br>$\\Delta=0$ donc l'Ã©quation admet une unique solution : $${tex_fraction('-b','2a')} = ${tex_fraction_reduite(-b,2*a)}$`
        if (b%(2*a)==0){
          texte_corr += `<br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{${-b/(2*a)}\\right\\}$.`  
        } else {
          texte_corr += `<br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{${tex_fraction_reduite(-b,2*a)}\\right\\}$.`  
        }
      }
      if (liste_type_de_questions[i]=="solutionsReelles"){
        // ax^2+bx+c
        a = randint(-11,11,0);
        b = randint(-11,11,0);
        c = randint(-11,11,0);
        while (b**2-4*a*c<0 || [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089].includes(b**2-4*a*c)){
          a = randint(-11,11,0);
          b = randint(-11,11,0);
          c = randint(-11,11,0);
        }
        texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
        
        texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
        texte_corr += `<br>$\\Delta>0$ donc l'Ã©quation admet deux solutions : $x_1 = \\dfrac{-b-\\sqrt{\\Delta}}{2a}$ et $x_2 = \\dfrac{-b+\\sqrt{\\Delta}}{2a}$`
        texte_corr += `<br>$x_1 =\\dfrac{${-b}-\\sqrt{${b*b-4*a*c}}}{${2*a}}\\approx ${arrondi_virgule((-b-Math.sqrt(b**2-4*a*c))/(2*a),2)}$`
        texte_corr += `<br>$x_2 =\\dfrac{${-b}+\\sqrt{${b*b-4*a*c}}}{${2*a}}\\approx ${arrondi_virgule((-b+Math.sqrt(b**2-4*a*c))/(2*a),2)}$`
        texte_corr += `<br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{\\dfrac{${-b}-\\sqrt{${b*b-4*a*c}}}{${2*a}} ; \\dfrac{${-b}+\\sqrt{${b*b-4*a*c}}}{${2*a}}\\right\\}$.`  
      }
      if (liste_type_de_questions[i]=="factorisationParx"){
        // x(ax+b)=ax^2+bx
        a = randint(-11,11,[0,-1,1]);
        b = randint(-11,11,0)
        texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x=0$`
        
        texte_corr = `On peut factoriser le membre de gauche par $x$.`
        texte_corr += `<br>$x(${rien_si_1(a)}x${ecriture_algebrique(b)})=0$`
        texte_corr += `<br>Si un produit est nul alors l'un au moins de ses facteurs est nul.`
        texte_corr += `<br>$x=0\\quad$ ou $\\quad${rien_si_1(a)}x${ecriture_algebrique(b)}=0$`
        texte_corr += `<br>$x=0\\quad$ ou $\\quad x=${tex_fraction_signe(-b,a)}$`
        texte_corr += `<br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{0 ; ${tex_fraction_reduite(-b,a)}\\right\\}$.`  
      }
      if (liste_type_de_questions[i]=="ax2+c"){
        // x(ax+b)=ax^2+bx
        a = randint(-11,11,0);
        c = randint(-11,11,0)
        texte = `$${rien_si_1(a)}x^2${ecriture_algebrique(c)}=0$`
        
        texte_corr = `$x^2=${tex_fraction_signe(-c,a)}$`
        if (-c/a>0){
          texte_corr += `<br>$x=\\sqrt{${tex_fraction_reduite(-c,a)}}\\quad$ ou $\\quad x=-\\sqrt{${tex_fraction_reduite(-c,a)}}$`
          texte_corr += `<br><br>L'ensemble des solutions de cette Ã©quation est : $\\mathcal{S}=\\left\\{\\sqrt{${tex_fraction_reduite(-c,a)}} ; -\\sqrt{${tex_fraction_reduite(-c,a)}}\\right\\}$.`  
        } else {
          texte_corr += `<br>Dans $\\mathbb{R}$, un carrÃ© est toujours positif donc cette Ã©quation n'a pas de solution.`
          texte_corr += `<br>$\\mathcal{S}=\\emptyset$`
        }
      }
      if (liste_type_de_questions[i]=="pasDeSolution") {
          k = randint(1,5);
          x1 = randint(-3,3,[0]);
          y1 = randint(1,5);
          if (choice(['+','-'])=='+') { // k(x-x1)^2 + y1 avec k>0 et y1>0
            a = k;
            b = -2 * k * x1;
            c = k * x1 * x1 + y1;
          } else { // -k(x-x1)^2 -y1 avec k>0 et y1>0
            a = -k;
            b = 2 * k * x1;
            c = - k * x1 * x1 - y1
          }
          texte = `$${rien_si_1(a)}x^2${ecriture_algebrique_sauf1(b)}x${ecriture_algebrique(c)}=0$`
          if (b == 0) {
            texte = `$${rien_si_1(a)}x^2${ecriture_algebrique(c)}=0$`
          }
          texte_corr = `$\\Delta = ${ecriture_parenthese_si_negatif(b)}^2-4\\times${ecriture_parenthese_si_negatif(a)}\\times${ecriture_parenthese_si_negatif(c)}=${b*b-4*a*c}$`
          texte_corr += `<br>$\\Delta<0$ donc l'Ã©quation n'admet pas de solution.`
          texte_corr += `<br>$\\mathcal{S}=\\emptyset$`
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}